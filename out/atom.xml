<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LINQ to Fail</title>
    <subtitle>.net, C#, asp.net, umbraco</subtitle>
    <link href="http://www.aaron-powell.com/atom.xml" rel="self" />
    <link href="http://www.aaron-powell.com" />
    <updated>2013-08-01T23:24:46.185Z</updated>
    <id>http://www.aaron-powell.com</id>
    <author>
        <name>Aaron Powell</name>
        <email>me@aaron-powell.com</email>
    </author>

    
        <entry>
            <title>AJAX without jQuery</title>
            <link href="http://www.aaron-powell.com/posts/2013-08-02-ajax-without-jquery.html"/>
            <updated>2013-08-02T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-08-02-ajax-without-jquery.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m very much of the opinion that the better you know your tools the better you can make intelligent choices about the layers you put over them. One such layer I see constantly used that people tend to use but not really understand is jQuery. Don&amp;#39;t get me wrong I&amp;#39;m not anti-jQuery or anything, but like I said I believe you should understand your tools before you try and abstract them away.&lt;/p&gt;
&lt;p&gt;So today I want to look at a really critical part of jQuery, AJAX.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ve probably written something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;$.ajax({
    &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: 'get',&lt;/span&gt;
    url:&lt;span class=&quot;string&quot;&gt; '/foo'&lt;/span&gt;,
    success: function (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
        //&lt;span class=&quot;title&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what&amp;#39;s that doing under the hood?&lt;/p&gt;
&lt;h1&gt;Hello XMLHttpRequest&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;re doing an AJAX request you&amp;#39;re going to need the &lt;em&gt;X&lt;/em&gt; part of that and that&amp;#39;s handled through the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; object. This object is the descendant of the &lt;code&gt;ActiveX&lt;/code&gt; object which Microsoft added to early Internet Explorer which kick started the AJAX revolution.&lt;/p&gt;
&lt;p&gt;So this is the backbone of doing the request and obviously the backbone of what jQuery does under its API, but how do we use it?&lt;/p&gt;
&lt;h1&gt;Creating a GET with XMLHttpRequest&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s look back to our example above, how does that work? Well first things first we need to create an instance of the &lt;code&gt;XMLHttpRequest&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to open our request telling it what kind method we want to use and where to go:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;'get&lt;/span&gt;', '/foo');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: There&amp;#39;s a few other arguments which we can pass through, whether you want it to be handled as an async request as well as credentials if you&amp;#39;re doing an authenticated request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since we&amp;#39;ve opened our request we&amp;#39;re probably going to want to do something when it completes right? To do that we rely on the DOM event standard, using the &lt;code&gt;addEventListener&lt;/code&gt; method (you can assign event listeners using the &lt;code&gt;on...&lt;/code&gt; style but that&amp;#39;s so IE6). Probably the most important event to be listening for is the &lt;code&gt;load&lt;/code&gt; event, this is the one that is executed when a successful response is completed:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;xhr.addEventListener(&lt;span class=&quot;string&quot;&gt;'load'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//handle success&lt;/span&gt;
}, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other events you can listen for, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;abort&lt;/code&gt; which do pretty much what their names state. The &lt;code&gt;progress&lt;/code&gt; event is really useful if you&amp;#39;re expecting a request to take a long time to complete, say you&amp;#39;re uploading a file, or expecting a large response, you can listen for this and inform the user of the status, you know, awesome progress bar style.&lt;/p&gt;
&lt;p&gt;But we&amp;#39;re not done yet, our request is still in a &lt;em&gt;holding pattern&lt;/em&gt;, the request hasn&amp;#39;t been issued, that doesn&amp;#39;t happen unless we explicitly make it so, we have to explicitly send the request:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;xhr&lt;span class=&quot;preprocessor&quot;&gt;.send&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see it in action &lt;a href=&quot;http://jsbin.com/inikir/1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Handling responses&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;re probably going to want to do something when the response comes in right? And even more logical is to do something with the response data that comes back. Depending what kind of data you&amp;#39;re getting back you have different ways to work with it. Let&amp;#39;s start with the one you&amp;#39;re most like going to want from an AJAX request, JSON.&lt;/p&gt;
&lt;p&gt;Well the XMLHttpRequest doesn&amp;#39;t really have the concept of JSON, as far as it is concerned this is just text, so we get at it from the &lt;code&gt;responseText&lt;/code&gt; property of &lt;em&gt;either&lt;/em&gt; the first argument of the event handler &lt;strong&gt;or&lt;/strong&gt; the &lt;code&gt;xhr&lt;/code&gt; object itself. With this you would then convert it to a JavaScript object using the JSON API:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;xhr.addEventListener(&lt;span class=&quot;string&quot;&gt;'load'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = JSON.parse(xhr.responseText); &lt;span class=&quot;comment&quot;&gt;//or e.responseText&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//work with our object&lt;/span&gt;
}, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you are expecting HTML? Say you&amp;#39;re loading a template or doing another kind of partial page load. For this you&amp;#39;re &lt;em&gt;likely&lt;/em&gt; to want the &lt;code&gt;responseXML&lt;/code&gt; property. Modern browsers support this, which turns your response content into a DOM snippet you can work with. If you&amp;#39;ve got an older browser &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Analyzing_and_manipulating_the_responseXML_property&quot;&gt;there are other options available&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;POST-ing data&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve seen how to &lt;code&gt;GET&lt;/code&gt; data, but what about if we want to &lt;code&gt;POST&lt;/code&gt; data?&lt;/p&gt;
&lt;p&gt;Obviously we&amp;#39;d need to change the &lt;code&gt;open&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;'POST&lt;/span&gt;', '/foo');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we&amp;#39;re probably going to want to submit some data too right? That&amp;#39;s the whole point of a POST isn&amp;#39;t it? Most likely you&amp;#39;re going to be POST-ing data from a form, and to do that you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; API. In this scenario you need to pass the FormData instance through the &lt;code&gt;send&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = new &lt;span class=&quot;type&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.append&lt;span class=&quot;container&quot;&gt;('&lt;span class=&quot;title&quot;&gt;name'&lt;/span&gt;, '&lt;span class=&quot;type&quot;&gt;Aaron&lt;/span&gt;')&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.send(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will send up request body with &lt;code&gt;name=Aaron&lt;/code&gt; in it, where &lt;code&gt;name&lt;/code&gt; is the key of a form value and &lt;code&gt;Aaron&lt;/code&gt; is the value. This can be read out of the middleware of whatever HTTP framework you&amp;#39;re working with. ASP.Net this would be the &lt;code&gt;HttpRequest.Form&lt;/code&gt; object, Express.js it&amp;#39;ll be &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not posting FormData but instead want to POST JSON then you&amp;#39;ll need to do make sure your server knows it&amp;#39;s like that, and doing so means setting the headers appropriately. First off you&amp;#39;ll want to set the &lt;code&gt;Content-Type&lt;/code&gt; header:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.setRequestHeader(&lt;span class=&quot;attribute&quot;&gt;'Content&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;Type&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'application&lt;/span&gt;/json');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is especially important if you&amp;#39;re using ASP.Net MVC as your end point, it will detect the &lt;code&gt;Content-Type&lt;/code&gt; and be able to parse it into your model. Next you&amp;#39;ll want to make sure that you set the &lt;code&gt;Content-Length&lt;/code&gt; so your server knows how much data to expect:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.setRequestHeader('&lt;span class=&quot;type&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;type&quot;&gt;Length'&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;).length);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally when you call &lt;code&gt;send&lt;/code&gt; you&amp;#39;ll need to send up a JSON string, not the object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.send(&lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So there we have it, we&amp;#39;ve seen the building blocks of making an AJAX request, the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object. We&amp;#39;ve seen how to make &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests, pass up data, manipulate headers and get data back in a response.&lt;/p&gt;
&lt;p&gt;From these building blocks you can start understanding what is actually happening in your libraries and even avoid them if you don&amp;#39;t want the overhead (say a mobile app).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
            <category>ajax</category>
            
            <category>jquery</category>
            
        </entry>
    
        <entry>
            <title>Array-like objects</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-22-array-like-objects.html"/>
            <updated>2013-07-22T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-22-array-like-objects.html</id>
            <content type="html">&lt;p&gt;You&amp;#39;ve possibly head the saying&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. - &lt;a href=&quot;http://books.google.com/books?id=j7zds6xx7S0C&amp;amp;pg=PA68&amp;amp;dq=%22james+Riley%22+OR+%22James+Whitcomb+Riley%22+bird++duck&amp;amp;num=100&quot;&gt;credit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a common adage when talking about &lt;a href=&quot;http://en.wikipedia.org/wiki/Duck_typing&quot;&gt;Duck Typing&lt;/a&gt; in programming, especially when it comes to working with dynamic languages like JavaScript, based on assumptions made about an object you can attempt to infer other details. Statically typed languages on the other hand make it a bit harder to do Duck Typing, &lt;a href=&quot;http://blogs.bartdesmet.net/blogs/bart/archive/2008/11/10/introducing-the-c-ducktaper-bridging-the-dynamic-world-with-the-static-world.aspx&quot;&gt;that&amp;#39;s not to say it&amp;#39;s impossible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Due to the dynamic nature of JavaScript we actually come across this quite often with arrays in JavaScript. So what makes an object an array? Well there&amp;#39;s two basic building blocks of an array:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numerical identifiers&lt;/li&gt;
&lt;li&gt;A length property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So take this code snippet:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var foo = ??;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;transposed_variable&quot;&gt;foo.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
    console.log(foo[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this we can infer that &lt;code&gt;foo&lt;/code&gt; is quite possibly an array, it meets our basic requirements to be an array, but like the dangers of duck typing this doesn&amp;#39;t mean that it&amp;#39;s actually an array does it?&lt;/p&gt;
&lt;h1&gt;Array-like objects&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s quite common in JavaScript to come across array-like objects, objects that on the surface look like arrays but as soon as you look beneath the surface it&amp;#39;ll become apparent that they aren&amp;#39;t actually arrays. You&amp;#39;ve probably come across these objects in the past and not really given it a second thought, two really common objects are the &lt;code&gt;arguments&lt;/code&gt; object and a &lt;code&gt;NodeList&lt;/code&gt; (you know, from &lt;code&gt;querySelectorAll&lt;/code&gt;). Both of these objects have numerical indexers, length, but no &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt; and so on, basically they don&amp;#39;t inherit &lt;code&gt;Array.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With both of these objects the fact that they don&amp;#39;t inherit from &lt;code&gt;Array.prototype&lt;/code&gt; is a bit of a pain, it means you couldn&amp;#39;t do something like this for example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var inputs = &lt;span class=&quot;transposed_variable&quot;&gt;form.&lt;/span&gt;querySelectorAll(&lt;span class=&quot;string&quot;&gt;'input'&lt;/span&gt;);
var values = &lt;span class=&quot;transposed_variable&quot;&gt;inputs.&lt;/span&gt;map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(input)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cell&quot;&gt;{
            value: input.value,
            name: input.getAttribute(&lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;)
        }&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is a pretty simple bit of code, you want to get all the input name/value pairs, maybe to submit them via AJAX but that&amp;#39;s not important, what&amp;#39;s important is we&amp;#39;re using the &lt;code&gt;Array.map&lt;/code&gt; method, something very common if you&amp;#39;re doing anything in a modern JavaScript engine (modern being &amp;gt;= IE9).&lt;/p&gt;
&lt;h1&gt;Making arrays of array-like objects&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve found yourself an array-like object chances are you want to use it like an array, that begs the obvious question, how do we make it an array?&lt;/p&gt;
&lt;p&gt;Well there&amp;#39;s a pretty easy solution to this, we have numerical indexes and a length property, so what about a &lt;code&gt;for loop&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var items = &lt;span class=&quot;matrix&quot;&gt;[]&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = &lt;span class=&quot;transposed_variable&quot;&gt;inputs.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; il; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
    items.push(inputs[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But... &lt;code&gt;for loop&lt;/code&gt;&amp;#39;s are so old school there&amp;#39;s got to be a better way. Well there is and here we can look at exploiting JavaScript&amp;#39;s functions. We&amp;#39;ve seen that you can use &lt;a href=&quot;/posts/2013-07-04-javascript-call-and-apply.html&quot;&gt;&lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; to futz with function scope and this we can do to improve our array-like object manipulation.&lt;/p&gt;
&lt;h1&gt;Futzing slice&lt;/h1&gt;
&lt;p&gt;When you&amp;#39;re wanting to create new arrays from existing ones the easiest way is using the &lt;code&gt;slice&lt;/code&gt; method. The &lt;code&gt;slice&lt;/code&gt; method can be neat if you want to take parts of an array between two indexes, but it can also be used if you want to create a whole clone of the array, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var array1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
var array2 = array1&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(array1 !== array2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By passing &lt;code&gt;0&lt;/code&gt; we take a slice starting at index 0 and since we provided no end point it&amp;#39;ll go to the length of the array.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;slice&lt;/code&gt; is a function just like everything else, you can use &lt;code&gt;call&lt;/code&gt; against it.&lt;/p&gt;
&lt;p&gt;And where it gets really interesting is when we play with our array-like objects, we can pass &lt;em&gt;that&lt;/em&gt; as our context to our &lt;code&gt;slice&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items = Array&lt;span class=&quot;preprocessor&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(inputs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep that&amp;#39;s right, &lt;code&gt;slice&lt;/code&gt; doesn&amp;#39;t require an array, just something that &lt;em&gt;looks&lt;/em&gt; like an array, as far as &lt;code&gt;slice&lt;/code&gt; is concerned it looks like a duck, it quacked, so hey, we&amp;#39;ll treat it like a duck, check out &lt;a href=&quot;http://hg.mozilla.org/mozilla-central/file/2268ff80683a/js/src/jsarray.cpp#l2536&quot;&gt;the SpiderMonkey source&lt;/a&gt;, it really only cares if there&amp;#39;s a &lt;code&gt;length&lt;/code&gt; property, pretty neat!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve seen some building blocks over the last few weeks, things we can use to manipulate functions and objects in the interesting ways and this is just another common usage of the patterns.&lt;/p&gt;
&lt;p&gt;A small piece of advice, if you&amp;#39;re doing a lot of these calls you can assign &lt;code&gt;slice&lt;/code&gt; into a variable which you can use, which will make the minification work a whole lot better:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var slice = Array&lt;span class=&quot;preprocessor&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
var items = slice&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(inputs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>The JavaScript new operator</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-14-javascript-new-operator.html"/>
            <updated>2013-07-14T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-14-javascript-new-operator.html</id>
            <content type="html">&lt;p&gt;In the &lt;a href=&quot;/posts/2013-07-10-implementing-indexers-in-javascript.html&quot;&gt;last post&lt;/a&gt; I was changing some C# code to JavaScript but there was one part that I just &lt;em&gt;dropped&lt;/em&gt; and didn&amp;#39;t explain why, and that was the use of the new operator.&lt;/p&gt;
&lt;p&gt;While JavaScript isn&amp;#39;t a classical language, it&amp;#39;s prototypal, and doesn&amp;#39;t have a notion of classes (&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes&quot;&gt;yet&lt;/a&gt;), but it does have a new operator. What&amp;#39;s interesting is &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.2&quot;&gt;it&amp;#39;s an operator&lt;/a&gt; like C# (see 14.5.10 of the spec, yep I looked it up :P), and operators tend to do something unique which is also the case with JavaScript new. If you&amp;#39;re a spec-nut you can read what happens in the link above (and also the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2&quot;&gt;[[Construct]]&lt;/a&gt; method which is important), but if you&amp;#39;re not it does a few things that are of note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It expects a function as the &lt;em&gt;thing&lt;/em&gt; being new&amp;#39;ed up&lt;/li&gt;
&lt;li&gt;The result is a new object that has the prototype of the function that was new&amp;#39;ed, but also potentially their own values (such as values provided as the arguments)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let&amp;#39;s make a simple &amp;quot;class&amp;quot; which consists of a constructor function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
}; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then add members to all instances by modifying the prototype:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;Person&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.fullName&lt;/span&gt; = function () {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.firstName&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.lastName&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we run the following we&amp;#39;ll get two different people:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;var aaron = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;attribute&quot;&gt;'Aaron&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'Powell&lt;/span&gt;');
var john = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;attribute&quot;&gt;'John&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'Smith&lt;/span&gt;');

console.&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt;(aaron == john); //fails&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two people we&amp;#39;ve created are different objects, which is exactly what we expect, but if we did:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.assert&lt;/span&gt;(aaron&lt;span class=&quot;preprocessor&quot;&gt;.fullName&lt;/span&gt; == john&lt;span class=&quot;preprocessor&quot;&gt;.fullName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The assert won&amp;#39;t fail since they are the same method &lt;em&gt;reference&lt;/em&gt;, but on two different objects.&lt;/p&gt;
&lt;p&gt;Another important part of the Person constructor has a this scope (which we&amp;#39;ve learnt to manipulate in the past) and what would we expect it to be? Well functions inherit the scope of their parent (unless you modify it) which means that our parent scope of Person will be the global object (window in the browser) or null in ES5 Strict Mode.&lt;/p&gt;
&lt;p&gt;But that&amp;#39;s not the case when you use the new operator, the new operator is yet another way we can modify this, under this scenario it becomes a completely new object literal, it&amp;#39;s similar to doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = {};
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
    };
    Person.apply(obj, arguments);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s close, it doesn&amp;#39;t maintain the prototype chain or setup the constructor properly, what it does do is create a new object that is then returned, meaning each invocation of Person will result in a different object, much like the new operator.&lt;/p&gt;
&lt;h2&gt;Is it new or not?&lt;/h2&gt;
&lt;p&gt;The problem with the new operator is that it&amp;#39;s applied to a function, it can be applied to &lt;em&gt;any&lt;/em&gt; function, but it can also be omitted. This means you can create yourself a function that&amp;#39;s intended to be a constructor but not used with a new operator, and doing this would mean that you&amp;#39;re augmenting a this scope you probably shouldn&amp;#39;t be, such as the global object.&lt;/p&gt;
&lt;p&gt;So how do we know if someone used the new operator? You&amp;#39;re probably not writing your own pre-parser to check the code before it&amp;#39;s executed so it&amp;#39;s not like you know the omitted it at a code level. Well there&amp;#39;s an alternative &lt;em&gt;check the constructor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One thing I omitted from the above pseudo-new implementation is setting up the obj.constructor property, this is something that the new operator does, and it&amp;#39;s the easiest way to check if a function was invoked with a new operator:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor !== Person) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(firstName, lastName);
    }
    &lt;span class=&quot;comment&quot;&gt;//setup properties&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re checking the constructor against the type we expect the constructor to be. If the function wasn&amp;#39;t invoked with the new operator it won&amp;#39;t receive the right constructor type which means we can assume that function was invoked normally and expects a return, a return which can then be a new instance.&lt;/p&gt;
&lt;p&gt;This can be a very useful trick if you&amp;#39;re exposing something that&amp;#39;s to be constructible but you don&amp;#39;t trust your consumers to do the right thing.&lt;/p&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;The new operator is an interesting one, it&amp;#39;s a great way to create objects that have unique instances but still share a common root (being the prototype). There&amp;#39;s arguments all over the internet about whether you should use the new operator or not, whether your API should not require the new operator, whether not using new means a violation of the API or whether your API should just be smart enough to deal with both usages.&lt;/p&gt;
&lt;p&gt;But why would you use it? Well that&amp;#39;s a story for another day ;).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>Implementing &quot;indexers&quot; in JavaScript</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-10-implementing-indexers-in-javascript.html"/>
            <updated>2013-07-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-10-implementing-indexers-in-javascript.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/lzcd&quot;&gt;Luke&lt;/a&gt; was wanting to know how to implement this C# code as JavaScript:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Stuff { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo() {

    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; stuff) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Stuff = stuff;
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; stuff] {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(stuff);
        }
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo Bar() {
        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Darn tootin'&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class-implementation aside the interesting part that he was having trouble with was the indexer, basically being able to write this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;Console.&lt;/span&gt;WriteLine(new Foo()&lt;span class=&quot;matrix&quot;&gt;[&quot;one&quot;]&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[&quot;two&quot;]&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[&quot;three&quot;].&lt;/span&gt;Bar());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what exactly Luke is trying to do I don&amp;#39;t know (and my life is probably safer not knowing) but there&amp;#39;s no point shying away from a problem. &lt;/p&gt;
&lt;p&gt;So the syntax above is supported by JavaScript, you can use &lt;code&gt;[]&lt;/code&gt; notation on an object but it&amp;#39;s different to C#&amp;#39;s implementation. Since JavaScript objects are really glorified hash bags when you use [&amp;quot;one&amp;quot;] it&amp;#39;s saying you want the property one of the object, like when you do it on a C# dictionary type, and this will be fine assuming you have a one property. The problem here is that we don&amp;#39;t have said property, we&amp;#39;re wanting to intercept them and create them on the fly.&lt;/p&gt;
&lt;h2&gt;Simulating indexers with functions&lt;/h2&gt;
&lt;p&gt;Some languages support this concept of &amp;#39;method missing&amp;#39; but not JavaScript (&lt;a href=&quot;http://soft.vub.ac.be/~tvcutsem/invokedynamic/proxies_tutorial&quot;&gt;well not until we get ES6 proxies&lt;/a&gt;) so we need to look at another idea… functions. So we could design something that allows us to write this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;new Foo()&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that&amp;#39;s kind of verbose isn&amp;#39;t it? We&amp;#39;ve got this extra make method that we have to call, we&amp;#39;re still using a new operator, really there&amp;#39;s got to be some nicer way which we could do this… right?&lt;/p&gt;
&lt;h2&gt;Functions that return functions containing functions&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s make it so we can drop the make part of the above API, so we are now doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;new Foo()(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks somewhat better doesn&amp;#39;t it? Sure we&amp;#39;re using &lt;code&gt;()&lt;/code&gt; not &lt;code&gt;[]&lt;/code&gt;, but that&amp;#39;s minor semantics really, the question is can we actually make that our API? Of course we can, and we&amp;#39;ll have a look at how (if you guessed that you couldn&amp;#39;t where did you think this post would go :P).&lt;/p&gt;
&lt;p&gt;So you know that JavaScript functions are just objects right? Well they are and what&amp;#39;s cool is that since they are just objects we can manipulate them as such. Let&amp;#39;s start with foo, really foo is just a function (since we don&amp;#39;t have classes in JavaScript):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I&amp;#39;m going to want something returned from foo that can be invoked like a function, so maybe I could just return a function...&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok that&amp;#39;s a good start, I can do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next it&amp;#39;s time to make innerFoo do something, basically what innerFoo should do setup the next level down our chain. To keep the function more readable I&amp;#39;m going to push the logic out into a new function, we&amp;#39;ll call it next:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
    };

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(stuff)&lt;/span&gt; {&lt;/span&gt;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you see where we&amp;#39;re going here? The next method is ultimately going to be smart, setting up the next level down our object, whereas the innerFoo is really just a pass-through to that (it&amp;#39;ll be clearer as we implement our next method):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
    };

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(stuff)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = foo();
        child.stuff = stuff;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; child;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So our next method will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new foo function (well, a new innerFoo)&lt;/li&gt;
&lt;li&gt;Create a property on the function object called stuff&lt;/li&gt;
&lt;li&gt;Return the newly created object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(foo()(&lt;span class=&quot;string&quot;&gt;'one'&lt;/span&gt;).stuff); &lt;span class=&quot;comment&quot;&gt;// one&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or go further:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(foo()(&lt;span class=&quot;string&quot;&gt;'one'&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;'two'&lt;/span&gt;).stuff); &lt;span class=&quot;comment&quot;&gt;// two&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome, we&amp;#39;ve pretty much got indexers going, now let&amp;#39;s add the bar method from our original API.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;delphi&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{
    console.log('Darn tootin\'');
    return this;
}&lt;/span&gt;

&lt;span class=&quot;title&quot;&gt;innerFoo&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember how I mentioned that functions as objects? Well this is where it can be really useful, since it&amp;#39;s an object we can modify it like any JavaScript object and just add methods and properties like we&amp;#39;ve done, and awesomely since we&amp;#39;re going back through our original foo method it&amp;#39;ll work with all the children we get.&lt;/p&gt;
&lt;h2&gt;Parent access&lt;/h2&gt;
&lt;p&gt;Once I did the initial revision for Luke he wasn&amp;#39;t satisfied, next up he wanted to know how to access the parent of each instance created. Well that&amp;#39;s actually pretty easy, just a small modification to our innerFoo function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(innerFoo, arguments);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this time when it invokes the next level down will have a this context which is the parent object, then you can decide how to expose that as you step down.&lt;/p&gt;
&lt;h2&gt;Bonus round – displaying the object&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve run the code and tried to do a &lt;code&gt;console.log/console.dir&lt;/code&gt; of the foo instances returned you&amp;#39;ll see they are well... crappy:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(inner&lt;span class=&quot;variable&quot;&gt;Foo&lt;/span&gt;, arguments)&lt;/span&gt;;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s kinda crappy, can&amp;#39;t exactly see what the value of stuff is, or what an object&amp;#39;s parent is now can we? Guess we better fix that!&lt;/p&gt;
&lt;p&gt;Did you know that Object has a toString method on it? This method is generally overlooked, if you&amp;#39;re working with an object you&amp;#39;ll likely get [object Object] when you invoke it from your object, functions will return the text content of the function (which can be useful if you want to modify functions on the fly, but that&amp;#39;s a subject for another day :P), and this is why we get the above output from foo, foo is a function after all.&lt;/p&gt;
&lt;p&gt;Well we can write our own toString method if we want, we just put it on our object and it&amp;#39;ll be used rather than the one inherited from the prototype chain. So let&amp;#39;s do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;
};
innerFoo.toString = toString;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome, done! One thing to keep in mind is that &lt;code&gt;toString&lt;/code&gt; must return a string value, it can do whatever you want to get there, just return a string ;).&lt;/p&gt;
&lt;p&gt;But let&amp;#39;s go one step further and exploit this, let&amp;#39;s get it to output the whole parent graph, I&amp;#39;m going to do this by using bind, like we saw in &lt;a href=&quot;/posts/2013-07-05-javascript-binding-currying-and-arrows.html&quot;&gt;my last post&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var next = function (stuff) {
    var child = foo()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    child&lt;span class=&quot;preprocessor&quot;&gt;.stuff&lt;/span&gt; = stuff&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    child&lt;span class=&quot;preprocessor&quot;&gt;.toString&lt;/span&gt; = toString&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(child, this)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    return child&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

o&lt;span class=&quot;preprocessor&quot;&gt;.toString&lt;/span&gt; = toString&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(o, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll also see that I&amp;#39;ve bound the parent as the first argument of &lt;code&gt;toString&lt;/code&gt;. &lt;code&gt;toString&lt;/code&gt; doesn&amp;#39;t take arguments but by using bind we can do that, now let&amp;#39;s update our toString method to handle it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(parent)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;', '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nifty huh? We&amp;#39;re exploiting the type coercion in JavaScript, because parent isn&amp;#39;t a string, it&amp;#39;s an object, but we&amp;#39;re using the + operator against another string JavaScript will coerce the object to a string, using its toString method, which in turn invokes the function we wrote, which in turn does coercion and so on!&lt;/p&gt;
&lt;h2&gt;Done!&lt;/h2&gt;
&lt;p&gt;And with that we wrap up this week&amp;#39;s adventure, if you&amp;#39;ve made it this far well done it was a long one but damn it was fun!&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>JavaScript bind, currying and arrow functions</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-05-javascript-binding-currying-and-arrows.html"/>
            <updated>2013-07-05T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-05-javascript-binding-currying-and-arrows.html</id>
            <content type="html">&lt;p&gt;How many times have you written code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = {
    makeRequest: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.update(result);
            });
        );
    },
    update: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; }
};
&lt;span class=&quot;comment&quot;&gt;//somewhere later in the code&lt;/span&gt;
foo.makeRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only to have it poo itself saying that &lt;code&gt;this.update&lt;/code&gt; is not a function? Maybe it was with an event handler not an AJAX request, all in all it&amp;#39;s the same problem, you tried to use something and JavaScript changed the value of this on you.&lt;/p&gt;
&lt;p&gt;Welcome to the wonderful world of JavaScript scoping.&lt;/p&gt;
&lt;p&gt;So there&amp;#39;s a bunch of ways which you can solve this, you can write the &lt;code&gt;var that = this;&lt;/code&gt; style code being a very popular one, basically leveraging closure scopes to keep an instance of the type in memory until the function itself is GC&amp;#39;ed.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s another approach, &lt;code&gt;Function.bind&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll start with our simple demo:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; {&lt;/span&gt;
      console.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, x, arguments);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we remember from last time we can get this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;foo(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//console.log(window, 42, [42]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now saw we can the foo function to have a known value of what this is when it&amp;#39;s called, no matter how it&amp;#39;s invoked, even if someone was to sneaky and use call or apply? Well that&amp;#39;s what we can use the bind method for:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; bar = foo.bind({ a:&lt;span class=&quot;string&quot;&gt; 'b'&lt;/span&gt; });
&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;); //console.log({ a:&lt;span class=&quot;string&quot;&gt; 'b'&lt;/span&gt; }, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;]);
&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;.call('abc', &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So both times we call the bar function we have the same result, even though we&amp;#39;re trying to specify a this context using the call method.&lt;/p&gt;
&lt;h2&gt;Other uses for bind&lt;/h2&gt;
&lt;p&gt;While bind is most commonly used to force a function to always have a specific value for the this object it can also be used for another purpose, to bind specific arguments. If we revisit our foo method we could do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var baz = foo&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
baz()&lt;span class=&quot;comment&quot;&gt;; //console.log('a', 'b', ['b']);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Practical application of argument binding&lt;/h2&gt;
&lt;p&gt;When you&amp;#39;re looking for a practical application for argument binding an idea that comes to mind is &lt;a href=&quot;http://en.wikipedia.org/wiki/Currying&quot;&gt;Currying&lt;/a&gt;. I&amp;#39;m not going to dive too deeply into what currying is, if you&amp;#39;re not familiar with the concept start with the Wikipedia link and expand from there (also functional programming isn&amp;#39;t my area of expertise, I just understand some of the basics and may be missing the point from here on out, if so Twitter is --&amp;gt; for you to rant on).&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s create a new function to add two numbers:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally we want to be able to do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add2 = curry(sum, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
add2(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll create a curry function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var curry = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; {&lt;/span&gt;
      var args = &lt;span class=&quot;transposed_variable&quot;&gt;Array.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;prototype.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slice.&lt;/span&gt;call(arguments, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;transposed_variable&quot;&gt;fn.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;bind.&lt;/span&gt;apply(fn, &lt;span class=&quot;matrix&quot;&gt;[this].&lt;/span&gt;concat(args);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this function is kind of trippy looking it&amp;#39;s more because it&amp;#39;s a very generic method, it&amp;#39;s allowing us to curry a function and bind any number of arguments in place (which is why we&amp;#39;re using the apply method of bind to provide an array of arguments) and the arguments we provide when calling the bound function will be appended on to the ones which we pre-bound.&lt;/p&gt;
&lt;p&gt;But from this we end up with a new function that we can call as above.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus: My colleague &lt;a href=&quot;https://twitter.com/liammclennan&quot;&gt;Liam Mclennan&lt;/a&gt; flicked me &lt;a href=&quot;https://gist.github.com/liammclennan/3654718#comment-559457&quot;&gt;this gist&lt;/a&gt; of how to do an even cooler currying approach.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Fat arrows&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve done anything with CoffeeScript or TypeScript you might be familiar with the concept of fat arrow functions. These languages use a modified syntax to deal with lexical scoping problem that bind can be used to solve. TypeScript tracks your usage of this in fat arrow functions and replaces it with a captured variable, CoffeeScript relies on the &lt;code&gt;@&lt;/code&gt; symbol to do a similar thing.&lt;/p&gt;
&lt;p&gt;For anyone who&amp;#39;s not been following the evolution of &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:proposals&quot;&gt;ECMAScript 6&lt;/a&gt; (the next version of JavaScript) one of the accepted new syntax features is &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax&quot;&gt;arrow function syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simply put the language is going to have a way to defining a function which you can be confident of what the this value will be (sure you can still futz with it if you want to but it&amp;#39;s covering the most common scenarios).&lt;/p&gt;
&lt;p&gt;To test out the new arrow function syntax grab Firefox v22 or newer.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>JavaScript call and apply</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-04-javascript-call-and-apply.html"/>
            <updated>2013-07-04T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-04-javascript-call-and-apply.html</id>
            <content type="html">&lt;p&gt;A colleague recently came across this line in our codebase that I wrote:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;, vehicle&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What the overall result of the code is isn&amp;#39;t particularly important, the part that tripped them up (and made them think I&amp;#39;m on drugs I&amp;#39;m not actually on) was this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;, vehicle&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the  involvements property is an array in both scenarios which exposes a push method, the confusion was around what the apply method does and why I was even using it.&lt;/p&gt;
&lt;p&gt;Both call and apply are methods which are part of the JavaScript language and are exposed on the Function prototype, meaning that they can be accessed from any function, so let&amp;#39;s say we have this function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(this, a, argument);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we invoke it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('b')&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is the same as doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(window, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: In ES3 it&amp;#39;ll be window, ES5 strict mode it&amp;#39;ll be null, or undefined, I forget which&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s throw the apply method into the mix and invoke it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time it&amp;#39;ll be like we&amp;#39;ve done this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could alternatively provide an array of arguments so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Becomes:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
&lt;p&gt;The apply method takes two arguments, the first is what controls the this value, the second is an array of objects that will be decomposed to represent the various arguments passed in, meaning that the array item 0 will be the first argument, b in our example, and so on.&lt;/p&gt;
&lt;p&gt;The call method is similar but instead of taking an array that represents the arguments it takes a splat, anything after the this context will be used directly as the arguments. So we&amp;#39;d use call like this to achieve the same result:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Relating it to our original code&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s think about how this related back to our original code, working with arrays and push. Say I have an array and I want to add N number of values to said array. How would you do it?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];
&lt;span class=&quot;comment&quot;&gt;//I want arr == [1,2,3,4,5,6]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well the first obvious candidate is a for loop:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;transposed_variable&quot;&gt;arr2.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
      arr.push(arr2[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;ll do exactly what we&amp;#39;re after, but there&amp;#39;s a problem, we&amp;#39;re calling push &lt;em&gt;a lot&lt;/em&gt;, once for every item in the array in fact(!!). This can be a bit of a performance hit, especially if you have large arrays, the JavaScript runtime engine simply can&amp;#39;t optimise it because it doesn&amp;#39;t know how many there could be so it can&amp;#39;t preallocate the memory, meaning it&amp;#39;s somewhat inefficient.&lt;/p&gt;
&lt;p&gt;Alternatively you could use the &lt;code&gt;concat&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;arr = &lt;span class=&quot;value&quot;&gt;arr.concat(arr2);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works just fine but the problem is that you replace arr with a new instance of it. &lt;em&gt;Generally speaking&lt;/em&gt; that&amp;#39;s not a problem, but if you&amp;#39;re relying on the object itself to not change, at a memory level (say it&amp;#39;s an observable property from Knockout, or a bound property in WinJS), you&amp;#39;ll potentially run into problems.&lt;/p&gt;
&lt;p&gt;So we&amp;#39;re back to push, we want to append multiple items to an existing array without overriding the original object/property. The nice thing about push is that we can provide it N number of arguments which represent all the items we wish to push. Well since I&amp;#39;ve got an array I can&amp;#39;t exactly pass that in directly, since then argument 1 will be the array, it won&amp;#39;t be decomposed. And this is where apply comes in, we can provide the array as the 2nd argument to apply and have N number of items pushed to the array. This brings us to doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;arr&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(arr, arr2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it, we&amp;#39;ve used apply to decompose an array and push all he values into the target array, basically we&amp;#39;ve done this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;arr&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the this context we&amp;#39;ve set is the &lt;code&gt;arr&lt;/code&gt; object itself.&lt;/p&gt;
&lt;p&gt;Hopefully that does a good enough explanation to confuse everyone ;).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>DDDMelbourne workshop</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-26-dddmelbourne-workshop.html"/>
            <updated>2013-06-26T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-26-dddmelbourne-workshop.html</id>
            <content type="html">&lt;p&gt;It&amp;#39;s that time of year again, it&amp;#39;s &lt;strong&gt;conference time!&lt;/strong&gt;. I&amp;#39;m excited to announce that I&amp;#39;ll be coming down for my 4th(!!) &lt;a href=&quot;http://wwww.dddmelbourne.com&quot;&gt;DDDMelbourne&lt;/a&gt; and the &lt;a href=&quot;http://www.dddmelbourne.com/agenda&quot;&gt;overall agenda&lt;/a&gt; looks quite exciting!&lt;/p&gt;
&lt;p&gt;This year the organisers have decided to add a workshop track as well as the three presentations, and when they asked me if I&amp;#39;d do a JavaScript workshop I jumped at the chance.&lt;/p&gt;
&lt;p&gt;The workshop is going to be on an aspect of JavaScript that I&amp;#39;m quite passionate about and we&amp;#39;ll be getting really hands-on and mostly just writing code for the hour, so bring your device and get ready to code.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&quot;http://dddmelb4.eventbrite.com.au/&quot;&gt;register now&lt;/a&gt; before it&amp;#39;s too late (ticket&amp;#39;s are going quick).&lt;/p&gt;
</content>
            
            <category>dddmelbourne</category>
            
        </entry>
    
        <entry>
            <title>Walking a JavaScript object</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-21-walking-a-javascript-object.html"/>
            <updated>2013-06-21T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-21-walking-a-javascript-object.html</id>
            <content type="html">&lt;p&gt;Recently I was trying to solve a problem where I had a JSON path to a property on an object, the path was going to be &lt;code&gt;n&lt;/code&gt; layers deep and the object itself was also &lt;code&gt;n&lt;/code&gt; layers deep. I needed to solve this problem in a fairly generic manner, as there was a number of different scenarios under which this could would be run.&lt;/p&gt;
&lt;p&gt;Basically I had this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;string&quot;&gt;'foo.bar.baz'&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And an object like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var obj = {
    &lt;span class=&quot;method&quot;&gt;foo:&lt;/span&gt; {
        &lt;span class=&quot;method&quot;&gt;bar:&lt;/span&gt; {
            &lt;span class=&quot;method&quot;&gt;baz:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;
        }
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So from the &lt;code&gt;path&lt;/code&gt; I want to be able to find out the value in the object that matches it.&lt;/p&gt;
&lt;h1&gt;Pass #1&lt;/h1&gt;
&lt;p&gt;A colleague of mine gave me the code which would do this, from an application they had, implemented using a for loop:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var value = obj;
var paths = path.split('.');
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; paths.length; i++)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;paths&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;]];
}

&lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that does exactly what needs to be done, exactly as advertised. Job done right?&lt;/p&gt;
&lt;h1&gt;Pass #2&lt;/h1&gt;
&lt;p&gt;The for loop is so old school, these days it&amp;#39;s all functional programming that the kids are into these days so I looked at our method and decided there had to be another way which we could approach this, something a bit more functional.&lt;/p&gt;
&lt;p&gt;Since what we&amp;#39;re doing it walking through an object I wondered &amp;quot;Could I use something from the &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt; family for that?&amp;quot;. Well it turns out that &lt;strong&gt;yes&lt;/strong&gt; there is something ideal for that, &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You see the &lt;code&gt;reduce&lt;/code&gt; method takes a callback like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(prev, current)&lt;/span&gt;&lt;/span&gt; {
    //&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; what is to be the &lt;span class=&quot;built_in&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'prev'&lt;/span&gt; value
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as long as the &lt;code&gt;prev&lt;/code&gt; is an instance of &lt;code&gt;obj&lt;/code&gt; then we can walk it, and doing that is fine as we can provide an argument to the &lt;code&gt;reduce&lt;/code&gt; method that defines what the initial value will be. This means we can rewrite our walker like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var value = &lt;span class=&quot;transposed_variable&quot;&gt;path.&lt;/span&gt;split(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;).reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(prev, curr)&lt;/span&gt; { &lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev&lt;span class=&quot;matrix&quot;&gt;[curr]&lt;/span&gt;;
}, obj);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it, a nice little object walker.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>Solving DocPad's excessive memory usage</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-18-solving-docpads-excessive-memory-usage.html"/>
            <updated>2013-06-18T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-18-solving-docpads-excessive-memory-usage.html</id>
            <content type="html">&lt;p&gt;Since I decide to &lt;a href=&quot;/posts/2013-06-10-new-blog-less-funnelweb.html&quot;&gt;move my site from FunnelWeb to DocPad&lt;/a&gt; I also decided to deploy to &lt;a href=&quot;http://www.heroku.com&quot;&gt;Heroku&lt;/a&gt; since I like them as a host. So I &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io&quot;&gt;built my site&lt;/a&gt;, &lt;a href=&quot;/posts/2013-06-11-funnelweb-to-git.html&quot;&gt;got everything into Git&lt;/a&gt; and then I did a &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And then it fell over.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As soon as the push completed Heroku kicked off and started to spin up the dyno, but when I hit the site it said it&amp;#39;d crashed.&lt;/p&gt;
&lt;p&gt;Crashed, seriously? It&amp;#39;s a bunch of HTML files, how on earth can that crash?&lt;/p&gt;
&lt;p&gt;So I crack out the Heroku toolbox and inspect the log files and find the crash, it crashed because &lt;em&gt;it exceeded the allocated memory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exceeded the allocated memory?!&lt;/strong&gt; IT&amp;#39;S A STATIC SITE!&lt;/p&gt;
&lt;p&gt;Ok, fine, let&amp;#39;s have a look at what could be wrong, how a static site could be blowing out the memory allowance (512mb it&amp;#39;s allocated). I fire up the &lt;code&gt;docpad run&lt;/code&gt; command which is what is done on Heroku and this is what I get:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/docpad-memory-usage.PNG&quot; alt=&quot;DocPad memory usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#39;s nearly 700mb memory usage for a static site! I&amp;#39;ve seen it peak at over 900mb, run idle around 850mb, all kinds of wacky memory usage.&lt;/p&gt;
&lt;h1&gt;The not so static static site&lt;/h1&gt;
&lt;p&gt;So it would seem that I made a false assumption about DocPad, it&amp;#39;s not quite as static as I thought it was. While yes, it generates all these flat HTML files on disk it also keeps all the content in memory:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/slace&quot;&gt;@slace&lt;/a&gt; &lt;a href=&quot;https://twitter.com/shiftkey&quot;&gt;@shiftkey&lt;/a&gt; we put all the files in memory for generation and keep them there for quick access, so not a bad thing&lt;/p&gt;&amp;mdash; DocPad (@DocPad) &lt;a href=&quot;https://twitter.com/DocPad/statuses/341171857317314562&quot;&gt;June 2, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Well that&amp;#39;s kind of crap, I mean, I&amp;#39;ve got ~400 files in my generated output so it&amp;#39;s a lot of files that need to be stored in memory when really the requests can just be routed to a location on disk.&lt;/p&gt;
&lt;h1&gt;Solving the memory problem&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve already made my choice to go with DocPad but since it&amp;#39;s having some whacky memory consumption issues meaning that it&amp;#39;s not really going to be a viable deployment option so how can I go about it?&lt;/p&gt;
&lt;p&gt;Well why not use DocPad to generate the HTML and then just write my own routing layer using &lt;a href=&quot;http://expressjs.com&quot;&gt;Express.js&lt;/a&gt;? After all DocPad is just sitting on top of Express.js to do a lot of its heavy lifting. In fact it&amp;#39;s really simple to make a routing engine on top of Express.js:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/out'&lt;/span&gt;));

app.listen(process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep that&amp;#39;s it, we&amp;#39;ve got our site going and now I can deploy it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: There&amp;#39;s still a bit of a limitation here, DocPad&amp;#39;s memory will blow out mostly during its generation phase so this now means that I have to check the &lt;code&gt;/out&lt;/code&gt; folder into my git repository, which makes it larger, but it&amp;#39;s not that big a problem really.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Maintaining old routes&lt;/h2&gt;
&lt;p&gt;As I said in my last post I needed to ensure that I didn&amp;#39;t break my SEO between my old routes and my new ones. When using DocPad&amp;#39;s engine it&amp;#39;ll look at the &lt;code&gt;urls&lt;/code&gt; meta-data which it&amp;#39;ll then 301 the response. Now you can see why DocPad does have some of its heavy memory usage, it actually does some on-the-fly mapping of routes. Still, I&amp;#39;m pretty sure I can do this without the memory explosion.&lt;/p&gt;
&lt;p&gt;My idea is that we can use the DocPad &lt;a href=&quot;http://docpad.org/docs/plugins&quot;&gt;plugin model&lt;/a&gt; and from that generate a JSON object that represents all the alternate routes for our posts, then we can load that JSON into our Express.js app and map the routes.&lt;/p&gt;
&lt;p&gt;My plugin can be found &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/tree/master/plugins/docpad-plugin-staticroutes&quot;&gt;here&lt;/a&gt; and what it does is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hook into the &lt;code&gt;writeAfter&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;Grab all &lt;code&gt;document&lt;/code&gt; objects&lt;/li&gt;
&lt;li&gt;Create an object that contains the URL we want and all the alternate URLs that we want to 301&lt;/li&gt;
&lt;li&gt;Strip out any that don&amp;#39;t have alternate URLs&lt;/li&gt;
&lt;li&gt;Write this to the output folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the code that&amp;#39;ll create our route map:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docs = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.docpad.getCollection(&lt;span class=&quot;string&quot;&gt;'documents'&lt;/span&gt;).toJSON();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = docs.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(doc)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        url: doc.url,
        redirects: doc.urls.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x !== doc.url; })
    };
}).filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(route)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!route.redirects.length;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So from that we can now update our Express.js file to look like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

app.get(&lt;span class=&quot;string&quot;&gt;'/routes.json'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
    res.status(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;).send(&lt;span class=&quot;string&quot;&gt;'403 Forbidden'&lt;/span&gt;);
})

app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/out'&lt;/span&gt;));
app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/get'&lt;/span&gt;, express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/src/files/get'&lt;/span&gt;));

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./out/routes.json'&lt;/span&gt;).routes;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; redirector = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(dest)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
        res.redirect(&lt;span class=&quot;number&quot;&gt;301&lt;/span&gt;, dest);
    };
};

routes.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(route)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (route.redirects) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; route.redirects.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(redirect)&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; app.get(redirect, redirector(route.url));
        });
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
});

app.listen(process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve also put a few other special routes, I&amp;#39;m putting a 403 on the &lt;code&gt;routes.json&lt;/code&gt; file since it sits in the root of my &lt;code&gt;out&lt;/code&gt; folder and I don&amp;#39;t really want it served out to the world (I&amp;#39;m also serving my assets from a special folder to avoid duplicating them in the repo and making it huge).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;DocPad appears to be a bit of a memory hog which can introduce some problems when you are looking at your hosting options, so make sure you look at that before signing any hosting agreement.&lt;/p&gt;
&lt;p&gt;But that said if you want to invest a little bit of effort and not rely on DocPad as your routing engine then you can rely on just the HTML that is generated and use a middleware like Express.js to handle the routing with a minimal memory footprint.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For the record, my site now run around the 20mb memory footprint.&lt;/em&gt;&lt;/p&gt;
</content>
            
            <category>docpad</category>
            
        </entry>
    
        <entry>
            <title>From FunnelWeb to Git in a few simple steps</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-11-funnelweb-to-git.html"/>
            <updated>2013-06-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-11-funnelweb-to-git.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Prelude: I&amp;#39;m going to assume you&amp;#39;ve got the database somewhere locally that you can work with, I wouldn&amp;#39;t recommend doing it against a production database. We&amp;#39;re not doing anything destructive against it but better safe than sorry!.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The scenario is that I&amp;#39;m wanting to be able to visualise the revision history of my posts in FunnelWeb as Git commits, each new revision of a post should be a new commit. The history order should match the date that posts were created (or edited) so that it doesn&amp;#39;t look like just a dump into Git, it looks like actual history.&lt;/p&gt;
&lt;p&gt;Without doing a full Git primer there&amp;#39;s one really important aspect of Git that you need to be aware of. Git is basically a small linux file system so with file system theory under our belt we should know that there&amp;#39;s a date associated with files (or in this case, commits). So at least &lt;em&gt;in theory&lt;/em&gt; we should be able to control when a commit happened right? After all I&amp;#39;ve got posts from 2010 and I&amp;#39;d like those commits to reflect that.&lt;/p&gt;
&lt;p&gt;So armed with a bit of knowledge and &lt;a href=&quot;http://twitter.com/shiftkey&quot;&gt;Brendan Forster&amp;#39;s skype handle&lt;/a&gt; I started digging.&lt;/p&gt;
&lt;h1&gt;It&amp;#39;s a date&lt;/h1&gt;
&lt;p&gt;Since my work on the time machine is running behind schedule (snap!) it&amp;#39;s time to get an understanding of date&amp;#39;s in Git. Each commit in Git will have two dates associated with it, &lt;code&gt;author date&lt;/code&gt; and &lt;code&gt;committer date&lt;/code&gt;, and there&amp;#39;s an important difference between these two dates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author date&lt;/strong&gt; is the date when a commit was &lt;em&gt;originally authored&lt;/em&gt; in the source repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Committer date&lt;/strong&gt; is the date when a commit was &lt;em&gt;applied to the current repository&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is the important bit of information, generally speaking these two dates are the same &lt;strong&gt;but they don&amp;#39;t have to be&lt;/strong&gt;. Say I create a patch file from my repository and send it to you, this will contain an &lt;em&gt;author date&lt;/em&gt;, which is the date that &lt;strong&gt;I&lt;/strong&gt; created the commit, and in my repository it matches the &lt;em&gt;commit date&lt;/em&gt;. At some future point in time you&amp;#39;re going to add that patch to your repository and when you do that you&amp;#39;ll receive my &lt;em&gt;author date&lt;/em&gt; but you&amp;#39;ll have a different &lt;em&gt;commit date&lt;/em&gt;, for you see the date that you committed it to the repository has changed, but the commit itself hasn&amp;#39;t (if it did the whole commit would be invalid). &lt;a href=&quot;http://alexpeattie.com/blog/working-with-dates-in-git/&quot;&gt;A more in-depth write up can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is where the power comes from, you can manipulate these dates. This means that I can extract my dates from FunnelWeb and author commits of a particular point in time, but commit them whenever makes sense.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: General wisdom says you shouldn&amp;#39;t mess around with the committer date, only the author date.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Manipulating Git&lt;/h1&gt;
&lt;p&gt;Well now that we know that we can, at least in theory, manipulate our Git history to match the information that I&amp;#39;d like it to be, the question is how?&lt;/p&gt;
&lt;p&gt;A quick search found &lt;a href=&quot;http://stackoverflow.com/questions/454734/how-can-one-change-the-timestamp-of-an-old-commit-in-git&quot;&gt;this on Stackoverflow&lt;/a&gt;, neat-o I can do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;amend&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;date=&quot;&lt;/span&gt;&amp;lt;&lt;span class=&quot;comment&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;revision&lt;/span&gt;&amp;gt;&lt;span class=&quot;comment&quot;&gt;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well isn&amp;#39;t that nice, the command line exposes what I want, but either having to manually run the commands on the CLI or calling the CLI fro mcode is not a particularly pleasent an idea.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;http://libgit2.github.com/&quot;&gt;LibGit2&lt;/a&gt; or more specifically &lt;a href=&quot;https://github.com/libgit2/libgit2sharp&quot;&gt;LibGit2Sharp&lt;/a&gt;. If you&amp;#39;ve done anything with Git programmatically you&amp;#39;re probably familiar with these libraries. LibGit2 is an implementation of the Git core commands but being written in C it&amp;#39;s not that much fun for .NET developers so that&amp;#39;s where LibGit2Sharp comes in and it&amp;#39;s what we&amp;#39;ll be using.&lt;/p&gt;
&lt;h1&gt;Exporting out data&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll get back to Git in a moment as there&amp;#39;s something important we need to do before we can work with Git and that&amp;#39;s getting us some data.&lt;/p&gt;
&lt;p&gt;For this I&amp;#39;m going to use &lt;a href=&quot;https://github.com/SamSaffron/dapper-dot-net&quot;&gt;Dapper&lt;/a&gt; which is a light-weight ORM to talk to the FunnelWeb database, but use whatever works best for you. The important part here is &lt;em&gt;how&lt;/em&gt; we run our code.&lt;/p&gt;
&lt;p&gt;Well there&amp;#39;s an obvious option, we could go &lt;code&gt;File -&amp;gt; New Console Application&lt;/code&gt; and get cracking, NuGet install our dependencies, etc.&lt;/p&gt;
&lt;p&gt;Nah console applications are so 2012, instead I&amp;#39;m going to use &lt;a href=&quot;http://scriptcs.net/&quot;&gt;ScriptCS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#39;t heard of ScriptCS don&amp;#39;t fret, it&amp;#39;s a very new platform. ScriptCS is the brain child of &lt;a href=&quot;https://twitter.com/gblock&quot;&gt;Glenn Block&lt;/a&gt;, which is taking his learnings from being heavily involved in Node.js of recent and bringing that to the .NET world. Basically making a way which you can execute a C# file without the need for Visual Studio, the C# compiler or any of those tools we&amp;#39;re use to as .NET developers. Check out &lt;a href=&quot;http://www.hanselman.com/blog/ProjectlessScriptedCWithScriptCSAndRoslyn.aspx&quot;&gt;Scott Hanselmans post on the topic&lt;/a&gt; if you want to learn more.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You&amp;#39;ll need ScriptCS version 0.5.0 at least as you need &lt;a href=&quot;https://github.com/scriptcs/scriptcs/pull/250&quot;&gt;my pull request&lt;/a&gt; included.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;p&gt;Now we have the idea sorted out, I&amp;#39;m going to start with a ScriptCS project which will use a Dapper to get our data out and LibGit2Sharp to push it into Git, seems nice and simple really. Let&amp;#39;s break this down into the smaller parts.&lt;/p&gt;
&lt;h2&gt;Opening our Git repo&lt;/h2&gt;
&lt;p&gt;The first step in our process will be to open up the Git repo so we can work against it. I&amp;#39;ve created a migrator folder which my migrator will reside within and then I&amp;#39;ll go create a new file called &lt;code&gt;app.csx&lt;/code&gt; which is my ScriptCS file (note the &lt;code&gt;csx&lt;/code&gt; extension).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll need a using for &lt;code&gt;LibGit2Sharp&lt;/code&gt; and then I&amp;#39;m going to create a method which will resolve our Git repository. So my file now looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; LibGit2Sharp;

&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Repository InitOrOpen(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; path) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gitBasePath = Repository.Discover(path);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gitBasePath == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
    {
        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;And we're creating a new git repo people!&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Repository.Init(path);
    }
    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Found existing repo, keep on trucking&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Repository(gitBasePath);
}

&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repo = InitOrOpen(&lt;span class=&quot;string&quot;&gt;@&quot;C:\_Code\my-repo&quot;&lt;/span&gt;)) {
    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;It's time to rock and rooooooooll&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So my method &lt;code&gt;InitOrOpen&lt;/code&gt; will take a path to a folder which is to be our Git repository. In the method it&amp;#39;ll use the &lt;code&gt;Discover&lt;/code&gt; method of the &lt;code&gt;Repository&lt;/code&gt; class which will locate the Git repository for the current folder or any of its parents. This means that I don&amp;#39;t have to pass the repository root, which works well for me using DocPad as I want to put my posts in &lt;code&gt;src\documents\posts&lt;/code&gt; where my repository root is where the &lt;code&gt;src&lt;/code&gt; folder exists.&lt;/p&gt;
&lt;p&gt;The result of &lt;code&gt;Discover&lt;/code&gt; will be the path which the Git repository resides in, as a string, which is null if there was no repository found. Based on that result we can choose to initialise a new Git repository, &lt;code&gt;Repository.Init(path)&lt;/code&gt;, or open the repository at the discovered path, &lt;code&gt;new Repository(gitBasePath)&lt;/code&gt;. This &lt;code&gt;Repository&lt;/code&gt; object is what we&amp;#39;ll use to interact with Git from .NET.&lt;/p&gt;
&lt;p&gt;Lastly the file will call the method in a &lt;code&gt;using&lt;/code&gt; block which in turn just dumps out that we opened the repository.&lt;/p&gt;
&lt;h2&gt;Package.config&lt;/h2&gt;
&lt;p&gt;Before we can run this ScriptCS file we&amp;#39;ll need get LibGit2Sharp &lt;em&gt;installed&lt;/em&gt;, so how do we go about it... &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet&lt;/a&gt; of course!&lt;/p&gt;
&lt;p&gt;For this we&amp;#39;ll need a &lt;code&gt;package.config&lt;/code&gt; file which defines our NuGet packages. Here&amp;#39;s where we&amp;#39;re at:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;LibGit2Sharp&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;0.11.0.0&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;targetFramework&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;net45&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we just need to run the ScriptCS file and our little app will do some logging out of messages!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: When I was writing this I came across a problem, LibGit2Sharp expects the native Git assemblies to be in the same folder as LibGit2Sharp&amp;#39;s assembly. In a .NET app this is done by copying the &lt;code&gt;NativeBinaries&lt;/code&gt; folder from the NuGet package into the &lt;code&gt;bin&lt;/code&gt; folder as a post-build event in the csproj file. Since we don&amp;#39;t have a csproj in ScriptCS you need to manually copy that folder.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Preping our data&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not going to go into depth as to how to get your data out of your database to be pushing into Git, that&amp;#39;ll somewhat depend on the database and ORM you&amp;#39;re working with, you can find that from &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/blob/master/_migrator/app.csx#L25-L46&quot;&gt;here&lt;/a&gt; in my source code.&lt;/p&gt;
&lt;p&gt;What is important to know is that ScriptCS &lt;strong&gt;doesn&amp;#39;t&lt;/strong&gt; support &lt;code&gt;dynamic&lt;/code&gt; in C#, so you&amp;#39;ll need to create a class which represents the object you&amp;#39;re pulling out of the database (the reason for this is at present &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx&quot;&gt;Roslyn&lt;/a&gt;, which ScriptCS uses to do its execution doesn&amp;#39;t support it). I&amp;#39;ve done this by creating a &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/blob/master/_migrator/Post.csx&quot;&gt;Posts.csx&lt;/a&gt; file that is then loaded into ScriptSC.&lt;/p&gt;
&lt;p&gt;But once we&amp;#39;ve got our data out of our database it&amp;#39;s time to push it into Git.&lt;/p&gt;
&lt;h2&gt;Git it in ya&lt;/h2&gt;
&lt;p&gt;We have our Git repository, we have our data, it&amp;#39;s time to do something about joining the two things together. Remember I said that I wanted each revision in my FunnelWeb database to be an individual commit in Git? Well that will be quite easy to do. The object model that I have brought back out of FunnelWeb respects that, each object is a snapshot of the post at a particular point in time. Next I&amp;#39;m going to have to do a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the comma-separated list of tags into an array&lt;/li&gt;
&lt;li&gt;Clean up my URI schema (in FunnelWeb it was very free-flowing, I want to normalize it a bit to the standard &lt;code&gt;YYYY-MM-DD-name&lt;/code&gt; format)&lt;ul&gt;
&lt;li&gt;But I don&amp;#39;t want to break my existing SEO so I need to be able to track those old links and 301 them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If a file doesn&amp;#39;t exist yet create a new file, otherwise update the existing one&lt;ul&gt;
&lt;li&gt;This is where it&amp;#39;s really cool, since we&amp;#39;ll just override the existing file and Git is pretty smart about diff-detection it&amp;#39;ll only track what changed between each version so we can then get nice clean diffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now DocPad uses the fairly common YAML-style meta-data headers, but it also supports something they wrote specifically called &lt;code&gt;cson&lt;/code&gt; which is a CoffeeScript version of JSON. Since I&amp;#39;ve always found YAML a pain I&amp;#39;m going to use that for my post meta data headers.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s start writing our file to disk then:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items) {
    var tags = item&lt;span class=&quot;preprocessor&quot;&gt;.Tags&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;','&lt;/span&gt;)
        &lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Trim&lt;/span&gt;())
        &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; !string&lt;span class=&quot;preprocessor&quot;&gt;.IsNullOrEmpty&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var uriParts = item&lt;span class=&quot;preprocessor&quot;&gt;.Path&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    if (uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;() &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        tags = tags&lt;span class=&quot;preprocessor&quot;&gt;.Union&lt;/span&gt;(uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Take&lt;/span&gt;(uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    var postPath = Path&lt;span class=&quot;preprocessor&quot;&gt;.Combine&lt;/span&gt;(Settings&lt;span class=&quot;preprocessor&quot;&gt;.OutputPath&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Published&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; + uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Last&lt;/span&gt;()) + &lt;span class=&quot;string&quot;&gt;&quot;.html.md&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    if (!File&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;(postPath))
        File&lt;span class=&quot;preprocessor&quot;&gt;.CreateText&lt;/span&gt;(postPath)&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    using (var sw = new StreamWriter(postPath)) {
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;--- cson&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Title&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;metaTitle&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.MetaTitle&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Desc&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;revised&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Date&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Published&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;, tags))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;migrated&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urls&quot;&lt;/span&gt;, new[] {&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + item&lt;span class=&quot;preprocessor&quot;&gt;.Path&lt;/span&gt;}))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaDataMultiLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;summary&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Summary&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;---&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(item&lt;span class=&quot;preprocessor&quot;&gt;.Contents&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    //git stuff
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, that&amp;#39;ll do nicely, I&amp;#39;ve extracted my tags, cleaned up my URIs, so &lt;code&gt;/flight-mode/indexeddb&lt;/code&gt; becomes &lt;code&gt;/posts/2013-05-27-indexeddb.html&lt;/code&gt; for example, and I&amp;#39;ve built up a meta-data header which contains all the information that I found to be important (check out the &lt;a href=&quot;http://docpad.org/docs/meta-data&quot;&gt;DocPad documentation&lt;/a&gt; to get a better idea of what meta-data is available and for what purpose).&lt;/p&gt;
&lt;p&gt;Now it&amp;#39;s time to get it into Git, and more importantly, get it into Git with the right author date. Remember how I said there are two dates which a commit has, well I&amp;#39;m only going to concern myself with the &lt;code&gt;author date&lt;/code&gt;, since that was when the revision was created, but the date it when into the repository isn&amp;#39;t particularly important, for all it matters it could have been in another repository before now (which abstractly speaking it was).&lt;/p&gt;
&lt;p&gt;Turns out that this is actually &lt;strong&gt;really&lt;/strong&gt; easy to do! In fact LibGit2Sharp exposes the API to do just that as part of the commit API!&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    var commitMessage = string&lt;span class=&quot;preprocessor&quot;&gt;.IsNullOrEmpty&lt;/span&gt;(item&lt;span class=&quot;preprocessor&quot;&gt;.Reason&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&quot;I should have given a reason&quot;&lt;/span&gt; : item&lt;span class=&quot;preprocessor&quot;&gt;.Reason&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    repo&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Stage&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    repo&lt;span class=&quot;preprocessor&quot;&gt;.Commit&lt;/span&gt;(commitMessage, new Signature(&lt;span class=&quot;string&quot;&gt;&quot;Aaron Powell&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;me@aaron-powell.com&quot;&lt;/span&gt;, (DateTime) item&lt;span class=&quot;preprocessor&quot;&gt;.Date&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First things first I&amp;#39;ve created a commit message based off of the revision reason in FunnelWeb, next I&amp;#39;ll stage all changes in the repository (this is just so I can be lazy and not worry about the file name :P) and lastly commit the stage providing an author signature &lt;em&gt;which contains the author date as an argument&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I was honestly shocked at just how easy that process turned out to be!&lt;/p&gt;
&lt;p&gt;So now when we execute the code it&amp;#39;ll build up a nice Git repository for us.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And that&amp;#39;s it, with only 100 lines of code (which contains a rather large SQL statement too) I was able to pull all the data out from FunnelWeb and then push each post revision as a separate Git commit.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll find the full code for my migrator &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/tree/master/_migrator&quot;&gt;in my sites repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One final note though, I did have the following two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The migrator didn&amp;#39;t like being run in the same repository as I was opening with LibGit2Sharp, I think the problem was related to ScriptCS locking the &lt;code&gt;/bin&lt;/code&gt; folder which Git then didn&amp;#39;t have any access to and it&amp;#39;d crash. I didn&amp;#39;t look too deeply into this (C ain&amp;#39;t my forte these days) and it was easily solved by having the migrator source in a separate location (and it also meant I didn&amp;#39;t accidentally commit my real connection string)&lt;/li&gt;
&lt;li&gt;LibGit2Sharp didn&amp;#39;t seem to like it when I wasn&amp;#39;t in the &lt;code&gt;master&lt;/code&gt; branch. I initially tried to use a separate branch to create all the commits that I&amp;#39;d then review and rebase into master, but whenever I did this it would create a new repository in the destination folder so I ended up with nested Git repositories. Again I didn&amp;#39;t delve into the underlying reason, I left it for Brendan to entertain himself with, instead I just did it in master and deleted my clone the few times I stuffed up :P&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            <category>funnelweb</category>
            
            <category>scriptcs</category>
            
            <category>git</category>
            
        </entry>
    
        <entry>
            <title>New blog, less FunnelWeb</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-10-new-blog-less-funnelweb.html"/>
            <updated>2013-06-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-10-new-blog-less-funnelweb.html</id>
            <content type="html">&lt;p&gt;If you&amp;#39;re not viewing this via the website (ie - you&amp;#39;re reading it in a RSS reader) you&amp;#39;re probably not going to notice but &lt;a href=&quot;http://www.aaron-powell.com&quot;&gt;I&amp;#39;ve just done a new design&lt;/a&gt; and as a side project I&amp;#39;ve also decided that it&amp;#39;s time to do a shift in the platform.&lt;/p&gt;
&lt;p&gt;You see, I&amp;#39;ve been using &lt;a href=&quot;https://github.com/funnelweblog/funnelweb&quot;&gt;FunnelWeb&lt;/a&gt; for a few years now, and it&amp;#39;s been going smoothly, sitting there chugging along doing all that I&amp;#39;ve really needed from it, but in recent months I&amp;#39;ve decided that there was something that didn&amp;#39;t really want anymore... a database.&lt;/p&gt;
&lt;p&gt;Since all the content for my blog was stored in a database I was at the mercy of my hosting provider, if something happened to them, they had hardware failures, a security breach, etc, I had no copy of my content that I could easily shunt somewhere else and get back online. Admittedly &lt;strong&gt;this has never happened&lt;/strong&gt; but still, I felt that the lack of real ownership of my content, ultimately &lt;strong&gt;I&lt;/strong&gt; didn&amp;#39;t have a copy of it... anywhere.&lt;/p&gt;
&lt;p&gt;Over the last 12 to 18 months there&amp;#39;s been a real shift in how to manage content, especially for simple sites such as what my blog is. The idea is to use a static site generator and flat files for the content input. This then results in a bunch of HTML files that can then be served out for your site, I mean really it&amp;#39;s not like the content of my blog changes all that frequently so the idea of it being constantly generated on the fly doesn&amp;#39;t really make sense. Something like FunnelWeb seems like an overkill for what I need, a series of HTML files.&lt;/p&gt;
&lt;p&gt;So what are your options? Well there&amp;#39;s a few out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a popular choice which is written in Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt; if you want to stick with a .NET base&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/&quot;&gt;DocPad&lt;/a&gt; is an implementation in Node.js, and this is what I went with (for no reason other than I used DocPad when it was v1 and wanted to see what&amp;#39;d changed).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All my content is now stored in a GitHub repo as a combination of Markdown and Eco templates (with a design from &lt;a href=&quot;http://html5up.net/strongly-typed/&quot;&gt;HTML5UP&lt;/a&gt;) and it gives me a lot of freedom about the content layout, more importantly I have copies of my content stored on my various devices, I have full history of the changes and it can be stored on any number of git hosts.&lt;/p&gt;
&lt;p&gt;So as you read this you&amp;#39;re reading something that has been served from a static HTML file generated by DocPad, rather than some content pulled from a database that is parsed on request and a HTML result generated.&lt;/p&gt;
&lt;h1&gt;The future of FunnelWeb&lt;/h1&gt;
&lt;p&gt;With the move of my blog off FunnelWeb someone is bound to ask the question about the future of FunnelWeb. In fact &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/funnelweblog/WY2VKuc1OOA&quot;&gt;the question recently came up on the mailing list&lt;/a&gt;, ultimately it comes down to that Jake and I &lt;a href=&quot;http://blog.tatham.oddie.com.au/2013/02/20/dead-vs-done/&quot;&gt;consider it done&lt;/a&gt;. I plan to keep an eye on pull requests but at present there&amp;#39;s no plan to add new features going forward.&lt;/p&gt;
</content>
            
            <category>funnelweb</category>
            
            <category>docpad</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - Libraries</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-30-libraries.html"/>
            <updated>2013-05-30T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-30-libraries.html</id>
            <content type="html">&lt;p&gt;Throughout the last few posts we&amp;#39;ve looked at the different ways which we can store data offline in browsers and then created a basic little API that will help is with doing that. The &lt;code&gt;FlightMode&lt;/code&gt; API that we&amp;#39;ve been working with was though was really quite a simplistic approach to the problem that we were presented with, ultimately the API isn&amp;#39;t meant for production use.&lt;/p&gt;
&lt;p&gt;So when looking at the different storage options what do we have if we did want to go to production? In this article we&amp;#39;re going to look at some of the different API wrappers for the different storage technologies that we&amp;#39;ve looked at.&lt;/p&gt;
&lt;h1&gt;Lawnchair&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;&lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;http://brian.io/lawnchair/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lawnchair is one of the most fully featured storage options that we&amp;#39;ve got available to us, and also what I based the concept of &lt;code&gt;FlightMode&lt;/code&gt; on. Lawnchair offers a variety of ways which you can store data, through its adapter system, you can plug in which ever storage option you want, &lt;a href=&quot;http://brian.io/lawnchair/adapters&quot;&gt;and there&amp;#39;s a few options&lt;/a&gt;. The one that doesn&amp;#39;t exist is cookies but as I pointed out &lt;a href=&quot;/flight-mode/cookies&quot;&gt;in that post&lt;/a&gt; they aren&amp;#39;t exactly the best option when it comes to storing data.&lt;/p&gt;
&lt;p&gt;Another interesting aspect of Lawnchair is it is asynchronous by default, so using adapters like &lt;code&gt;localStorage&lt;/code&gt; (which they refer to as &lt;code&gt;DOM storage&lt;/code&gt;) requires a callback argument passed to it. This is nice as it means you have a more consistent API usage when it comes to using actually asynchronous APIs like IndexedDB and FileSystem.&lt;/p&gt;
&lt;p&gt;The main drawback I find is that because Lawnchair provides such a vast array of storage options behind a consistent programming API you ultimately loose some of the power of the underlying provider. This is especially a problem with IndexedDB, you loose a lot of the power of indexes and querying against those. But if you&amp;#39;re goal is to have offline storage across as large a browser set as possible then it&amp;#39;s a price you&amp;#39;ll have to pay.&lt;/p&gt;
&lt;p&gt;Lawnchair really is a good choice if you want to be able to do storage across a lot of platforms and use feature detection to work out exactly what adapter can be used.&lt;/p&gt;
&lt;h1&gt;AmplifyJS.store&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;&lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;http://amplifyjs.com/api/store/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AmplifyJS.store like Lawnchair aims to be an API simplification of the various browser storage models but rather than trying to be a one-size-fits-all option it is more focused on just key/value storage, in particular &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The programmatic model of AmplifyJS.store is also much simpler, rather than trying to provide helper methods to do things like filtering objects it provides the minimal surface area and leaves that up to you, so providing you with a method to get all objects then you can perform your own &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc operations. This is good as it doesn&amp;#39;t try and pretend that the underlying store is something that it&amp;#39;s not.&lt;/p&gt;
&lt;p&gt;The API is also synchronous unlike Lawnchair which does have upsides that you can avoid the complications that can arise from asynchronous programming and callback hell.&lt;/p&gt;
&lt;p&gt;AmplifyJS.store is a nice API if you want something that is simple and just does the job of handling key/value storage without trying to go over the top.&lt;/p&gt;
&lt;h1&gt;PouchDB&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://pouchdb.com/&quot;&gt;&lt;a href=&quot;http://pouchdb.com/&quot;&gt;http://pouchdb.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PouchDB is one of the most powerful libraries when it comes to working with complex data stores in the browser (it also supports node.js) and is very much a specialist of storing data with IndexedDB. It&amp;#39;s an implementation of the CouchDB programming interface built on top of IndexedDB (there are providers for WebSQL, levelDB and a HTTP interface) that gives you a lot of power when it comes to interacting with the underlying data stores.&lt;/p&gt;
&lt;p&gt;Another killer feature of PouchDB is that it has the ability to sync directly to a CouchDB instance via the HTTP interface. This means that if you&amp;#39;re using CouchDB as your backend then you&amp;#39;ve got an option to easily keep your data in sync between your client and server. This is really handy, particularly in the scenario I&amp;#39;ve been trying to paint over this series of being able to maintain user state even when they are offline.&lt;/p&gt;
&lt;p&gt;The obvious drawback of this is that it&amp;#39;s really geared around CouchDB developers so the API is designed for them. That said it doesn&amp;#39;t mean that it&amp;#39;s a bad API or something that can&amp;#39;t be used without CouchDB, it definitely can and it is very good at turning the IndexedDB programming API into something that is even closer to being a full NoSQL database by exposing &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt; directly from the query API.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re looking for a very full-featured IndexedDB wrapper then PouchDB should be given a very serious look.&lt;/p&gt;
&lt;h1&gt;db.js&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;&lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;https://github.com/aaronpowell/db.js&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;db.js is a library that I wrote with the single goal of improving the programmatic API for IndexedDB. As I mentioned in my &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;article on IndexedDB&lt;/a&gt; I find that the API is very verbose and quite foreign to front-end development so I wanted to set out and improve that.&lt;/p&gt;
&lt;p&gt;The other main design goal was to make the event handling better, more specifically to utilize Promises. so that you could assign multiple handlers to events that get raised and interact with them that way. It was also so it could be interoperable with other asynchronous operations and other libraries that implement Promise APIs.&lt;/p&gt;
&lt;p&gt;Finally I wanted a really simple way which you could query the data stored, again in a manner that is familiar to JavaScript developers. For this I went with a chaining API (made popular from jQuery) so that you could do all your operations in a single chain, but I also expose the important query features built in such as querying on a specific index, only the chaining is also allowing you to query in a more expanded manner, say first on an index and then on a custom function.&lt;/p&gt;
&lt;p&gt;Ultimately this is a very thin wrapper over IndexedDB and it&amp;#39;s &lt;em&gt;only&lt;/em&gt; designed for IndexedDB usage which makes it an ideal candidate if that&amp;#39;s your only target platform and you want something very light weight.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This has been a brief overview of a number of different JavaScript libraries for working with different offline storage models, libraries from the generic abstraction all the way down to specific implementations.&lt;/p&gt;
&lt;p&gt;By no means is this an extensive list of libraries available, I&amp;#39;m sure that there&amp;#39;s dozens more out there that would be worth looking into, but ultimately this was meant to be an introduction to a few which I see a great deal of promise in.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>indexeddb</category>
            
            <category>localStorage</category>
            
            <category>sessionStorage</category>
            
            <category>offline-storage</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - FileSystem API</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-28-file-system.html"/>
            <updated>2013-05-28T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-28-file-system.html</id>
            <content type="html">&lt;p&gt;The last piece of the puzzle when looking at offline storage options is a bit of a shift from what we&amp;#39;ve been looking at so far. Generally speaking we&amp;#39;ve been looking at how to store plain data, either through key/value stores or as objects. This time we&amp;#39;re going to look at the other kind of data you might want to store, files.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s two way we might want to store files, as binary data in IndexedDB or using the &lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/file-dir-sys.html&quot;&gt;FileSystem API&lt;/a&gt;. Since we looked at &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;IndexedDB last time&lt;/a&gt; (although didn&amp;#39;t cover how to store Blobs, but the principle is the same as we looked at) this time we&amp;#39;ll look at the FileSystem API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: At the time of writing the only browser supporting this API is Chrome so this is more of a &amp;quot;watch this space&amp;quot; style post than a &amp;quot;go use it now&amp;quot; one.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The idea of the FileSystem API is to give browsers the ability to persist files either temporarily or permanent. Temporary persistence means that the browser is free to decide when it wants to get ride of the file system that has created where as permanent persistence means that it will not do an automatic cleanup of the files and folders.&lt;/p&gt;
&lt;p&gt;Essentially what you end up with from the API is an ability to create files and folders in a sandboxed scenario. You don&amp;#39;t have access to the real file system of the device, so no access to &lt;code&gt;My Documents&lt;/code&gt; or &lt;code&gt;Program Files&lt;/code&gt;, just an isolated little location to work in. So this can be really quite useful if you&amp;#39;re say building a game, chances are you have a few assets that are required (audio, video, graphics) and the ability to retrieve them without web requests can be advantageous.&lt;/p&gt;
&lt;h2&gt;Benefits of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;As mentioned this API is serving a different purpose to the other storage APIs we&amp;#39;ve looked at, with the exception of IndexedDB (in a limited scenario at least) so some of the benefits are unfair comparisions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like IndexedDB the FileSystem API is an asynchronous API which has the obvious benefits when it comes to working with the kind of data it is designed for, storing large files you do ideally want that to be done asynchronously so that you aren&amp;#39;t blocking the users interactions.&lt;/p&gt;
&lt;p&gt;Another benefit is that the file system you create is completely sandboxed, meaning you don&amp;#39;t have to worry about what others may try and do to it. The only thing you need to take into account is the persistence level of the file system, as mentioned above temporary file systems are at the browsers mercy for clean-up, but it&amp;#39;s an opt-in to be using temporary persistence.&lt;/p&gt;
&lt;p&gt;As with other storage options there are size limitations on the file system that is created, the difference is (at least at the time of writing) you can specify the size of the file system you want. Chrome will then determine whether the user needs to approve this storage level and if so request permission like other device-sensitive APIs (&lt;code&gt;getUserMedia&lt;/code&gt; for example).&lt;/p&gt;
&lt;p&gt;The API itself is quite nice to work with, especially if you&amp;#39;re coming from a server background, creating new files is handled through writer streams while you have separate streams for reading files. You can store files of different types with different encodings and have a lot of flexibility to create a directory structure that suites your needs.&lt;/p&gt;
&lt;h2&gt;Drawbacks of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;The main drawback is browser support, as mentioned Chrome is the only browser at present that implements the FileSystem API and it seems that one of their main drivers is use within their extension system. While there&amp;#39;s nothing wrong with that it does mean that it&amp;#39;s not really possible to utilize this API is a cross-browser scenario. There is a &lt;a href=&quot;https://github.com/ebidel/idb.filesystem.js&quot;&gt;shim available that uses IndexedDB&lt;/a&gt; but it does require your IndexedDB implementation to support &lt;code&gt;Blob&lt;/code&gt; storage which can be a problem in Internet Explorer 10.&lt;/p&gt;
&lt;p&gt;Another drawback is the API interactions, while it&amp;#39;s not quite as verbose as working with IndexedDB the API itself partially relies on the DOM Level 3 events and partially relies on callbacks being provided. This means that in some instances you&amp;#39;ll be attaching event handlers, like when you&amp;#39;re using a &lt;code&gt;FileReader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var reader = new FileReader();
reader.onloadend = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; };
reader.readAsText(file);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And other times you&amp;#39;ll have to pass a callback:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;window&lt;span class=&quot;preprocessor&quot;&gt;.requestFileSystem&lt;/span&gt;(window&lt;span class=&quot;preprocessor&quot;&gt;.TEMPORARY&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;, onInit, onError)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;API inconsistence can be annoying for developers to work with and something that you need to be mindful of.&lt;/p&gt;
&lt;p&gt;The final drawback I see is that there&amp;#39;s no file system querying available, meaning you have to know where your files are stored, which can be a bit tricky when you&amp;#39;re working with directories in your file system. Admittedly this is a minor problem, you probably shouldn&amp;#39;t be storing files that you don&amp;#39;t know the location of in the file system but it can still be something that you&amp;#39;d want.&lt;/p&gt;
&lt;h2&gt;Implementing FileSystem storage&lt;/h2&gt;
&lt;p&gt;Unlike the other storage options I&amp;#39;ve decided to &lt;strong&gt;not&lt;/strong&gt; cover off how to implement this API because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It really wouldn&amp;#39;t fit with the &lt;code&gt;FlightMode&lt;/code&gt; API we&amp;#39;ve got so far, that&amp;#39;s designed for non-hierarchical data&lt;/li&gt;
&lt;li&gt;This is more of a &lt;em&gt;watch this space&lt;/em&gt; post than a &lt;em&gt;go use it&lt;/em&gt; one since the browser support is quite lacking&lt;/li&gt;
&lt;li&gt;There is a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/file/filesystem/&quot;&gt;great article on HTML5 Rocks&lt;/a&gt; that&amp;#39;ll do it more justice than I can give it&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The idea of being able to store files, complete files, in a structured manner on the client is a really exciting one. Admittedly there&amp;#39;s a much narrower use-case for such an API compared to other storage options we&amp;#39;ve discussed the problems that it solves are very real and will likely become more valid as more true web applications rise.&lt;/p&gt;
&lt;p&gt;The API itself is not back to work against, if it is a bit inconsistent and keep in mind that the specification is still in draft status so it may change in the future.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>offline-storage</category>
            
            <category>file-system</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - IndexedDB</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-27-indexeddb.html"/>
            <updated>2013-05-27T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-27-indexeddb.html</id>
            <content type="html">&lt;p&gt;The next stop in our offline storage adventure is to look at the big daddy of offline storage, &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt;. Now I&amp;#39;ve &lt;a href=&quot;http://www.aaron-powell.com/tagged/indexeddb&quot;&gt;blogged about &lt;code&gt;IndexedDB&lt;/code&gt; in the past&lt;/a&gt; but today I want to talk about it in a bit higher level and introduce the idea of IndexedDB beyond just how to use the API.&lt;/p&gt;
&lt;p&gt;IndexedDB is the latest approach to doing offline storage in offline applications, it is designed as a replacement for the &lt;a href=&quot;http://www.w3.org/TR/webdatabase/&quot;&gt;WebSQL spec which is now discontinued&lt;/a&gt;. One of the main reasons that WebSQL was discontinued was because it was tied to a specific version of &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; which introduced some problems. Need to change something in the way the API worked you needed to change the SQLite specification first. So IndexedDB was proposed as a replacement to WebSQL and the design was not tied to any particular underlying technology (&lt;a href=&quot;http://www.aaron-powell.com/web/indexeddb-storage&quot;&gt;I&amp;#39;ve previously blogged about how different browsers store their data&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;IndexedDB is quite different to WebSQL where instead of being a dialect of the SQL language IndexedDB much more closely related to a NoSQL, or Document Database (it&amp;#39;s not true document database but I&amp;#39;m not here to argue semantics). Data is stored as the objects that they are (once they&amp;#39;ve been cloned, so you don&amp;#39;t maintain prototype chains), not as strings like we&amp;#39;ve seen in the other options.&lt;/p&gt;
&lt;h2&gt;Benefits of IndexedDB for storage&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s several important benefits of IndexedDB over the other storage options we&amp;#39;ve looked at, the first is something that&amp;#39;s a very big break from other options, asynchronicity.&lt;/p&gt;
&lt;p&gt;Where the other APIs all perform their operations in a synchronous manner IndexedDB doesn&amp;#39;t. This means that we get the benefits of having a non-blocking operation, so if you&amp;#39;re writing a large amount of data, you are on a low powered device, are experiencing high disk I/O, etc then you don&amp;#39;t want to have the user seem like your web application has crashed while you&amp;#39;re storing their data. Asynchronous operations aren&amp;#39;t exactly a new concept on the web so it&amp;#39;s nice to see that it&amp;#39;s come to the storage level.&lt;/p&gt;
&lt;p&gt;The next benefit is transactions. Anyone who&amp;#39;s done database work will know the benefit of this within an application. Once you start doing lots of read/write options, accepting user input and so on the chance of getting data that you &lt;em&gt;can&amp;#39;t&lt;/em&gt; handle is high. Transactions give you a benefit so that you can group operations and then if they fail roll them all back without getting your data store into a corrupt state. Transactions can also be read-only or read-write meaning that you can more selectively lock your data depending on the kind of operations being undertaken an limit the chance of corruption.&lt;/p&gt;
&lt;p&gt;And then there&amp;#39;s the way it handles data, where the previous options were storing data as strings, meaning we have to serialize/deserialize IndexedDB stores the data as the objects that were provided (&lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#object-store-storage-operation&quot;&gt;admittedly there&amp;#39;s a few steps it goes through first&lt;/a&gt;). This means that we can do a few smarter things on top of what we could do with strings, firstly we can create indexes. Again if you&amp;#39;re familiar with databases you&amp;#39;ll be familiar with indexes, but basically these allow us a nifty way to produce optimal query points. Say you&amp;#39;ve got people objects and you always query by &lt;code&gt;firstName&lt;/code&gt; so then you can create an index so it&amp;#39;ll optimize that kind of query. Which then leads on to the next part about handling data, querying. Since we&amp;#39;re storing full objects when we want to find data (such as with our &lt;code&gt;getAll&lt;/code&gt; method) we have our full object to then work against rather than just doing it against the full in-memory collection.&lt;/p&gt;
&lt;h2&gt;Drawbacks of IndexedDB for storage&lt;/h2&gt;
&lt;p&gt;The biggest drawback of IndexedDB is probably going to be a pretty obvious one for an API that is as new as it is and that&amp;#39;s browser support. At the time of writing the following browsers support IndexedDB unprefixed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer 10+&lt;/li&gt;
&lt;li&gt;Chrome 25+&lt;/li&gt;
&lt;li&gt;Firefox 19+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you can see that there&amp;#39;s a major limitation when we&amp;#39;re looking to go offline, the mobile space. Because of the browser support Windows Phone 8 is the only phone that supports IndexedDB natively. Luckily there&amp;#39;s hope, there&amp;#39;s a &lt;a href=&quot;http://nparashuram.com/IndexedDBShim/&quot;&gt;shim for IndexedDB&lt;/a&gt; that used WebSQL as the underlying store. This means that iOS Safari (and desktop Safari) as well as Android can have the API exposed to them.&lt;/p&gt;
&lt;p&gt;The other biggest drawback for me is the API, it&amp;#39;s excessively verbose and generally feels very foreign to front-end development. Things like &lt;code&gt;transaction&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;cursor&lt;/code&gt; are not really common concepts when you talk to front-end developers. And then there&amp;#39;s API calls like &lt;code&gt;cursor.continue()&lt;/code&gt; when you&amp;#39;re iterating through a query, while it might look innocuous the problem is that &lt;code&gt;continue&lt;/code&gt; is a reserved word in JavaScript so pretty much every editor I&amp;#39;ve used (and most linters) will raise a squiggly/warning which the ODC-coder in my flinches at, resulting in a lot of code people write like &lt;code&gt;cursor[&amp;#39;continue&amp;#39;]();&lt;/code&gt;. And on the verbosity, say you want to query a store on a non-unique index (our &lt;code&gt;firstName&lt;/code&gt; property for example), to do that you must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have an open connection to your database, &lt;code&gt;indexedDB.openDatabase(&amp;#39;my-db&amp;#39;)&lt;/code&gt;, and wait for it to succeed&lt;/li&gt;
&lt;li&gt;Open a transaction, &lt;code&gt;db.transaction(&amp;#39;my-store&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the store from the transaction, &lt;code&gt;transaction.objectStore(&amp;#39;my-store&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open an index from the store, &lt;code&gt;IDBKeyRange.only(&amp;#39;firstName&amp;#39;, &amp;#39;Aaron&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a cursor with the index, &lt;code&gt;store.openCursor(index)&lt;/code&gt;, and wait for it to succeed&lt;/li&gt;
&lt;li&gt;In the success method of the query check to see if there was a cursor, if there was get its value and either work with it our push it to an array in the closure then call &lt;code&gt;cursor.continue()&lt;/code&gt; or if there was no cursor ignore it (no cursor is the end of the query)&lt;/li&gt;
&lt;li&gt;In the success method of the transaction process the captured values, assuming you wanted to work with them all together&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s a lot of steps to get data by a property...&lt;/p&gt;
&lt;p&gt;This then brings us to how you listen to the asynchronous actions. Generally you&amp;#39;ll see code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;request.onsuccess = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To me that feels very reminiscent of the IE6 era where events were registered by &lt;code&gt;on&amp;lt;something&amp;gt;&lt;/code&gt;. Admittedly you can use &lt;code&gt;addEventListener&lt;/code&gt; since IndexedDB uses the DOM3 event specification, but it seems to be the less-used approach in the documentation.&lt;/p&gt;
&lt;h2&gt;Implementing IndexedDB storage&lt;/h2&gt;
&lt;p&gt;When we have a look at implementing IndexedDB storage on top of our &lt;code&gt;FlightMode&lt;/code&gt; API that we&amp;#39;ve been using there&amp;#39;s an immediate problem, we&amp;#39;ve been only working with synchronous APIs up until now but as I mentioned above one of IndexedDB&amp;#39;s benefits is that it is asynchronous. Because of this we&amp;#39;ll have to approach the API usage a bit differently, first up the &lt;code&gt;FlightMode&lt;/code&gt; constructor now has two new arguments, a &lt;code&gt;migrate&lt;/code&gt; and a &lt;code&gt;ready&lt;/code&gt; callback argument. The &lt;code&gt;ready&lt;/code&gt; argument is the most important one, it will be triggered when our IndexedDB connection is open and we can start using the API. The &lt;code&gt;migrate&lt;/code&gt; callback on the other hand is used to allow you to manipulate the objectStore (such as create indexes) if required. Additionally to make it nicer to work with the asynchronous nature of the API I&amp;#39;ve leverages the &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promise/A+&lt;/a&gt; specification for handling the events via the &lt;a href=&quot;http://documentup.com/kriskowal/q/&quot;&gt;Q&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: If you&amp;#39;re not familiar with Promises have a read through &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blinking-marquee&quot;&gt;my series on exploring them with jQuery&lt;/a&gt;. It&amp;#39;s not exactly the same as Promise/A+, you can read about the differences &lt;a href=&quot;http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning: This is a &lt;strong&gt;really&lt;/strong&gt; basic IndexedDB implementation, it glances over much of the really powerful features, such as complex index queries, for information on that check out my &lt;a href=&quot;http://www.aaron-powell.com/tagged/indexeddb&quot;&gt;other IndexedDB posts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our internal &lt;code&gt;Store&lt;/code&gt; object has got a much more complex constructor this time since there&amp;#39;s a few more things we need to do, we must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open our connection to the database&lt;/li&gt;
&lt;li&gt;Create the object store if required&lt;/li&gt;
&lt;li&gt;Notify the consumer that the API is ready&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it will look more like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var Store = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, onMigrate, onSuccess)&lt;/span&gt; {&lt;/span&gt;
    var that = this;
    var request = &lt;span class=&quot;transposed_variable&quot;&gt;indexedDB.&lt;/span&gt;open(&lt;span class=&quot;string&quot;&gt;'flight-mode'&lt;/span&gt;);
    &lt;span class=&quot;transposed_variable&quot;&gt;this.&lt;/span&gt;storeName = name;

    &lt;span class=&quot;transposed_variable&quot;&gt;request.&lt;/span&gt;onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;that.&lt;/span&gt;db = &lt;span class=&quot;transposed_variable&quot;&gt;e.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;target.&lt;/span&gt;result;

        onSuccess();
    };

    &lt;span class=&quot;transposed_variable&quot;&gt;request.&lt;/span&gt;onupgradeneeded = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        var db = &lt;span class=&quot;transposed_variable&quot;&gt;e.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;target.&lt;/span&gt;result;

        var store = &lt;span class=&quot;transposed_variable&quot;&gt;db.&lt;/span&gt;createObjectStore(name, &lt;span class=&quot;cell&quot;&gt;{ keyPath: &lt;span class=&quot;string&quot;&gt;'__id__'&lt;/span&gt;, autoIncrement: true }&lt;/span&gt;);

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (onMigrate) &lt;span class=&quot;cell&quot;&gt;{
            onMigrate(store);
        }&lt;/span&gt;
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One nice thing about IndexedDB is that it can automatically create an &lt;code&gt;id&lt;/code&gt; for the object, which I&amp;#39;ve turned on (it&amp;#39;ll be stored in the &lt;code&gt;__id__&lt;/code&gt; property) and set to &lt;code&gt;autoIncrement: true&lt;/code&gt; so that it will create a new one for each record.&lt;/p&gt;
&lt;p&gt;To use this we would do something like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ready = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlightMode(&lt;span class=&quot;string&quot;&gt;'my-store'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'indexedDB'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a bit tedious that we&amp;#39;d have to check for the &lt;code&gt;ready&lt;/code&gt; flag before any query or risk the API not being ready to use but that is something you can program around with &lt;code&gt;Promise/A+&lt;/code&gt; pretty easily.&lt;/p&gt;
&lt;p&gt;As I mentioned in my drawbacks list the API is very verbose, but we can still make it reasonably simple to use as a consumer and hide away that verbosity. Let&amp;#39;s look at the &lt;code&gt;add&lt;/code&gt; method. Again since this is asynchronous we&amp;#39;ll need to take that into consideration. This is where I&amp;#39;m leveraging &lt;code&gt;Q&lt;/code&gt;, I&amp;#39;m creating a deferred object that you then will interact with.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Store.prototype.add = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(obj) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName, &lt;span class=&quot;string&quot;&gt;'readwrite'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    store.add(obj).onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        d.resolve(e.target.result);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First things first we need to create a new transaction, this is a &lt;strong&gt;writable&lt;/strong&gt; transaction since we&amp;#39;ll manipulate data. From said transaction we can then go out and get our object store that we&amp;#39;re writing to. Lastly we setup our deferred object from Q which we&amp;#39;ll then return so we can use the Promise. When you add a record into the object store it&amp;#39;ll fire off the &lt;code&gt;success&lt;/code&gt; event when done and an &lt;code&gt;error&lt;/code&gt; event if it was to fail. I&amp;#39;m omitting error handling here to save code, but you&amp;#39;d capture the &lt;code&gt;IDBRequest&lt;/code&gt; from the &lt;code&gt;add&lt;/code&gt; call which you attach other handlers to.&lt;/p&gt;
&lt;p&gt;When the request is successful the events &lt;em&gt;target&lt;/em&gt; will be the &lt;code&gt;id&lt;/code&gt; that was generated by IndexedDB for us. If you&amp;#39;re &lt;em&gt;not&lt;/em&gt; using auto-incrementing IDs the value will be what ever you defined as your &lt;code&gt;keyPath&lt;/code&gt; anyway. I&amp;#39;m then resolving that out via our Promise resulting in an API usage like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;store.&lt;/span&gt;add(&lt;span class=&quot;cell&quot;&gt;{ firstName: &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;, lastName: &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt; }&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Object stored with id'&lt;/span&gt;, id);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Getting a record out by it&amp;#39;s &lt;code&gt;id&lt;/code&gt; is also reasonably trivial once you understand the basis of IndexedDB, here&amp;#39;s the code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;Store.prototype.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(id) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    store.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(id).onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = e.target.result;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj) {
            d.resolve(obj);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            d.reject(&lt;span class=&quot;string&quot;&gt;'No item matching id &quot;'&lt;/span&gt; + id + &lt;span class=&quot;string&quot;&gt;'&quot; was found'&lt;/span&gt;);
        }

    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a few things in common with the &lt;code&gt;add&lt;/code&gt; method, but this time we don&amp;#39;t specify what type of &lt;code&gt;transaction&lt;/code&gt; we want. If you &lt;em&gt;don&amp;#39;t&lt;/em&gt; specify a type it will be read-only as transactions are read-only by default.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you want to be explicit about it pass in &lt;code&gt;readonly&lt;/code&gt; as the second argument.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;add&lt;/code&gt; the &lt;code&gt;store.get&lt;/code&gt; method returns an &lt;code&gt;IDBRequest&lt;/code&gt; which we listen for events on. When the object doesn&amp;#39;t exist in our store it won&amp;#39;t raise an error as this isn&amp;#39;t really an error state, instead we&amp;#39;ll have the request succeed and the &lt;code&gt;target&lt;/code&gt; of the event will be &lt;code&gt;null&lt;/code&gt;. This means that we have to do the check inside the &lt;code&gt;success&lt;/code&gt; handler and in this case I&amp;#39;m rejecting the Promise with an error message to consumers.&lt;/p&gt;
&lt;p&gt;We end up with a usage like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;store.&lt;/span&gt;get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(obj)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Object found'&lt;/span&gt;, obj);
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(msg);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final thing that really gets the power out of IndexedDB is that we can produce indexed queries, so finding items is more optimal. To do this we need to leverage the &lt;code&gt;migrate&lt;/code&gt; callback so we can create ourselves an index for the &lt;code&gt;objectStore&lt;/code&gt;. it would look something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlightMode(&lt;span class=&quot;string&quot;&gt;'my-store'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'indexedDB'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(store)&lt;/span&gt; {&lt;/span&gt;
    store.createIndex(&lt;span class=&quot;string&quot;&gt;'firstName'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'firstName'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;migrate&lt;/code&gt; method receives an instance of our &lt;code&gt;objectStore&lt;/code&gt; which we can then create indexes from using the &lt;code&gt;createIndex&lt;/code&gt; method. This takes a &lt;code&gt;name&lt;/code&gt; for the index and a &lt;code&gt;keyPath&lt;/code&gt; for the property of the object we want to index. Optionally you can pass in some options such as whether it should be a unique index.&lt;/p&gt;
&lt;p&gt;With the index created we can then use it within the &lt;code&gt;getBy&lt;/code&gt; method, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Store.prototype.getBy = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(property, value) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items = [];

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = index = store.index(property);

    index.openCursor().onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cursor = e.target.result;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cursor) {
            items.push(cursor.value);
            cursor[&lt;span class=&quot;string&quot;&gt;'continue'&lt;/span&gt;]();
        }
    };
    transaction.oncomplete = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        d.resolve(items);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To query the &lt;code&gt;index&lt;/code&gt; we need to use a &lt;code&gt;cursor&lt;/code&gt; (and as I mentioned above the &lt;code&gt;continue&lt;/code&gt; method is annoying...). Next we listen to the &lt;code&gt;success&lt;/code&gt; event of the cursor request, extracting the items out as we navigate through the cursor.&lt;/p&gt;
&lt;p&gt;Once the cursor is exhausted the &lt;code&gt;transaction&lt;/code&gt; will be completed and then we can resolve all the items which we wanted from it.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/indexeddb.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;IndexedDB is still rather new a technology so it&amp;#39;s something that needs to be used with a certain bit of caution, if you can&amp;#39;t target only the latest browsers then it might not be possible to use it in your application.&lt;/p&gt;
&lt;p&gt;That said it is a &lt;strong&gt;really&lt;/strong&gt; powerful API, the fact that it is asynchronous is alone a reason that it should be chosen over pretty much any other storage option when storing large amounts of data.&lt;/p&gt;
&lt;p&gt;While there are drawbacks with the API design, particularly the fact that it can be very verbose &lt;em&gt;and&lt;/em&gt; very foreign to web developers it isn&amp;#39;t that difficult to hide away the bulk of the API with your own façade, using libraries like &lt;code&gt;Q&lt;/code&gt; to make it easier to interact with the API and only exposing the features that you really need in your application.&lt;/p&gt;
&lt;p&gt;Definitely keep an eye on IndexedDB in the coming years, especially when doing Windows 8 applications, as it&amp;#39;ll be more available and more important for building offline applications.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>offline-storage</category>
            
            <category>indexeddb</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - local and session storage</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-23-local-session-storage.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-23-local-session-storage.html</id>
            <content type="html">&lt;p&gt;Last time we looked a &lt;a href=&quot;/flight-mode/cookies&quot;&gt;using cookies to store offline data&lt;/a&gt; and we also saw that there&amp;#39;s a number of problems with that approach. So let&amp;#39;s move forward, let&amp;#39;s look at what our next option would be when it comes to offline storage in our multi-dollar application.&lt;/p&gt;
&lt;p&gt;Today it&amp;#39;s time for the next level of offline storage, &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; which is sometimes referred to as &lt;code&gt;DOM storage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to talk about both of these options together as they share a lot of similarities.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a bit of a misconception around these two APIs, people often refer to them as &lt;em&gt;HTML5 storage&lt;/em&gt; but in truth they have been available much longer than that, in fact they can be used in &lt;a href=&quot;http://caniuse.com/#search=localstorage&quot;&gt;browsers as low as IE8&lt;/a&gt; which is not much of a HTML5 browser, and there&amp;#39;s a lot more interesting storage options for &amp;quot;HTML5 browsers&amp;quot; that we&amp;#39;ll look at later.&lt;/p&gt;
&lt;h2&gt;Benefits of local/session storage&lt;/h2&gt;
&lt;p&gt;Like cookies &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; store key/value pairs of data, but they have a much nicer API to work with than you find when trying to work with cookies; it has explicit methods for getting, setting and removing data.&lt;/p&gt;
&lt;p&gt;I keep referring to these two storage models together as they share a common root API but they are different. &lt;code&gt;sessionStorage&lt;/code&gt; is designed for storing data for the life of a browser session (until the window/tab is closed). This can make it ideal if you&amp;#39;ve got data that you want to temporarily store until the user leaves your application. But this obviously makes it a dangerous one to use in our scenario, because if the browser was to crash while the user is offline you&amp;#39;re likely to loose the data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt; on the other hand is a long-term persistent storage, meaning that the data will stay between browser restarts, making it much more ideal for persisting data when we&amp;#39;re offline.&lt;/p&gt;
&lt;p&gt;But ultimately you need to select the right one for the right scenario so there are valid use cases for both and it&amp;#39;s good to have that option.&lt;/p&gt;
&lt;h2&gt;Drawbacks of local/session storage&lt;/h2&gt;
&lt;p&gt;Like cookies these stores are only capable of storing string values. This has the obvious drawback of being difficult to use if we&amp;#39;ve got a complex object that we&amp;#39;re going to want to store for our application state.&lt;/p&gt;
&lt;p&gt;The other main drawback is that there&amp;#39;s no &amp;quot;magic sync to server&amp;quot; like with cookies. The data stored in either of these stores is &lt;strong&gt;only&lt;/strong&gt; available to the client application, if you need to get the data back up to the server then you&amp;#39;ll need to perform your own data sync. Now that does have the benefit of not having extra data added to a HTTP request so it&amp;#39;s both a pro and a con.&lt;/p&gt;
&lt;h2&gt;Implementing local/session storage&lt;/h2&gt;
&lt;p&gt;While it&amp;#39;s an exercise in &lt;a href=&quot;http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html&quot;&gt;reinventing the wheel&lt;/a&gt; we&amp;#39;ll have a look at how to create a very simple key/value storage API on top of both &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll be using our &lt;code&gt;FlightMode&lt;/code&gt; API and creating two new adapters, one for each of the stores.&lt;/p&gt;
&lt;p&gt;As I mentioned they have a nice API to work with and we get data in/out like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;localStorage.setItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'bar&lt;/span&gt;');
var item = localStorage.getItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;');
localStorage.removeItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But like cookies it can only store string values meaning that we&amp;#39;ll be doing a lot of JSON serialization/deserialization, for example here&amp;#39;s how we would do a &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;getAll&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;Store&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.get&lt;/span&gt; = function(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSON&lt;span class=&quot;variable&quot;&gt;.parse&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.storage&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.getItem&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;));
};

Store&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.getAll&lt;/span&gt; = function() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.bind&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And like the cookie implementation we&amp;#39;re tracking the IDs of all known objects which also adds overhead to out interactions as we need to add/remove items from the tracking object.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/local-session-storage.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;While it might seem that there&amp;#39;s quite a number of downsides for &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; over cookies when looking at offline storage options. But really &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; are much better options as they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;#39;t pollute the HTTP headers and thus increases the request/response size&lt;/li&gt;
&lt;li&gt;It&amp;#39;s designed for storing medium-sized bits of data&lt;/li&gt;
&lt;li&gt;Getting items in/out has a cleaner API, and it&amp;#39;s better designed than relying on string splitting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you&amp;#39;re needing to store only really simple data structures across browser sessions then &lt;code&gt;localStorage&lt;/code&gt; is a good option especially if the data you&amp;#39;re working with can be indexed by a single property (which would represent your key). If you&amp;#39;re only really focused on single-session cache then &lt;code&gt;sessionStorage&lt;/code&gt; can be a good option but it has a much narrower use-case and is less than ideal for offline applications.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious to see an implementation of using &lt;code&gt;localStorage&lt;/code&gt; for storing data then check out &lt;a href=&quot;http://twitter.com&quot;&gt;twitter.com&lt;/a&gt; and use your browsers dev tools to inspect &lt;code&gt;localStorage&lt;/code&gt;. If you start writing a tweet and then close the tab the contents of that tweet are stored in an item keyed &lt;code&gt;__draft_tweets__:home&lt;/code&gt; (there&amp;#39;s also a &lt;code&gt;__draft_tweets__:profile&lt;/code&gt; for doing it on your profile page). And there&amp;#39;s a bunch of other useful data stored in there. While this data isn&amp;#39;t synced across instances it&amp;#39;s good for when you use a browser and then come back later.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>offline-storage</category>
            
            <category>localStorage</category>
            
            <category>sessionStorage</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - Cookies</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-23-cookies.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-23-cookies.html</id>
            <content type="html">&lt;p&gt;In the beginning there was a simple way to store data offline in an application, or more accurately, across sessions, and that is the HTTP Cookie.&lt;/p&gt;
&lt;p&gt;Cookies are used for everything, they can &lt;a href=&quot;http://www.nczonline.net/blog/2009/05/12/cookies-and-security/&quot;&gt;track you for spammers&lt;/a&gt;, &lt;a href=&quot;http://www.troyhunt.com/2013/03/c-is-for-cookie-h-is-for-hacker.html&quot;&gt;expose your secure connections for hackers&lt;/a&gt; and they can be used for legitimate purposes which I&amp;#39;m going to look at here.&lt;/p&gt;
&lt;p&gt;The Cookie is the oldest form of offline storage available on the web, first emerging &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;in the mid 90&amp;#39;s with Netscape&lt;/a&gt;. All browsers support them so it&amp;#39;s your most easily accessible cross-browser storage solution.&lt;/p&gt;
&lt;h2&gt;Benefits of Cookies for storage&lt;/h2&gt;
&lt;p&gt;There are a few aspects to cookies that make them appealing for storing offline data so let&amp;#39;s have a look at a few of them.&lt;/p&gt;
&lt;p&gt;Since cookies are part of the HTTP Header they are included in every request that you make which can be useful if you want to sync the data that&amp;#39;s been created while the application is offline back to the server when the user reconnects. There&amp;#39;s no special AJAX request you&amp;#39;d need to create to handle the sync, any request would do, it&amp;#39;s just up to your server to handle said cookies. This has an obvious downside though, the more you store in cookies the bigger your request/response payload is going to be, so keep that in mind if you want to use cookies for storing data, particularly when limited data connections are applicable, such as on mobile devices).&lt;/p&gt;
&lt;p&gt;Expiry is another benefit that cookies bring to the table. If you&amp;#39;re storing data offline you may be wanting to get rid of it after a certain time period to prevent it from becoming stale. Cookies have an expiry date built into them when they are created, meaning that when you first set up your stored data you can determine just how long you want it to hang around. Admitted it won&amp;#39;t &amp;quot;magically&amp;quot; disappear if the user is offline at the time, but it will expire through new requests that are done.&lt;/p&gt;
&lt;h2&gt;Drawbacks of Cookies for storage&lt;/h2&gt;
&lt;p&gt;Unsurprisingly there are some drawbacks to using cookies, some pretty major ones to be exact too, the first main drawback is that cookies are simply not designed to be used this way. While it might sound great to be able to have your offline data sent to the server without you needing to do anything it really starts to come apart when you want to store much data. Cookies can only handle &lt;info in cookie size&gt; which means that they&amp;#39;re best used for little flags, maybe tracking a simple preference like which theme to use.&lt;/p&gt;
&lt;p&gt;Another major drawback is that cookies have the laxest cross-origin restrictions of all the offline storage options we&amp;#39;ll be looking at. As I mentioned earlier cookies were a common tool in the spammers toolbox and that was because you could very easy get data out of them without owning the domain, sure you still had to get &lt;strong&gt;your&lt;/strong&gt; code into the page but if your serving ads then you&amp;#39;re part of the way there already.&lt;/p&gt;
&lt;p&gt;Finally the API for cookies really does leave a lot to be desired. Don&amp;#39;t get me wrong there&amp;#39;s a myriad of wrapper APIs for the &lt;code&gt;document.cookies&lt;/code&gt; object that&amp;#39;ll help you add/remove cookies but it doesn&amp;#39;t solve the fundamental problem, &lt;strong&gt;cookies are only strings&lt;/strong&gt;, meaning if you want to store an object of some description it&amp;#39;s serializing to JSON for you. This really starts to fall over when you want to be able to &lt;em&gt;query&lt;/em&gt; the data. If you&amp;#39;ve got lots of objects you&amp;#39;ll have to get them all back out and do in-memory querying of the data.&lt;/p&gt;
&lt;h2&gt;Implementing Cookie storage&lt;/h2&gt;
&lt;p&gt;While it&amp;#39;s an exercise in &lt;a href=&quot;http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html&quot;&gt;reinventing the wheel&lt;/a&gt; we&amp;#39;ll have a look at how to create a very simple key/value storage API on top of cookies.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll be using our &lt;code&gt;FlightMode&lt;/code&gt; API and creating a new adapter which internally uses &lt;a href=&quot;http://www.quirksmode.org/js/cookies.html&quot;&gt;PPK&amp;#39;s cookie API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First things first, how are we storing our data across &lt;strong&gt;two&lt;/strong&gt; types cookies, one is going to be a cookie to track the IDs of the items in the store and the other will be storing the individual items. The reasons for this is we want to &lt;a href=&quot;http://manicode.blogspot.it/2009/08/real-world-cookie-length-limits.html&quot;&gt;avoid exceeding the limits&lt;/a&gt; of what we can store in each cookie and additionally we want to be easily able to look up values based on a key.&lt;/p&gt;
&lt;p&gt;When we create a new store we&amp;#39;ll check if there&amp;#39;s a &lt;em&gt;tracker&lt;/em&gt; cookie, if not we&amp;#39;ll create one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var CookieAdapter = function (storeName) {
    this&lt;span class=&quot;preprocessor&quot;&gt;.storeName&lt;/span&gt; = storeName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var cookie = readCookie(storeName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    if (!cookie) {
        cookie = []&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        createCookie(storeName, JSON&lt;span class=&quot;preprocessor&quot;&gt;.stringify&lt;/span&gt;(cookie))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    } else {
        cookie = JSON&lt;span class=&quot;preprocessor&quot;&gt;.parse&lt;/span&gt;(cookie)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    this&lt;span class=&quot;preprocessor&quot;&gt;.cookie&lt;/span&gt; = cookie&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now before we create an &lt;code&gt;add&lt;/code&gt; method we&amp;#39;ll need to be able to create IDs, we could do this a couple of ways, we could use the &lt;code&gt;length&lt;/code&gt; of our tracking cookie or instead I&amp;#39;m going to use a GUID, here&amp;#39;s a simple function to generate one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxx'&lt;/span&gt;.replace(&lt;span class=&quot;regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = Math.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v = c == &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt; ? r : (r &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v.toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);
    });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately all we will be storing is JSON representations of the objects that we push into our store, here&amp;#39;s how an &lt;code&gt;add&lt;/code&gt; method would come together:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;CookieAdapter&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.add&lt;/span&gt; = function(obj) {
    var &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = guid();
    createCookie(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, JSON&lt;span class=&quot;variable&quot;&gt;.stringify&lt;/span&gt;(obj));
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.cookie&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.push&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;);
    createCookie(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.storeName&lt;/span&gt;, JSON&lt;span class=&quot;variable&quot;&gt;.stringify&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.cookie&lt;/span&gt;));
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off we&amp;#39;ll generate a new GUID, then insert the record as a new cookie using that ID as the cookie name. Finally we&amp;#39;ll update tracker with the new value.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/cookie.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this part we&amp;#39;ve taken a look at the idea of using cookies as a storage model for when our application is offline. We&amp;#39;ve seen that they have the advantage of automatically being sent to our server as they are part of the HTTP header.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve also seen that there&amp;#39;s some really big warning signs that say using cookies for more than just really simple state is a bad idea, they are all just stored as strings meaning that any manipulation has to be done in memory after deserializing all the data.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious to see an implementation of cookies for storage in the wild you can check out &lt;a href=&quot;http://qantas.com.au&quot;&gt;Qantas&lt;/a&gt;, they use cookies to store information like your recent search options. There&amp;#39;s a &lt;code&gt;usercontext&lt;/code&gt; cookie that contains the information about where you are that could be wanting to start a flight from.&lt;/p&gt;
&lt;p&gt;All in all cookies are not really a good option when it comes to store data for our offline application.&lt;/p&gt;
</content>
            
            <category>offline-storage</category>
            
            <category>flight-mode</category>
            
            <category>cookies</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - Introduction</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-23-introduction.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-23-introduction.html</id>
            <content type="html">&lt;p&gt;So you&amp;#39;ve got an idea to build an amazing new web application, it&amp;#39;s going to make you tens of dollars, hundreds of cents, it&amp;#39;s all web API&amp;#39;ed and SPA. There&amp;#39;s a responsive design so it&amp;#39;s mobile friendly, all the cool stuff. But there&amp;#39;s one last piece of the puzzle you need to sort out, offline data. Your application needs to be able to store data in a way that users and still interact with it, even if it&amp;#39;s at a basic level, when they are offline.&lt;/p&gt;
&lt;p&gt;You need to handle &lt;strong&gt;Flight Mode&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Throughout this series we&amp;#39;re going to be looking at how to do this, how to do offline data storage in your web application. For convenience the series is going to be broken down across the following posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/cookies&quot;&gt;Cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/local-session-storage&quot;&gt;localStorage and sessionStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;IndexedDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/file-system&quot;&gt;FileSystem APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/libraries&quot;&gt;Useful libraries for offline storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m also going to be showing off basic implementations as we&amp;#39;re going along to give a bit of an insight into the way we can implement using these storage models.&lt;/p&gt;
&lt;p&gt;For that I&amp;#39;ve created a little library which we&amp;#39;ll be interacting via, called &lt;code&gt;FlightMode&lt;/code&gt;. This then allows you to create &lt;em&gt;adapters&lt;/em&gt; which are implementations of an underlying storage layer, here&amp;#39;s our API that we&amp;#39;ll interacting with:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
    'use strict'&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var FlightMode = function &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, adapterName)&lt;/span&gt;&lt;/span&gt; {
        if &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;!&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; instanceof FlightMode)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
            return new FlightMode&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }

        this.storeName = storeName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var adapter = FlightMode.adapters[adapterName] || FlightMode.defaultAdapter&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        this.adapter = adapter.init&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.add = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.add&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.remove = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.remove&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.get = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.get&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.getAll = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.getAll&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.getBy = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, value)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.getBy&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, value)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.destroy = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.destroy&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.adapters = []&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    global.FlightMode = FlightMode&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is also available on &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog&quot;&gt;my github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So sit back and let&amp;#39;s have a look at how to do Flight Mode capable web applications.&lt;/p&gt;
</content>
            
            <category>offline-storage</category>
            
            <category>flight-mode</category>
            
        </entry>
    
        <entry>
            <title>Firefox, jQuery and the case of the Document response</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-07-firefox-jquery-missing-datatype.html"/>
            <updated>2013-05-07T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-07-firefox-jquery-missing-datatype.html</id>
            <content type="html">&lt;p&gt;I recently tweeted that I was having this problem:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/firefox-vs-chrome-ajax-strangeness.PNG&quot; alt=&quot;Something&amp;#39;s not right&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see something&amp;#39;s not right there, Chrome is not getting anything back from my AJAX request (or at least a falsey value) where as Firefox seems to be having a &lt;code&gt;Document&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;I was stumped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why are you seeing two different responses from the exact same bit of code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So the response we&amp;#39;re getting back has a 0 content length and that was my first point of call, something must be causing the browsers to behave differently when you&amp;#39;ve not got any content.&lt;/p&gt;
&lt;p&gt;I ended up &lt;a href=&quot;https://github.com/jquery/jquery/blob/1.9-stable/src/ajax/xhr.js#L172&quot;&gt;here&lt;/a&gt; and what I found was that when this is called:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( status, status&lt;span class=&quot;variable&quot;&gt;Text&lt;/span&gt;, responses, response&lt;span class=&quot;variable&quot;&gt;Headers&lt;/span&gt; )&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;response&lt;/code&gt; object has different properties depending on the browser, in Chrome (and IE) it has a single &lt;code&gt;text&lt;/code&gt; property but in Firefox it has a &lt;code&gt;text&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;xml&lt;/code&gt; property. I think we&amp;#39;ve found our problem boss, we&amp;#39;ve somehow got different objects. But still, why are we ending up with a &lt;code&gt;document&lt;/code&gt; object not the text like Chrome?&lt;/p&gt;
&lt;p&gt;Well next we end up through &lt;a href=&quot;https://github.com/jquery/jquery/blob/1.9-stable/src/ajax.js#L735&quot;&gt;this logic&lt;/a&gt;. Here jQuery works out what &lt;code&gt;dataType&lt;/code&gt; you&amp;#39;re response is and it gives you the appropriate data.&lt;/p&gt;
&lt;p&gt;Now the astute reader may have noticed &lt;em&gt;I wasn&amp;#39;t setting a &lt;code&gt;dataType&lt;/code&gt; in my request&lt;/em&gt; which means that jQuery will have to do it&amp;#39;s &lt;em&gt;best guess&lt;/em&gt; at what to give me, and that is done through this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;// &lt;span class=&quot;type&quot;&gt;Try&lt;/span&gt; convertible &lt;span class=&quot;typedef&quot;&gt;dataTypes&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; in responses ) &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; ( !&lt;span class=&quot;title&quot;&gt;dataTypes&lt;/span&gt;[ 0 ] || &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;converters&lt;/span&gt;[ &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; + &quot; &quot; + &lt;span class=&quot;title&quot;&gt;dataTypes&lt;/span&gt;[0] ] ) {
        &lt;span class=&quot;title&quot;&gt;finalDataType&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;
    }&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !firstDataType ) {
        firstDataType = &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses a &lt;code&gt;for in&lt;/code&gt; loop of all the properties of the response and settles on the last one if it can&amp;#39;t find anything else. Guess what the last one is... &lt;code&gt;xml&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Well that makes for an easy solution, once you set a &lt;code&gt;dataType&lt;/code&gt; on your jQuery ajax settings you&amp;#39;re all good to go, which leads me to my conclusion:&lt;/p&gt;
&lt;h2&gt;If &lt;code&gt;null&lt;/code&gt; is valid from your response make sure you tell jQuery what &lt;code&gt;dataType&lt;/code&gt; you want it to be.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aaronpowell/jquery-ajax-datatype-issue&quot;&gt;There&amp;#39;s an example repository available here.&lt;/a&gt;&lt;/p&gt;
</content>
            
            <category>jquery</category>
            
        </entry>
    
        <entry>
            <title>Internet Explorer userAgents</title>
            <link href="http://www.aaron-powell.com/posts/2013-04-19-ie-useragents.html"/>
            <updated>2013-04-19T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-04-19-ie-useragents.html</id>
            <content type="html">&lt;p&gt;A few months ago I was asked if I wanted to join a new program that the Internet Explorer team was starting up called &lt;a href=&quot;http://useragents.ie&quot;&gt;IE userAgents&lt;/a&gt;. No isn&amp;#39;t related to the the Internet Explorer userAgent &lt;em&gt;string&lt;/em&gt;, or the fact that in the &lt;a href=&quot;http://www.neowin.net/news/ie11-to-appear-as-firefox-to-avoid-legacy-ie-css&quot;&gt;leaked IE11 builds it has had a makeover&lt;/a&gt;, instead it&amp;#39;s about evangelism of the web platform and shifting peoples perceptions of &lt;a href=&quot;http://browseryoulovedtohate.com/&quot;&gt;IE as a modern browser&lt;/a&gt;. It&amp;#39;s also worth noting that Internet Explorer isn&amp;#39;t the only browser that has a program like this, &lt;a href=&quot;https://reps.mozilla.org/&quot;&gt;Mozilla does too&lt;/a&gt; and I&amp;#39;d expect the other browsers do to.&lt;/p&gt;
&lt;p&gt;So what do we do? Well ultimately it doesn&amp;#39;t really change anything in my day-to-day live as a web developer, I use IE to varying degrees most days, and since getting a &lt;a href=&quot;http://www.aaron-powell.com/random/a-week-with-a-surface-pro&quot;&gt;Surface Pro&lt;/a&gt; I pretty much exclusively use it. What we (we being the userAgents) tend to do is keep an eye on keywords across the various social media touch points like Twitter. If someone&amp;#39;s complaining about a site not working in IE then we will look to reach out to them and help them resolve their problem. A similar thing goes with StackOverflow, you&amp;#39;ll find a number of the userAgents hanging around on there answering the communities questions. More often than not the problems people have with Internet Explorer often come down to misconceptions about how to approach web development, things like &lt;a href=&quot;http://css-tricks.com/browser-detection-is-bad/&quot;&gt;using userAgent sniffing instead of feature detection&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/jonathansampson/status/323606419611992065&quot;&gt;not realizing the browsers capabilities&lt;/a&gt;. These issues can present in all browsers, not just Internet Explorer, and educating people on developing for modern browsers (in particular avoiding userAgent sniffing) will ultimately benefit everyone.&lt;/p&gt;
&lt;p&gt;There is another side though, and that&amp;#39;s addressing specific Internet Explorer problems. Fellow userAgent &lt;a href=&quot;https://twitter.com/jonathansampson/&quot;&gt;Johnathan Sampson&lt;/a&gt; has been documenting IE10 specific problems as well as work around for those with the aim to be able to produce a guide on things to watch out for and how best to work around them.&lt;/p&gt;
&lt;p&gt;Over the coming months you&amp;#39;ll probably see us out and about in the community, helping to ensure that web developers are as well informed as they can be when producing applications for the modern web. If you want to get in touch with us you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/IEDevChat/ie-useragents&quot;&gt;Find us on the twitter list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/IEDevChat&quot;&gt;Ping the @IEDevChat twitter account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the #IEuserAgents hash tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One final note, please stop sniffing userAgents, I promise that I had a shower this morning ;).&lt;/p&gt;
</content>
            
            <category>internet-explorer</category>
            
            <category>web</category>
            
        </entry>
    
        <entry>
            <title>IndexedDB at Web Directions Code 13</title>
            <link href="http://www.aaron-powell.com/posts/2013-04-10-wdc13.html"/>
            <updated>2013-04-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-04-10-wdc13.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m going to be speaking at the upcoming &lt;a href=&quot;http://code13.webdirections.org/#AaronPowell&quot;&gt;Web Directions Code&lt;/a&gt; in Melbourne (2nd &amp;amp; 3rd May) on the topic of IndexedDB. I&amp;#39;m pretty stoked to be invited to speak as there&amp;#39;s a lot of heavy weights of the web development community that are going to be around and I&amp;#39;ll finally have a chance to crack out my IndexedDB talk to a larger audience.&lt;/p&gt;
&lt;p&gt;So do yourself a favor, grab a ticket and come on down!&lt;/p&gt;
</content>
            
            <category>speaking</category>
            
            <category>indexeddb</category>
            
        </entry>
    
</feed>