<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LINQ to Fail</title>
    <subtitle>.net, C#, asp.net, umbraco</subtitle>
    <link href="http://www.aaron-powell.com/atom.xml" rel="self" />
    <link href="http://www.aaron-powell.com" />
    <updated>2013-06-11T09:25:42.959Z</updated>
    <id></id>
    <author>
        <name>Aaron Powell</name>
        <email>me@aaron-powell.com</email>
    </author>

    
        <entry>
            <title>New blog, less FunnelWeb</title>
            <link href="/posts/2013-06-10-new-blog-less-funnelweb.html"/>
            <updated>2013-06-10T00:00:00.000Z</updated>
            <id>/posts/2013-06-10-new-blog-less-funnelweb.html</id>
            <content type="html">&lt;p&gt;If you&amp;#39;re not viewing this via the website (ie - you&amp;#39;re reading it in a RSS reader) you&amp;#39;re probably not going to notice but &lt;a href=&quot;http://www.aaron-powell.com&quot;&gt;I&amp;#39;ve just done a new design&lt;/a&gt; and as a side project I&amp;#39;ve also decided that it&amp;#39;s time to do a shift in the platform.&lt;/p&gt;
&lt;p&gt;You see, I&amp;#39;ve been using &lt;a href=&quot;https://github.com/funnelweblog/funnelweb&quot;&gt;FunnelWeb&lt;/a&gt; for a few years now, and it&amp;#39;s been going smoothly, sitting there chugging along doing all that I&amp;#39;ve really needed from it, but in recent months I&amp;#39;ve decided that there was something that didn&amp;#39;t really want anymore... a database.&lt;/p&gt;
&lt;p&gt;Since all the content for my blog was stored in a database I was at the mercy of my hosting provider, if something happened to them, they had hardware failures, a security breach, etc, I had no copy of my content that I could easily shunt somewhere else and get back online. Admittedly &lt;strong&gt;this has never happened&lt;/strong&gt; but still, I felt that the lack of real ownership of my content, ultimately &lt;strong&gt;I&lt;/strong&gt; didn&amp;#39;t have a copy of it... anywhere.&lt;/p&gt;
&lt;p&gt;Over the last 12 to 18 months there&amp;#39;s been a real shift in how to manage content, especially for simple sites such as what my blog is. The idea is to use a static site generator and flat files for the content input. This then results in a bunch of HTML files that can then be served out for your site, I mean really it&amp;#39;s not like the content of my blog changes all that frequently so the idea of it being constantly generated on the fly doesn&amp;#39;t really make sense. Something like FunnelWeb seems like an overkill for what I need, a series of HTML files.&lt;/p&gt;
&lt;p&gt;So what are your options? Well there&amp;#39;s a few out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a popular choice which is written in Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt; if you want to stick with a .NET base&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/&quot;&gt;DocPad&lt;/a&gt; is an implementation in Node.js, and this is what I went with (for no reason other than I used DocPad when it was v1 and wanted to see what&amp;#39;d changed).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All my content is now stored in a GitHub repo as a combination of Markdown and Eco templates (with a design from &lt;a href=&quot;http://html5up.net/strongly-typed/&quot;&gt;HTML5UP&lt;/a&gt;) and it gives me a lot of freedom about the content layout, more importantly I have copies of my content stored on my various devices, I have full history of the changes and it can be stored on any number of git hosts.&lt;/p&gt;
&lt;p&gt;So as you read this you&amp;#39;re reading something that has been served from a static HTML file generated by DocPad, rather than some content pulled from a database that is parsed on request and a HTML result generated.&lt;/p&gt;
&lt;h1&gt;The future of FunnelWeb&lt;/h1&gt;
&lt;p&gt;With the move of my blog off FunnelWeb someone is bound to ask the question about the future of FunnelWeb. In fact &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/funnelweblog/WY2VKuc1OOA&quot;&gt;the question recently came up on the mailing list&lt;/a&gt;, ultimately it comes down to that Jake and I &lt;a href=&quot;http://blog.tatham.oddie.com.au/2013/02/20/dead-vs-done/&quot;&gt;consider it done&lt;/a&gt;. I plan to keep an eye on pull requests but at present there&amp;#39;s no plan to add new features going forward.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - Libraries</title>
            <link href="/posts/2013-05-30-libraries.html"/>
            <updated>2013-05-30T00:00:00.000Z</updated>
            <id>/posts/2013-05-30-libraries.html</id>
            <content type="html">&lt;p&gt;Throughout the last few posts we&amp;#39;ve looked at the different ways which we can store data offline in browsers and then created a basic little API that will help is with doing that. The &lt;code&gt;FlightMode&lt;/code&gt; API that we&amp;#39;ve been working with was though was really quite a simplistic approach to the problem that we were presented with, ultimately the API isn&amp;#39;t meant for production use.&lt;/p&gt;
&lt;p&gt;So when looking at the different storage options what do we have if we did want to go to production? In this article we&amp;#39;re going to look at some of the different API wrappers for the different storage technologies that we&amp;#39;ve looked at.&lt;/p&gt;
&lt;h1&gt;Lawnchair&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;&lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;http://brian.io/lawnchair/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lawnchair is one of the most fully featured storage options that we&amp;#39;ve got available to us, and also what I based the concept of &lt;code&gt;FlightMode&lt;/code&gt; on. Lawnchair offers a variety of ways which you can store data, through its adapter system, you can plug in which ever storage option you want, &lt;a href=&quot;http://brian.io/lawnchair/adapters&quot;&gt;and there&amp;#39;s a few options&lt;/a&gt;. The one that doesn&amp;#39;t exist is cookies but as I pointed out &lt;a href=&quot;/flight-mode/cookies&quot;&gt;in that post&lt;/a&gt; they aren&amp;#39;t exactly the best option when it comes to storing data.&lt;/p&gt;
&lt;p&gt;Another interesting aspect of Lawnchair is it is asynchronous by default, so using adapters like &lt;code&gt;localStorage&lt;/code&gt; (which they refer to as &lt;code&gt;DOM storage&lt;/code&gt;) requires a callback argument passed to it. This is nice as it means you have a more consistent API usage when it comes to using actually asynchronous APIs like IndexedDB and FileSystem.&lt;/p&gt;
&lt;p&gt;The main drawback I find is that because Lawnchair provides such a vast array of storage options behind a consistent programming API you ultimately loose some of the power of the underlying provider. This is especially a problem with IndexedDB, you loose a lot of the power of indexes and querying against those. But if you&amp;#39;re goal is to have offline storage across as large a browser set as possible then it&amp;#39;s a price you&amp;#39;ll have to pay.&lt;/p&gt;
&lt;p&gt;Lawnchair really is a good choice if you want to be able to do storage across a lot of platforms and use feature detection to work out exactly what adapter can be used.&lt;/p&gt;
&lt;h1&gt;AmplifyJS.store&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;&lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;http://amplifyjs.com/api/store/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AmplifyJS.store like Lawnchair aims to be an API simplification of the various browser storage models but rather than trying to be a one-size-fits-all option it is more focused on just key/value storage, in particular &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The programmatic model of AmplifyJS.store is also much simpler, rather than trying to provide helper methods to do things like filtering objects it provides the minimal surface area and leaves that up to you, so providing you with a method to get all objects then you can perform your own &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc operations. This is good as it doesn&amp;#39;t try and pretend that the underlying store is something that it&amp;#39;s not.&lt;/p&gt;
&lt;p&gt;The API is also synchronous unlike Lawnchair which does have upsides that you can avoid the complications that can arise from asynchronous programming and callback hell.&lt;/p&gt;
&lt;p&gt;AmplifyJS.store is a nice API if you want something that is simple and just does the job of handling key/value storage without trying to go over the top.&lt;/p&gt;
&lt;h1&gt;PouchDB&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://pouchdb.com/&quot;&gt;&lt;a href=&quot;http://pouchdb.com/&quot;&gt;http://pouchdb.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PouchDB is one of the most powerful libraries when it comes to working with complex data stores in the browser (it also supports node.js) and is very much a specialist of storing data with IndexedDB. It&amp;#39;s an implementation of the CouchDB programming interface built on top of IndexedDB (there are providers for WebSQL, levelDB and a HTTP interface) that gives you a lot of power when it comes to interacting with the underlying data stores.&lt;/p&gt;
&lt;p&gt;Another killer feature of PouchDB is that it has the ability to sync directly to a CouchDB instance via the HTTP interface. This means that if you&amp;#39;re using CouchDB as your backend then you&amp;#39;ve got an option to easily keep your data in sync between your client and server. This is really handy, particularly in the scenario I&amp;#39;ve been trying to paint over this series of being able to maintain user state even when they are offline.&lt;/p&gt;
&lt;p&gt;The obvious drawback of this is that it&amp;#39;s really geared around CouchDB developers so the API is designed for them. That said it doesn&amp;#39;t mean that it&amp;#39;s a bad API or something that can&amp;#39;t be used without CouchDB, it definitely can and it is very good at turning the IndexedDB programming API into something that is even closer to being a full NoSQL database by exposing &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt; directly from the query API.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re looking for a very full-featured IndexedDB wrapper then PouchDB should be given a very serious look.&lt;/p&gt;
&lt;h1&gt;db.js&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;&lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;https://github.com/aaronpowell/db.js&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;db.js is a library that I wrote with the single goal of improving the programmatic API for IndexedDB. As I mentioned in my &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;article on IndexedDB&lt;/a&gt; I find that the API is very verbose and quite foreign to front-end development so I wanted to set out and improve that.&lt;/p&gt;
&lt;p&gt;The other main design goal was to make the event handling better, more specifically to utilize Promises. so that you could assign multiple handlers to events that get raised and interact with them that way. It was also so it could be interoperable with other asynchronous operations and other libraries that implement Promise APIs.&lt;/p&gt;
&lt;p&gt;Finally I wanted a really simple way which you could query the data stored, again in a manner that is familiar to JavaScript developers. For this I went with a chaining API (made popular from jQuery) so that you could do all your operations in a single chain, but I also expose the important query features built in such as querying on a specific index, only the chaining is also allowing you to query in a more expanded manner, say first on an index and then on a custom function.&lt;/p&gt;
&lt;p&gt;Ultimately this is a very thin wrapper over IndexedDB and it&amp;#39;s &lt;em&gt;only&lt;/em&gt; designed for IndexedDB usage which makes it an ideal candidate if that&amp;#39;s your only target platform and you want something very light weight.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This has been a brief overview of a number of different JavaScript libraries for working with different offline storage models, libraries from the generic abstraction all the way down to specific implementations.&lt;/p&gt;
&lt;p&gt;By no means is this an extensive list of libraries available, I&amp;#39;m sure that there&amp;#39;s dozens more out there that would be worth looking into, but ultimately this was meant to be an introduction to a few which I see a great deal of promise in.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - FileSystem API</title>
            <link href="/posts/2013-05-28-file-system.html"/>
            <updated>2013-05-28T00:00:00.000Z</updated>
            <id>/posts/2013-05-28-file-system.html</id>
            <content type="html">&lt;p&gt;The last piece of the puzzle when looking at offline storage options is a bit of a shift from what we&amp;#39;ve been looking at so far. Generally speaking we&amp;#39;ve been looking at how to store plain data, either through key/value stores or as objects. This time we&amp;#39;re going to look at the other kind of data you might want to store, files.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s two way we might want to store files, as binary data in IndexedDB or using the &lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/file-dir-sys.html&quot;&gt;FileSystem API&lt;/a&gt;. Since we looked at &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;IndexedDB last time&lt;/a&gt; (although didn&amp;#39;t cover how to store Blobs, but the principle is the same as we looked at) this time we&amp;#39;ll look at the FileSystem API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: At the time of writing the only browser supporting this API is Chrome so this is more of a &amp;quot;watch this space&amp;quot; style post than a &amp;quot;go use it now&amp;quot; one.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The idea of the FileSystem API is to give browsers the ability to persist files either temporarily or permanent. Temporary persistence means that the browser is free to decide when it wants to get ride of the file system that has created where as permanent persistence means that it will not do an automatic cleanup of the files and folders.&lt;/p&gt;
&lt;p&gt;Essentially what you end up with from the API is an ability to create files and folders in a sandboxed scenario. You don&amp;#39;t have access to the real file system of the device, so no access to &lt;code&gt;My Documents&lt;/code&gt; or &lt;code&gt;Program Files&lt;/code&gt;, just an isolated little location to work in. So this can be really quite useful if you&amp;#39;re say building a game, chances are you have a few assets that are required (audio, video, graphics) and the ability to retrieve them without web requests can be advantageous.&lt;/p&gt;
&lt;h2&gt;Benefits of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;As mentioned this API is serving a different purpose to the other storage APIs we&amp;#39;ve looked at, with the exception of IndexedDB (in a limited scenario at least) so some of the benefits are unfair comparisions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like IndexedDB the FileSystem API is an asynchronous API which has the obvious benefits when it comes to working with the kind of data it is designed for, storing large files you do ideally want that to be done asynchronously so that you aren&amp;#39;t blocking the users interactions.&lt;/p&gt;
&lt;p&gt;Another benefit is that the file system you create is completely sandboxed, meaning you don&amp;#39;t have to worry about what others may try and do to it. The only thing you need to take into account is the persistence level of the file system, as mentioned above temporary file systems are at the browsers mercy for clean-up, but it&amp;#39;s an opt-in to be using temporary persistence.&lt;/p&gt;
&lt;p&gt;As with other storage options there are size limitations on the file system that is created, the difference is (at least at the time of writing) you can specify the size of the file system you want. Chrome will then determine whether the user needs to approve this storage level and if so request permission like other device-sensitive APIs (&lt;code&gt;getUserMedia&lt;/code&gt; for example).&lt;/p&gt;
&lt;p&gt;The API itself is quite nice to work with, especially if you&amp;#39;re coming from a server background, creating new files is handled through writer streams while you have separate streams for reading files. You can store files of different types with different encodings and have a lot of flexibility to create a directory structure that suites your needs.&lt;/p&gt;
&lt;h2&gt;Drawbacks of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;The main drawback is browser support, as mentioned Chrome is the only browser at present that implements the FileSystem API and it seems that one of their main drivers is use within their extension system. While there&amp;#39;s nothing wrong with that it does mean that it&amp;#39;s not really possible to utilize this API is a cross-browser scenario. There is a &lt;a href=&quot;https://github.com/ebidel/idb.filesystem.js&quot;&gt;shim available that uses IndexedDB&lt;/a&gt; but it does require your IndexedDB implementation to support &lt;code&gt;Blob&lt;/code&gt; storage which can be a problem in Internet Explorer 10.&lt;/p&gt;
&lt;p&gt;Another drawback is the API interactions, while it&amp;#39;s not quite as verbose as working with IndexedDB the API itself partially relies on the DOM Level 3 events and partially relies on callbacks being provided. This means that in some instances you&amp;#39;ll be attaching event handlers, like when you&amp;#39;re using a &lt;code&gt;FileReader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var reader = new FileReader();
reader.onloadend = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; };
reader.readAsText(file);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And other times you&amp;#39;ll have to pass a callback:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;window&lt;span class=&quot;preprocessor&quot;&gt;.requestFileSystem&lt;/span&gt;(window&lt;span class=&quot;preprocessor&quot;&gt;.TEMPORARY&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;, onInit, onError)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;API inconsistence can be annoying for developers to work with and something that you need to be mindful of.&lt;/p&gt;
&lt;p&gt;The final drawback I see is that there&amp;#39;s no file system querying available, meaning you have to know where your files are stored, which can be a bit tricky when you&amp;#39;re working with directories in your file system. Admittedly this is a minor problem, you probably shouldn&amp;#39;t be storing files that you don&amp;#39;t know the location of in the file system but it can still be something that you&amp;#39;d want.&lt;/p&gt;
&lt;h2&gt;Implementing FileSystem storage&lt;/h2&gt;
&lt;p&gt;Unlike the other storage options I&amp;#39;ve decided to &lt;strong&gt;not&lt;/strong&gt; cover off how to implement this API because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It really wouldn&amp;#39;t fit with the &lt;code&gt;FlightMode&lt;/code&gt; API we&amp;#39;ve got so far, that&amp;#39;s designed for non-hierarchical data&lt;/li&gt;
&lt;li&gt;This is more of a &lt;em&gt;watch this space&lt;/em&gt; post than a &lt;em&gt;go use it&lt;/em&gt; one since the browser support is quite lacking&lt;/li&gt;
&lt;li&gt;There is a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/file/filesystem/&quot;&gt;great article on HTML5 Rocks&lt;/a&gt; that&amp;#39;ll do it more justice than I can give it&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The idea of being able to store files, complete files, in a structured manner on the client is a really exciting one. Admittedly there&amp;#39;s a much narrower use-case for such an API compared to other storage options we&amp;#39;ve discussed the problems that it solves are very real and will likely become more valid as more true web applications rise.&lt;/p&gt;
&lt;p&gt;The API itself is not back to work against, if it is a bit inconsistent and keep in mind that the specification is still in draft status so it may change in the future.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - IndexedDB</title>
            <link href="/posts/2013-05-27-indexeddb.html"/>
            <updated>2013-05-27T00:00:00.000Z</updated>
            <id>/posts/2013-05-27-indexeddb.html</id>
            <content type="html">&lt;p&gt;The next stop in our offline storage adventure is to look at the big daddy of offline storage, &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt;. Now I&amp;#39;ve &lt;a href=&quot;http://www.aaron-powell.com/tagged/indexeddb&quot;&gt;blogged about &lt;code&gt;IndexedDB&lt;/code&gt; in the past&lt;/a&gt; but today I want to talk about it in a bit higher level and introduce the idea of IndexedDB beyond just how to use the API.&lt;/p&gt;
&lt;p&gt;IndexedDB is the latest approach to doing offline storage in offline applications, it is designed as a replacement for the &lt;a href=&quot;http://www.w3.org/TR/webdatabase/&quot;&gt;WebSQL spec which is now discontinued&lt;/a&gt;. One of the main reasons that WebSQL was discontinued was because it was tied to a specific version of &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; which introduced some problems. Need to change something in the way the API worked you needed to change the SQLite specification first. So IndexedDB was proposed as a replacement to WebSQL and the design was not tied to any particular underlying technology (&lt;a href=&quot;http://www.aaron-powell.com/web/indexeddb-storage&quot;&gt;I&amp;#39;ve previously blogged about how different browsers store their data&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;IndexedDB is quite different to WebSQL where instead of being a dialect of the SQL language IndexedDB much more closely related to a NoSQL, or Document Database (it&amp;#39;s not true document database but I&amp;#39;m not here to argue semantics). Data is stored as the objects that they are (once they&amp;#39;ve been cloned, so you don&amp;#39;t maintain prototype chains), not as strings like we&amp;#39;ve seen in the other options.&lt;/p&gt;
&lt;h2&gt;Benefits of IndexedDB for storage&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s several important benefits of IndexedDB over the other storage options we&amp;#39;ve looked at, the first is something that&amp;#39;s a very big break from other options, asynchronicity.&lt;/p&gt;
&lt;p&gt;Where the other APIs all perform their operations in a synchronous manner IndexedDB doesn&amp;#39;t. This means that we get the benefits of having a non-blocking operation, so if you&amp;#39;re writing a large amount of data, you are on a low powered device, are experiencing high disk I/O, etc then you don&amp;#39;t want to have the user seem like your web application has crashed while you&amp;#39;re storing their data. Asynchronous operations aren&amp;#39;t exactly a new concept on the web so it&amp;#39;s nice to see that it&amp;#39;s come to the storage level.&lt;/p&gt;
&lt;p&gt;The next benefit is transactions. Anyone who&amp;#39;s done database work will know the benefit of this within an application. Once you start doing lots of read/write options, accepting user input and so on the chance of getting data that you &lt;em&gt;can&amp;#39;t&lt;/em&gt; handle is high. Transactions give you a benefit so that you can group operations and then if they fail roll them all back without getting your data store into a corrupt state. Transactions can also be read-only or read-write meaning that you can more selectively lock your data depending on the kind of operations being undertaken an limit the chance of corruption.&lt;/p&gt;
&lt;p&gt;And then there&amp;#39;s the way it handles data, where the previous options were storing data as strings, meaning we have to serialize/deserialize IndexedDB stores the data as the objects that were provided (&lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#object-store-storage-operation&quot;&gt;admittedly there&amp;#39;s a few steps it goes through first&lt;/a&gt;). This means that we can do a few smarter things on top of what we could do with strings, firstly we can create indexes. Again if you&amp;#39;re familiar with databases you&amp;#39;ll be familiar with indexes, but basically these allow us a nifty way to produce optimal query points. Say you&amp;#39;ve got people objects and you always query by &lt;code&gt;firstName&lt;/code&gt; so then you can create an index so it&amp;#39;ll optimize that kind of query. Which then leads on to the next part about handling data, querying. Since we&amp;#39;re storing full objects when we want to find data (such as with our &lt;code&gt;getAll&lt;/code&gt; method) we have our full object to then work against rather than just doing it against the full in-memory collection.&lt;/p&gt;
&lt;h2&gt;Drawbacks of IndexedDB for storage&lt;/h2&gt;
&lt;p&gt;The biggest drawback of IndexedDB is probably going to be a pretty obvious one for an API that is as new as it is and that&amp;#39;s browser support. At the time of writing the following browsers support IndexedDB unprefixed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer 10+&lt;/li&gt;
&lt;li&gt;Chrome 25+&lt;/li&gt;
&lt;li&gt;Firefox 19+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you can see that there&amp;#39;s a major limitation when we&amp;#39;re looking to go offline, the mobile space. Because of the browser support Windows Phone 8 is the only phone that supports IndexedDB natively. Luckily there&amp;#39;s hope, there&amp;#39;s a &lt;a href=&quot;http://nparashuram.com/IndexedDBShim/&quot;&gt;shim for IndexedDB&lt;/a&gt; that used WebSQL as the underlying store. This means that iOS Safari (and desktop Safari) as well as Android can have the API exposed to them.&lt;/p&gt;
&lt;p&gt;The other biggest drawback for me is the API, it&amp;#39;s excessively verbose and generally feels very foreign to front-end development. Things like &lt;code&gt;transaction&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;cursor&lt;/code&gt; are not really common concepts when you talk to front-end developers. And then there&amp;#39;s API calls like &lt;code&gt;cursor.continue()&lt;/code&gt; when you&amp;#39;re iterating through a query, while it might look innocuous the problem is that &lt;code&gt;continue&lt;/code&gt; is a reserved word in JavaScript so pretty much every editor I&amp;#39;ve used (and most linters) will raise a squiggly/warning which the ODC-coder in my flinches at, resulting in a lot of code people write like &lt;code&gt;cursor[&amp;#39;continue&amp;#39;]();&lt;/code&gt;. And on the verbosity, say you want to query a store on a non-unique index (our &lt;code&gt;firstName&lt;/code&gt; property for example), to do that you must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have an open connection to your database, &lt;code&gt;indexedDB.openDatabase(&amp;#39;my-db&amp;#39;)&lt;/code&gt;, and wait for it to succeed&lt;/li&gt;
&lt;li&gt;Open a transaction, &lt;code&gt;db.transaction(&amp;#39;my-store&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the store from the transaction, &lt;code&gt;transaction.objectStore(&amp;#39;my-store&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open an index from the store, &lt;code&gt;IDBKeyRange.only(&amp;#39;firstName&amp;#39;, &amp;#39;Aaron&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open a cursor with the index, &lt;code&gt;store.openCursor(index)&lt;/code&gt;, and wait for it to succeed&lt;/li&gt;
&lt;li&gt;In the success method of the query check to see if there was a cursor, if there was get its value and either work with it our push it to an array in the closure then call &lt;code&gt;cursor.continue()&lt;/code&gt; or if there was no cursor ignore it (no cursor is the end of the query)&lt;/li&gt;
&lt;li&gt;In the success method of the transaction process the captured values, assuming you wanted to work with them all together&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s a lot of steps to get data by a property...&lt;/p&gt;
&lt;p&gt;This then brings us to how you listen to the asynchronous actions. Generally you&amp;#39;ll see code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;request.onsuccess = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To me that feels very reminiscent of the IE6 era where events were registered by &lt;code&gt;on&amp;lt;something&amp;gt;&lt;/code&gt;. Admittedly you can use &lt;code&gt;addEventListener&lt;/code&gt; since IndexedDB uses the DOM3 event specification, but it seems to be the less-used approach in the documentation.&lt;/p&gt;
&lt;h2&gt;Implementing IndexedDB storage&lt;/h2&gt;
&lt;p&gt;When we have a look at implementing IndexedDB storage on top of our &lt;code&gt;FlightMode&lt;/code&gt; API that we&amp;#39;ve been using there&amp;#39;s an immediate problem, we&amp;#39;ve been only working with synchronous APIs up until now but as I mentioned above one of IndexedDB&amp;#39;s benefits is that it is asynchronous. Because of this we&amp;#39;ll have to approach the API usage a bit differently, first up the &lt;code&gt;FlightMode&lt;/code&gt; constructor now has two new arguments, a &lt;code&gt;migrate&lt;/code&gt; and a &lt;code&gt;ready&lt;/code&gt; callback argument. The &lt;code&gt;ready&lt;/code&gt; argument is the most important one, it will be triggered when our IndexedDB connection is open and we can start using the API. The &lt;code&gt;migrate&lt;/code&gt; callback on the other hand is used to allow you to manipulate the objectStore (such as create indexes) if required. Additionally to make it nicer to work with the asynchronous nature of the API I&amp;#39;ve leverages the &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promise/A+&lt;/a&gt; specification for handling the events via the &lt;a href=&quot;http://documentup.com/kriskowal/q/&quot;&gt;Q&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: If you&amp;#39;re not familiar with Promises have a read through &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blinking-marquee&quot;&gt;my series on exploring them with jQuery&lt;/a&gt;. It&amp;#39;s not exactly the same as Promise/A+, you can read about the differences &lt;a href=&quot;http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning: This is a &lt;strong&gt;really&lt;/strong&gt; basic IndexedDB implementation, it glances over much of the really powerful features, such as complex index queries, for information on that check out my &lt;a href=&quot;http://www.aaron-powell.com/tagged/indexeddb&quot;&gt;other IndexedDB posts&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our internal &lt;code&gt;Store&lt;/code&gt; object has got a much more complex constructor this time since there&amp;#39;s a few more things we need to do, we must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open our connection to the database&lt;/li&gt;
&lt;li&gt;Create the object store if required&lt;/li&gt;
&lt;li&gt;Notify the consumer that the API is ready&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it will look more like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var Store = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, onMigrate, onSuccess)&lt;/span&gt; {&lt;/span&gt;
    var that = this;
    var request = &lt;span class=&quot;transposed_variable&quot;&gt;indexedDB.&lt;/span&gt;open(&lt;span class=&quot;string&quot;&gt;'flight-mode'&lt;/span&gt;);
    &lt;span class=&quot;transposed_variable&quot;&gt;this.&lt;/span&gt;storeName = name;

    &lt;span class=&quot;transposed_variable&quot;&gt;request.&lt;/span&gt;onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;that.&lt;/span&gt;db = &lt;span class=&quot;transposed_variable&quot;&gt;e.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;target.&lt;/span&gt;result;

        onSuccess();
    };

    &lt;span class=&quot;transposed_variable&quot;&gt;request.&lt;/span&gt;onupgradeneeded = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        var db = &lt;span class=&quot;transposed_variable&quot;&gt;e.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;target.&lt;/span&gt;result;

        var store = &lt;span class=&quot;transposed_variable&quot;&gt;db.&lt;/span&gt;createObjectStore(name, &lt;span class=&quot;cell&quot;&gt;{ keyPath: &lt;span class=&quot;string&quot;&gt;'__id__'&lt;/span&gt;, autoIncrement: true }&lt;/span&gt;);

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (onMigrate) &lt;span class=&quot;cell&quot;&gt;{
            onMigrate(store);
        }&lt;/span&gt;
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One nice thing about IndexedDB is that it can automatically create an &lt;code&gt;id&lt;/code&gt; for the object, which I&amp;#39;ve turned on (it&amp;#39;ll be stored in the &lt;code&gt;__id__&lt;/code&gt; property) and set to &lt;code&gt;autoIncrement: true&lt;/code&gt; so that it will create a new one for each record.&lt;/p&gt;
&lt;p&gt;To use this we would do something like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ready = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlightMode(&lt;span class=&quot;string&quot;&gt;'my-store'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'indexedDB'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is a bit tedious that we&amp;#39;d have to check for the &lt;code&gt;ready&lt;/code&gt; flag before any query or risk the API not being ready to use but that is something you can program around with &lt;code&gt;Promise/A+&lt;/code&gt; pretty easily.&lt;/p&gt;
&lt;p&gt;As I mentioned in my drawbacks list the API is very verbose, but we can still make it reasonably simple to use as a consumer and hide away that verbosity. Let&amp;#39;s look at the &lt;code&gt;add&lt;/code&gt; method. Again since this is asynchronous we&amp;#39;ll need to take that into consideration. This is where I&amp;#39;m leveraging &lt;code&gt;Q&lt;/code&gt;, I&amp;#39;m creating a deferred object that you then will interact with.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Store.prototype.add = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(obj) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName, &lt;span class=&quot;string&quot;&gt;'readwrite'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    store.add(obj).onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        d.resolve(e.target.result);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First things first we need to create a new transaction, this is a &lt;strong&gt;writable&lt;/strong&gt; transaction since we&amp;#39;ll manipulate data. From said transaction we can then go out and get our object store that we&amp;#39;re writing to. Lastly we setup our deferred object from Q which we&amp;#39;ll then return so we can use the Promise. When you add a record into the object store it&amp;#39;ll fire off the &lt;code&gt;success&lt;/code&gt; event when done and an &lt;code&gt;error&lt;/code&gt; event if it was to fail. I&amp;#39;m omitting error handling here to save code, but you&amp;#39;d capture the &lt;code&gt;IDBRequest&lt;/code&gt; from the &lt;code&gt;add&lt;/code&gt; call which you attach other handlers to.&lt;/p&gt;
&lt;p&gt;When the request is successful the events &lt;em&gt;target&lt;/em&gt; will be the &lt;code&gt;id&lt;/code&gt; that was generated by IndexedDB for us. If you&amp;#39;re &lt;em&gt;not&lt;/em&gt; using auto-incrementing IDs the value will be what ever you defined as your &lt;code&gt;keyPath&lt;/code&gt; anyway. I&amp;#39;m then resolving that out via our Promise resulting in an API usage like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;store.&lt;/span&gt;add(&lt;span class=&quot;cell&quot;&gt;{ firstName: &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;, lastName: &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt; }&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Object stored with id'&lt;/span&gt;, id);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Getting a record out by it&amp;#39;s &lt;code&gt;id&lt;/code&gt; is also reasonably trivial once you understand the basis of IndexedDB, here&amp;#39;s the code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;Store.prototype.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(id) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    store.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(id).onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = e.target.result;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj) {
            d.resolve(obj);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            d.reject(&lt;span class=&quot;string&quot;&gt;'No item matching id &quot;'&lt;/span&gt; + id + &lt;span class=&quot;string&quot;&gt;'&quot; was found'&lt;/span&gt;);
        }

    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have a few things in common with the &lt;code&gt;add&lt;/code&gt; method, but this time we don&amp;#39;t specify what type of &lt;code&gt;transaction&lt;/code&gt; we want. If you &lt;em&gt;don&amp;#39;t&lt;/em&gt; specify a type it will be read-only as transactions are read-only by default.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you want to be explicit about it pass in &lt;code&gt;readonly&lt;/code&gt; as the second argument.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;add&lt;/code&gt; the &lt;code&gt;store.get&lt;/code&gt; method returns an &lt;code&gt;IDBRequest&lt;/code&gt; which we listen for events on. When the object doesn&amp;#39;t exist in our store it won&amp;#39;t raise an error as this isn&amp;#39;t really an error state, instead we&amp;#39;ll have the request succeed and the &lt;code&gt;target&lt;/code&gt; of the event will be &lt;code&gt;null&lt;/code&gt;. This means that we have to do the check inside the &lt;code&gt;success&lt;/code&gt; handler and in this case I&amp;#39;m rejecting the Promise with an error message to consumers.&lt;/p&gt;
&lt;p&gt;We end up with a usage like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;store.&lt;/span&gt;get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(obj)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Object found'&lt;/span&gt;, obj);
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(msg);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final thing that really gets the power out of IndexedDB is that we can produce indexed queries, so finding items is more optimal. To do this we need to leverage the &lt;code&gt;migrate&lt;/code&gt; callback so we can create ourselves an index for the &lt;code&gt;objectStore&lt;/code&gt;. it would look something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlightMode(&lt;span class=&quot;string&quot;&gt;'my-store'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'indexedDB'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(store)&lt;/span&gt; {&lt;/span&gt;
    store.createIndex(&lt;span class=&quot;string&quot;&gt;'firstName'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'firstName'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;migrate&lt;/code&gt; method receives an instance of our &lt;code&gt;objectStore&lt;/code&gt; which we can then create indexes from using the &lt;code&gt;createIndex&lt;/code&gt; method. This takes a &lt;code&gt;name&lt;/code&gt; for the index and a &lt;code&gt;keyPath&lt;/code&gt; for the property of the object we want to index. Optionally you can pass in some options such as whether it should be a unique index.&lt;/p&gt;
&lt;p&gt;With the index created we can then use it within the &lt;code&gt;getBy&lt;/code&gt; method, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Store.prototype.getBy = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(property, value) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transaction = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.db.transaction(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = transaction.objectStore(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.storeName);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = Q.defer();
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items = [];

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = index = store.index(property);

    index.openCursor().onsuccess = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cursor = e.target.result;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cursor) {
            items.push(cursor.value);
            cursor[&lt;span class=&quot;string&quot;&gt;'continue'&lt;/span&gt;]();
        }
    };
    transaction.oncomplete = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        d.resolve(items);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To query the &lt;code&gt;index&lt;/code&gt; we need to use a &lt;code&gt;cursor&lt;/code&gt; (and as I mentioned above the &lt;code&gt;continue&lt;/code&gt; method is annoying...). Next we listen to the &lt;code&gt;success&lt;/code&gt; event of the cursor request, extracting the items out as we navigate through the cursor.&lt;/p&gt;
&lt;p&gt;Once the cursor is exhausted the &lt;code&gt;transaction&lt;/code&gt; will be completed and then we can resolve all the items which we wanted from it.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/indexeddb.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;IndexedDB is still rather new a technology so it&amp;#39;s something that needs to be used with a certain bit of caution, if you can&amp;#39;t target only the latest browsers then it might not be possible to use it in your application.&lt;/p&gt;
&lt;p&gt;That said it is a &lt;strong&gt;really&lt;/strong&gt; powerful API, the fact that it is asynchronous is alone a reason that it should be chosen over pretty much any other storage option when storing large amounts of data.&lt;/p&gt;
&lt;p&gt;While there are drawbacks with the API design, particularly the fact that it can be very verbose &lt;em&gt;and&lt;/em&gt; very foreign to web developers it isn&amp;#39;t that difficult to hide away the bulk of the API with your own façade, using libraries like &lt;code&gt;Q&lt;/code&gt; to make it easier to interact with the API and only exposing the features that you really need in your application.&lt;/p&gt;
&lt;p&gt;Definitely keep an eye on IndexedDB in the coming years, especially when doing Windows 8 applications, as it&amp;#39;ll be more available and more important for building offline applications.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - Cookies</title>
            <link href="/posts/2013-05-23-cookies.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>/posts/2013-05-23-cookies.html</id>
            <content type="html">&lt;p&gt;In the beginning there was a simple way to store data offline in an application, or more accurately, across sessions, and that is the HTTP Cookie.&lt;/p&gt;
&lt;p&gt;Cookies are used for everything, they can &lt;a href=&quot;http://www.nczonline.net/blog/2009/05/12/cookies-and-security/&quot;&gt;track you for spammers&lt;/a&gt;, &lt;a href=&quot;http://www.troyhunt.com/2013/03/c-is-for-cookie-h-is-for-hacker.html&quot;&gt;expose your secure connections for hackers&lt;/a&gt; and they can be used for legitimate purposes which I&amp;#39;m going to look at here.&lt;/p&gt;
&lt;p&gt;The Cookie is the oldest form of offline storage available on the web, first emerging &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;in the mid 90&amp;#39;s with Netscape&lt;/a&gt;. All browsers support them so it&amp;#39;s your most easily accessible cross-browser storage solution.&lt;/p&gt;
&lt;h2&gt;Benefits of Cookies for storage&lt;/h2&gt;
&lt;p&gt;There are a few aspects to cookies that make them appealing for storing offline data so let&amp;#39;s have a look at a few of them.&lt;/p&gt;
&lt;p&gt;Since cookies are part of the HTTP Header they are included in every request that you make which can be useful if you want to sync the data that&amp;#39;s been created while the application is offline back to the server when the user reconnects. There&amp;#39;s no special AJAX request you&amp;#39;d need to create to handle the sync, any request would do, it&amp;#39;s just up to your server to handle said cookies. This has an obvious downside though, the more you store in cookies the bigger your request/response payload is going to be, so keep that in mind if you want to use cookies for storing data, particularly when limited data connections are applicable, such as on mobile devices).&lt;/p&gt;
&lt;p&gt;Expiry is another benefit that cookies bring to the table. If you&amp;#39;re storing data offline you may be wanting to get rid of it after a certain time period to prevent it from becoming stale. Cookies have an expiry date built into them when they are created, meaning that when you first set up your stored data you can determine just how long you want it to hang around. Admitted it won&amp;#39;t &amp;quot;magically&amp;quot; disappear if the user is offline at the time, but it will expire through new requests that are done.&lt;/p&gt;
&lt;h2&gt;Drawbacks of Cookies for storage&lt;/h2&gt;
&lt;p&gt;Unsurprisingly there are some drawbacks to using cookies, some pretty major ones to be exact too, the first main drawback is that cookies are simply not designed to be used this way. While it might sound great to be able to have your offline data sent to the server without you needing to do anything it really starts to come apart when you want to store much data. Cookies can only handle &lt;info in cookie size&gt; which means that they&amp;#39;re best used for little flags, maybe tracking a simple preference like which theme to use.&lt;/p&gt;
&lt;p&gt;Another major drawback is that cookies have the laxest cross-origin restrictions of all the offline storage options we&amp;#39;ll be looking at. As I mentioned earlier cookies were a common tool in the spammers toolbox and that was because you could very easy get data out of them without owning the domain, sure you still had to get &lt;strong&gt;your&lt;/strong&gt; code into the page but if your serving ads then you&amp;#39;re part of the way there already.&lt;/p&gt;
&lt;p&gt;Finally the API for cookies really does leave a lot to be desired. Don&amp;#39;t get me wrong there&amp;#39;s a myriad of wrapper APIs for the &lt;code&gt;document.cookies&lt;/code&gt; object that&amp;#39;ll help you add/remove cookies but it doesn&amp;#39;t solve the fundamental problem, &lt;strong&gt;cookies are only strings&lt;/strong&gt;, meaning if you want to store an object of some description it&amp;#39;s serializing to JSON for you. This really starts to fall over when you want to be able to &lt;em&gt;query&lt;/em&gt; the data. If you&amp;#39;ve got lots of objects you&amp;#39;ll have to get them all back out and do in-memory querying of the data.&lt;/p&gt;
&lt;h2&gt;Implementing Cookie storage&lt;/h2&gt;
&lt;p&gt;While it&amp;#39;s an exercise in &lt;a href=&quot;http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html&quot;&gt;reinventing the wheel&lt;/a&gt; we&amp;#39;ll have a look at how to create a very simple key/value storage API on top of cookies.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll be using our &lt;code&gt;FlightMode&lt;/code&gt; API and creating a new adapter which internally uses &lt;a href=&quot;http://www.quirksmode.org/js/cookies.html&quot;&gt;PPK&amp;#39;s cookie API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First things first, how are we storing our data across &lt;strong&gt;two&lt;/strong&gt; types cookies, one is going to be a cookie to track the IDs of the items in the store and the other will be storing the individual items. The reasons for this is we want to &lt;a href=&quot;http://manicode.blogspot.it/2009/08/real-world-cookie-length-limits.html&quot;&gt;avoid exceeding the limits&lt;/a&gt; of what we can store in each cookie and additionally we want to be easily able to look up values based on a key.&lt;/p&gt;
&lt;p&gt;When we create a new store we&amp;#39;ll check if there&amp;#39;s a &lt;em&gt;tracker&lt;/em&gt; cookie, if not we&amp;#39;ll create one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var CookieAdapter = function (storeName) {
    this&lt;span class=&quot;preprocessor&quot;&gt;.storeName&lt;/span&gt; = storeName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var cookie = readCookie(storeName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    if (!cookie) {
        cookie = []&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        createCookie(storeName, JSON&lt;span class=&quot;preprocessor&quot;&gt;.stringify&lt;/span&gt;(cookie))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    } else {
        cookie = JSON&lt;span class=&quot;preprocessor&quot;&gt;.parse&lt;/span&gt;(cookie)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    this&lt;span class=&quot;preprocessor&quot;&gt;.cookie&lt;/span&gt; = cookie&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now before we create an &lt;code&gt;add&lt;/code&gt; method we&amp;#39;ll need to be able to create IDs, we could do this a couple of ways, we could use the &lt;code&gt;length&lt;/code&gt; of our tracking cookie or instead I&amp;#39;m going to use a GUID, here&amp;#39;s a simple function to generate one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;guid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxx'&lt;/span&gt;.replace(&lt;span class=&quot;regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r = Math.random() * &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v = c == &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt; ? r : (r &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v.toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);
    });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately all we will be storing is JSON representations of the objects that we push into our store, here&amp;#39;s how an &lt;code&gt;add&lt;/code&gt; method would come together:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;CookieAdapter&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.add&lt;/span&gt; = function(obj) {
    var &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = guid();
    createCookie(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, JSON&lt;span class=&quot;variable&quot;&gt;.stringify&lt;/span&gt;(obj));
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.cookie&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.push&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;);
    createCookie(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.storeName&lt;/span&gt;, JSON&lt;span class=&quot;variable&quot;&gt;.stringify&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.cookie&lt;/span&gt;));
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off we&amp;#39;ll generate a new GUID, then insert the record as a new cookie using that ID as the cookie name. Finally we&amp;#39;ll update tracker with the new value.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/cookie.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this part we&amp;#39;ve taken a look at the idea of using cookies as a storage model for when our application is offline. We&amp;#39;ve seen that they have the advantage of automatically being sent to our server as they are part of the HTTP header.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve also seen that there&amp;#39;s some really big warning signs that say using cookies for more than just really simple state is a bad idea, they are all just stored as strings meaning that any manipulation has to be done in memory after deserializing all the data.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious to see an implementation of cookies for storage in the wild you can check out &lt;a href=&quot;http://qantas.com.au&quot;&gt;Qantas&lt;/a&gt;, they use cookies to store information like your recent search options. There&amp;#39;s a &lt;code&gt;usercontext&lt;/code&gt; cookie that contains the information about where you are that could be wanting to start a flight from.&lt;/p&gt;
&lt;p&gt;All in all cookies are not really a good option when it comes to store data for our offline application.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - Introduction</title>
            <link href="/posts/2013-05-23-introduction.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>/posts/2013-05-23-introduction.html</id>
            <content type="html">&lt;p&gt;So you&amp;#39;ve got an idea to build an amazing new web application, it&amp;#39;s going to make you tens of dollars, hundreds of cents, it&amp;#39;s all web API&amp;#39;ed and SPA. There&amp;#39;s a responsive design so it&amp;#39;s mobile friendly, all the cool stuff. But there&amp;#39;s one last piece of the puzzle you need to sort out, offline data. Your application needs to be able to store data in a way that users and still interact with it, even if it&amp;#39;s at a basic level, when they are offline.&lt;/p&gt;
&lt;p&gt;You need to handle &lt;strong&gt;Flight Mode&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Throughout this series we&amp;#39;re going to be looking at how to do this, how to do offline data storage in your web application. For convenience the series is going to be broken down across the following posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/cookies&quot;&gt;Cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/local-session-storage&quot;&gt;localStorage and sessionStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;IndexedDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/file-system&quot;&gt;FileSystem APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/flight-mode/libraries&quot;&gt;Useful libraries for offline storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m also going to be showing off basic implementations as we&amp;#39;re going along to give a bit of an insight into the way we can implement using these storage models.&lt;/p&gt;
&lt;p&gt;For that I&amp;#39;ve created a little library which we&amp;#39;ll be interacting via, called &lt;code&gt;FlightMode&lt;/code&gt;. This then allows you to create &lt;em&gt;adapters&lt;/em&gt; which are implementations of an underlying storage layer, here&amp;#39;s our API that we&amp;#39;ll interacting with:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
    'use strict'&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var FlightMode = function &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, adapterName)&lt;/span&gt;&lt;/span&gt; {
        if &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;!&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; instanceof FlightMode)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
            return new FlightMode&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }

        this.storeName = storeName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var adapter = FlightMode.adapters[adapterName] || FlightMode.defaultAdapter&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        this.adapter = adapter.init&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.add = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.add&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.remove = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.remove&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.get = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.get&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.getAll = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.getAll&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.getBy = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, value)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.getBy&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, value)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.prototype.destroy = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        return this.adapter.destroy&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    FlightMode.adapters = []&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    global.FlightMode = FlightMode&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is also available on &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog&quot;&gt;my github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So sit back and let&amp;#39;s have a look at how to do Flight Mode capable web applications.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Flight Mode - local and session storage</title>
            <link href="/posts/2013-05-23-local-session-storage.html"/>
            <updated>2013-05-23T00:00:00.000Z</updated>
            <id>/posts/2013-05-23-local-session-storage.html</id>
            <content type="html">&lt;p&gt;Last time we looked a &lt;a href=&quot;/flight-mode/cookies&quot;&gt;using cookies to store offline data&lt;/a&gt; and we also saw that there&amp;#39;s a number of problems with that approach. So let&amp;#39;s move forward, let&amp;#39;s look at what our next option would be when it comes to offline storage in our multi-dollar application.&lt;/p&gt;
&lt;p&gt;Today it&amp;#39;s time for the next level of offline storage, &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; which is sometimes referred to as &lt;code&gt;DOM storage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to talk about both of these options together as they share a lot of similarities.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a bit of a misconception around these two APIs, people often refer to them as &lt;em&gt;HTML5 storage&lt;/em&gt; but in truth they have been available much longer than that, in fact they can be used in &lt;a href=&quot;http://caniuse.com/#search=localstorage&quot;&gt;browsers as low as IE8&lt;/a&gt; which is not much of a HTML5 browser, and there&amp;#39;s a lot more interesting storage options for &amp;quot;HTML5 browsers&amp;quot; that we&amp;#39;ll look at later.&lt;/p&gt;
&lt;h2&gt;Benefits of local/session storage&lt;/h2&gt;
&lt;p&gt;Like cookies &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; store key/value pairs of data, but they have a much nicer API to work with than you find when trying to work with cookies; it has explicit methods for getting, setting and removing data.&lt;/p&gt;
&lt;p&gt;I keep referring to these two storage models together as they share a common root API but they are different. &lt;code&gt;sessionStorage&lt;/code&gt; is designed for storing data for the life of a browser session (until the window/tab is closed). This can make it ideal if you&amp;#39;ve got data that you want to temporarily store until the user leaves your application. But this obviously makes it a dangerous one to use in our scenario, because if the browser was to crash while the user is offline you&amp;#39;re likely to loose the data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt; on the other hand is a long-term persistent storage, meaning that the data will stay between browser restarts, making it much more ideal for persisting data when we&amp;#39;re offline.&lt;/p&gt;
&lt;p&gt;But ultimately you need to select the right one for the right scenario so there are valid use cases for both and it&amp;#39;s good to have that option.&lt;/p&gt;
&lt;h2&gt;Drawbacks of local/session storage&lt;/h2&gt;
&lt;p&gt;Like cookies these stores are only capable of storing string values. This has the obvious drawback of being difficult to use if we&amp;#39;ve got a complex object that we&amp;#39;re going to want to store for our application state.&lt;/p&gt;
&lt;p&gt;The other main drawback is that there&amp;#39;s no &amp;quot;magic sync to server&amp;quot; like with cookies. The data stored in either of these stores is &lt;strong&gt;only&lt;/strong&gt; available to the client application, if you need to get the data back up to the server then you&amp;#39;ll need to perform your own data sync. Now that does have the benefit of not having extra data added to a HTTP request so it&amp;#39;s both a pro and a con.&lt;/p&gt;
&lt;h2&gt;Implementing local/session storage&lt;/h2&gt;
&lt;p&gt;While it&amp;#39;s an exercise in &lt;a href=&quot;http://www.codinghorror.com/blog/2009/02/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels.html&quot;&gt;reinventing the wheel&lt;/a&gt; we&amp;#39;ll have a look at how to create a very simple key/value storage API on top of both &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll be using our &lt;code&gt;FlightMode&lt;/code&gt; API and creating two new adapters, one for each of the stores.&lt;/p&gt;
&lt;p&gt;As I mentioned they have a nice API to work with and we get data in/out like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;localStorage.setItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'bar&lt;/span&gt;');
var item = localStorage.getItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;');
localStorage.removeItem(&lt;span class=&quot;attribute&quot;&gt;'foo&lt;/span&gt;');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But like cookies it can only store string values meaning that we&amp;#39;ll be doing a lot of JSON serialization/deserialization, for example here&amp;#39;s how we would do a &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;getAll&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;Store&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.get&lt;/span&gt; = function(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JSON&lt;span class=&quot;variable&quot;&gt;.parse&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.storage&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.getItem&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;));
};

Store&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.getAll&lt;/span&gt; = function() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.store&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.bind&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And like the cookie implementation we&amp;#39;re tracking the IDs of all known objects which also adds overhead to out interactions as we need to add/remove items from the tracking object.&lt;/p&gt;
&lt;p&gt;You can find the rest of the implementation &lt;a href=&quot;https://github.com/aaronpowell/flight-mode-blog/src/adapters/local-session-storage.js&quot;&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;While it might seem that there&amp;#39;s quite a number of downsides for &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; over cookies when looking at offline storage options. But really &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; are much better options as they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;#39;t pollute the HTTP headers and thus increases the request/response size&lt;/li&gt;
&lt;li&gt;It&amp;#39;s designed for storing medium-sized bits of data&lt;/li&gt;
&lt;li&gt;Getting items in/out has a cleaner API, and it&amp;#39;s better designed than relying on string splitting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you&amp;#39;re needing to store only really simple data structures across browser sessions then &lt;code&gt;localStorage&lt;/code&gt; is a good option especially if the data you&amp;#39;re working with can be indexed by a single property (which would represent your key). If you&amp;#39;re only really focused on single-session cache then &lt;code&gt;sessionStorage&lt;/code&gt; can be a good option but it has a much narrower use-case and is less than ideal for offline applications.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious to see an implementation of using &lt;code&gt;localStorage&lt;/code&gt; for storing data then check out &lt;a href=&quot;http://twitter.com&quot;&gt;twitter.com&lt;/a&gt; and use your browsers dev tools to inspect &lt;code&gt;localStorage&lt;/code&gt;. If you start writing a tweet and then close the tab the contents of that tweet are stored in an item keyed &lt;code&gt;__draft_tweets__:home&lt;/code&gt; (there&amp;#39;s also a &lt;code&gt;__draft_tweets__:profile&lt;/code&gt; for doing it on your profile page). And there&amp;#39;s a bunch of other useful data stored in there. While this data isn&amp;#39;t synced across instances it&amp;#39;s good for when you use a browser and then come back later.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Firefox, jQuery and the case of the Document response</title>
            <link href="/posts/2013-05-07-firefox-jquery-missing-datatype.html"/>
            <updated>2013-05-07T00:00:00.000Z</updated>
            <id>/posts/2013-05-07-firefox-jquery-missing-datatype.html</id>
            <content type="html">&lt;p&gt;I recently tweeted that I was having this problem:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/firefox-vs-chrome-ajax-strangeness.PNG&quot; alt=&quot;Something&amp;#39;s not right&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see something&amp;#39;s not right there, Chrome is not getting anything back from my AJAX request (or at least a falsey value) where as Firefox seems to be having a &lt;code&gt;Document&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;I was stumped.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why are you seeing two different responses from the exact same bit of code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So the response we&amp;#39;re getting back has a 0 content length and that was my first point of call, something must be causing the browsers to behave differently when you&amp;#39;ve not got any content.&lt;/p&gt;
&lt;p&gt;I ended up &lt;a href=&quot;https://github.com/jquery/jquery/blob/1.9-stable/src/ajax/xhr.js#L172&quot;&gt;here&lt;/a&gt; and what I found was that when this is called:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( status, status&lt;span class=&quot;variable&quot;&gt;Text&lt;/span&gt;, responses, response&lt;span class=&quot;variable&quot;&gt;Headers&lt;/span&gt; )&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;response&lt;/code&gt; object has different properties depending on the browser, in Chrome (and IE) it has a single &lt;code&gt;text&lt;/code&gt; property but in Firefox it has a &lt;code&gt;text&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;xml&lt;/code&gt; property. I think we&amp;#39;ve found our problem boss, we&amp;#39;ve somehow got different objects. But still, why are we ending up with a &lt;code&gt;document&lt;/code&gt; object not the text like Chrome?&lt;/p&gt;
&lt;p&gt;Well next we end up through &lt;a href=&quot;https://github.com/jquery/jquery/blob/1.9-stable/src/ajax.js#L735&quot;&gt;this logic&lt;/a&gt;. Here jQuery works out what &lt;code&gt;dataType&lt;/code&gt; you&amp;#39;re response is and it gives you the appropriate data.&lt;/p&gt;
&lt;p&gt;Now the astute reader may have noticed &lt;em&gt;I wasn&amp;#39;t setting a &lt;code&gt;dataType&lt;/code&gt; in my request&lt;/em&gt; which means that jQuery will have to do it&amp;#39;s &lt;em&gt;best guess&lt;/em&gt; at what to give me, and that is done through this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;// &lt;span class=&quot;type&quot;&gt;Try&lt;/span&gt; convertible &lt;span class=&quot;typedef&quot;&gt;dataTypes&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; in responses ) &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; ( !&lt;span class=&quot;title&quot;&gt;dataTypes&lt;/span&gt;[ 0 ] || &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;converters&lt;/span&gt;[ &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; + &quot; &quot; + &lt;span class=&quot;title&quot;&gt;dataTypes&lt;/span&gt;[0] ] ) {
        &lt;span class=&quot;title&quot;&gt;finalDataType&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;
    }&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !firstDataType ) {
        firstDataType = &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses a &lt;code&gt;for in&lt;/code&gt; loop of all the properties of the response and settles on the last one if it can&amp;#39;t find anything else. Guess what the last one is... &lt;code&gt;xml&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Well that makes for an easy solution, once you set a &lt;code&gt;dataType&lt;/code&gt; on your jQuery ajax settings you&amp;#39;re all good to go, which leads me to my conclusion:&lt;/p&gt;
&lt;h2&gt;If &lt;code&gt;null&lt;/code&gt; is valid from your response make sure you tell jQuery what &lt;code&gt;dataType&lt;/code&gt; you want it to be.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aaronpowell/jquery-ajax-datatype-issue&quot;&gt;There&amp;#39;s an example repository available here.&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Internet Explorer userAgents</title>
            <link href="/posts/2013-04-19-ie-useragents.html"/>
            <updated>2013-04-19T00:00:00.000Z</updated>
            <id>/posts/2013-04-19-ie-useragents.html</id>
            <content type="html">&lt;p&gt;A few months ago I was asked if I wanted to join a new program that the Internet Explorer team was starting up called &lt;a href=&quot;http://useragents.ie&quot;&gt;IE userAgents&lt;/a&gt;. No isn&amp;#39;t related to the the Internet Explorer userAgent &lt;em&gt;string&lt;/em&gt;, or the fact that in the &lt;a href=&quot;http://www.neowin.net/news/ie11-to-appear-as-firefox-to-avoid-legacy-ie-css&quot;&gt;leaked IE11 builds it has had a makeover&lt;/a&gt;, instead it&amp;#39;s about evangelism of the web platform and shifting peoples perceptions of &lt;a href=&quot;http://browseryoulovedtohate.com/&quot;&gt;IE as a modern browser&lt;/a&gt;. It&amp;#39;s also worth noting that Internet Explorer isn&amp;#39;t the only browser that has a program like this, &lt;a href=&quot;https://reps.mozilla.org/&quot;&gt;Mozilla does too&lt;/a&gt; and I&amp;#39;d expect the other browsers do to.&lt;/p&gt;
&lt;p&gt;So what do we do? Well ultimately it doesn&amp;#39;t really change anything in my day-to-day live as a web developer, I use IE to varying degrees most days, and since getting a &lt;a href=&quot;http://www.aaron-powell.com/random/a-week-with-a-surface-pro&quot;&gt;Surface Pro&lt;/a&gt; I pretty much exclusively use it. What we (we being the userAgents) tend to do is keep an eye on keywords across the various social media touch points like Twitter. If someone&amp;#39;s complaining about a site not working in IE then we will look to reach out to them and help them resolve their problem. A similar thing goes with StackOverflow, you&amp;#39;ll find a number of the userAgents hanging around on there answering the communities questions. More often than not the problems people have with Internet Explorer often come down to misconceptions about how to approach web development, things like &lt;a href=&quot;http://css-tricks.com/browser-detection-is-bad/&quot;&gt;using userAgent sniffing instead of feature detection&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/jonathansampson/status/323606419611992065&quot;&gt;not realizing the browsers capabilities&lt;/a&gt;. These issues can present in all browsers, not just Internet Explorer, and educating people on developing for modern browsers (in particular avoiding userAgent sniffing) will ultimately benefit everyone.&lt;/p&gt;
&lt;p&gt;There is another side though, and that&amp;#39;s addressing specific Internet Explorer problems. Fellow userAgent &lt;a href=&quot;https://twitter.com/jonathansampson/&quot;&gt;Johnathan Sampson&lt;/a&gt; has been documenting IE10 specific problems as well as work around for those with the aim to be able to produce a guide on things to watch out for and how best to work around them.&lt;/p&gt;
&lt;p&gt;Over the coming months you&amp;#39;ll probably see us out and about in the community, helping to ensure that web developers are as well informed as they can be when producing applications for the modern web. If you want to get in touch with us you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/IEDevChat/ie-useragents&quot;&gt;Find us on the twitter list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/IEDevChat&quot;&gt;Ping the @IEDevChat twitter account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the #IEuserAgents hash tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One final note, please stop sniffing userAgents, I promise that I had a shower this morning ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IndexedDB at Web Directions Code 13</title>
            <link href="/posts/2013-04-10-wdc13.html"/>
            <updated>2013-04-10T00:00:00.000Z</updated>
            <id>/posts/2013-04-10-wdc13.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m going to be speaking at the upcoming &lt;a href=&quot;http://code13.webdirections.org/#AaronPowell&quot;&gt;Web Directions Code&lt;/a&gt; in Melbourne (2nd &amp;amp; 3rd May) on the topic of IndexedDB. I&amp;#39;m pretty stoked to be invited to speak as there&amp;#39;s a lot of heavy weights of the web development community that are going to be around and I&amp;#39;ll finally have a chance to crack out my IndexedDB talk to a larger audience.&lt;/p&gt;
&lt;p&gt;So do yourself a favor, grab a ticket and come on down!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>KnockoutJS plugin for Glimpse</title>
            <link href="/posts/2013-03-25-knockoutjs.html"/>
            <updated>2013-03-25T00:00:00.000Z</updated>
            <id>/posts/2013-03-25-knockoutjs.html</id>
            <content type="html">&lt;p&gt;When I was recently in Seattle for MVP Summit I was hanging out with &lt;a href=&quot;http://twitter.com/anthony_vdh&quot;&gt;Anthony van der Hoorn&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/nikmd23&quot;&gt;Nik Molnar&lt;/a&gt; of the &lt;a href=&quot;http://getglimpse.com&quot;&gt;Glimpse&lt;/a&gt; fame. Anthony, knowing my passion for JavaScript has been bouncing ideas around the client-side code for Glimpse for a while and wanting me to have a crack at building a client-side plugin for them. Well it seemed like the perfect time to get to it and not just because I had both the guys on hand to bug when things went wrong ;).&lt;/p&gt;
&lt;p&gt;Having decided to write a plugin I next had to work out what the plugin would be for and I settled on &lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt;. While I&amp;#39;ll admit that I&amp;#39;ve had a &lt;a href=&quot;http://www.aaron-powell.com/tagged/knockoutjs&quot;&gt;love-hate relationship with Knockout&lt;/a&gt; the problem space it&amp;#39;s in is very real and it does solve it very well, but when you have Knockout on a page it can be very difficult to work out where you&amp;#39;re actually using it and what&amp;#39;s actually happening in it.&lt;/p&gt;
&lt;p&gt;To that end I&amp;#39;ve started a &lt;a href=&quot;http://nuget.org/packages/glimpse-knockout&quot;&gt;Glimpse KnockoutJS&lt;/a&gt; plugin. It&amp;#39;s still in its early days (and I&amp;#39;d love feedback &lt;em&gt;hint hint&lt;/em&gt;) but so far what it aims to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show you what ViewModels are on a page and what DOM element(s) they are bound to&lt;ul&gt;
&lt;li&gt;The idea here is that you can see if a ViewModel is reused across multiple DOM elements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Capture new ViewModels being added to the page and show them in the plugin&lt;ul&gt;
&lt;li&gt;This can be handy if you&amp;#39;re creating ViewModels in popups or from Ajax requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show you the properties of the ViewModels, and if they are observable properties track their changes&lt;ul&gt;
&lt;li&gt;This should work for any kind of observable, be it a simple observable, an observable array or a computed observable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like I said this is a very early release, but it&amp;#39;s more I wanted it out there and to get feedback ASAP to work out what to focus on. I&amp;#39;ve only done some basic testing so if you&amp;#39;re using it on large Knockout VM&amp;#39;s I&amp;#39;d like to hear how it goes.&lt;/p&gt;
&lt;p&gt;The code is all &lt;a href=&quot;https://github.com/aaronpowell/glimpse-knockout&quot;&gt;up on GitHub&lt;/a&gt; so feel free to send PR&amp;#39;s or raise issues so I can get to work on it!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>A week with a Surface Pro</title>
            <link href="/posts/2013-03-10-a-week-with-a-surface-pro.html"/>
            <updated>2013-03-10T00:00:00.000Z</updated>
            <id>/posts/2013-03-10-a-week-with-a-surface-pro.html</id>
            <content type="html">&lt;p&gt;So a little a week ago I got myself a Surface Pro and I decided that I&amp;#39;d share my experience with it thus far (because that&amp;#39;s what you do with a new device right? :P).&lt;/p&gt;
&lt;p&gt;For the record my current Windows machine is a Sony Vaio Z which is about 2.5 years old and I have an iPad 2, so these were the two devices that my Surface Pro was looking to &lt;em&gt;replace&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;The screen&lt;/h1&gt;
&lt;p&gt;First off let&amp;#39;s talk about the screen, it&amp;#39;s the first thing you&amp;#39;ll see after all, and I must say it&amp;#39;s a very nice screen to work with indeed. The Surface Pro is a 1920 x 1080 resolution on a 10.6&amp;quot; panel so it&amp;#39;s a pretty high pixel density packed in there. Sure it&amp;#39;s no retina display but it&amp;#39;s pretty well up there.&lt;/p&gt;
&lt;p&gt;When in Metro-mode things fit nicely, IE looks really good on it and the few apps that I have installed/used (mail, calendar, twitter, facebook, etc) do fit in with the design theme nicely. Most importantly they look sharp under the display.&lt;/p&gt;
&lt;p&gt;Desktop-mode is a little different. By default the Surface Pro has the font size turned up to 150% meaning that many windows look just plain odd, toolbars don&amp;#39;t fit in properly, consoles look weird, etc. One of the first tasks I undertook on Desktop was to flick it down to 125%. This seems to make everything scale to a much better size while still keeping things large enough to be touch friendly.&lt;/p&gt;
&lt;p&gt;The only big worry people have with a touch-enabled screen is fingerprints. Currently I&amp;#39;m looking at the screen while typing the post out and I can honestly say I don&amp;#39;t notice any. When the screen is off and I&amp;#39;m in direct sunlight I&amp;#39;ll notice them but in that regard I&amp;#39;m not really using my screen anyway.&lt;/p&gt;
&lt;h1&gt;Interacting with it&lt;/h1&gt;
&lt;p&gt;When I bought the Surface Pro I wanted to get a keyboard. Having had an iPad for 18 months now one thing that annoys me about it is that I don&amp;#39;t have a keyboard with it. Sure I could grab my Bluetooth keyboard or get one of the many cases that have one built in but really they don&amp;#39;t seem to fit the ascetics of the device.&lt;/p&gt;
&lt;p&gt;So you&amp;#39;ve got two choices for the Surface series, a Touch Cover or a Type Cover. I strongly recommend that before you choose one you do some typing with both and see what you feel most comfortable with. When I was getting the device I went to test both keyboards by firing up Word and having a type around. To me the Type Cover just felt a lot nicer to work with, the Touch Cover lacked the tactile sensation that many years on a computer have trained me to want and I found that the low-profile that the keyboard runs meant I missed keys too often as I didn&amp;#39;t judge the spacing.&lt;/p&gt;
&lt;p&gt;The Type Cover reminds me of my Vaio keyboard, it&amp;#39;s got a good tactile response, a good key size and most importantly a good sound as you press the keys!&lt;/p&gt;
&lt;p&gt;What I have found about the keyboard is that it can miss keys; I&amp;#39;m not sure if this is something with my device or not but every now and then I seem to have it miss a few keystrokes that I make, meaning you have to go back over what you&amp;#39;re doing. I&amp;#39;d expect this is some driver-level issue that hopefully will clear up as the device matures but since it&amp;#39;s hard to reproduce I can imagine it&amp;#39;ll be a slow fix.&lt;/p&gt;
&lt;p&gt;One of the main reasons I wanted a Pro over a RT was the pen support. The Pro comes with a pen and I must say it&amp;#39;s really fantastic to use. So far I haven&amp;#39;t been in enough meetings that I&amp;#39;ve actually had to crack it out but I&amp;#39;ve done some doodling in various apps and it just works as you&amp;#39;d expect it to work. I&amp;#39;ll often find myself using the pen in Desktop mode instead of the trackpad or my finger because of its precision.&lt;/p&gt;
&lt;p&gt;And that leads me onto the trackpad in the cover, or more generally, &lt;em&gt;mouse&lt;/em&gt; based input. I can probably count the number of times on one hand that I&amp;#39;ve used the trackpad that comes in the cover, simply put I find it redundant (for the record I primarily use the trackpad on my laptop over an external mouse so it&amp;#39;s not an anti-trackpad stance or anything). With the screen as close as it is it&amp;#39;s very easy, and natural, to just reach out and touch it to move around. Even writing this I&amp;#39;ve been touching around the screen to move the cursor back/forth because it&amp;#39;s quicker than the trackpad or arrow keys.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been really surprised at how quickly I&amp;#39;ve adapted to having a touch-enabled device in front of me and how quickly I got use to being about to touch the screen to perform my actions. This has gotten to the point where I now expect all my screens to be touch enabled which has made me feel rather silly when I&amp;#39;ve poked the screens on my work machine or when I spent a good 30 seconds poking my Vaio screen and getting angry that the window wasn&amp;#39;t exiting.&lt;/p&gt;
&lt;p&gt;Desktop mode is really the only place that is let down by touch, particularly Visual Studio.&lt;/p&gt;
&lt;h1&gt;Coding&lt;/h1&gt;
&lt;p&gt;Since I&amp;#39;m a coder it was natural that Visual Studio was going to wind up on here at some point. So far I haven&amp;#39;t done anything really intensive in the form of development using the Surface Pro, more just opening projects and browsing around the source. But Visual Studio really isn&amp;#39;t designed for touch. I&amp;#39;d like to be able to &amp;quot;flick up&amp;quot; and have the source code scroll but alas it&amp;#39;s not to be, instead I find myself fighting with the small scrollbars and often reverting to the pen as it&amp;#39;s much better a finer point interaction.&lt;/p&gt;
&lt;p&gt;As I said I haven&amp;#39;t done much in the way of coding on the device so I can&amp;#39;t really comment on the overall performance of it, but I think it&amp;#39;s safe to say that I don&amp;#39;t see this as a replacement for a high-end developer laptop, instead I see this as something I can grab out on the train for a quick bit of coding, especially if I&amp;#39;m focusing on something non-Visual Studio based.&lt;/p&gt;
&lt;h1&gt;Metro or Desktop&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve been trying to keep my usage of this device very much in the Metro word, I have my mail setup using the Mail app, calendars are available through Calendar, etc. Generally speaking this is working well for me.&lt;/p&gt;
&lt;p&gt;Mail is a bit up-and-down with it&amp;#39;s interactions. I&amp;#39;ve come from an Outlook background and as someone who tries to maintain a &amp;quot;zero inbox&amp;quot; but ultimately found  this was something that fell by the wayside with the Mail client. Part of the reason was it is a bit of a hassle to move mail around into folders and part of it is because it seems less valuable to do so, since the entire mailbox isn&amp;#39;t down it&amp;#39;s easier to have one folder to search rather than rummaging around (but this is more of a general mail organization shift than specific to Windows 8 Mail).&lt;/p&gt;
&lt;p&gt;That said I do have Outlook installed as well and generally speaking I have both running. I like Outlook for its familiar but the UI isn&amp;#39;t really touch optimized so it can be a bit clunky. Mail is nicer for touch but the integration with the GAL is really terrible and I can&amp;#39;t for the life of me work out how to add someone as a contact, even if they emailed me first (again where Outlook is much more useful).&lt;/p&gt;
&lt;p&gt;IE works fantastically in Metro, the new shell is really slick and the interactions are really nicely designed. So far I haven&amp;#39;t even installed another browser, I&amp;#39;ve found no need (maybe once I start doing some more web dev I&amp;#39;ll switch since &lt;a href=&quot;http://www.aaron-powell.com/web-dev/ie10-console-thoughts&quot;&gt;I&amp;#39;ve got some opinions on the dev tools&lt;/a&gt;). The only real frustrating thing is there&amp;#39;s no plugin support so I can&amp;#39;t get my password manager integrated which makes the workflow of hitting somewhere I need to log into a pain.&lt;/p&gt;
&lt;p&gt;For twitter I&amp;#39;ve been trying a variety of clients. Currently I&amp;#39;m using MetroTwit for Win8, I tried Rowi but I really didn&amp;#39;t like it (no replies in snapped, full screen has a really strange use of space and a few other issues).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been trying out a few different RSS readers, found a paid one called &lt;a href=&quot;http://apps.microsoft.com/webpdp/app/d03199c9-8e08-469a-bda1-7963099840cc&quot;&gt;Feed Reader&lt;/a&gt; that has a trial version that seems pretty good.&lt;/p&gt;
&lt;p&gt;So mostly I find myself in Metro mode as there&amp;#39;s been very little that I need in common usage to go to desktop. That said if it wasn&amp;#39;t for Snapped mode then it might be a different story. I&amp;#39;ve pretty much always got twitter snapped, ticking away. The screen resolution is more than enough to visible space to have a good browser window/email window/etc and having twitter running there too.&lt;/p&gt;
&lt;h1&gt;Overall&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve been using Win8 on my laptop for over 12 months now and had always enjoyed it but now having a touch-enabled device to use it on I&amp;#39;ve really seen it in a whole new light. The Metro UI makes a lot more sense in a touch environment, the platform integration (sharing, search, etc) is so smooth.&lt;/p&gt;
&lt;p&gt;The Surface Pro is great device, if you&amp;#39;re looking for something &lt;em&gt;reasonably&lt;/em&gt; portable I&amp;#39;d recommend looking at it. It&amp;#39;s a little bit on the heavy side for me to consider it a direct iPad replacement, but compared to even my Vaio Z (which is really light) it&amp;#39;s a much more portable device.&lt;/p&gt;
&lt;p&gt;One thing&amp;#39;s for sure, my next developer laptop is going to be touch-enabled, I&amp;#39;m finding it surprisingly advantageous.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Hello mathy</title>
            <link href="/posts/2013-01-22-hello-mathy.html"/>
            <updated>2013-01-22T00:00:00.000Z</updated>
            <id>/posts/2013-01-22-hello-mathy.html</id>
            <content type="html">&lt;p&gt;In a previous post I &lt;a href=&quot;http://www.aaron-powell.com/javascript/thoughts-on-typescript&quot;&gt;laid out some thoughts on TypeScript&lt;/a&gt; which came from building a little library in TypeScript called &lt;a href=&quot;https://github.com/aaronpowell/mathy.js&quot;&gt;mathy&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Hello mathy&lt;/h1&gt;
&lt;p&gt;A few months ago I came to a realisation... I&amp;#39;ve never written a parser, at least not a language parser. Sure I&amp;#39;ve parsed CSVs, sure I&amp;#39;ve parsed XML, but never a language.&lt;/p&gt;
&lt;p&gt;Part of what I&amp;#39;ve been working on recently has needed a formula parser to deal with chemical formulas, basically we need to be able to take this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;Y = &lt;span class=&quot;value&quot;&gt;(Q * &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) / (Q * &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another member of the team wrote a C# parser for this so I decided in my spare time to implement something similar in JavaScript and hence mathy was born.&lt;/p&gt;
&lt;p&gt;The usage is something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var engine = new mathy.&lt;span class=&quot;variable&quot;&gt;Engine&lt;/span&gt;(&lt;span class=&quot;tuple&quot;&gt;{ name: 'a', derivation: '&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;' }&lt;/span&gt;);
var result = engine.process();
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(result[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty simple, create a new engine, provide it some parameters and process it. You can also install mathy as a global Node.js module and get a new command that will do math for you:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;0.2823343025520444gt;&lt;/span&gt; npm install -g mathy
&lt;span class=&quot;variable&quot;&gt;0.2823343025520444gt;&lt;/span&gt; mathy &lt;span class=&quot;string&quot;&gt;&quot;1 + 2&quot;&lt;/span&gt; /&lt;span class=&quot;regexp&quot;&gt;/output's 3&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Smarter than your average shell&lt;/h1&gt;
&lt;p&gt;So that example isn&amp;#39;t particularly useful, open up PowerShell (or Terminal) and you can easily just type &lt;code&gt;1 + 2&lt;/code&gt; and get a result. Where mathy does get a bit more useful is when you want a more complex formula parsed, something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var engine = new mathy.&lt;span class=&quot;variable&quot;&gt;Engine&lt;/span&gt;(&lt;span class=&quot;tuple&quot;&gt;{ name: 'a', derivation: '&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ^ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;' }&lt;/span&gt;);
var result = engine.process();
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(result[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;to&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re doing a &lt;em&gt;to the power of&lt;/em&gt; (using &lt;code&gt;^&lt;/code&gt;), you can also do negative powers like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; engine = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mathy.Engine({ name: &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'1 + 2 * 3 - 1 * 10 ^ (-1) / 5'&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Yes negative powers need to be parenthesis wrapped, that&amp;#39;s pretty standard notation if you look around at how to handle it.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Smarter calculations&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s think back to the example that I said we&amp;#39;re parsing in our application:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;Y = &lt;span class=&quot;value&quot;&gt;(Q * &lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) / (Q * &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well &lt;code&gt;Q&lt;/code&gt; isn&amp;#39;t exactly a number so that isn&amp;#39;t a mathematical equation yet, but that&amp;#39;s cool, mathy will allow you to provide multiple parameters, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var engine = new mathy.&lt;span class=&quot;class&quot;&gt;Engine&lt;/span&gt;(
    { &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;derivation:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'(Q * 0.12 + 100) / (Q * 15)'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;result:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; },
    { &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Q'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;derivation:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'10'&lt;/span&gt; }
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when mathy runs it&amp;#39;ll hit the &lt;code&gt;Q&lt;/code&gt; in the formula and then attempt to resolve that. It&amp;#39;ll realise that it&amp;#39;s not a numerical value so it&amp;#39;ll then see if it was another parameter, then it&amp;#39;ll find the value of &lt;code&gt;10&lt;/code&gt; and be able to insert that.&lt;/p&gt;
&lt;p&gt;Where this is more useful is when you want to late-add a parameter, meaning you can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var engine = new mathy.&lt;span class=&quot;class&quot;&gt;Engine&lt;/span&gt;(
    { &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;derivation:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'(Q * 0.12 + 100) / (Q * 15)'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;result:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; }
);
engine.add({ &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Q'&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;derivation:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'10'&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you can create the engine and then ask the user for the inputs, adding them as they are provided.&lt;/p&gt;
&lt;h1&gt;Decisions, decisions&lt;/h1&gt;
&lt;p&gt;While it&amp;#39;s all well and good to be able to process parameterised numerical equations where mathy starts to get into its own is where it diverges and becomes a bit more of a standalone language; the main feature for this is decisions.&lt;/p&gt;
&lt;p&gt;A decision is a binary condition statement, a tuple, and it&amp;#39;s used like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; engine = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mathy.Engine(
    { name: &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'1 &amp;gt; 2 ? -1 : 42'&lt;/span&gt; }
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The statement on the left will be evaluated as a true/false statement (it only supports &lt;a href=&quot;http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/&quot;&gt;JavaScript strict-equal equality&lt;/a&gt;, but you only need to use &lt;code&gt;==&lt;/code&gt; not &lt;code&gt;===&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;And of course all parts (well, except the operator) can be parameters:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;tag&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;mathy&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.Engine&lt;/span&gt;(
    &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'b == c ? d : e'&lt;/span&gt;, result: true }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'42'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'d'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'d'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'42'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'e'&lt;/span&gt;, derivation: &lt;span class=&quot;string&quot;&gt;'-1'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
);&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Real-world usage&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s all well and good to make this simple little language/parser for chemical formulas but is there any other real reason you&amp;#39;d do this?&lt;/p&gt;
&lt;p&gt;My main thoughts on this would be in a shopping cart scenario. Since &lt;a href=&quot;http://minimaxir.com/2012/10/client-side-validation-is-hard-mode/&quot;&gt;you shouldn&amp;#39;t trust the client&lt;/a&gt; if you&amp;#39;re doing any kind of calculation of the cart you&amp;#39;ll be wanting to do that server side. But what if you want to have some benefits? Say you have a threshold before they get free shipping, or a discount for certain number of purchases, preferred customer, etc.&lt;/p&gt;
&lt;p&gt;Often times these can be expressed as a simple formula rather a series of statements in code. Values like &amp;#39;is this customer a preferred customer&amp;#39; can be provided as a parameter value to the formula which then does the calculation.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So there we have it, a very simple little JavaScript formula engine called &lt;a href=&quot;https://github.com/aaronpowell/mathy.js&quot;&gt;mathy&lt;/a&gt; which has some nice little features to do slightly smarter formulas.&lt;/p&gt;
&lt;p&gt;Check out the tests folder for more complex usage examples.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Should Internet Explorer be killed?</title>
            <link href="/posts/2013-01-17-should-internet-explorer-be-killed.html"/>
            <updated>2013-01-17T00:00:00.000Z</updated>
            <id>/posts/2013-01-17-should-internet-explorer-be-killed.html</id>
            <content type="html">&lt;h1&gt;Warning - Opinions&lt;/h1&gt;
&lt;p&gt;In my &lt;a href=&quot;http://www.aaron-powell.com/web-dev/ie10-console-thoughts&quot;&gt;last post&lt;/a&gt; I explored some of the issues I have with the IE developer tools that basically prevents me from using IE as a primary browser for web development.&lt;/p&gt;
&lt;p&gt;While writing that post it got me thinking about how &lt;em&gt;I&lt;/em&gt; would go about solving those problems if I was in charge of the project.&lt;/p&gt;
&lt;p&gt;And yes, I am an IE MVP but from my perspective an important role of an MVP is to ask the hard questions and not just be another &lt;a href=&quot;http://en.wikipedia.org/wiki/Sycophancy&quot;&gt;Yes Man&lt;/a&gt;, how do I think the IE team will react to this post? Well if I stop blogging and &lt;a href=&quot;http://twitter.com/slace&quot;&gt;tweeting&lt;/a&gt; send help :P.&lt;/p&gt;
&lt;h2&gt;Defining IE&lt;/h2&gt;
&lt;p&gt;First off I want to define what I mean when I&amp;#39;m talking about Internet Explorer is the browser &amp;quot;shell&amp;quot; that you see. It&amp;#39;s what you get when you click the blue E. What it is &lt;strong&gt;not&lt;/strong&gt; is Trident or Chakra, which are the rendering engine and JavaScript engine respectively. While these are core components that make up IE they are not where I think the problem lies.&lt;/p&gt;
&lt;h2&gt;Serving two masters&lt;/h2&gt;
&lt;p&gt;So the main problem I see with IE is that it is trying to serve two masters, you have the personal computing user who uses IE. This is your parents, your grandparents, your next door neighbor, the person with a Surface RT. Generally speaking these are the people who are surfing the internet for personal reasons. These people don&amp;#39;t care about legacy stuff, they don&amp;#39;t care that your internal time scheduling application only works in IE6 running quirks mode. They just know that they are wanting to go to a page and it works.&lt;/p&gt;
&lt;p&gt;And then you have enterprise. Like it or not IE in the enterprise is really popular for a few reasons. There&amp;#39;s the obvious &amp;quot;it never got updated&amp;quot; reason which is why IE6 inside of big companies is still popular. But more than that IE from a sys admin point of view can be &lt;em&gt;really&lt;/em&gt; stripped down. You can change some crazy things in the registry to restrict users (like &lt;a href=&quot;http://stackoverflow.com/questions/944323/disable-internet-explorer-8-developer-tools&quot;&gt;disabling the developer tools&lt;/a&gt;). A lot of sys admins like this as it helps create a controlled environment, a &amp;quot;more secure&amp;quot; environment &lt;em&gt;cough cough&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;The web developer&lt;/h2&gt;
&lt;p&gt;Then there&amp;#39;s the web developer. They are people like you and me who want to build applications that make use of the latest technologies, web sockets, webgl, offline, CSS3 animations, etc. We don&amp;#39;t give a damn about legacy browsers, that&amp;#39;s not be our target market, we just want browsers to be pushing forward and implementing these emerging standards rather than waiting until they are approved by W3C which can take a very long time.&lt;/p&gt;
&lt;h2&gt;IE est mort, vive IE!&lt;/h2&gt;
&lt;p&gt;Now to the crux of this post, the death of Internet Explorer. As I see it you have two real audiences of IE, the people who want it to &lt;em&gt;just work&lt;/em&gt; and the people who want it controlled. These are two &lt;em&gt;very&lt;/em&gt; distinct groups and the latter impacts the former.&lt;/p&gt;
&lt;p&gt;The biggest problem that IE faces when trying to go to a faster release cycle is stability. What a lot of people don&amp;#39;t realise about IE is just how embedded in the OS the parts (Trident in particular) are. Trident, or MSHTML.dll, is really heavily used within Windows itself to do different things. Take the help system, it actually runs a web control which displays the content. This web control is powered by Trident. It&amp;#39;s also why you can&amp;#39;t have multiple IE versions installed at the same time, the assemblies would clash.&lt;/p&gt;
&lt;p&gt;And then you have Windows 8 which we see an even greater level of embedding of Trident and Chakra than before so they can power the HTML/JavaScript Windows 8 applications. While this isn&amp;#39;t running IE it&amp;#39;s running the same MSHTML.dll and other components.&lt;/p&gt;
&lt;p&gt;So adopting a Chrome &amp;quot;release every other day&amp;quot; model would be a really risky venture, you need to be making sure that the releases don&amp;#39;t suddenly break anything (remember &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_SharedView&quot;&gt;SharedView&lt;/a&gt;? It stopped working when you installed IE9...).&lt;/p&gt;
&lt;p&gt;At the same time tying IE feature releases to major versions in the way it&amp;#39;s been done recently it equally risky. Sure IE has improved its release schedule over the past few years, but there was still ~18 months between RTM of IE9 and RTM of IE10 (and that was only IE10 for Windows 8, Windows 7 is still in preview). Even though there are preview releases in this time, calling something a preview actively discourages its use day-to-day (and often the preview release was lacking important features). Also think about how the web changed over that time period, WebSQL was the offline storage proposed. It was then scrapped for IndexedDB (which itself changed in spec several times &lt;a href=&quot;http://www.aaron-powell.com/indexeddb-changed-ie10pp6&quot;&gt;causing breaks&lt;/a&gt;, imagine if an RTM had been released not a preview then). CSS animations went through a good amount of change with what arguments could get passed to the different transforms. This like this can be hard to react with a slow release cycle.&lt;/p&gt;
&lt;p&gt;Then there&amp;#39;s the backwards compatibility story. I think it&amp;#39;s quite amusing that there&amp;#39;s ways you can &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85&quot;&gt;force IE to run as a specific version&lt;/a&gt;.aspx) or that &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/07/06/html5-parsing-in-ie10.aspx&quot;&gt;removing conditional comments&lt;/a&gt; had people really upset. Radical changes just aren&amp;#39;t possible in a brand with as much history as IE has.&lt;/p&gt;
&lt;p&gt;And finally, while they say that any press is good press IE has copped &lt;em&gt;a lot&lt;/em&gt; of negative press in recent years. Even Microsoft is actively trying to &lt;a href=&quot;http://browseryoulovedtohate.com/&quot;&gt;embrace the hate&lt;/a&gt; they receive, most notably &lt;a href=&quot;http://browseryoulovedtohate.com/post/36807433541/do-you-know-this-guy&quot;&gt;through this video&lt;/a&gt;. But all of this is too late in my opinion, the damage is done.&lt;/p&gt;
&lt;p&gt;And this is why I think IE can&amp;#39;t survive.&lt;/p&gt;
&lt;h2&gt;From the ashes&lt;/h2&gt;
&lt;p&gt;As I&amp;#39;ve said I think Trident and Chakra are &lt;strong&gt;great&lt;/strong&gt; engines, and from this we could get a new direction. Essentially what I want to see is a fork of the IE project, an entirely new browser using the same underlying rendering and JavaScript engine, it&amp;#39;s just in a new outfit. Let&amp;#39;s call this mythical browser John (bah, &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;naming things is hard&lt;/a&gt; and we can&amp;#39;t go with &lt;a href=&quot;http://en.wikipedia.org/wiki/Microsoft_Bob&quot;&gt;Bob&lt;/a&gt; again can we...).&lt;/p&gt;
&lt;p&gt;So you go and install John, it installs into Program Files just like any other stand-alone piece of software and has everything it needs kept in there. John has a new UI shell so we can start revisiting things which &lt;a href=&quot;http://www.aaron-powell.com/web-dev/ie10-console-thoughts&quot;&gt;really need an overhaul&lt;/a&gt;, but most importantly John can be updated without it impacting the core components of Windows which rely on HTML/JavaScript engines, particularly on Windows 8. John is a new take on how you would build a browser using the lessons learn in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_Explorer_1&quot;&gt;last 12 years&lt;/a&gt; so it &lt;strong&gt;can&lt;/strong&gt; be more agile and it &lt;strong&gt;can&lt;/strong&gt; have new experimental features added behind flags.&lt;/p&gt;
&lt;h2&gt;So that&amp;#39;s it, no more IE?&lt;/h2&gt;
&lt;p&gt;Completely end of life-ing a product that has such a long rich heritage that IE has is not exactly a realistic proposal. Instead I think that IE would live on in the manner which it is currently doing. IE maintains its current release cycle, 12 - 18 months between &amp;quot;major versions&amp;quot; which sees the addition of new features and the removal of old ones. But instead of being the driver of Microsoft&amp;#39;s web platform it becomes a consumer, a consumer of features introduced into John that are then accepted as stable, are tested for impacts to the whole Windows ecosystem, have registry settings to disable them, and so forth.&lt;/p&gt;
&lt;p&gt;This means people are able to keep with a brand they have known for over a decade, it&amp;#39;s predictable to them and it just works but at the same time Microsoft is freed from the limitations of having a 12+ year legacy behind them with the pros and cons that brings to the table.&lt;/p&gt;
&lt;h2&gt;The fractured web&lt;/h2&gt;
&lt;p&gt;Chances are you&amp;#39;re reading this and thinking &amp;quot;doesn&amp;#39;t this just fracture the browser market even more?&amp;quot;. The answer is &amp;quot;to a point yes&amp;quot;, but realistically it&amp;#39;s not that much different to the fracturing that we already have. The two main browser vendors besides Microsoft both have &amp;quot;bleeding edge&amp;quot; versions, Firefox has &lt;a href=&quot;http://www.mozilla.org/en-US/firefox/aurora/&quot;&gt;Aurora&lt;/a&gt; and Chrome has &lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/canary.html&quot;&gt;Canary&lt;/a&gt; and essentially what I&amp;#39;m proposing is a Microsoft version of that, just under a new brand name.&lt;/p&gt;
&lt;p&gt;As we&amp;#39;re losing OldIE from the supported stack of our browsers we&amp;#39;re finding the idea of a fractured web to be less and less relevant. When targeting IE10, Firefox stable and Chrome stable it&amp;#39;s not particularly hard to get things looking the same and working the same. The only times it really become noticeable is when you&amp;#39;re doing some really whacky edge-case stuff and this is something that is only solvable by getting to a single browser, and that didn&amp;#39;t work out so well last time.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not a perfect solution, but it does lessen the attitude of &amp;quot;modern browsers... and IE&amp;quot; that I commonly hear at user groups (despite IE10 trumping other browsers in some areas).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I think the role of IE on the Windows platform needs to change. IE needs to be released from the shackles of Windows integration in the way it has been.&lt;/p&gt;
&lt;p&gt;Unfortunately I can&amp;#39;t see this happening while still maintaining an IE branding. The only alternative is the John approach, an entirely new browser, using the same stack, that can act as a conduit to IE and taking on the other browsers in the fast-evolving web that is today.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Making the Internet Explorer JavaScript tools better, again</title>
            <link href="/posts/2013-01-14-ie10-console-thoughts.html"/>
            <updated>2013-01-14T00:00:00.000Z</updated>
            <id>/posts/2013-01-14-ie10-console-thoughts.html</id>
            <content type="html">&lt;p&gt;Almost two years ago I wrote a blog post about &lt;a href=&quot;http://www.aaron-powell.com/web-dev/ie9-console-thoughts&quot;&gt;what I saw as problems in the IE9 developer tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then we&amp;#39;ve had IE10 released as well so I decided to revisit the post and see how have the development tools changed/improved since IE9.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log&lt;/code&gt; still sucks&lt;ul&gt;
&lt;li&gt;I made a point that when it comes to using &lt;code&gt;console.log&lt;/code&gt; (and the derivatives) you often found that you got &lt;code&gt;[object Object]&lt;/code&gt;. Well this is still the case, and most commonly you&amp;#39;ll see it if you&amp;#39;re using the console as a scratch pad to test things out. There are two solutions to this, one is to override the &lt;code&gt;console.log&lt;/code&gt; method in a similar was as I mentioned with &lt;a href=&quot;http://www.aaron-powell.com/ie-9-console-assert&quot;&gt;&amp;quot;fixing&amp;quot; console.assert&lt;/a&gt; or alternatively override the &lt;code&gt;toString&lt;/code&gt; method of your object, since the reason you get &lt;code&gt;[object Object]&lt;/code&gt; is because all it uses the &lt;code&gt;toString&lt;/code&gt; method of the object (I override it to just do &lt;code&gt;JSON.stringify(this)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You still can&amp;#39;t clear the console without right-clicking or using &lt;code&gt;console.clear()&lt;/code&gt;, there&amp;#39;s a toolbar option that &lt;em&gt;looks&lt;/em&gt; like it would do it but nope, that&amp;#39;s a cache clear button&lt;/li&gt;
&lt;li&gt;Related to the above point I really wish the Ctrl + R and/or F5 would work when input is focused on the dev tools, and by work I mean reload the page. Yes I &lt;em&gt;get&lt;/em&gt; why they don&amp;#39;t work, the dev tools are running in a separate process, that&amp;#39;d be a nice thing to fix too...&lt;/li&gt;
&lt;li&gt;The list of provided User Agents is &lt;strong&gt;really&lt;/strong&gt; good (&lt;a href=&quot;http://www.aaron-powell.com/web/ie10-user-agent-switching&quot;&gt;as I said before&lt;/a&gt;) and the ability to save your own custom User Agents is nice&lt;/li&gt;
&lt;li&gt;Why is the DOM explorer still a static node list? C&amp;#39;mon this is 2013 guys and you make me refresh the DOM explorer when ever the DOM changes so I can inspect the current page state? Yes again I&amp;#39;m sure this is related to the fact that it&amp;#39;s a separate process but it&amp;#39;s just painful, especially if you&amp;#39;re working on a KnockoutJS UI or a SPA&lt;/li&gt;
&lt;li&gt;I would love an IndexedDB inspector like Chrome has in their dev tools, and since it&amp;#39;s &lt;a href=&quot;http://www.aaron-powell.com/web/indexeddb-storage&quot;&gt;build on ESE&lt;/a&gt; I would think that this shouldn&amp;#39;t be that big a deal, ESE is pretty well documented&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;So...&lt;/h1&gt;
&lt;p&gt;It looks like the IE dev tools saw very little love &lt;em&gt;in the form of features&lt;/em&gt; with the IE10 release. I&amp;#39;ll admit that I didn&amp;#39;t really talk about the network/profile tab as I find these are not the features that you use all that often. If I want to inspect network traffic then I&amp;#39;m going to use Fiddler, I see no point in use &lt;em&gt;any&lt;/em&gt; of the browsers tools for that. As for the profile tab, it&amp;#39;s good but I don&amp;#39;t often find myself trying to analyse the JavaScript performance of a page (and when I do it&amp;#39;s generally find that it&amp;#39;s Knockout or jQuery that&amp;#39;s causing the performance problems).&lt;/p&gt;
&lt;p&gt;The last few years has seen the IE team put in the hard yards to get IE back to being a highly competitive browser in the current market for users so I hope that they start focusing on making IE a competitive browser for the web developer.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>The problem with Assert.IsTrue</title>
            <link href="/posts/2013-01-08-the-problem-with-assert-istrue.html"/>
            <updated>2013-01-08T00:00:00.000Z</updated>
            <id>/posts/2013-01-08-the-problem-with-assert-istrue.html</id>
            <content type="html">&lt;p&gt;Have you ever seen a unit test that looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public void SomeTest()
{
    var foo = new Bar()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var result = foo&lt;span class=&quot;preprocessor&quot;&gt;.GetStuff&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    Assert&lt;span class=&quot;preprocessor&quot;&gt;.IsTrue&lt;/span&gt;(result&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;() == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you know what&amp;#39;s wrong with this test? I&amp;#39;ll give you a clue, the developer use &lt;code&gt;Assert.IsTrue&lt;/code&gt; and by doing so &lt;strong&gt;they&amp;#39;ve made a bad test&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I see a lot of tests which contain &lt;code&gt;Assert.IsTrue&lt;/code&gt; and 9 times out of 10 I cringe when I see it. Why? Those 9 times they have performed some kind of equality test and by doing so are making it difficult to determine what a failure is when it happens and more importantly you&amp;#39;ve introduced logic into your assertion so you&amp;#39;ve stopped asserting against values and started asserting against an operation.&lt;/p&gt;
&lt;p&gt;Take the above test and what happens when the equality is false? Well obviously the test has failed but all your test runner will be able to tell you is just that, the equality is false. Is this because the number of results is less than 1? Greater than 1? How many are we out by? What is the actual value?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this information is lost by the equality statement!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a tip, use &lt;code&gt;Assert.AreEqual&lt;/code&gt;! Every testing framework I&amp;#39;ve worked with has this method, or something that is pretty much that. Then you can write this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public void SomeTest()
{
    var foo = new Bar()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var result = foo&lt;span class=&quot;preprocessor&quot;&gt;.GetStuff&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    Assert&lt;span class=&quot;preprocessor&quot;&gt;.AreEqual&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, result&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when your test fails the runner will tell you something along the lines of &lt;code&gt;Expected 1 but got 0&lt;/code&gt;. This makes it much easier to work out what&amp;#39;s wrong and fix your test.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That said&lt;/em&gt; if you&amp;#39;re asserting against a Boolean property/result/etc then by all means use &lt;code&gt;Assert.IsTrue&lt;/code&gt; or &lt;code&gt;Assert.IsFalse&lt;/code&gt; (don&amp;#39;t &lt;code&gt;Assert.IsTrue(!somethingFalse)&lt;/code&gt;, that&amp;#39;s just stupid).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR - Don&amp;#39;t use &lt;code&gt;Assert.IsTrue&lt;/code&gt; when there are specialised assertion methods to do it for you, they&amp;#39;ll give you better feedback when a test fails.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/rant&amp;gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Thoughts on TypeScript</title>
            <link href="/posts/2013-01-07-thoughts-on-typescript.html"/>
            <updated>2013-01-07T00:00:00.000Z</updated>
            <id>/posts/2013-01-07-thoughts-on-typescript.html</id>
            <content type="html">&lt;p&gt;When &lt;a href=&quot;http://typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; was announced I was pretty skeptical of it. I&amp;#39;ve been doing JavaScript development for a while now, I know many of the ins and outs of JavaScript development and I&amp;#39;ve never seen any problem with the syntax or the lack of type system.&lt;/p&gt;
&lt;p&gt;But like a good skeptic I wanted to reserve my opinion until I had a chance to actually use it. This was the same approach &lt;a href=&quot;http://www.aaron-powell.com/javascript/postman&quot;&gt;which I took with CoffeeScript&lt;/a&gt;, you don&amp;#39;t really know something until you&amp;#39;ve made something with it (and for the record I wasn&amp;#39;t particularly fussed by CoffeeScript).&lt;/p&gt;
&lt;p&gt;Well I decided to do this, I wrote a small library called &lt;a href=&quot;https://github.com/aaronpowell/mathy.js&quot;&gt;mathy&lt;/a&gt; and I wanted to share some of my thoughts from having made something with it. Keep in mind this is only a small library so it&amp;#39;s not exactly extensive, but I feel it&amp;#39;s a good start.&lt;/p&gt;
&lt;h1&gt;Project background&lt;/h1&gt;
&lt;p&gt;I just want to clarify a few things about how I did this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used Sublime Text 2 as my editor, not Visual Studio&lt;/li&gt;
&lt;li&gt;This is written primarily as a Node.js package but I also want it to work in the browser&lt;/li&gt;
&lt;li&gt;The repository should contain the TypeScript source &lt;em&gt;and&lt;/em&gt; the output JavaScript, consumers shouldn&amp;#39;t be forced to use TypeScript if they don&amp;#39;t want to&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The good&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The compiler errors can be nice, caught a few spelling errors and API usage errors through them which I wouldn&amp;#39;t have caught until runtime/while the tests were being executed&lt;/li&gt;
&lt;li&gt;Debugging is fine. Even though I&amp;#39;m not debugging the TypeScript (since it&amp;#39;s run as the compiled JavaScript through Node.js I don&amp;#39;t have source map debugging) the JavaScript looks close enough to my original code that it&amp;#39;s pretty obvious as to where I&amp;#39;m at&lt;/li&gt;
&lt;li&gt;Being able to create modules using a keyword is good, save a bunch of boilerplate guff&lt;/li&gt;
&lt;li&gt;I&amp;#39;ve used a class for part of the API which is very handy and easy to use, but most importantly it’s syntactically simple&lt;/li&gt;
&lt;li&gt;It doesn&amp;#39;t try and stop me from writing any of the funky stuff that I actually want to write ;)&lt;/li&gt;
&lt;li&gt;Fat-arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; is really sweet, I’d never really got into CoffeeScript enough to have built anything much but I can see why those guys rave about it&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The bad&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If you&amp;#39;re not using Visual Studio it’s kind of a pain, Sublime Text 2 only has syntax highlighting support so you don&amp;#39;t exactly get much benefit, no intellisense or anything&lt;/li&gt;
&lt;li&gt;The fact you can&amp;#39;t programmatically use the compiler sucks. Even though TypeScript&amp;#39;s compiler is available as a Node.js package you have to execute the compiler yourself and pass in the input. It&amp;#39;d be nicer if you could just &lt;code&gt;require(&amp;#39;typescript&amp;#39;)&lt;/code&gt; instead of what I have to do in the &lt;a href=&quot;https://github.com/aaronpowell/mathy.js/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The way modules are generated can be a real pain if you&amp;#39;re trying to target the browser &lt;em&gt;and&lt;/em&gt; Node.js. If you want to go with CommonJS the internal modules they generate create a global variable to store your object in, but that won’t work in Node.js as the variable isn&amp;#39;t exported. If you make it a public module it assumes there is a public “exports” object to attach to which is fine in Node.js but sucks in the browser! I had to have a shitty implementation to get it working that assumes in the browser there is the &lt;code&gt;exports&lt;/code&gt; object. You can use the AMD support but it forces you to use RequireJS (or CurlJS or any other loader). It&amp;#39;d be nicer if there was optional AMD support, like how I have it done in &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;db.js&lt;/a&gt;, so you can have something that will export as a AMD &lt;em&gt;if AMDs are available&lt;/em&gt;, otherwise just be a global object&lt;/li&gt;
&lt;li&gt;There seems to be no way to plug a definition file into Node.js so all my unit tests are just written in plain JS which really sucks as I changed the API and didn&amp;#39;t realise until every single unit test failed&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The really shitty&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The generated code isn&amp;#39;t in a closure scope unless you use a module, which in turn the closure scope is really ridged (particularly from the CommonJS module point of view) which means&lt;ul&gt;
&lt;li&gt;You can&amp;#39;t create interfaces in a function&lt;/li&gt;
&lt;li&gt;You can&amp;#39;t create classes in a function&lt;/li&gt;
&lt;li&gt;You can&amp;#39;t create modules in a function (ok, I kind of get this one)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So with all that considered what&amp;#39;s my thoughts so far? I actually do like it, particularly the way the compiler can catch some stupid mistakes. I&amp;#39;d like to try it on a much bigger project, particularly something in Visual Studio to see how well that goes, especially by having things like intellisense working.&lt;/p&gt;
&lt;p&gt;The biggest problem I see is the module system, it&amp;#39;s really shit &lt;em&gt;if you don&amp;#39;t do exactly as Microsoft does&lt;/em&gt;, and here in lies the problem. If you want to load in third party libraries it really doesn&amp;#39;t work too nicely, you end up with &lt;code&gt;any&lt;/code&gt; type declarations around which really isn&amp;#39;t helpful.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2012, a year in review</title>
            <link href="/posts/2013-01-06-2012-a-year-in-review.html"/>
            <updated>2013-01-06T00:00:00.000Z</updated>
            <id>/posts/2013-01-06-2012-a-year-in-review.html</id>
            <content type="html">&lt;p&gt;It&amp;#39;s about that time again but I&amp;#39;m a bit delayed in getting it done, it&amp;#39;s time for a year in review!&lt;/p&gt;
&lt;p&gt;Backing up from the busy year that was &lt;a href=&quot;http://www.aaron-powell.com/2011-a-year-in-review&quot;&gt;2011&lt;/a&gt; I...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kept my MVP and got to go to the MVP summit in Seattle&lt;/li&gt;
&lt;li&gt;Went to the first &lt;a href=&quot;http://codemania.co.nz/&quot;&gt;Codemania&lt;/a&gt; in NZ to hang out with some of the guys in the NZ dev community&lt;/li&gt;
&lt;li&gt;Had first &lt;a href=&quot;http://pluralsight.com/training&quot;&gt;Pluralsight&lt;/a&gt; course on &lt;a href=&quot;http://pluralsight.com/training/Courses/TableOfContents/javascript-design-patterns&quot;&gt;JavaScript design patterns&lt;/a&gt; was published&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dl.dropbox.com/u/9397363/Talks/2012%20-%20All%20you%20need%20is%20a%20browser/index.html#title&quot;&gt;Played the hipster dev&lt;/a&gt; for my DDD Melbourne talk this year, taking about developing everything in the browser, which was based off a &lt;a href=&quot;http://whatdoyouknow.webdirections.org/videos/hosted-all-the-things&quot;&gt;similar talk&lt;/a&gt; from &lt;a href=&quot;http://whatdoyouknow.webdirections.org&quot;&gt;Web Directions What Do You Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Released my &lt;a href=&quot;http://www.aaron-powell.com/pinboard-for-win8&quot;&gt;first Windows 8 application&lt;/a&gt; which needs some serious TLC, damn lack of free time :(&lt;/li&gt;
&lt;li&gt;Made a surprise appearance at CodeGarden 12, &lt;a href=&quot;http://www.aaron-powell.com/umbraco/i-helped-kill-umbraco-5&quot;&gt;helped killed Umbraco 5&lt;/a&gt;, &lt;a href=&quot;http://www.aaron-powell.com/umbraco/using-mvc-in-umbraco-4&quot;&gt;pointed out that MVC has always been possible with Umbraco&lt;/a&gt; and once again &lt;a href=&quot;http://www.aaron-powell.com/umbraco/introducing-umbraco-contributor-list&quot;&gt;encouraged people to get involved in Umbraco&lt;/a&gt; which has been going really well since then&lt;/li&gt;
&lt;li&gt;Stepped out of my comfort zone and &lt;a href=&quot;http://www.aaron-powell.com/xaml/xaml-by-a-web-guy&quot;&gt;did some XAML&lt;/a&gt; but I&amp;#39;m still unconvinced by it&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/speaking/teched-2012&quot;&gt;Presented at Teched again, this time on Win8 app dev with HTML and JavaScript&lt;/a&gt; where I was kind of just ranting :P&lt;/li&gt;
&lt;li&gt;Dived into &lt;a href=&quot;http://www.aaron-powell.com/tagged/indexeddb&quot;&gt;IndexedDB&lt;/a&gt; and released &lt;a href=&quot;http://www.aaron-powell.com/web/hello-dbjs&quot;&gt;a wrapper library called db.js&lt;/a&gt; to deal with some of the shitty API points&lt;/li&gt;
&lt;li&gt;Played with TypeScript, the Microsoft answer to &amp;quot;the JavaScript problem&amp;quot;. My blog about using &lt;a href=&quot;http://www.aaron-powell.com/web/typescript-source-maps&quot;&gt;source maps for TypeScript&lt;/a&gt; was by far my most popular post&lt;/li&gt;
&lt;li&gt;Got engaged and bought a house (cuz you know, sometimes I get off the computer...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;#39;s been a bit quieter than in the past few years, but a much more maintainable a pace I think. Now to prepare for 2013...&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Chrome support for db.js</title>
            <link href="/posts/2012-10-18-dbjs-chrome.html"/>
            <updated>2012-10-18T00:00:00.000Z</updated>
            <id>/posts/2012-10-18-dbjs-chrome.html</id>
            <content type="html">&lt;p&gt;I recently had a &lt;a href=&quot;https://github.com/aaronpowell/db.js/issues/14&quot;&gt;bug opened&lt;/a&gt; on &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;db.js&lt;/a&gt; which is related to Chrome operating differently to the other browsers.&lt;/p&gt;
&lt;p&gt;After spending some time digging into the problem I came to realise that the problem was to do with the way older versions of Google&amp;#39;s Chrome implement IndexedDB (where older versions are any version prior to Chrome 23).&lt;/p&gt;
&lt;p&gt;Prior to Chrome 23 Chrome didn&amp;#39;t support the final specification for IndexedDB completely, in fact they were still implementing the spec from &lt;a href=&quot;http://www.w3.org/TR/2011/WD-IndexedDB-20110419&quot;&gt;April 2011&lt;/a&gt; and the root of the problem was how changing database versions worked.&lt;/p&gt;
&lt;h1&gt;TL; DR&lt;/h1&gt;
&lt;p&gt;db.js will not be supporting Chrome 22 or lower, even if they have &lt;code&gt;webkitIndexedDB&lt;/code&gt; defined.&lt;/p&gt;
&lt;h1&gt;Longer story&lt;/h1&gt;
&lt;p&gt;To understand the problem we need to understand what changed in the specification between April 2011 and today. The change that is causing the most problems is how IndexedDB handles new versions of each database. In case you missed it, when you open a database with db.js (or well just IndexedDB) you need to provide a version number for the schema. This is because a database can change across versions and IndexedDB allows you to maintain the old schema.&lt;/p&gt;
&lt;p&gt;Initially the way version changes were handled was using a &lt;a href=&quot;http://www.w3.org/TR/2011/WD-IndexedDB-20110419/#widl-IDBDatabase-setVersion&quot;&gt;&lt;code&gt;setVersion&lt;/code&gt;&lt;/a&gt; method, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = indexedDB.open(&lt;span class=&quot;string&quot;&gt;'db'&lt;/span&gt;);
req.onsuccess = success;
req.onerror = fail;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; db = e.target.result;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = db.setVersion(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);
    req.onsuccess = createSchema;
    req.onerror = fail;
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createSchema&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//create schema&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that this was changed, instead of using this method to change a schema version it was added to the &lt;code&gt;open&lt;/code&gt; call and is used in conjunction with a &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBOpenDBRequest-onupgradeneeded&quot;&gt;&lt;code&gt;onupgradeneeded&lt;/code&gt;&lt;/a&gt; event off the request, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; req = indexedDB.open('db', &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
&lt;span class=&quot;title&quot;&gt;req&lt;/span&gt;.onupgradeneeded = createSchema;
&lt;span class=&quot;title&quot;&gt;req&lt;/span&gt;.onsuccess = success;
&lt;span class=&quot;title&quot;&gt;req&lt;/span&gt;.onerror = fail;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally I&amp;#39;m quite glad that they made this change, I think it makes for a much cleaner API as you don&amp;#39;t have nested database requests. But ultimately this was a very radical change to the way the API worked.&lt;/p&gt;
&lt;h2&gt;The Chrome problem&lt;/h2&gt;
&lt;p&gt;Chrome was the last browser to adopt this change, drilling down through the changeset history, issue history and mailing list archive it was apparent that the Chrome team was reluctant to just &lt;em&gt;drop&lt;/em&gt; the support for &lt;code&gt;setVersion&lt;/code&gt; like the other browsers because they were concerned about existing implementations and this is a fair enough justification, no one wants to introduce breaking changes.&lt;/p&gt;
&lt;p&gt;The problem was there was no good way to tests for this change. Initially db.js &lt;em&gt;did&lt;/em&gt; have attempted smarts as to how it will handle database version changes &lt;em&gt;but&lt;/em&gt; the problem was that there was no way to detect for the existence of the &lt;code&gt;onupgradeneeded&lt;/code&gt; event, only the &lt;code&gt;setVersion&lt;/code&gt; method. Interestingly enough even through Chrome 23+ &lt;em&gt;does&lt;/em&gt; support the &lt;code&gt;onupgradeneeded&lt;/code&gt; it &lt;strong&gt;also&lt;/strong&gt; has &lt;code&gt;setVersion&lt;/code&gt;. As you can expect this added a lot more complexity to the code!&lt;/p&gt;
&lt;p&gt;Ultimately what it came down to was it was overly complex to support &lt;em&gt;both&lt;/em&gt; versioning methods, so I made the decision that any implementation that uses &lt;code&gt;setVersion&lt;/code&gt; and not &lt;code&gt;onupgradeneeded&lt;/code&gt; it won&amp;#39;t work as in the time it would take to resolve the problems I was seeing Chrome 23 will make it to the stable channel.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Reverse order unique queries in IndexedDB</title>
            <link href="/posts/2012-10-08-reverse-order-unique-indexes.html"/>
            <updated>2012-10-08T00:00:00.000Z</updated>
            <id>/posts/2012-10-08-reverse-order-unique-indexes.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/dbjs-indexes-and-queries&quot;&gt;In my post my db.js querying&lt;/a&gt; I covered how to do reverse unique queries with db.js using the &lt;code&gt;desc().distinct()&lt;/code&gt; method chaining which will query an index for the unique items, but it&amp;#39;ll do it in reverse order, essentially it will set a &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#cursor-concept&quot;&gt;&lt;code&gt;IDBCursor&lt;/code&gt; direction of &lt;code&gt;prevunique&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When covering off I mentioned that the way it works is a little unusual and here I&amp;#39;ll explain why.&lt;/p&gt;
&lt;h1&gt;How an index &amp;quot;looks&amp;quot;&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;ve got an index in your object store, an index which is non-unique, and it contains duplicate values. Say you created an index like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;store.createIndex(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, { &lt;span class=&quot;method&quot;&gt;unique:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you&amp;#39;ve pushed a few items into it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;tag&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;foo&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;tag&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;foo&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;tag&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;foo&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'baz'&lt;/span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data which has been stored in the index can be visualised as so:&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Key&lt;/th&gt;
            &lt;th&gt;Value&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;bar&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;
                
{
    id: 1,
    foo: &amp;#39;bar&amp;#39;
}
                
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;bar&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;
                
{
    id: 2,
    foo: &amp;#39;bar&amp;#39;
}
                
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;baz&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;
                
{
    id: 3,
    foo: &amp;#39;baz&amp;#39;
}
                
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1&gt;Walking our index&lt;/h1&gt;
&lt;p&gt;From the diagram you can see the order of the data in our index, let&amp;#39;s assume we&amp;#39;re wanting to just walk through the index normally, using the &lt;code&gt;next&lt;/code&gt; direction (the default if you don&amp;#39;t set anything). We&amp;#39;ll get back the records in the order of id 1, 2, 3, or by their key, &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;. Now this makes sense, we&amp;#39;re walking top-to-bottom just as the spec states and as we&amp;#39;d expect from looking at our index.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s turn that into a &lt;code&gt;nextunique&lt;/code&gt; query, this time we get back the records with the id 1, 3, or the index keys &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is again to be expected, if you review the spec it states (emphasis is mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;nextunique&amp;quot;. This direction causes the cursor to be opened at the start of the source. When iterated, the cursor should not yield records with the same key, but otherwise yield all records, in monotonically increasing order of keys. &lt;strong&gt;For every key with duplicate values, only the first record is yielded.&lt;/strong&gt; When the source is an object store or a unique index, this direction has the exact same behavior as &amp;quot;next&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what&amp;#39;s interesting here is that there are deterministic rules as to how the item to be returned is selected from the index, basically it&amp;#39;s what ever is first in the index for that key. This is basically what we&amp;#39;d expect, no surprised so far.&lt;/p&gt;
&lt;h1&gt;Walking backwards through our index&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve looked at walking forward through our index, but what if we want to walk backwards through it? Well that&amp;#39;s where the &lt;code&gt;prev&lt;/code&gt; cursor direction is for. Say we were to do a read-all operation using a &lt;code&gt;prev&lt;/code&gt; cursor, we&amp;#39;ll have the records in the order of id 3, 2, 1, or &lt;code&gt;baz&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Not particularly shocking here, again that&amp;#39;s what we&amp;#39;d be expecting, we&amp;#39;ve started at the end of the index and we&amp;#39;ve grabbed the item then gone to the one before it in the index and so on.&lt;/p&gt;
&lt;p&gt;Now it&amp;#39;s over to the &lt;code&gt;prevunique&lt;/code&gt; query so that we can get just a unique item for each index key from our index. The items we get back have an ID order of 3, 1 or the index keys &lt;code&gt;baz&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;. Wait something doesn&amp;#39;t look right there, the ID&amp;#39;s were:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is where it starts getting confusing...&lt;/p&gt;
&lt;h2&gt;Understanding &lt;code&gt;prevunique&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s have a look at the spec for &lt;code&gt;prevunique&lt;/code&gt; (emphasis is mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;prevunique&amp;quot;. This direction causes the cursor to be opened at the end of the source. When iterated, the cursor should not yield records with the same key, but otherwise yield all records, in monotonically decreasing order of keys. &lt;strong&gt;For every key with duplicate values, only the first record is yielded&lt;/strong&gt;. When the source is an object store or a unique index, this direction has the exact same behavior as &amp;quot;prev&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you see the confusing point, it states that when a duplicate item is found of a key you take &lt;em&gt;the first record&lt;/em&gt; and this is where I was tripped up. When I first read this I took it as the first record &lt;em&gt;found&lt;/em&gt; in the index, so when walking backwards in our example index above, we would get the ID of &lt;code&gt;2&lt;/code&gt; as it was the first record with the &lt;code&gt;bar&lt;/code&gt; key. But this is not the case, it is actually the first record &lt;em&gt;in the index&lt;/em&gt; with that key, and since the record with the id &lt;code&gt;1&lt;/code&gt; appears first in the index it will be returned. The key order is correct, we&amp;#39;ve reverse-walked it based on that, but it was the item order that trips people up. In fact I raised a &lt;a href=&quot;http://code.google.com/p/chromium/issues/detail?id=152879&quot;&gt;bug on Chrome&lt;/a&gt; as I was assuming that they had got it wrong. The bug has since been closed as it is implemented correctly.&lt;/p&gt;
&lt;p&gt;The order can be summed up as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverse order by keys, items by index position&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The way IndexedDB handles reverse index walking is a little bit confusing on first read, but the more you review it the more that it starts to make some sense.&lt;/p&gt;
&lt;p&gt;Currently IE10 doesn&amp;#39;t handle this correctly though, it incorrectly reverses the order of the items in the index, I raised the question to them and you can find out more in the &lt;a href=&quot;http://lists.w3.org/Archives/Public/public-webapps/2012OctDec/0043.html&quot;&gt;thread on the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Admittedly this is a pretty esoteric problem to come across though, I can&amp;#39;t think of an instance where the ordering of items in an index when traversed in reverse would be important, but then that may really just be a failure of imagination. If order is &lt;em&gt;really&lt;/em&gt; that important you&amp;#39;re probably best structuring your data so that the key can be unique.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How the browsers store IndexedDB data</title>
            <link href="/posts/2012-10-05-indexeddb-storage.html"/>
            <updated>2012-10-05T00:00:00.000Z</updated>
            <id>/posts/2012-10-05-indexeddb-storage.html</id>
            <content type="html">&lt;p&gt;As you&amp;#39;ve probably noticed I&amp;#39;ve been doing a lot of digging into &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt; across the various browsers but there&amp;#39;s one thing that I find quite interesting, &lt;em&gt;how it all works&lt;/em&gt;. So for the &lt;strong&gt;&lt;a href=&quot;http://www.reddit.com/r/todayilearned/&quot;&gt;TIL&lt;/a&gt;&lt;/strong&gt; session we&amp;#39;ve going to find out how the browsers store the data for IndexedDB*.&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;Note: This will be a pretty high-level look since I&amp;#39;m sooo not a C++ developer and C++ is the primary language of browser engines :P.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Internet Explorer&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ll start with the first browser to go unprefixed for IndexedDB, IE (well IE10), also since we can&amp;#39;t look at the source of IE most of this is speculative.&lt;/p&gt;
&lt;p&gt;Internet Explorer uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/Extensible_Storage_Engine&quot;&gt;Extensible Storage Engine&lt;/a&gt; as its underlying storage model. This is the same database format that many of Windows features use including the Desktop Search (very common in Windows 8), Active Directory on Windows Servers and even Exchange.&lt;/p&gt;
&lt;p&gt;ESE seems like a good idea for IndexedDB as it has many of the features that you&amp;#39;re going to want such as keys, indexes and multi-value indexes* so I&amp;#39;m not surprised that the IE team have built on top of what is already there.&lt;/p&gt;
&lt;p&gt;*&lt;em&gt;Side point - IE currently doesn&amp;#39;t support multiEntry indexes from IndexedDB which really sucks, especially since ESE seems to support it natively :(.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re curious to go digging around for your IndexedDB files you&amp;#39;ll find them at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%AppData%\Local\Microsoft\Internet Explorer\Indexed DB\Internet.edb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So far I haven&amp;#39;t had much luck getting into this file to view the database contents, I&amp;#39;ve tried &lt;a href=&quot;http://www.woanware.co.uk/?page_id=89&quot;&gt;EseDbViewer&lt;/a&gt; but it fails to open the database files and trying to dig through the Windows API itself is just plain unpleasant. Nobody likes COM.&lt;/p&gt;
&lt;h1&gt;Firefox&lt;/h1&gt;
&lt;p&gt;Firefox was the 2nd browser to go prefix free with IndexedDB, it is unprefixed as of version 16. Logically since Firefox is a cross-platform browser they use a cross-platform database, &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;. It&amp;#39;s also not surprising that they are using SQLite as IndexedDB replaced the WebSQL proposal which was based on SQLite (one of the reasons cited as to discontinuing WebSQL was everyone used SQLite so they weren&amp;#39;t getting independent implementations), so it makes sense that they salvaged what they could from the first implementation of a complex storage model.&lt;/p&gt;
&lt;p&gt;Being open source you can browse the &lt;a href=&quot;http://mxr.mozilla.org/mozilla-aurora/source/dom/indexedDB/&quot;&gt;code for Firefox&amp;#39;s IndexedDB implementation&lt;/a&gt; which is awesomely mind bending. Check out the &lt;a href=&quot;http://mxr.mozilla.org/mozilla-aurora/source/dom/indexedDB/OpenDatabaseHelper.cpp&quot;&gt;OpenDatabaseHelper.cpp&lt;/a&gt;, it&amp;#39;s responsible for setting up your database connection as well as doing a bunch of SQL to make sure everything is ready for data (yep, Firefox has SQL statements in it!). Another file of interest is &lt;a href=&quot;http://mxr.mozilla.org/mozilla-aurora/source/dom/indexedDB/IDBObjectStore.cpp#1594&quot;&gt;IDBObjectStore.cpp&lt;/a&gt; and the line I&amp;#39;ve linked to is the method that is responsible for inserting a new record into the database (at least I&amp;#39;m pretty sure it is).&lt;/p&gt;
&lt;p&gt;If you are wanting to look into your database then the easiest way is with the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/&quot;&gt;SQLite Manager&lt;/a&gt; Firefox extension. The files created for IndexedDB are stored in the following location:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%AppData%\Roaming\Mozilla\Firefox\Profiles\your profile id\indexedDB\domain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open up the SQLite Manager extension and then you can dive into your database.&lt;/p&gt;
&lt;h1&gt;Chrome / WebKit&lt;/h1&gt;
&lt;p&gt;At the time of writing the IndexedDB implementation of &lt;a href=&quot;http://webkit.org&quot;&gt;WebKit&lt;/a&gt;, and by extension Chrome, is still prefixed, in fact they are prefixing pretty much everything IndexedDB related with &lt;code&gt;webkit&lt;/code&gt;. The implementation seems to be driven by the Chrome team and that probably also indicates why they are using a Google produced database, &lt;a href=&quot;http://code.google.com/p/leveldb/&quot;&gt;LevelDB&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The implementation is already in the main WebKit repository which means that sooner or later it will appear in Safari as they also use WebKit under the hood.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can browse the &lt;a href=&quot;https://trac.webkit.org/browser/trunk/Source/WebCore/Modules/indexeddb&quot;&gt;source of their implementation&lt;/a&gt; in all its C++ glory, it really is quite nicely written, at least to my untrained C++ eyes. The actual storage of the data is done through the &lt;a href=&quot;https://trac.webkit.org/browser/trunk/Source/WebCore/Modules/indexeddb/IDBLevelDBBackingStore.cpp&quot;&gt;IDBLevelDBBackingStore.cpp&lt;/a&gt; class, but exposed as an abstraction so I guess it can be swapped out (and I&amp;#39;d guess that&amp;#39;s how they swapped between SQLite and LevelDB to begin with). The one thing that I do find curious is that LevelDB doesn&amp;#39;t support indexes yet obviously IndexedDB does, so there&amp;#39;s probably some trickery going on when they are pushing the data into the database (and well it hurts my head to read that much C++ :P).&lt;/p&gt;
&lt;p&gt;There isn&amp;#39;t any stand-alone viewer for LevelDB that I&amp;#39;ve come across but really that&amp;#39;s not that big a deal as currently Chrome is the only browser who has an IndexedDB inspector built into its developer tools. Just navigate to the &lt;em&gt;Resources&lt;/em&gt; tab and there&amp;#39;s an IndexedDB section (you may have to right click -&amp;gt; refresh the node as it&amp;#39;s not a live view). I do hope the other browser vendors bring this feature in as well as it&amp;#39;s really quite neat to have. But if you really must find the files for IndexedDB then they are located here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%AppData%\Local\Google\Chrome\User Data\Default&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: If you&amp;#39;re using Chrome Canary then it&amp;#39;s in the &lt;strong&gt;Chrome SxS&lt;/strong&gt; folder.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TIL&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IE uses the same database format as Exchange and Active Directory for IndexedDB&lt;/li&gt;
&lt;li&gt;Firefox is using SQLite so are kind of implementing a NoSQL database in to SQL database&lt;/li&gt;
&lt;li&gt;Chrome (and WebKit) are using a Key/ Value store which has heritage in BigTable&lt;/li&gt;
&lt;li&gt;C++ is no less scary than when I was at uni&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Interesting finds in the IE10 UA switcher</title>
            <link href="/posts/2012-10-04-ie10-user-agent-switching.html"/>
            <updated>2012-10-04T00:00:00.000Z</updated>
            <id>/posts/2012-10-04-ie10-user-agent-switching.html</id>
            <content type="html">&lt;p&gt;I was looking around in the IE10 developer tools today and dug into the &lt;code&gt;Tools -&amp;gt; Change user agent string&lt;/code&gt; menu and came across some interesting UA options:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/ie-ua.png&quot; alt=&quot;IE10 user agent options&quot;&gt;&lt;/p&gt;
&lt;p&gt;How did I miss that IE10 in Windows 8 RTM has built in User Agents for &lt;em&gt;IE10 for Windows Phone 8&lt;/em&gt; and &lt;em&gt;IE for Xbox&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;That&amp;#39;ll teach me to only ever use the &lt;em&gt;Browser Mode&lt;/em&gt; options...&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using Source Maps with TypeScript</title>
            <link href="/posts/2012-10-03-typescript-source-maps.html"/>
            <updated>2012-10-03T00:00:00.000Z</updated>
            <id>/posts/2012-10-03-typescript-source-maps.html</id>
            <content type="html">&lt;p&gt;Have you heard of &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;Source Maps&lt;/a&gt;? Source Maps are an idea that has come out of Mozilla for addressing the debugging issues that are raised by *-to-JavaScript compilers and JavaScript minifiers, the problem is that when you use these you ultimately aren&amp;#39;t debugging what you wrote.&lt;/p&gt;
&lt;p&gt;Take TypeScript for example and the &lt;a href=&quot;https://gist.github.com/3825576&quot;&gt;improved version&lt;/a&gt; (&lt;a href=&quot;https://gist.github.com/3817035&quot;&gt;original&lt;/a&gt;) of the &lt;a href=&quot;http://www.aaron-powell.com/web/pubsub-in-typescript&quot;&gt;PubSub from yesterday&lt;/a&gt;, we&amp;#39;ve got a problem, the code is quite different to what we&amp;#39;d be running in the browser. This is a big problem as if you&amp;#39;re not familiar with JavaScript, or at least not comfortable with the language nuances, you&amp;#39;ll quickly get lost and make a royal mess of what you&amp;#39;re writing.&lt;/p&gt;
&lt;h1&gt;Source Maps for TypeScript&lt;/h1&gt;
&lt;p&gt;Intelligently the TypeScript team have already done the hard work for us, there&amp;#39;s a &lt;a href=&quot;http://typescript.codeplex.com/SourceControl/changeset/view/d397c54a55db#src%2fcompiler%2fsourceMapping.ts&quot;&gt;Source Map generator in the compiler&lt;/a&gt; (thanks &lt;a href=&quot;https://twitter.com/ryanseddon&quot;&gt;Ryan&lt;/a&gt; for pointing it out)!&lt;/p&gt;
&lt;p&gt;So how do you use it? If you do a help dump of &lt;code&gt;tsc&lt;/code&gt; (the TypeScript compiler) there&amp;#39;s nothing in it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;D:\Code&lt;/span&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;h&lt;/span&gt;    
&lt;span class=&quot;comment&quot;&gt;Syntax:&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;options&lt;/span&gt;] &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;Examples:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;hello&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;ts&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;ts&lt;/span&gt;
          &lt;span class=&quot;comment&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;@args&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;txt&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;Options:&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;c&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;comments&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;Emit&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;output&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;declarations&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;Generates&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;corresponding&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;e&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;exec&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;Execute&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;compilation&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;h&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;help&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;Print&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;KIND&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;Specify&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;generation:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;commonjs&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(default)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;amd&quot;&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;nolib&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;Do&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;lib&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;declarations&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;FILE&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;Concatenate&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;emit&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;VER&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;Specify&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;ES3&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(default)&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;ES5&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;@&lt;/span&gt;&amp;lt;&lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;&amp;gt;         &lt;span class=&quot;comment&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well good news everybody, that&amp;#39;s not listing all the compiler switches ;). Check out the &lt;code&gt;batchCompile&lt;/code&gt; method for a bunch of gems, but most importantly there is a &lt;code&gt;sourcemap&lt;/code&gt; switch, so if I take my little project:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;tex&quot;&gt;D:&lt;span class=&quot;command&quot;&gt;\Code&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\typescript&lt;/span&gt;-pubsub&amp;gt; tsc -sourcemap pubsub.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you&amp;#39;ll have two files, &lt;code&gt;pubsub.js&lt;/code&gt; and &lt;code&gt;pubsub.js.map&lt;/code&gt; and the output JavaScript file will also contain the source map pointer:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;//@ sourceMappingURL=pubsub&lt;span class=&quot;preprocessor&quot;&gt;.js&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.map&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet! Let&amp;#39;s open the HTML file in Chrome Canary (of which I&amp;#39;ve already enabled Source Maps) and we get some cool new debugging stuff:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/typescript/typescript-sourcemap-01.PNG&quot; alt=&quot;TypeScript files listed in the debugger&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can find your .ts file in the sources list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/typescript/typescript-sourcemap-02.PNG&quot; alt=&quot;Break point in a TypeScript file&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve break pointed inside of TypeScript!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/typescript/typescript-sourcemap-03.PNG&quot; alt=&quot;And inspections&quot;&gt;&lt;/p&gt;
&lt;p&gt;Inspecting variables in TypeScript&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The fact that there was enough forward planning from the TypeScript team to include support for Source Maps in the initial release is a really great thing. Through the magic of Chrome we can debug code written in it as through it was our original code. If you want have a play &lt;a href=&quot;https://github.com/aaronpowell/typescript-pubsub&quot;&gt;here&amp;#39;s the code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully either the Visual Studio or IE (or both) team also pick up Source Maps and add support for them too.&lt;/p&gt;
&lt;p&gt;Happy cross-compiling.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Indexes and Queries in db.js</title>
            <link href="/posts/2012-10-02-dbjs-indexes-and-queries.html"/>
            <updated>2012-10-02T00:00:00.000Z</updated>
            <id>/posts/2012-10-02-dbjs-indexes-and-queries.html</id>
            <content type="html">&lt;p&gt;In my &lt;a href=&quot;/web/hello-dbjs&quot;&gt;last post&lt;/a&gt; I introduced a new library I&amp;#39;ve been working on for &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt; called &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;db.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing that I was slow in my understanding of with IndexedDB is how &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#index-concept&quot;&gt;indexes&lt;/a&gt; work, and just how powerful they can be. Now that I&amp;#39;ve got that &lt;em&gt;down pat&lt;/em&gt; the support in db.js is greatly improved. Also a big shout out to &lt;a href=&quot;https://github.com/bobwallis&quot;&gt;Bob Wallis&lt;/a&gt; who did a great job at adding the initial revision of index range queries.&lt;/p&gt;
&lt;h1&gt;Creating a key path&lt;/h1&gt;
&lt;p&gt;When creating an object store, or table if you will, you&amp;#39;re most likely going to want to have some kind of unique identifier for each record; this is what the role of the key path is. To create a key path when you define the schema for your database you can provide it with the &lt;code&gt;key&lt;/code&gt; property:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;db.open({
    &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'my-app'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;schema:&lt;/span&gt; {
        &lt;span class=&quot;method&quot;&gt;people:&lt;/span&gt; {
            &lt;span class=&quot;method&quot;&gt;key:&lt;/span&gt; {
                &lt;span class=&quot;method&quot;&gt;keyPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'id'&lt;/span&gt;,
                &lt;span class=&quot;method&quot;&gt;autoIncrement:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;
            }
        }
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve done here is defined that I want to have a property added to my objects called &lt;code&gt;id&lt;/code&gt; which will be auto-incrementing (which will make it a number). Now when I add a new person the object will have a new property:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;server.people
    .add({
        firstName: 'Aaron',
        lastName: 'Powell'
    })
    .done(function (person) {
        console.&lt;span class=&quot;command&quot;&gt;log&lt;/span&gt;(person.&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;); //&lt;span class=&quot;function_start&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;/span&gt; clean db this will be &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This key is useful if you want to access unique records from your store.&lt;/p&gt;
&lt;h1&gt;Creating an index&lt;/h1&gt;
&lt;p&gt;While a key path is useful for a narrow set of scenarios it&amp;#39;s likely that you&amp;#39;ll be doing queries that are against other information in the store. Let&amp;#39;s take our example and say we wanted to be able to query against the &lt;code&gt;firstName&lt;/code&gt; property. For this we would want to create a non-unique index for our records:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;db.open({
    &lt;span class=&quot;method&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'my-app'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;schema:&lt;/span&gt; {
        &lt;span class=&quot;method&quot;&gt;people:&lt;/span&gt; {
            &lt;span class=&quot;method&quot;&gt;key:&lt;/span&gt; {
                &lt;span class=&quot;method&quot;&gt;keyPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'id'&lt;/span&gt;,
                &lt;span class=&quot;method&quot;&gt;autoIncrement:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;
            },
            &lt;span class=&quot;method&quot;&gt;indexes:&lt;/span&gt; {
                &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; { }
            }
        }
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we were to inspect our &lt;code&gt;person&lt;/code&gt; store we would find an &lt;code&gt;indexName&lt;/code&gt; of &lt;code&gt;firstName&lt;/code&gt;. This allows us to perform queries against said index and have it perform much faster than manually filtering the records ourselves, especially in large data sets.&lt;/p&gt;
&lt;p&gt;You can create multiple indexes here by adding more properties to the &lt;code&gt;indexes&lt;/code&gt; property on the schema. If you want to set any of the &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#dfn-options-object&quot;&gt;index parameters (IDBIndexParameters)&lt;/a&gt; you can provide them as properties of the object for the index.&lt;/p&gt;
&lt;h1&gt;Querying an index&lt;/h1&gt;
&lt;p&gt;Initially I didn&amp;#39;t really wrap my head around indexes very well and when I started db.js there wasn&amp;#39;t a whole lot of useful IndexedDB articles, most of the stuff you had to work out by reading the specification (which is so not written for consumers of an API!). Luckily now db.js has really good support for indexes and how you can query them.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s look at how we could query an index for all people with the first name of &lt;em&gt;Aaron&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;query('firstName')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;only('Aaron')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;execute()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;done(function&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(people)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//Do&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;Aaron's&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing that&amp;#39;s different compared to the query in my &lt;a href=&quot;/web/hello-dbjs&quot;&gt;last post&lt;/a&gt; is when we invoke the &lt;code&gt;query&lt;/code&gt; method we are providing it with the name of the index we want to query.&lt;/p&gt;
&lt;p&gt;Next off we&amp;#39;re using the &lt;code&gt;only&lt;/code&gt; method. This method opens up a &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#dfn-key-range&quot;&gt;IDBKeyRange&lt;/a&gt; of type &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBKeyRange-only-static-IDBKeyRange-any-value&quot;&gt;only&lt;/a&gt; which will then select values that match that value exactly. This is very quick for reducing the amount of records returned from the object store itself.&lt;/p&gt;
&lt;h1&gt;Querying across ranges&lt;/h1&gt;
&lt;p&gt;Sometimes you want a range of data, say you want people who are in a certain age bracket. Let&amp;#39;s pretend that we have a numerical &lt;code&gt;age&lt;/code&gt; property on our person object and we&amp;#39;ve created an index for it exactly the same way we created the &lt;code&gt;firstName&lt;/code&gt; index. Now through the magic of db.js (well, IndexedDB :P) we can perform a set of range queries:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;sql&quot;&gt;server.people
    .query('age')
    .lowerBound(28 &lt;span class=&quot;comment&quot;&gt;/*, true */&lt;/span&gt;) //by default it's an inclusive query, &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`true`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be exclusive
    .&lt;span class=&quot;keyword&quot;&gt;execute&lt;/span&gt;()
    .done(function (people) {
        //&lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; the people who &lt;span class=&quot;keyword&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; years &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; older
    });&lt;/span&gt;

server.people
    .query('age')
    .upperBound(28 &lt;span class=&quot;comment&quot;&gt;/*, true */&lt;/span&gt;) //by default it's an inclusive query, &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`true`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be exclusive
    .&lt;span class=&quot;keyword&quot;&gt;execute&lt;/span&gt;()
    .done(function (people) {
        //&lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; the people who &lt;span class=&quot;keyword&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; years &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; younger
    });&lt;/span&gt;

server.people
    .query('age')
    .bound(25 ,35 &lt;span class=&quot;comment&quot;&gt;/*, true , true */&lt;/span&gt;) //by default it's an inclusive query, &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`true`&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be exclusive
    .&lt;span class=&quot;keyword&quot;&gt;execute&lt;/span&gt;()
    .done(function (people) {
        //&lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; the people who &lt;span class=&quot;keyword&quot;&gt;are&lt;/span&gt; between &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;, inclusive
    });&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows the usage of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBKeyRange-lowerBound-static-IDBKeyRange-any-lower-boolean-open&quot;&gt;&lt;code&gt;lowerBound&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Get records using the provided value as a starting point&lt;/li&gt;
&lt;li&gt;Optional second argument to if we want an exclusive query instead of inclusive, which is the default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBKeyRange-upperBound-static-IDBKeyRange-any-upper-boolean-open&quot;&gt;&lt;code&gt;upperBound&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Get records using the provided value as an ending point&lt;/li&gt;
&lt;li&gt;Optional second argument to if we want an exclusive query instead of inclusive, which is the default&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBKeyRange-bound-static-IDBKeyRange-any-lower-any-upper-boolean-lowerOpen-boolean-upperOpen&quot;&gt;&lt;code&gt;bound&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Gets values between a range&lt;/li&gt;
&lt;li&gt;The 3rd and 4th arguments represent the exclusive nature, both default to &lt;code&gt;false&lt;/code&gt;, implying inclusive but you can control the boundaries individually&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods are from IndexedDB in pretty much their raw format but exposed in db.js so we can easily use the chaining to do the querying. And the advantages of these ranges is the same as when you look at a &lt;em&gt;real&lt;/em&gt; database, we only take a subset of the record set so it should be quicker.&lt;/p&gt;
&lt;h1&gt;Advanced querying of indexes&lt;/h1&gt;
&lt;p&gt;So now we&amp;#39;ve got the basics down of creating a query against an index let&amp;#39;s look at some of the more advanced features of db.js&amp;#39;s query API.&lt;/p&gt;
&lt;h2&gt;Sort order&lt;/h2&gt;
&lt;p&gt;By default db.js (well more accurately IndexedDB) will return your data in ascending order. Assuming we&amp;#39;ve stored the following information:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var people = [{
    &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;lastName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;
}, {
    &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'John'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;lastName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Smith'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;
}, {
    &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Bill'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;lastName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Jones'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;
}];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;#39;ve got three people with three different ages. If we were to do a &lt;code&gt;bound&lt;/code&gt; query of &lt;code&gt;bound(25, 35)&lt;/code&gt; we&amp;#39;ll have the records returned in the order of &amp;#39;Aaron&amp;#39; then &amp;#39;John&amp;#39;. What if we want that order reversed?&lt;/p&gt;
&lt;p&gt;Easy, add a &lt;code&gt;desc&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;query('age')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;bound(25&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;35)&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;desc()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;execute()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;done(function&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(people)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//all&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;35&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;desc&lt;/code&gt; call we tell IndexedDB that we want to use &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#cursor-concept&quot;&gt;&lt;code&gt;IDBCursor.prev&lt;/code&gt;&lt;/a&gt; which will tell IndexedDB to go backwards through our index.&lt;/p&gt;
&lt;h2&gt;Unique items&lt;/h2&gt;
&lt;p&gt;When you create an index you can specify if you want the data to be unique but often this wont be the case, you just want to have an index of commonly searched terms. But what if you want to get just a single entry for each record out of the index, regardless of how many there are. A use case for this would be you want to know how many unique first names there are in your store. For this we can use the &lt;code&gt;distinct&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;query('firstName')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;all()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;distinct()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;execute()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;done(function&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(people)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//only&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;distinct&lt;/code&gt; method also augments the &lt;code&gt;IDBCursor&lt;/code&gt; state by using &lt;code&gt;nextunique&lt;/code&gt; or &lt;code&gt;prevunique&lt;/code&gt; cursor directions which the clued in reader will realise means you can do a descending unique query as well as an ascending unique query.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The way &lt;code&gt;prevunique&lt;/code&gt; works is a little confusing and better covered off in a separate blog post.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Unique keys&lt;/h2&gt;
&lt;p&gt;While the previous example is good it is not exactly what we wanted for the scenario laid forth. Even though we&amp;#39;re able to query the index and get back the unique records we get back the &lt;em&gt;whole&lt;/em&gt; record. This is somewhat problematic as we&amp;#39;re still pulling out more data than we really would want to be getting out, for the scenario we only wanted the keys. Well we can get just that information out if we need to:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;query('firstName')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;all()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;distinct()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;keys()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;execute()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;done(function&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(names)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//only&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By adding the &lt;code&gt;keys()&lt;/code&gt; call we use an &lt;code&gt;openKeyCursor&lt;/code&gt; call in IndexedDB, giving us just the keys that the index has. We can also use that in a range query:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;server&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;people&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;query('age')&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;bound(25&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;35)&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;distinct()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;keys()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;execute()&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;done(function&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(ages)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//only&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;age&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time we&amp;#39;ll know what ages are covered by our data set.&lt;/p&gt;
&lt;p&gt;A key query doesn&amp;#39;t have to be unique though, say you want to know how many entries you have for each key:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;server.people
    .query('firstName')
    .only('Aaron')
    .keys()
    .execute()
    .done(function (names) {
        //only &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; keys, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; you have multiple entries &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; one key &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; you will &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; multiples &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would be useful if you wanted to create a heat map from an index, you could do a map/ reduce to calculate:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;server&lt;/span&gt;.people
    .query('firstName')
    .all()
    .keys()
    .execute()
    .done(function (names) {
        var &lt;span class=&quot;typedef&quot;&gt;dataMap = names.map&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
          &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; {
            &lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;,
            &lt;span class=&quot;title&quot;&gt;count&lt;/span&gt;: 1
          }&lt;/span&gt;;&lt;/span&gt;
        });

        var &lt;span class=&quot;typedef&quot;&gt;dataGrouped = &lt;span class=&quot;container&quot;&gt;{}&lt;/span&gt;;&lt;/span&gt;

        &lt;span class=&quot;typedef&quot;&gt;dataMap.forEach&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
          &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;title&quot;&gt;dataGrouped&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;]) {
            &lt;span class=&quot;title&quot;&gt;dataGrouped&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;] = &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;count&lt;/span&gt;;
          }&lt;/span&gt; else &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;dataGrouped&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;]++;
          }&lt;/span&gt;&lt;/span&gt;
        });

        console.log(&lt;span class=&quot;typedef&quot;&gt;dataGrouped);&lt;/span&gt;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Record counting&lt;/h2&gt;
&lt;p&gt;Need to know how many items there are that match a query? Useful if you&amp;#39;re implementing a paging system. Well you could perform your query and check the length of the result set or alternatively you could use the &lt;code&gt;count&lt;/code&gt; method and not wait for the entries to be hydrated:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;server.people
    .query('firstName')
    .only('Aaron')
    .&lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;()
    .execute()
    .done(function (&lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;) {
        //&lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; records matching &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; query
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This time the argument provided to the &lt;code&gt;done&lt;/code&gt; handler &lt;em&gt;won&amp;#39;t&lt;/em&gt; be an array, it will be a number.&lt;/p&gt;
&lt;h2&gt;Completely custom filtering&lt;/h2&gt;
&lt;p&gt;The indexes in IndexedDB are only single key indexes so there are times that you&amp;#39;re going to be trying to create a query in a way that can&amp;#39;t be done, say you want to query against two properties. Well that&amp;#39;s not going to be possible to do with an index and this is where db.js can help.&lt;/p&gt;
&lt;p&gt;With db.js there is a &lt;code&gt;filter&lt;/code&gt; method that is exposed, this method allows you to provide it with a function that will be used to filter the results, this function must return a boolean result (&lt;code&gt;true&lt;/code&gt; if you want the record, &lt;code&gt;false&lt;/code&gt; if you don&amp;#39;t). You can add as many of these as you want, but be aware of the performance hit that you may take as essentially they are provided to the &lt;code&gt;Array.filter&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;server.people
    .query(&lt;span class=&quot;string&quot;&gt;'firstName'&lt;/span&gt;)
    .only(&lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;)
    .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(person)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; person.lastName === &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;;
    })
    .execute()
    .done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(people)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//only the Aaron Powell's of the world&lt;/span&gt;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally you want to be using this in conjunction with an index. As you&amp;#39;ll see in the above example I&amp;#39;m doing an initial &lt;code&gt;only&lt;/code&gt; query to reduce our dataset base on the first names and then doing an additional filter against the persons last name to reduce our dataset event more. The &lt;code&gt;filter&lt;/code&gt; method doesn&amp;#39;t have to be applied to an index though, if you don&amp;#39;t have an index that can represent the data you want back (say you&amp;#39;re implementing search) you can call &lt;code&gt;filter&lt;/code&gt; directly off the &lt;code&gt;query&lt;/code&gt; method.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Throughout this post we&amp;#39;ve dived deeper into the query engine of db.js, and by extension got a better understanding of how IndexedDB&amp;#39;s indexes work.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve looked at how to create a primary key of such in our object store through the schema mechanism of db.js.&lt;/p&gt;
&lt;p&gt;Next we looked at how to create custom indexes against any property on our object in our store. We then took this and looked at how to go about querying against the index in a variety of different ways that are exposed in db.js.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>PubSub in TypeScript</title>
            <link href="/posts/2012-10-02-pubsub-in-typescript.html"/>
            <updated>2012-10-02T00:00:00.000Z</updated>
            <id>/posts/2012-10-02-pubsub-in-typescript.html</id>
            <content type="html">&lt;p&gt;Pub/Sub is my Hello World, I&amp;#39;ve done it not &lt;a href=&quot;http://www.aaron-powell.com/client-event-pool&quot;&gt;once&lt;/a&gt; but &lt;a href=&quot;http://www.aaron-powell.com/javascript-eventmanager&quot;&gt;twice&lt;/a&gt; in JavaScript and &lt;a href=&quot;http://www.aaron-powell.com/javascript/postman&quot;&gt;once&lt;/a&gt; in CoffeeScript (although technically that has a 3rd version in JavaScript at the start of the post :P).&lt;/p&gt;
&lt;p&gt;Well you may have heard of Microsoft&amp;#39;s answer to application-scale JavaScript called &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; so I thought I&amp;#39;d write a pub/ sub library in it too.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;module &lt;span class=&quot;variable&quot;&gt;PubSub&lt;/span&gt; &lt;span class=&quot;tuple&quot;&gt;{
    var regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; = &lt;span class=&quot;tuple&quot;&gt;{}&lt;/span&gt;
    var pub = &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;(name: string, ...args: any) &lt;span class=&quot;tuple&quot;&gt;{
        if (!regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;[name]) return;

            regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;[name].&lt;span class=&quot;function_name&quot;&gt;forEach&lt;/span&gt;(x =&amp;gt; &lt;span class=&quot;tuple&quot;&gt;{
                x.&lt;span class=&quot;function_name&quot;&gt;apply&lt;/span&gt;(null, args);
            }&lt;/span&gt;);
    }

    var sub = &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;(name: string, fn: any) &lt;span class=&quot;tuple&quot;&gt;{
        if (!regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;[name])&lt;span class=&quot;tuple&quot;&gt;{
            regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;[name] = [fn];
        } else &lt;span class=&quot;tuple&quot;&gt;{
            regis&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;[name].&lt;span class=&quot;function_name&quot;&gt;push&lt;/span&gt;(fn);
        }
    }

    export var &lt;span class=&quot;variable&quot;&gt;Pub&lt;/span&gt; = pub;
    export var &lt;span class=&quot;variable&quot;&gt;Sub&lt;/span&gt; = sub;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s pretty simplistic and I&amp;#39;ve gone with using the &lt;code&gt;Array.forEach&lt;/code&gt; method rather than just a normal &lt;code&gt;for&lt;/code&gt; loop for no reason other than I felt like it.&lt;/p&gt;
&lt;p&gt;It could be used like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;PubSub.Sub(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;rest_arg&quot;&gt;...args&lt;/span&gt;: any)&lt;/span&gt; {&lt;/span&gt;
     args.forEach(x =&amp;gt; {
         console.log(&lt;span class=&quot;string&quot;&gt;'argument'&lt;/span&gt;, x);
     });
});

PubSub.Pub(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);

setTimeout(() =&amp;gt; {
    PubSub.Pub(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;);
}, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See, it&amp;#39;s just a pub/ sub library.&lt;/p&gt;
&lt;p&gt;There is a few interesting thoughts here though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt; is not valid as an argument constraint&lt;ul&gt;
&lt;li&gt;I&amp;#39;m assuming that&amp;#39;s just a limitation in the current compiler, you have to use &lt;code&gt;any&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;They have splat support, &lt;code&gt;...args&lt;/code&gt;, which is another ES6 proposal and can be quite useful&lt;/li&gt;
&lt;li&gt;I couldn&amp;#39;t work out how to define a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; to accurately represent what &lt;code&gt;registry&lt;/code&gt; is, since it&amp;#39;s really an expando object&lt;/li&gt;
&lt;li&gt;You always have to do &lt;code&gt;export var &amp;lt;member name&amp;gt;  = &amp;lt;what to export&amp;gt;&lt;/code&gt;, this annoyed me as I like to define everything up front and then later selectively export. I kept getting errors with &lt;code&gt;export pub&lt;/code&gt; because I didn&amp;#39;t have a &lt;code&gt;var&lt;/code&gt; in there&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;For me it&amp;#39;s pretty &lt;em&gt;meh&lt;/em&gt; an experience. I&amp;#39;ve been doing JavaScript for long enough that the features added to &lt;em&gt;language&lt;/em&gt; thus far aren&amp;#39;t a really compelling reason to go and write it over JavaScript. &lt;/p&gt;
&lt;p&gt;What I have liked is the ability to use ES6 idioms (splats, modules, etc) is nice. &lt;/p&gt;
&lt;p&gt;I&amp;#39;m curious to see what other things it will drive &lt;em&gt;cough source maps cough&lt;/em&gt; in the future, but for the time being I&amp;#39;m not going to convert all my JavaScript files over.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Hello db.js</title>
            <link href="/posts/2012-10-01-hello-dbjs.html"/>
            <updated>2012-10-01T00:00:00.000Z</updated>
            <id>/posts/2012-10-01-hello-dbjs.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;I&amp;#39;m going to make the assumption you&amp;#39;re somewhat familiar with IndexedDB in this post, if you&amp;#39;re not check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB/Using_IndexedDB&quot;&gt;this tutorial&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve spent any time looking at &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt; you&amp;#39;ll have to agree that the API leaves a lot to be desired. Look IndexedDB is a great feature of modern browsers but the problem is that its API is not really designed around modern JavaScript practices.&lt;/p&gt;
&lt;p&gt;In particular I really dislike that you have to do stuff like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;sql&quot;&gt;request.onerror = function(event) {
  // &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Do&lt;/span&gt; something &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; request.errorCode!
};&lt;/span&gt;
request.onsuccess = function(event) {
  // &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Do&lt;/span&gt; something &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; request.result!
};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It really starts getting convoluted when you&amp;#39;re working with the events on the different request objects. Even opening the initial database can be quite ugly, if the version number has changed then you need to handle that event before the success event, doing migrations and all kinds of stuff.&lt;/p&gt;
&lt;p&gt;The other ugliness starts coming into play when you want to hide your database code behind a public facing API, you&amp;#39;re constantly having to take in callback arguments and it&amp;#39;s Christmas trees all around.&lt;/p&gt;
&lt;p&gt;On top of this if you look at the code above it feels very reminiscent of old-IE event wire-ups, &lt;code&gt;onclick&lt;/code&gt; and all that fun stuff, but today the &lt;a href=&quot;http://wiki.commonjs.org/wiki/Promises&quot;&gt;Promise&lt;/a&gt; callback pattern is a much more popular one (&lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blinking-marquee&quot;&gt;you&amp;#39;ve probably seen it in jQuery&lt;/a&gt;) as it does a great job of standardizing how you provide callbacks.&lt;/p&gt;
&lt;p&gt;This was my impression when I started with IndexedDB so I decided that I&amp;#39;d address it in my own way.&lt;/p&gt;
&lt;h1&gt;Hello db.js&lt;/h1&gt;
&lt;p&gt;I created a simple little library called &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;db.js&lt;/a&gt; which aims to simplify the problems I was finding with IndexedDB&amp;#39;s API. It&amp;#39;s open source, it&amp;#39;s up on GitHub and it&amp;#39;s currently in production running my &lt;a href=&quot;http://pinboard.aaron-powell.com&quot;&gt;Pinboard for Windows 8 application&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Addressing callbacks&lt;/h1&gt;
&lt;p&gt;The first design goal of db.js was to address the way callbacks were handled. As I said above I really dislike the &lt;code&gt;.onsuccess = function () { ... };&lt;/code&gt; syntax that IndexedDB uses and I really like the Promise API.&lt;/p&gt;
&lt;p&gt;For db.js I decided that everything would be handled through Promises to keep consistencies with the various callbacks that would be happening. Another decision was that I wouldn&amp;#39;t take a dependency on any existing library that provides a Promise API (like jQuery) to keep db.js as agnostic as possible. So I implemented my own Promise API, as per the CommonJS specification that would power db.js (the Promise spec is pretty easy to implement really).&lt;/p&gt;
&lt;h1&gt;Opening a connection&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s a few things that you need to do when opening a server connection, you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide the name of the server&lt;/li&gt;
&lt;li&gt;Provide a schema version&lt;ul&gt;
&lt;li&gt;If the schema version is newer then you have to handle a schema change&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Listen of a success or fail method and react accordingly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than through a series of properties or arguments that you set I went with an object literal, so creating a connection is like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var promise = db.open({
    &lt;span class=&quot;method&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'my-app'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;schema:&lt;/span&gt; { 
        &lt;span class=&quot;method&quot;&gt;people:&lt;/span&gt; { }
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This opens a connection to the database server &lt;code&gt;my-app&lt;/code&gt; on the current domain and the version of that server is &lt;code&gt;1&lt;/code&gt;, which uses the provided schema, which has a single store (aka, table) called &lt;code&gt;people&lt;/code&gt;. If you want more object stores then just add another property to the &lt;code&gt;schema&lt;/code&gt; object, each named property becomes an object store name.&lt;/p&gt;
&lt;p&gt;This returns a &lt;code&gt;Promise&lt;/code&gt; object which is implemented as per the CommonJS spec so you have to listen for the success handler to move on:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;promise.&lt;/span&gt;done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(server)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;window.&lt;/span&gt;server = server;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can get a bit tricky there, you don&amp;#39;t have an active server connection &lt;em&gt;until&lt;/em&gt; the &lt;code&gt;done&lt;/code&gt; function is called. The argument it is provided is a db.js &lt;code&gt;Server&lt;/code&gt; object which maintains the active connection. &lt;strong&gt;Make sure you expose that out otherwise your server connection will be lost!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Since opening the connection is an asynchronous operation you need to make sure any code that will use the server is told to wait for it. The connection generally opens quickly but when you can use it isn&amp;#39;t known. This is something that can easily trip you up.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Persisting the connection&lt;/h2&gt;
&lt;p&gt;What you&amp;#39;ll notice from the above code is that it is making the server a &lt;em&gt;global&lt;/em&gt; object in my application. The expectation of db.js is that you only ever have one &lt;code&gt;Server&lt;/code&gt; object, if you descope it you loose your access to the connection, but this does not &lt;em&gt;close&lt;/em&gt; the connection. IndexedDB only allows one connection per server to be open at any given time, so keep that in mind in your application.&lt;/p&gt;
&lt;p&gt;That said db.js will try and be smart about connection management, it caches the connections internally so if you try and re-open a connection it will return you the existing one.&lt;/p&gt;
&lt;h2&gt;Closing the connection&lt;/h2&gt;
&lt;p&gt;Since our connection is a singleton there may be times you don&amp;#39;t need it hanging around, to do this you need to close it off:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;server&lt;span class=&quot;preprocessor&quot;&gt;.close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be aware though that the connection &lt;em&gt;may not&lt;/em&gt; close immediately, &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#dfn-steps-for-closing-a-database-connection&quot;&gt;IndexedDB has steps it must follow&lt;/a&gt; to close a connection. Once the connection is closed the &lt;code&gt;Server&lt;/code&gt; instance that db.js provided you with will raise an error any time you try and work against it.&lt;/p&gt;
&lt;h1&gt;Accessing a store&lt;/h1&gt;
&lt;p&gt;Now that you have a connection db.js will be smart about what stores you have available. What it does is go through all the stores on your connection and create them as properties of the server, allowing quick access to them. Let&amp;#39;s see how that works by adding some data.&lt;/p&gt;
&lt;h2&gt;Adding data&lt;/h2&gt;
&lt;p&gt;IndexedDB has a really nice feature when it comes to adding data (well doing any operation really), it has transaction support! The problem is that because of this everything takes lot more code to do. With db.js this is seemlessly handled for you and when you&amp;#39;re doing bulk inserts it&amp;#39;ll even take care of that:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;var promise = &lt;span class=&quot;built_in&quot;&gt;server&lt;/span&gt;.people
    .add({
        firstName: &lt;span class=&quot;comment&quot;&gt;'Aaron',&lt;/span&gt;
        lastName: &lt;span class=&quot;comment&quot;&gt;'Powell'&lt;/span&gt;
    }, {
        firstName: &lt;span class=&quot;comment&quot;&gt;'John',&lt;/span&gt;
        lastName: &lt;span class=&quot;comment&quot;&gt;'Smith'&lt;/span&gt;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you&amp;#39;ll notice we&amp;#39;re accessing the &lt;code&gt;people&lt;/code&gt; property on our &lt;code&gt;server&lt;/code&gt;, this tells db.js which of our object stores we want to work against. Next you pass in one or more items that represent the objects you want to store and then the method returns a Promise. To know when you have added all records use a &lt;code&gt;done&lt;/code&gt; handler:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;promise.&lt;/span&gt;done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(records, server)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(records);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;done&lt;/code&gt; method will be provided with the records &lt;em&gt;after&lt;/em&gt; they go into IndexedDB, this means that if you&amp;#39;re using an auto-incrementing key it&amp;#39;ll have been added to the record so you can then access it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I&amp;#39;ll cover off how to set up a key on an object store in a future post.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Promise &lt;code&gt;progress&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;ve read the Promise spec you&amp;#39;ll notice that it includes a reference to a &lt;code&gt;progress&lt;/code&gt; method. This is used to keep the application &amp;quot;in the loop&amp;quot; when an asynchronous job is running. When you are using the &lt;code&gt;add&lt;/code&gt; method in db.js it will trigger the &lt;code&gt;progress&lt;/code&gt; method &lt;strong&gt;for each record that is inserted&lt;/strong&gt;. This is because there are two levels of asynchronous jobs happening in the &lt;code&gt;add&lt;/code&gt; process, you have the overall &lt;code&gt;transaction&lt;/code&gt; status and the individual record status. I see the main use for this is when you are doing a large insert into IndexedDB (say the first time the user comes to the application) and you want them to know not to hit refresh.&lt;/p&gt;
&lt;h2&gt;Removing data&lt;/h2&gt;
&lt;p&gt;Removing records is just as simple as adding them:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;server.&lt;/span&gt;people
    .remove(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
    .done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(key)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'removed record with key `1`'&lt;/span&gt;);
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to provide the key of the record you wish to remove and it&amp;#39;ll go off and do it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Currently db.js doesn&amp;#39;t support bulk removal.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Accessing a record&lt;/h2&gt;
&lt;p&gt;You&amp;#39;ve got a record into your store, how about getting it back out again?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;server.&lt;/span&gt;people
    .get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
    .done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(person)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'The person with the primary key `1` is... '&lt;/span&gt;, person);
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; method takes a single key and returns the record that matches it. Essentially it&amp;#39;s a pass through to the &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/#widl-IDBObjectStore-get-IDBRequest-any-key&quot;&gt;native &lt;code&gt;get&lt;/code&gt; metohd of IndexedDB&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Accessing multiple records&lt;/h2&gt;
&lt;p&gt;If you want to get back multiple records db.js has a very extensive query API which supports all of the IndexedDB query methods, as well as adding some additional sugar on top. Here&amp;#39;s a basic &amp;quot;get all&amp;quot; operation:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;server&lt;span class=&quot;preprocessor&quot;&gt;.people&lt;/span&gt;
    &lt;span class=&quot;preprocessor&quot;&gt;.query&lt;/span&gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.all&lt;/span&gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.execute&lt;/span&gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.done&lt;/span&gt;(function (people) {
        console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(people)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a few steps you need to go through, first all the querying is done via the &lt;code&gt;query&lt;/code&gt; API. From here we use the &lt;code&gt;all&lt;/code&gt; method which is exposed, it tells IndexedDB to get back each record in an unfiltered manner. Once we&amp;#39;re done setting up our query we call the &lt;code&gt;execute&lt;/code&gt; method which tells db.js to take the rules we&amp;#39;ve specified and pass them through to IndexedDB. Ultimately a &lt;code&gt;Promise&lt;/code&gt; is returned and we can listen for the resulting data.&lt;/p&gt;
&lt;p&gt;The reason for the &lt;code&gt;execute&lt;/code&gt; method is because there&amp;#39;s a lot more we can do from the query. Through this we have a nice fluent chaining API that we can structure our query before it is run. In my next post we&amp;#39;ll look at how to do more powerful querying with db.js.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This has been a very quick overview of &lt;a href=&quot;http://github.com/aaronpowell/db.js&quot;&gt;db.js&lt;/a&gt; and the approach I&amp;#39;ve taken to simplify working with IndexedDB.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Teched 2012 - HTML &amp; JavaScript Windows 8 apps</title>
            <link href="/posts/2012-09-26-teched-2012.html"/>
            <updated>2012-09-26T00:00:00.000Z</updated>
            <id>/posts/2012-09-26-teched-2012.html</id>
            <content type="html">&lt;p&gt;Couldn&amp;#39;t make it to Teched Australia this year?&lt;/p&gt;
&lt;p&gt;Made it and absolutely loved my session?&lt;/p&gt;
&lt;p&gt;Well good news everybody, it&amp;#39;s now online for your viewing pleasure, &lt;a href=&quot;http://channel9.msdn.com/Events/TechEd/Australia/2012/DEV322&quot;&gt;check it out here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This year my session was looking at doing Windows 8 applications using HTML and JavaScript. Through the session I looked at things that I learnt while building &lt;a href=&quot;http://pinboard.aaron-powell.com/&quot;&gt;my application&lt;/a&gt;, things that you need to watch out for and stuff that just plain sucks.&lt;/p&gt;
&lt;p&gt;Hopefully it helps you avoid grief in your on WinJS applications.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How to check if a file exists in Windows 8</title>
            <link href="/posts/2012-09-24-check-if-file-exists.html"/>
            <updated>2012-09-24T00:00:00.000Z</updated>
            <id>/posts/2012-09-24-check-if-file-exists.html</id>
            <content type="html">&lt;p&gt;Sometimes things are simple, sometimes they aren&amp;#39;t when you think they should be. One such thing in Windows 8 development is checking if a file exists...&lt;/p&gt;
&lt;p&gt;In a Windows 8 app (be it C# or JavaScript) you work with the &lt;a href=&quot;http://msdn.microsoft.com/library/windows/apps/BR227230&quot;&gt;&lt;code&gt;StorageFolder&lt;/code&gt;&lt;/a&gt;. Since we are sandboxed and don&amp;#39;t really have file-system access we don&amp;#39;t have the &lt;code&gt;System.IO&lt;/code&gt; namespace as we&amp;#39;re use to meaning we have an entirely new set of APIs for reading a writing files (although it&amp;#39;s nice that they are built around being asynchronous). The fun thing about &lt;code&gt;StorageFolder&lt;/code&gt; is it has no method like &lt;code&gt;FileExistsAsync&lt;/code&gt;. Yep, there&amp;#39;s no API which will allow you to work out whether a file exists or not...&lt;/p&gt;
&lt;p&gt;So how do you do it?&lt;/p&gt;
&lt;h1&gt;EDD, Exception Driven Development&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve done much Windows 8 development you&amp;#39;ll have learnt that a lot of the methods you&amp;#39;d expect to return null values or have a &lt;code&gt;TryGetFoo&lt;/code&gt; method will actually raise an exception when the take can&amp;#39;t be completed. &lt;code&gt;StorageFolder&lt;/code&gt; is no exception to this rule.&lt;/p&gt;
&lt;p&gt;Although I can&amp;#39;t find it documented anywhere it seems that the only way you can check if a file exists if with this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;StorageFile&lt;/span&gt; file;
&lt;span class=&quot;title&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;file&lt;/span&gt; = await ApplicationData.Current.LocalStorage.GetFileAsync(&lt;span class=&quot;string&quot;&gt;&quot;foo.txt&quot;&lt;/span&gt;);
}
&lt;span class=&quot;title&quot;&gt;catch&lt;/span&gt; (FileNotFoundException) {
    &lt;span class=&quot;title&quot;&gt;file&lt;/span&gt; = null;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems to consistently throw the &lt;code&gt;FileNotFoundException&lt;/code&gt; when it doesn&amp;#39;t exist (which I guess makes sense :P), but the problem is that you end up with this try/ catch block where you&amp;#39;re essentially swallow an exception (and everything in my programming past tells me that that&amp;#39;s a bad idea).&lt;/p&gt;
&lt;p&gt;Well the logic is pretty straight forward so here&amp;#39;s an extension method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StorageFolderExtensions&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&amp;gt; FileExistsAsync(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; StorageFolder folder, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; fileName)
    {
        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
        {
            await folder.GetFileAsync(fileName);
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException)
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or grab the &lt;a href=&quot;https://gist.github.com/3773739&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;WinJS file exists&lt;/h1&gt;
&lt;p&gt;So that above is all well and good in C#/ XAML Windows 8 applications, but what if you&amp;#39;re like me and would prefer to just use WinJS?&lt;/p&gt;
&lt;p&gt;Well the API is slightly less shit for WinJS, true you still don&amp;#39;t have any easy way to check if a file exists or not but instead of being exception based it handles it through &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx&quot;&gt;promises&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; folder = Windows.Storage.ApplicationData.current.roamingFolder;
folder.getFileAsync(&lt;span class=&quot;string&quot;&gt;'foo.txt'&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(file)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//process with a valid file&lt;/span&gt;
}, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//no file was found&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this is &lt;em&gt;somewhat&lt;/em&gt; nicer as you don&amp;#39;t have to try/ catch the error it&amp;#39;s still not ideal. One of the main problems here is there&amp;#39;s no way to know &lt;em&gt;what&lt;/em&gt; error was raised. Since JavaScript doesn&amp;#39;t have typed error handling like C# any error that comes from the &lt;code&gt;getFileAsync&lt;/code&gt; method goes into the same error handler. This can be a bit of a pain although I&amp;#39;m struggling to find any documentation on what else could be raised.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s three things you can do in this case:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assume that it is the WinJS equivilent of &lt;code&gt;FileNotFoundException&lt;/code&gt; and treat all errors the same (this is probably the best way, you don&amp;#39;t have a file, do you really care why?)&lt;/li&gt;
&lt;li&gt;You can check the message contains something stating the file didn&amp;#39;t exist, but if you do this make sure you&amp;#39;re taking localisation into account!&lt;/li&gt;
&lt;li&gt;Cast it to it&amp;#39;s &lt;em&gt;base error type&lt;/em&gt; and go from there. This isn&amp;#39;t overly robust as the best you can do is &lt;code&gt;e instanceof WinRTError&lt;/code&gt; as it&amp;#39;s not &lt;em&gt;of type&lt;/em&gt; &lt;code&gt;FileNotFoundException&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;#39;re really keen here&amp;#39;s an &lt;em&gt;extension method&lt;/em&gt; for doing it in WinJS in a very basic manner (&lt;a href=&quot;https://gist.github.com/3773776&quot;&gt;and gist&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;Windows&lt;span class=&quot;preprocessor&quot;&gt;.Storage&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.StorageFolder&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.fileExistsAsync&lt;/span&gt; = function(fileName) {
    var folder = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    return WinJS&lt;span class=&quot;preprocessor&quot;&gt;.Promise&lt;/span&gt;(function (complete, error) {
        folder&lt;span class=&quot;preprocessor&quot;&gt;.getFileAsync&lt;/span&gt;(fileName)&lt;span class=&quot;preprocessor&quot;&gt;.then&lt;/span&gt;(function() {
            complete()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }, function() {
            error()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But realistically I wouldn&amp;#39;t bother, since WinJS uses a Promise for this you can pretty easily split out the logic branch between the found/ not found process without the need for an ugly try/ catch block in place. Hell if you don&amp;#39;t want to do anything when there isn&amp;#39;t a file then you can drop the error callback all together and the application will carry on its merry way.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s no built in method for determining if a file exists or not from a Windows 8 application using the &lt;code&gt;StorageFolder&lt;/code&gt; API. If you&amp;#39;re using C# you&amp;#39;re going to need to handle the &lt;code&gt;FileNotFoundException&lt;/code&gt; and go from there. A simple extension method is easy to create if you&amp;#39;re doing a lot of file IO and want to check files exist. WinJS is marginally better though the different async handling but really it&amp;#39;s just hiding the try/ catch away behind another layer. In this case you can provide different callbacks for the different states which can make the code a little cleaner.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Running a simple git server on Windows</title>
            <link href="/posts/2012-09-21-a-simple-git-server-on-windows.html"/>
            <updated>2012-09-21T00:00:00.000Z</updated>
            <id>/posts/2012-09-21-a-simple-git-server-on-windows.html</id>
            <content type="html">&lt;p&gt;While &lt;a href=&quot;http://mercurial.selenic.com&quot;&gt;Mercurial&lt;/a&gt; still hold a special place in my heart it can&amp;#39;t be denied that &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; has well and truly won the war. Because of this I&amp;#39;ve been using it more extensively in the projects that I work on.&lt;/p&gt;
&lt;p&gt;Recently I started on an engagement at work that was using &lt;a href=&quot;http://en.wikipedia.org/wiki/Team_Foundation_Server&quot;&gt;TFS&lt;/a&gt; as its SCM, but wanting to avoid some of the pain of TFS 2010 I decided to use &lt;a href=&quot;http://gittf.codeplex.com/&quot;&gt;git-tf&lt;/a&gt;. Things all went smoothly, git was communicating nicely to TFS and children danced around the world.&lt;/p&gt;
&lt;p&gt;When the partner who owned the TFS instance rolled off the project the SCM went with them which left me in a pickle, I still had a few weeks left and was looking at the prospect of being SCM-less. For various security reasons I can&amp;#39;t utilise any of the normal hosted SCM&amp;#39;s that I&amp;#39;d go with, so I was left with a problem, I have a complete git history of the project but the only place it lived was on my desktop.&lt;/p&gt;
&lt;h1&gt;Making my own server&lt;/h1&gt;
&lt;p&gt;Having used Mercurial for around 3 years now I&amp;#39;m quite familiar with the &lt;a href=&quot;http://mercurial.selenic.com/wiki/hgserve&quot;&gt;hg serve&lt;/a&gt; command, this is ideal as you run that and you immediately have a basic Mercurial server running that you can push and pull to. This is exactly what I want for git, I&amp;#39;d have a simple server that I can work against and so can the other developer who was coming in few a few days. Unfortunately &lt;em&gt;there is no such command&lt;/em&gt;, you do instead have the &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-daemon.html&quot;&gt;git daemon&lt;/a&gt;, and with a simple command like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;daemon&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;reuseaddr&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;base&lt;/span&gt;-&lt;span class=&quot;comment&quot;&gt;path=&lt;/span&gt;. &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;export&lt;/span&gt;-&lt;span class=&quot;comment&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ve got yourself a git server. Yeah go on, remember &lt;em&gt;that&lt;/em&gt; off the top of your head (yes you just type it once in as an alias I know I know :P)!&lt;/p&gt;
&lt;p&gt;So I run my command, have my server ready for connections and then shit gets ugly.&lt;/p&gt;
&lt;p&gt;As it turns out &lt;a href=&quot;http://msysgit.github.com/&quot;&gt;msysgit&lt;/a&gt;, the de-facto Windows git tools, has some real problems with &lt;code&gt;git daemon&lt;/code&gt;. I was continuously seeing this while trying to clone:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;fatal&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;read error: Invalid argument&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eventually a clone would go through (it&amp;#39;s only a 10mb repo!) but then you&amp;#39;d get a whole different set of problems.&lt;/p&gt;
&lt;p&gt;Again, as it turns out msysgit doesn&amp;#39;t support pushing to &lt;code&gt;git://&lt;/code&gt; repositories on Windows. Well that just sucks then doesn&amp;#39;t it, it left us with &lt;a href=&quot;http://en.wikipedia.org/wiki/Sneakernet&quot;&gt;sneakerneting&lt;/a&gt; our &lt;code&gt;.git&lt;/code&gt; folder so I could maintain the master repository.&lt;/p&gt;
&lt;p&gt;And that got old fast!&lt;/p&gt;
&lt;h1&gt;Next up, cygwin&lt;/h1&gt;
&lt;p&gt;So now that msysgit was out the next idea was to use &lt;a href=&quot;http://www.cygwin.com/&quot;&gt;cygwin&lt;/a&gt;. I&amp;#39;ve been avoiding installing cygwin on any machines for quite some time now as it really frustrates the hell out of me but I got sent &lt;a href=&quot;http://stackoverflow.com/questions/233421/hosting-git-repository-in-windows&quot;&gt;this stack overflow post&lt;/a&gt; which made it seem quite easy to get it up and running.&lt;/p&gt;
&lt;p&gt;Well I followed the instructions and started up my sever and it all seemed good, I could pull from it without any problems. Yay!&lt;/p&gt;
&lt;p&gt;But of course it was time for another problem, I kept having &lt;code&gt;git push&lt;/code&gt; hang at &lt;a href=&quot;http://stackoverflow.com/questions/7104182/git-push-halts-on-writing-objects-100&quot;&gt;100% of writing objects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Again this seems to be a fairly common problem with git on Windows pushing to cygwin git daemons and to which there&amp;#39;s no decent solution.&lt;/p&gt;
&lt;h1&gt;Ditching Windows&lt;/h1&gt;
&lt;p&gt;Basically all my research has suggested to me that the idea of trying to host a git server on Windows is just a bad idea. Sure there were other avenues that I hadn&amp;#39;t tried, such as using a network share to store my git repository and push/ pulling over that, but I didn&amp;#39;t want to futz around with network security here for this task (people also suggested using Dropbox but that is nullified by the fact that the source can&amp;#39;t be hosted outside of the local network), I just wanted a damn git server and my only remaining option that I could see was Linux.&lt;/p&gt;
&lt;p&gt;Since my machine is running Windows 8 I&amp;#39;ve got Hyper-V built in so that&amp;#39;s one problem down, I didn&amp;#39;t have to install VirtualBox (its installer wants me to trust Oracle, I just can&amp;#39;t do that :P) or VMWare Player or anything like that, just enable a Windows feature. The next question, what distro to use...&lt;/p&gt;
&lt;p&gt;Wow, there&amp;#39;s a can of worms you can open, ask people what Linux distro to use... I&amp;#39;ll admit that it&amp;#39;s been quite a few years since I last used Linux so I&amp;#39;m not really up with what the kids are using these days but all I want are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something light-weight, I&amp;#39;m running a Git server on it, that&amp;#39;s all&lt;/li&gt;
&lt;li&gt;Something easy to setup, I don&amp;#39;t have time (or the desire) to really get in and configure Linux&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t need a GUI, I&amp;#39;m happy on the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So &lt;a href=&quot;http://archlinux.org&quot;&gt;ArchLinux&lt;/a&gt; and &lt;a href=&quot;http://www.puppylinux.com&quot;&gt;PuppyLinux&lt;/a&gt; were two of the top recommended distros, but they&amp;#39;d require a bit of setup to get running. Then a colleague of mine recommended &lt;a href=&quot;http://www.turnkeylinux.org/gitlab&quot;&gt;GitLab&lt;/a&gt;, a variation of Turnkey that is basically just a pre-built git server. Sweet that sounds exactly like what I want.&lt;/p&gt;
&lt;p&gt;I downloaded GitLab, booted Hyper-V, attached the ISO and kicked off the installer. After being prompted for some credentials to log in and having to use the &lt;strong&gt;Legacy Network Adapter&lt;/strong&gt; in Hyper-V (apparently Turnkey supports the standard one but 5 minutes of configuring modules didn&amp;#39;t work for me so I went &amp;#39;meh, legacy it is&amp;#39; :P) my git server was up and running!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For the record my VM specs are a 5GB hard drive and it has 512mb RAM dedicated to it. I was tempted to drop it down to 256mb as it really just idles mostly but I&amp;#39;ve got RAM to spare.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next step was to log into the web portal, setup a git project on the server and add my public key and &lt;em&gt;it just worked&lt;/em&gt;. Seriously, I was &lt;strong&gt;shocked&lt;/strong&gt; that it was that simple!&lt;/p&gt;
&lt;p&gt;I even managed to get the other developer (who prefers GUI tools over command line, weirdo!) setup to use &lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt; against my GitLab server.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Want to run a git server on Windows? Don&amp;#39;t bother, install GitLab, it takes about 10 minutes to be up and running with that in a VM.&lt;/p&gt;
&lt;p&gt;The more I&amp;#39;ve been using GitLab the more I&amp;#39;m liking it, it&amp;#39;s got a nifty little web UI, we can see the repository information, all that fun stuff that distracts you from actually doing work.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>The settings suck</title>
            <link href="/posts/2012-09-14-settings-suck.html"/>
            <updated>2012-09-14T00:00:00.000Z</updated>
            <id>/posts/2012-09-14-settings-suck.html</id>
            <content type="html">&lt;h1&gt;Settings problems&lt;/h1&gt;
&lt;p&gt;My first Windows 8 application I wrote using WinJS so a lot of my expectations on how settings worked in Windows 8 XAML was based off of that experience. Unfortunately from the looks of it the two teams had &lt;em&gt;very&lt;/em&gt; different ideas on whether settings were important or not and thus we have drastically different experiences.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the problems I&amp;#39;ve hit so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up settings, if you do this &amp;quot;too early&amp;quot; (ie - before the app has fired off its Activated event) it crashes as the settings pane doesn&amp;#39;t exist&lt;/li&gt;
&lt;li&gt;There&amp;#39;s no built-in settings control&lt;/li&gt;
&lt;li&gt;Since there&amp;#39;s no control there&amp;#39;s no way to navigate to a particular settings pane&lt;/li&gt;
&lt;li&gt;You use an event handler to register settings panes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the exception of the last point (which sucks in both platforms) these are problems specific to XAML based Windows 8 applications. What absolutely baffles me is that there&amp;#39;s no settings stuff built into the platform, seriously, did no one think that that &lt;strong&gt;would be important&lt;/strong&gt;? I mean it&amp;#39;s not like you &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx#4.1.1_Your_app_must_have_a_privacy_statement_if_it_collects_personal_information&quot;&gt;need to have a section in settings about privacy or anything&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Problem 1 - No built in control&lt;/h1&gt;
&lt;p&gt;So let&amp;#39;s start with the big one, the lack of built in control. It&amp;#39;s reasonably trivial to roll you&amp;#39;re own, as long as you take into account the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTL vs LTR displays will open the settings on different sites, make sure you know which side the system settings are opening from and make your settings come from that site as well&lt;/li&gt;
&lt;li&gt;You&amp;#39;ll want it to animate in, check out the settings on the start screen, they have a nice little fly in so you&amp;#39;ll want to replicate that yourself&lt;/li&gt;
&lt;li&gt;You&amp;#39;ll want a back button so your user can easily flick back to the overall settings pane&lt;/li&gt;
&lt;li&gt;Make sure it&amp;#39;s in the allowed widths, either 346 or 646 in width&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to look into creating it there&amp;#39;s a blog &lt;a href=&quot;http://blog.jerrynixon.com/2012/08/how-to-create-windows-8-settings-pane.html&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;http://code.msdn.microsoft.com/windowsapps/App-settings-sample-1f762f49&quot;&gt;the official sample&lt;/a&gt; that covers all the steps you&amp;#39;ll be wanting to go through.&lt;/p&gt;
&lt;p&gt;But realistically don&amp;#39;t roll your own, check out the &lt;a href=&quot;https://github.com/timheuer/callisto&quot;&gt;Callisto&lt;/a&gt;. It has a built in settings flyout that works very similar to the one in WinJS which is ace. Maybe the next version will just roll that into the platform.&lt;/p&gt;
&lt;h1&gt;Problem 2 - Wiring up settings&lt;/h1&gt;
&lt;p&gt;Say you want to have a global settings pane, maybe your privacy policy, well you&amp;#39;re going to want to register this in the &amp;quot;global&amp;quot; part of the application. My initial instinct was to do this in the App.xaml.cs constructor. Seemed logical, it was something that I knew would only be executed once and well you&amp;#39;re only registering an event handler through a static so that seemed good enough.&lt;/p&gt;
&lt;p&gt;But no, no it&amp;#39;s not. The problem is (and it&amp;#39;s not clear to me from the documentation) that &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.applicationsettings.settingspane.getforcurrentview.aspx&quot;&gt;&lt;code&gt;SettingsPane.GetForCurrentView()&lt;/code&gt;&lt;/a&gt; if you don&amp;#39;t have a view (ie - you&amp;#39;re in the App constructor) then it will through a very unhelpful exception. Now sure, this may be &lt;em&gt;me&lt;/em&gt; making a mistaken assumption on when you can register settings as in WinJS that&amp;#39;s when you do it (well technically not in a constructor since there&amp;#39;s no constructor really but you do it bright and early)!&lt;/p&gt;
&lt;h2&gt;When to register&lt;/h2&gt;
&lt;p&gt;So once you learn that you need to do it &lt;em&gt;later&lt;/em&gt; the question is when? Well it turns out that this is where you need to be paying attention to the event model of Windows 8 applications, in particular the &lt;code&gt;Activated&lt;/code&gt; event. This event is the first point that I&amp;#39;ve been able to find you can register settings panes (or at least access the current view to setup the event handler).&lt;/p&gt;
&lt;p&gt;Ideally you also want to check the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.applicationmodel.activation.activationkind&quot;&gt;&lt;code&gt;ActivationKind&lt;/code&gt;&lt;/a&gt; so you only register when your application first launches and not other times to avoid duplicate registration.&lt;/p&gt;
&lt;h2&gt;Non-global settings&lt;/h2&gt;
&lt;p&gt;Sometimes you might want settings which are not always there. Say you&amp;#39;ve got some context-specific help that you want the users to be able to access, there&amp;#39;d be no point having that available from every screen as it might introduce confusion about what the context is.&lt;/p&gt;
&lt;p&gt;Well it turns out you can unregister settings panes by simply removing the event handler, so if you&amp;#39;ve got this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;SettingsPane&lt;span class=&quot;variable&quot;&gt;.GetForCurrentView&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.CommandRequested&lt;/span&gt; += OnCommandRequested&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you then remove that event handler:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;SettingsPane&lt;span class=&quot;variable&quot;&gt;.GetForCurrentView&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.CommandRequested&lt;/span&gt; -= OnCommandRequested&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any settings created there are automatically removed.&lt;/p&gt;
&lt;p&gt;The ideal way to use this would be inside your &lt;code&gt;OnNavigatedTo&lt;/code&gt; and &lt;code&gt;OnNavigatedFrom&lt;/code&gt; methods (which come from the &lt;code&gt;Page&lt;/code&gt; base class) you add/ remove the event handlers.&lt;/p&gt;
&lt;h1&gt;Problem 3 - Navigation&lt;/h1&gt;
&lt;p&gt;Since there&amp;#39;s no built-in control and no real settings concept in the platform you can&amp;#39;t &amp;quot;go to&amp;quot; a settings pane. Coming from WinJS I found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/hh770581.aspx&quot;&gt;&lt;code&gt;SettingsFlyout.showSettings&lt;/code&gt;&lt;/a&gt; really quite useful, but since there&amp;#39;s no comparative API in XAML you&amp;#39;re pretty much stuffed.&lt;/p&gt;
&lt;p&gt;So far the &lt;em&gt;best&lt;/em&gt; answer I&amp;#39;ve got from anyone on how to do this is to make your settings flyout (the one from Callisto) a &amp;quot;global&amp;quot; variable so you can change the &lt;code&gt;IsOpen&lt;/code&gt; property of it to programmatically show it.&lt;/p&gt;
&lt;p&gt;Now that just plain sucks.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Yes this was mostly a rant. As I keep saying the settings in Windows 8 XAML sucks. There&amp;#39;s some very pointy edges, particularly when you are comparing the experience to the WinJS experience.&lt;/p&gt;
&lt;p&gt;My tips are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Callisto, it&amp;#39;s got a great control for doing settings (and many other good controls)&lt;/li&gt;
&lt;li&gt;Know when and where you need to wire up your event handlers, ideally the Activated event but you can scope them to a particular page&lt;/li&gt;
&lt;li&gt;Try to avoid a UX which requires the users to be forced into the settings, have it discoverable and intuitive for them&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating classes in WinJS</title>
            <link href="/posts/2012-09-14-creating-classes.html"/>
            <updated>2012-09-14T00:00:00.000Z</updated>
            <id>/posts/2012-09-14-creating-classes.html</id>
            <content type="html">&lt;p&gt;Sure using classes in JavaScript &lt;em&gt;may&lt;/em&gt; not be a great idea, you can&amp;#39;t help but argue that there are valid scenarios which you would be wanting to use the class pattern.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re doing WinJS development there&amp;#39;s an API that will allow you to make classes easily, &lt;code&gt;WinJS.Class&lt;/code&gt; being the root. From here you can define new classes, derive classes or create mixins.&lt;/p&gt;
&lt;h1&gt;Creating a class&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s very easy to create a class using the WinJS API, here&amp;#39;s a simple person:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt; var Person = &lt;span class=&quot;transposed_variable&quot;&gt;WinJS.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;Class.&lt;/span&gt;define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;this.&lt;/span&gt;firstName = firstName;
    &lt;span class=&quot;transposed_variable&quot;&gt;this.&lt;/span&gt;lastName = lastName;
});

var me = new Person(&lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;);
&lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;transposed_variable&quot;&gt;me.&lt;/span&gt;firstName + &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;transposed_variable&quot;&gt;me.&lt;/span&gt;lastName);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not very exciting is it?&lt;/p&gt;
&lt;p&gt;Well let&amp;#39;s say you want to add some instance members:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = WinJS.Class.define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
}, {
    sayHello: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
       console.log(&lt;span class=&quot;string&quot;&gt;'Hello there good sir'&lt;/span&gt;);
    }
});

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; me = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;);

me.sayHello();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The 2nd argument to the &lt;code&gt;define&lt;/code&gt; method is a JavaScript object that represents the &lt;em&gt;public instance&lt;/em&gt; members which you will have available on your class. There&amp;#39;s also a third argument you can use which allows you to create &lt;em&gt;public static&lt;/em&gt; members.&lt;/p&gt;
&lt;h2&gt;Powerful properties&lt;/h2&gt;
&lt;p&gt;Something that I found rather cool and not particularly well documented is how the properties are created (both the instance and static properties). Internally they are created using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;&lt;code&gt;Object.defineProperties&lt;/code&gt;&lt;/a&gt; method, and since this is ECMAScript 5 we&amp;#39;re able to do some cool things, such as leveraging the new property features, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = WinJS.Class.define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
}, {
    fullName: {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName + &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName; }
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve done here is used a property descriptor to create a &lt;strong&gt;read only&lt;/strong&gt; property which calculates a value based off of other properties on the object. WinJS takes this information and then creates it properly so I can do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(me&lt;span class=&quot;preprocessor&quot;&gt;.fullName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I then try and &lt;code&gt;set&lt;/code&gt; the value of &lt;code&gt;fullName&lt;/code&gt; nothing will happen, it gets ignored.&lt;/p&gt;
&lt;p&gt;You can also leverage this to create properties with validation in them:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = WinJS.Class.define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
}, {
    fullName: {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName + &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName; }
    },
    age: {
       &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._age;
       },
       &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt; {&lt;/span&gt;
           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
               &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Age must be greater than or equal to 0'&lt;/span&gt;;
           }

           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._age = value;
       }
   },
   _age: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I have a more intelligent property in &lt;code&gt;age&lt;/code&gt;, it will do validation to make sure that you don&amp;#39;t have a negative age and it stores its information in a pseudo-private property, that being &lt;code&gt;_age&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pseudo-private property? Huh? Since JavaScript doesn&amp;#39;t really have the notion of classes the concept of public/ private members doesn&amp;#39;t exist. You &lt;em&gt;can&lt;/em&gt; have things internal to the &amp;quot;constructor&amp;quot; function, but they can&amp;#39;t be accessed outside of that scope. Instead what WinJS does (and many other class pattern libraries) is uses the &lt;code&gt;_&lt;/code&gt; prefix to denote something as private. While this wont actually be private, it&amp;#39;s a bit harder to learn about (Visual Studio intellisense drops any JavaScript members that start with it for example).&lt;/p&gt;
&lt;p&gt;The other thing that WinJS does to help you hide these members is it will look to see if you&amp;#39;ve provided a property descriptor, and then look for the &lt;code&gt;enumerable&lt;/code&gt; property of it (if you don&amp;#39;t have a property descriptor it creates one and sets &lt;code&gt;enumerable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;). When the &lt;code&gt;enumerable&lt;/code&gt; property on a descriptor is &lt;code&gt;false&lt;/code&gt; (the default too BTW) the property will be skipped when the properties are enumerated by say a &lt;code&gt;for-in&lt;/code&gt; loop or &lt;code&gt;Object.keys&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So these &lt;code&gt;_&lt;/code&gt;-prefixed members are hidden as best as they can be in JavaScript, and it&amp;#39;s really neat that you can use a common coding convention to mark them as hidden rather than having to create a full descriptor yourself.&lt;/p&gt;
&lt;h1&gt;Deriving classes&lt;/h1&gt;
&lt;p&gt;Sometimes just creating a class isn&amp;#39;t enough, you want to have a base class which you can then derive others from. Again since there&amp;#39;s no class system in JavaScript this isn&amp;#39;t native, but through the use of prototypes you can simulate this inheritance. WinJS provides a simple to use API for doing classical inheritance, &lt;code&gt;WinJS.Class.derive&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s use the tacky person-employee example for this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var Employee = WinJS&lt;span class=&quot;preprocessor&quot;&gt;.Class&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.derive&lt;/span&gt;(Person, function (firstName, lastName, position) {
    this&lt;span class=&quot;preprocessor&quot;&gt;.firstName&lt;/span&gt; = firstName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    this&lt;span class=&quot;preprocessor&quot;&gt;.lastName&lt;/span&gt; = lastName&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    this&lt;span class=&quot;preprocessor&quot;&gt;.position&lt;/span&gt; = position&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this as you can probably tell you provide the first argument of the method as the base class and then all arguments beyond that are the same as if you&amp;#39;re calling &lt;code&gt;define&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note - if you don&amp;#39;t provide a base class it will pipe the arguments through to the &lt;code&gt;define&lt;/code&gt; function anyway.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since this inherits from the &lt;code&gt;Person&lt;/code&gt; class I have access to all its members so I can call &lt;code&gt;sayHello&lt;/code&gt; for example, or set the age of  the employee.&lt;/p&gt;
&lt;h2&gt;A gotcha with derived classes&lt;/h2&gt;
&lt;p&gt;While working with the &lt;code&gt;derive&lt;/code&gt; API I hit a problem, &lt;strong&gt;the base class constructor was never called!&lt;/strong&gt; I had a base class that I defined like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Bootstrapper = WinJS.Class.define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; initialised = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;

    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.init = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//do some init stuff&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//eventually call customInit&lt;/span&gt;
    };
}, {
    customInit: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;}
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this was the bootstrapper for my application but I wanted it so I could create an extended version of it for the different parts so I could bootstrap each individually. I then extended it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MainBootstrapper = WinJS.Class.derive(MyApp.Bootstrapper, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
}, {
    customInit: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//do some custom stuff&lt;/span&gt;
    }
});

&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainBootstrapper().init();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this crashes, it crashes because &lt;code&gt;init&lt;/code&gt; was not found on my &lt;code&gt;MainBootstrapper&lt;/code&gt;. Strange, my type inherits from &lt;code&gt;Bootstrapper&lt;/code&gt;, if I create an instance of &lt;code&gt;Bootstrapper&lt;/code&gt; I get that, so why don&amp;#39;t I have the &lt;code&gt;init&lt;/code&gt; method on my derived type?&lt;/p&gt;
&lt;p&gt;Well here&amp;#39;s the problem the &amp;quot;base constructor&amp;quot; is never called. This means that anything done in the constructor of the type you&amp;#39;re inheriting from doesn&amp;#39;t get executed, and since that&amp;#39;s where I was defining my &lt;code&gt;init&lt;/code&gt; method it never got added to the object! The reason for this is that the &lt;code&gt;derive&lt;/code&gt; method only does prototypal inheritance, it doesn&amp;#39;t do constructor inheritance.&lt;/p&gt;
&lt;p&gt;The easiest way to get around this is to move what you&amp;#39;re setting up in your constructor into being setup in the instance members like the earlier &lt;code&gt;Person&lt;/code&gt; example. If this isn&amp;#39;t possible you can solve it in another way by manually calling the base class constructor function yourself, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MainBootstrapper = WinJS.Class.derive(MyApp.Bootstrapper, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    MyApp.Bootstrapper.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);        
}, {
    customInit: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//do some custom stuff&lt;/span&gt;
    }
});

&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainBootstrapper().init();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you&amp;#39;ll notice I&amp;#39;m using the &lt;code&gt;apply&lt;/code&gt; method to invoke the &lt;code&gt;MyApp.Bootstrapper&lt;/code&gt; function. By doing that and passing &lt;code&gt;this&lt;/code&gt; into it we&amp;#39;re setting the scope of the function to be the instance of the &lt;code&gt;MainBootstrapper&lt;/code&gt; being created, which in turn will perform any logic against it and properly extend the &lt;code&gt;MainBootstrapper&lt;/code&gt; object with the base class constructor logic.&lt;/p&gt;
&lt;p&gt;This is a frustrating problem, it took me &lt;em&gt;ages&lt;/em&gt; to work out why my inheritance wasn&amp;#39;t working the way I was expecting it to so watch out if you&amp;#39;re doing classical inheritance in WinJS &lt;em&gt;and&lt;/em&gt; wanting constructor inheritance.&lt;/p&gt;
&lt;h1&gt;Mixins&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;WinJS.Class.mix&lt;/code&gt; function is an interesting one and not something that you&amp;#39;ll likely have come across before. What it does is allow you to implement multiple inheritance in JavaScript (and if you&amp;#39;re a .NETter this wont exactly be familiar :P).&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s revisit our Employee example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var payable = {
    &lt;span class=&quot;method&quot;&gt;accountNumber:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;bsb:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;accountName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;rate:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;
};

var worker = {
    &lt;span class=&quot;method&quot;&gt;expectedHours:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;worksWeekends:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
};

var &lt;span class=&quot;class&quot;&gt;Employee&lt;/span&gt; = &lt;span class=&quot;class&quot;&gt;WinJS&lt;/span&gt;.&lt;span class=&quot;class&quot;&gt;Class&lt;/span&gt;.mix(&lt;span class=&quot;class&quot;&gt;Person&lt;/span&gt;, payable, worker);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here instead of using the &lt;code&gt;derive&lt;/code&gt; function I&amp;#39;ve used &lt;code&gt;mix&lt;/code&gt; to create our Employee. This time I&amp;#39;ve got a few objects that represent various things that could make up my employee type and I use &lt;code&gt;mix&lt;/code&gt; to ultimately put them all together. The first argument is the constructor function which you want to use, so my &lt;code&gt;Person&lt;/code&gt; class goes there and then it&amp;#39;s essentially a &lt;code&gt;param[]&lt;/code&gt; argument, everything that&amp;#39;s used after the constructor has its properties copied onto the object, building up the members of it. Again this has the same property creation logic as &lt;code&gt;define&lt;/code&gt; so you can make pseudo-privates, you can add get/ set bodies, etc.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So this wraps up our look at the &lt;code&gt;WinJS.Class&lt;/code&gt; API. I&amp;#39;m not trying to convince you that you should use classes in your JavaScript code but instead have a look a the API for it if/ when you reach the point that you think classes can have benefits inside of your WinJS application.&lt;/p&gt;
&lt;p&gt;I also wanted to document some of the more intelligent features about how you can create classes, that it&amp;#39;s smart enough to look for, and use, the ECMAScript 5 properties as well as taking conventions into account for creating privates. I also wanted to raise the problem that you can hit with the way classical inheritance is implemented in WinJS.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Text casing and Examine</title>
            <link href="/posts/2012-09-05-text-casing-and-examine.html"/>
            <updated>2012-09-05T00:00:00.000Z</updated>
            <id>/posts/2012-09-05-text-casing-and-examine.html</id>
            <content type="html">&lt;p&gt;A few times I&amp;#39;ve seen questions posted on the Umbraco forums which ask how to deal with case insensitivity text with Examine, and it’s also something that we&amp;#39;ve had to handle a few times within our own company.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a site search&lt;/li&gt;
&lt;li&gt;You use examine&lt;/li&gt;
&lt;li&gt;You want to show the results looking exactly the same as it was before it went into Examine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#39;re running a standard install you’ll notice that the content always ends up lowercased!&lt;/p&gt;
&lt;p&gt;This is a bit of a problem, page titles will be lowercase, body content will be lowercase, etc. Part of this will be due to a mistake in Examine, part of it is due to the design of Lucene.&lt;/p&gt;
&lt;p&gt;In this article I’ll have a look at what you need to do to make it work as you&amp;#39;d expect.&lt;/p&gt;
&lt;h2&gt;First, some background&lt;/h2&gt;
&lt;p&gt;Before we dive directly into what to do to fix it you really should understand what is happening. If you don&amp;#39;t care feel free to skip over this bit though :P.&lt;/p&gt;
&lt;p&gt;Searching is a tricky thing, and when searching the statement &lt;code&gt;Examine == examine == false&lt;/code&gt;; To get around this searching is best done in a case insensitive manner. To make this work Examine did a forced lowercase of the content before it was pushed into Lucene.Net. This was to ensure that everything was exactly the same when it was searched against. 
In hindsight this is not really a great idea, it really should be the responsibility of the Lucene Analyzer to handle this for you.&lt;/p&gt;
&lt;p&gt;Many of the common Lucene.Net analyzers actually do automatic lowercasing of content, these analysers are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;StandardAnalyzer&lt;/li&gt;
&lt;li&gt;StopAnalyzer&lt;/li&gt;
&lt;li&gt;SimpleAnalyzer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you&amp;#39;re using the standard Examine config you&amp;#39;ll find yourself using the StandardAnalyzer and still have your content lowercased.&lt;/p&gt;
&lt;p&gt;This means that there&amp;#39;s no need to Lucene to concern itself about case sensitivity when searching, everything is parsed by the analyzer (field terms and queries) and you&amp;#39;ll get more matches.&lt;/p&gt;
&lt;h2&gt;So how do I get around this?&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#39;ve seen why all your content is generally lower case, how can we work with it in the original format and display it back to the UI?&lt;/p&gt;
&lt;p&gt;Well we need some way in which we can have the field data stored without the analyzer screwing around with it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This doesn&amp;#39;t need to be done if you&amp;#39;re using an analyzer which doesn&amp;#39;t have a &lt;code&gt;LowerCaseTokenizer&lt;/code&gt; or &lt;code&gt;LowercaseFilter&lt;/code&gt;. If you’re using a different analyzer, like &lt;code&gt;KeywordAnalyzer&lt;/code&gt; then this post wont cover what you&amp;#39;re after (since the &lt;code&gt;KeywordAnalyzer&lt;/code&gt; isn&amp;#39;t lowercasing, you&amp;#39;re actually using an out-dated version of Examine, I recommend you grab the latest release :)). More information on Analyzers can be found at &lt;a href=&quot;http://www.aaron-powell.com/lucene-analyzer&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/lucene-analyzer&quot;&gt;http://www.aaron-powell.com/lucene-analyzer&lt;/a&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Luckily we&amp;#39;ve got some hooks into Examine to allow us to do what we need here, it&amp;#39;s in the form of an event on the &lt;code&gt;Examine.LuceneEngine.Providers.LuceneIndexer&lt;/code&gt;, called &lt;code&gt;DocumentWriting&lt;/code&gt;. Note that this event is on the &lt;code&gt;LuceneIndexer&lt;/code&gt;, not the &lt;code&gt;BaseIndexProvider&lt;/code&gt;. This event is Lucene.Net specific and not logical on the base class which is agnostic of any other framework.&lt;/p&gt;
&lt;p&gt;What we can do with this event is interact directly with Lucene.Net while Examine is working with it. 
You&amp;#39;ll need to have a bit of an understanding of how to work with a Lucene.Net Document (and for that I’d recommend having a read of this article from me: &lt;a href=&quot;http://www.aaron-powell.com/documents-in-lucene-net&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/documents-in-lucene-net&quot;&gt;http://www.aaron-powell.com/documents-in-lucene-net&lt;/a&gt;&lt;/a&gt;), cuz what you’re able to do is play with Lucene.Net... Feel the power!&lt;/p&gt;
&lt;p&gt;So we can attach the event handler the same way as you would do any other event in Umbraco, using an Action Handler:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UmbracoEvents&lt;/span&gt; :&lt;/span&gt; ApplicationBase
{
        public UmbracoEvents()
        {
            var indexer = (LuceneIndexer)ExamineManager.Instance.IndexProviderCollection[&lt;span class=&quot;string&quot;&gt;&quot;DefaultIndexer&quot;&lt;/span&gt;];

            indexer.DocumentWriting +=new System.EventHandler(indexer_DocumentWriting);
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this we&amp;#39;ve got to cast the indexer so we&amp;#39;ve got the Lucene version to work with, then we’re attaching to our event handler. Let’s have a look at the event handler&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;void indexer_DocumentWriting(object sender, DocumentWritingEventArgs e)
{
        //grab out lucene document &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; event arguments
        var doc = e.Document;

        //&lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; e.Fields dictionary &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; all &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; fields which are &lt;span class=&quot;keyword&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be inserted &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; Lucene.Net
        //we'll grab out &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;bodyContent&quot;&lt;/span&gt; one, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; there &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; one &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be indexed
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(e.Fields.ContainsKey(&lt;span class=&quot;string&quot;&gt;&quot;bodyContent&quot;&lt;/span&gt;)) 
        {
                &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; content = e.Fields[&lt;span class=&quot;string&quot;&gt;&quot;bodyContent&quot;&lt;/span&gt;];
                //Give &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; field a &lt;span class=&quot;property&quot;&gt;name&lt;/span&gt; which you'll be able &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; easily remember
                //also, we're telling Lucene &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; just &lt;span class=&quot;keyword&quot;&gt;put&lt;/span&gt; this data &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;, nothing more
                doc.Add(new Field(&lt;span class=&quot;string&quot;&gt;&quot;__bodyContent&quot;&lt;/span&gt;, content, Field.Store.YES, Field.Index.NOT_ANALYZED));
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s how you can push data in. I&amp;#39;d recommend that you do a conditional check to ensure that the property you’re looking for does exist in the Fields property of the event args, unless you&amp;#39;re 100% sure that it appears on all the objects which you’re indexing.&lt;/p&gt;
&lt;p&gt;Lastly we need to display that on the UI, well it&amp;#39;s easy, rather accessing the &lt;code&gt;bodyContent&lt;/code&gt; property of the &lt;code&gt;SearchResults&lt;/code&gt;, use the &lt;code&gt;__bodyContent&lt;/code&gt; and you’ll get your unanalyzed version.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here we&amp;#39;ve looked at how we can use the Examine events to interact with the Lucene.Net Document. We’ve decided that we want to push in unanalyzed text, but you could use this idea to really tweak your Lucene.Net document. But really playing with the Document is not recommended unless you &lt;em&gt;really&lt;/em&gt; know what you’re doing ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Forcing Windows 8 soft keyboard to hide</title>
            <link href="/posts/2012-08-31-forcing-windows-8-keyboard-to-hide.html"/>
            <updated>2012-08-31T00:00:00.000Z</updated>
            <id>/posts/2012-08-31-forcing-windows-8-keyboard-to-hide.html</id>
            <content type="html">&lt;p&gt;We had a bug raised that when the user presses enter on the sign in screen the login process begins but the soft keyboard (the on-screen keyboard) doesn&amp;#39;t get dismissed so the user gets the impression they can keep interacting with it. Through some &lt;a href=&quot;http://en.wikipedia.org/wiki/Monkey_test&quot;&gt;Monkey Testing&lt;/a&gt; this produced a bug where the application would crash because it would fire off multiple requests to log in as they could keep hitting enter and eventually crashing the application.&lt;/p&gt;
&lt;p&gt;The logical solution is to hide the soft keyboard.&lt;/p&gt;
&lt;p&gt;But here&amp;#39;s a question, how &lt;em&gt;would&lt;/em&gt; you hide the keyboard in Windows 8 XAML?&lt;/p&gt;
&lt;h1&gt;Thought #1 - remove focus&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m a &lt;a href=&quot;http://www.aaron-powell.com/xaml/xaml-by-a-web-guy&quot;&gt;web guy&lt;/a&gt; so when I want to defocus an element I use &lt;code&gt;blur&lt;/code&gt;, so that&amp;#39;s my first point of call.&lt;/p&gt;
&lt;p&gt;But of course there&amp;#39;s no &lt;code&gt;Blur&lt;/code&gt; method on XAML elements. Strike that off the list.&lt;/p&gt;
&lt;h1&gt;Thought #2 - change focus&lt;/h1&gt;
&lt;p&gt;My research lead me to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/hh702161.aspx&quot;&gt;Focus&lt;/a&gt; as a method on controls which takes a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.focusstate.aspx&quot;&gt;FocusState&lt;/a&gt; enum value, one of the properties being &lt;code&gt;Unfocused&lt;/code&gt;. Bingo!&lt;/p&gt;
&lt;p&gt;But every time I set it the app would crash with an &lt;code&gt;AccessViolationException&lt;/code&gt; (or something to that effect). Great, that&amp;#39;s no help now is it! Moving on...&lt;/p&gt;
&lt;h1&gt;Thought #3 - FocusManager&lt;/h1&gt;
&lt;p&gt;Fine well apparently WPF has a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.input.focusmanager.aspx&quot;&gt;FocusManager&lt;/a&gt; that you can also use to change focus. This is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.input.focusmanager.aspx&quot;&gt;also available&lt;/a&gt; in Windows 8 XAML, but do you think that&amp;#39;d have the &lt;code&gt;SetFocusedElement&lt;/code&gt; on it?&lt;/p&gt;
&lt;p&gt;No, that&amp;#39;d be too simple! Guess we can strike this one down too&lt;/p&gt;
&lt;h1&gt;One hack to rule them all&lt;/h1&gt;
&lt;p&gt;Since you don&amp;#39;t have access to the soft keyboard programmatically and every attempt made to change focus was either throwing exceptions or simply missing anything useful it was time to think outside the box.&lt;/p&gt;
&lt;p&gt;It was time for a &lt;strong&gt;hack&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;A funny thing about input controls in Windows 8 XAML is if they are not enabled, ie - read-only, the soft keyboard wont display for them. Well that makes sense doesn&amp;#39;t it and hey, they were bound to get &lt;em&gt;something&lt;/em&gt; right eventually!&lt;/p&gt;
&lt;p&gt;This gave me an idea, let&amp;#39;s make the textbox read-only. The only problem is this has to be done &lt;em&gt;as early as possible&lt;/em&gt;, even before we validate, to prevent undesired keyboard mashing. This also means that our validation wont be done so there&amp;#39;s a chance that we&amp;#39;ll have a failure in sign in and need to make the fields writeable again.&lt;/p&gt;
&lt;p&gt;So all we did was add this to our event handler:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;username&lt;span class=&quot;variable&quot;&gt;.IsEnabled&lt;/span&gt; = password&lt;span class=&quot;variable&quot;&gt;.IsEnabled&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
username&lt;span class=&quot;variable&quot;&gt;.IsEnabled&lt;/span&gt; = password&lt;span class=&quot;variable&quot;&gt;.IsEnabled&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, one line after the other like that and you hide your soft keyboard. &lt;strong&gt;facepalm&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Want to hide your soft keyboard in Windows 8 XAML?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/memes/disable-all-the-things.jpg&quot; alt=&quot;Disable all the things&quot;&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>WebView, oh you!</title>
            <link href="/posts/2012-08-28-webview-oh-you.html"/>
            <updated>2012-08-28T00:00:00.000Z</updated>
            <id>/posts/2012-08-28-webview-oh-you.html</id>
            <content type="html">&lt;p&gt;Today can only be summarized by this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/memes/what-is-this-i-dont-even-spiderman.jpg&quot; alt=&quot;What is this, I don&amp;#39;t even&quot;&gt;&lt;/p&gt;
&lt;p&gt;While I&amp;#39;m having my fun in the dark side of development &lt;a href=&quot;http://www.aaron-powell.com/xaml/xaml-by-a-web-guy&quot;&gt;doing XAML&lt;/a&gt; I hit something really whacky today, using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.webview&quot;&gt;WebView control&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Here be dragons&lt;/h1&gt;
&lt;p&gt;The WebView control seems to be a little bit special, and not really special in a good way and it seems others have also found it &lt;a href=&quot;http://nicksnettravels.builttoroam.com/post/2012/04/21/Limitations-of-the-WebView-in-Windows-8-Metro-Apps.aspx&quot;&gt;limiting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But I hit an interesting problem with the WebView control rendering, in particular rendering it in a settings panel. Long story short &lt;strong&gt;it didn&amp;#39;t display&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the XAML:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;UserControl&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Grid&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Source&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://www.aaron-powell.com&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Grid&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;UserControl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I omitted the namespace guff for you)&lt;/p&gt;
&lt;p&gt;Sure I might not be a XAML wiz but I&amp;#39;m pretty sure that that should work, and according to the limited knowledge of how layout works this would be fine right? My WebView doesn&amp;#39;t have sizes specified so it should fill out to the whole area.&lt;/p&gt;
&lt;p&gt;Well you&amp;#39;re wrong. It would seem that when you use a WebView control that doesn&amp;#39;t have a size set on it, nor on its parents it just goes 0x0.&lt;/p&gt;
&lt;p&gt;This coupled with the WebView&amp;#39;s inability to animate with the rest of the controls in its container makes leaves me just bemused.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Avoid the WebView control. Avoid it at all costs.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>XAML by a web guy</title>
            <link href="/posts/2012-08-20-xaml-by-a-web-guy.html"/>
            <updated>2012-08-20T00:00:00.000Z</updated>
            <id>/posts/2012-08-20-xaml-by-a-web-guy.html</id>
            <content type="html">&lt;p&gt;A few weeks ago a new project came up at work which I moved onto, a project which is XAML based. More specifically Windows 8 XAML and having built a Windows 8 app using HTML and JavaScript I was keen to give it a crack.&lt;/p&gt;
&lt;p&gt;Now I&amp;#39;m very much a web guy. If you read my blog you&amp;#39;ll know that I spend more time blogging about JavaScript than anything else. But in an effort to be a better developer I thought it was worthwhile diving into the other kind of angled brackets and give this thing ago and I want to share some thoughts of mine having spent two weeks doing XAML development (for the record this isn&amp;#39;t the first time I&amp;#39;ve looked at XAML, I looked at it back in about early 2010, did some playing with XAML 1.0, I even own a book on it, but I never got very far :P).&lt;/p&gt;
&lt;h2&gt;XAML is verbose&lt;/h2&gt;
&lt;p&gt;Oh... my... god.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve spent my entire development career doing HTML, and quite a lot of that I spent doing HTML with Umbraco, which obviously meant that I was writing a lot of XSLT (this was about 4 - 5 years ago, when there was &lt;a href=&quot;http://umbraco.com/help-and-support/video-tutorials/umbraco-fundamentals/razor.aspx&quot;&gt;no alternative&lt;/a&gt;) and in comparison to XAML XSLT is a shinny pillar of conciseness.&lt;/p&gt;
&lt;p&gt;I can only assume that this is why there are two GUI tools for generating XAML, having to hard-craft complex XAML files would be time consuming beyond belief (although from my understanding most people &lt;em&gt;do&lt;/em&gt; hand craft them as the GUI tools are pretty flaky). Here&amp;#39;s an example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Storyboard.TargetProperty&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;(UIElement.Visibility)&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Storyboard.TargetName&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;someElement&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;KeyTime&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Visibility&lt;/span&gt;&amp;gt;&lt;/span&gt;Visible&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Visibility&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;DiscreteObjectKeyFrame.Value&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;DiscreteObjectKeyFrame&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ObjectAnimationUsingKeyFrames&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s a snippet from a visual state to change an element from hidden to visible. Now this is how to do it in XAML, which leads me to my next point.&lt;/p&gt;
&lt;h2&gt;A dozen ways to skin a cat&lt;/h2&gt;
&lt;p&gt;Visual states are really cool, they are quite powerful to do the various amounts of animations that we&amp;#39;re using in our application but to me they are really clumsy to write (seriously, you&amp;#39;re looking at dozens of lines of XAML to make even a simple state of hiding a few elements and showing a few elements). This is where something like Blend comes into play (when it&amp;#39;s not crashing), it&amp;#39;s quite easy to create a simple visual state.&lt;/p&gt;
&lt;p&gt;Alternatively I could use code to manually manipulate those properties, it&amp;#39;s much more concise to do so (1 line vs the above 7) but then you&amp;#39;re ending up with stuff in your code behind or you&amp;#39;re loosing the power of animations.&lt;/p&gt;
&lt;p&gt;And then there&amp;#39;s binding...&lt;/p&gt;
&lt;h2&gt;Bindings&lt;/h2&gt;
&lt;p&gt;Oh... my... god.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t understand how XAML, in any of it&amp;#39;s four incarnations, doesn&amp;#39;t have a better solution for this. Back on our Visual States, say I&amp;#39;ve got a multi-stage form, each stage has a new Visual State to show the appropriate fields, well logically I&amp;#39;d want to use an enum to set the current step and be able to tie that back to the UI... Right?&lt;/p&gt;
&lt;p&gt;Yeah you&amp;#39;d think so, but no. There&amp;#39;s no way in the box to do the mapping between an enum and a Visual State. You end up with a lovely whack of code behind that watches for property change events and calls visual state transitions. Woo...&lt;/p&gt;
&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;I come from a world of the DOM where event wireup is pretty fucked. IE always did it one way, really old IE did it another and then there was the spec. The only nice thing was there was only one &lt;em&gt;type&lt;/em&gt; of events. XAML though seems to have two independent eventing models, &lt;em&gt;traditional&lt;/em&gt; .NET events and commands. Both seem to be first-class citizens, but commands seem to have been conceived outside of wedlock and thus treated like a bastard.&lt;/p&gt;
&lt;p&gt;Some elements seem to implement commands as well as events, others just implement events. It&amp;#39;s quite frustrating, the fact that bindings are a common way to wire up commands to actions (like button clicks). But events can&amp;#39;t be bound, so you end up having to rely on code-behind or custom solutions. Neither of these are a great resolution, I just don&amp;#39;t get why it&amp;#39;s not in the box.&lt;/p&gt;
&lt;h2&gt;Controls&lt;/h2&gt;
&lt;p&gt;Now this just baffles ms, as I said at the top this is Windows 8 XAML so I&amp;#39;m sure it&amp;#39;s a bit different in the other flavours but controls available is just whacky.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s an example, there&amp;#39;s no built-in control that restricts an input to just containing numerical values. Maybe I&amp;#39;m use to the web but I think this makes sense:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;number&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a HTML5-enabled browser this does a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It will only allow numerical values&lt;/li&gt;
&lt;li&gt;It switches keyboards on soft-keyboard devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there&amp;#39;s nothing built in that will do this in Windows 8 XAML. Or how about a date picker? You know that&amp;#39;s kind of a common scenario in an application, to be able to select a date... And apparently that didn&amp;#39;t make it &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.controls.datepicker.aspx&quot;&gt;until .NET 4.0 anyway&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Validation&lt;/h2&gt;
&lt;p&gt;The fact that there&amp;#39;s no built in validation floored me. This is a problem that was solved in ASP.Net in what, version 1.0? You know the idea of a required field shouldn&amp;#39;t be that hard... MVC did a great job including data annotations and building up that client side to integrate with jQuery validation (or their own validation framework as it was back in the day).&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s nothing in XAML for validation, no required fields, no regex validation, no data annotations for building up validation rules for your view model. It&amp;#39;s all up to you to solve on your own.&lt;/p&gt;
&lt;h2&gt;Bindings&lt;/h2&gt;
&lt;p&gt;I must say that bindings are pretty sweet, coming from HTML and JavaScript I can see why things like Knockout.js were written, the ability to componentise a UI and link data up is very nice. I also think value converters are a pretty neat, a good way to produce a global solution to consistent bindings.&lt;/p&gt;
&lt;p&gt;I have one major problem with bindings, debugging. It&amp;#39;s 2012 and the &amp;quot;debugging&amp;quot; experience for bindings is to look at the Visual Studio Output window. I shit you not! I&amp;#39;ve managed to pretty much avoid needing the Output window ever since VS2003 except when I was looking into compiler errors but instead I&amp;#39;ve been keeping my eye on it every time a binding doesn&amp;#39;t do what I expect it to do.&lt;/p&gt;
&lt;p&gt;How on earth does this not have a debugging experience? I remember the demos from Silverlight 5 showing it off but it&amp;#39;s apparently not in VS 2012 from what I can see, it seems like a massive oversight.&lt;/p&gt;
&lt;p&gt;This leads me to the next WTF I&amp;#39;ve found in Windows 8 XAML (I think it&amp;#39;s only the case in Windows 8 XAML), &lt;strong&gt;you can&amp;#39;t bind &lt;code&gt;Nullable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/strong&gt;. You would &lt;em&gt;not&lt;/em&gt; believe how long that took me to find out but yep, if you have a nullable DateTime, int, float, etc don&amp;#39;t expect to be able to bind to it. I&amp;#39;ve had mixed success with Dependency Properties over INotifyPropertyChanged but the majority of my tests have shown it to fail.&lt;/p&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Although my &amp;quot;full time&amp;quot; XAML experience is still fairly limited I can&amp;#39;t help but keep looking at it in a completely bemused fashion. While my experience is localised to Windows 8 XAML, I&amp;#39;m constantly shocked at how half-baked it feels. Some people might argue that Windows 8 XAML is a v1 product and should be treated as much but seriously this is the &lt;strong&gt;forth&lt;/strong&gt; incarnation of XAML, &lt;strong&gt;forth&lt;/strong&gt; (WPF, Silverlight, Windows Phone 7 and now Windows 8)!&lt;/p&gt;
&lt;p&gt;But don&amp;#39;t get me wrong, I&amp;#39;m having a &lt;em&gt;heap&lt;/em&gt; of fun, this is all relatively new to me, but the fact that XAML is in the state that it&amp;#39;s in I can see why HTML is a first-class citizen in Windows 8, at least it&amp;#39;s a fully featured markup engine.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS: Yes I know many of my problems can be solved with existing open source projects. My point is that a lot of the problems I&amp;#39;ve come across are not edge cases, they are things I&amp;#39;d expect my UI layer to do out of the box.&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Revisiting using ASP.NET MVC in Umbraco 4</title>
            <link href="/posts/2012-07-11-using-mvc-in-umbraco-4-revisited.html"/>
            <updated>2012-07-11T00:00:00.000Z</updated>
            <id>/posts/2012-07-11-using-mvc-in-umbraco-4-revisited.html</id>
            <content type="html">&lt;p&gt;A month on I wanted to revisit my post on &lt;a href=&quot;http://www.aaron-powell.com/umbraco/using-mvc-in-umbraco-4&quot;&gt;using MVC with Umbraco 4&lt;/a&gt;. I write the code and draft while driving back from the retreat so it wasn&amp;#39;t very &lt;em&gt;deeply&lt;/em&gt; investigated.&lt;/p&gt;
&lt;p&gt;Basically it was done as a proof of concept.&lt;/p&gt;
&lt;p&gt;Well today I was chatting with someone who was wanting to take the PoC and try it in production and through chatting we learnt a few things about what I initially write about that are important to know if you&amp;#39;re wanting to try it as well.&lt;/p&gt;
&lt;h3&gt;Watch your routes&lt;/h3&gt;
&lt;p&gt;There was a problem with the site whenever you hit the root of the site, the &lt;code&gt;/&lt;/code&gt; route, the controller action was being executed. Luckily this is an easy fix. The MVC route registration looked like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;routes&lt;span class=&quot;variable&quot;&gt;.MapRoute&lt;/span&gt;(
    &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;{controller}/{action}/{id}&quot;&lt;/span&gt;,
    new { controller = &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, action = &lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you know you&amp;#39;re MVC you&amp;#39;ll know that that matches the &lt;code&gt;/&lt;/code&gt; route as well in MVC since we&amp;#39;ve given a default controller and action (it&amp;#39;s also why &lt;code&gt;/home&lt;/code&gt; matches the Index action on Home). So what&amp;#39;s interesting here is that MVC&amp;#39;s routing engine takes priority over the Umbraco one.&lt;/p&gt;
&lt;p&gt;To fix it you need to add some kind of static prefix to the route, what&amp;#39;s probably the easiest is to hard code the controller name, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;routes&lt;span class=&quot;variable&quot;&gt;.MapRoute&lt;/span&gt;(
    &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;home/{action}/{id}&quot;&lt;/span&gt;,
    new { controller = &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, action = &lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells MVC that anything &lt;code&gt;/home&lt;/code&gt; will go to the Home controller, it can&amp;#39;t go anywhere else.&lt;/p&gt;
&lt;h3&gt;Umbraco reserved paths&lt;/h3&gt;
&lt;p&gt;The above point leads onto this point, as I said it turns out that the MVC routes took over the Umbraco ones, this means that you &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; have to add an ignore route for Umbraco.&lt;/p&gt;
&lt;p&gt;In the last post I said you needed to add &lt;code&gt;~/home&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;umbracoReservedPaths&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;~/umbraco,~/install/,~/home&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well seems I was wrong about that, sorry!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;What I&amp;#39;ve blogged is still very much a proof of concept but it seems that some people are thinking that it is actually a valid concept. This is a few lessons learnt from a project actually trying it out, I hope the guys blog about it once they are done but we&amp;#39;ll see.&lt;/p&gt;
&lt;p&gt;If you learn any more yourself let me know!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Stop using Hungarian jQuery!</title>
            <link href="/posts/2012-06-27-hungarian-jquery.html"/>
            <updated>2012-06-27T00:00:00.000Z</updated>
            <id>/posts/2012-06-27-hungarian-jquery.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve been in software development for long enough that I remember a time when &lt;a href=&quot;http://en.wikipedia.org/wiki/Hungarian_notation&quot;&gt;Hungarian Notation&lt;/a&gt; was all the rage to write &lt;code&gt;strFirstName&lt;/code&gt;, &lt;code&gt;iAge&lt;/code&gt; and &lt;code&gt;objPerson&lt;/code&gt;, I also remember it dying and dying for a good reason.&lt;/p&gt;
&lt;h1&gt;The rise of Hungarian jQuery&lt;/h1&gt;
&lt;p&gt;This is something that I&amp;#39;ve been noticing more and more in JavaScript code that I work with, code that looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;var &lt;span class=&quot;variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'.foo'&lt;/span&gt;);

&lt;span class=&quot;regexp&quot;&gt;//do&lt;/span&gt; something with &lt;span class=&quot;variable&quot;&gt;$foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you see what I&amp;#39;m referring to, the prefixing of &lt;code&gt;$&lt;/code&gt; onto a &lt;em&gt;jQuery variable&lt;/em&gt; with the purpose of indicating that it&amp;#39;s a jQuery object. To me this looks just like using Hungarian Notation, that just like we use to prefix &lt;code&gt;str&lt;/code&gt; to denote a variable as a string we are prefixing &lt;code&gt;$&lt;/code&gt; to denote a jQuery object.&lt;/p&gt;
&lt;h2&gt;Analysing Hungarian jQuery&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been calling this pattern &lt;strong&gt;Hungarian jQuery&lt;/strong&gt; since when it&amp;#39;s being used people aren&amp;#39;t really following Hungarian notation, they don&amp;#39;t add the prefix elsewhere, it&amp;#39;s just specific to jQuery in their code.&lt;/p&gt;
&lt;p&gt;The primary argument I&amp;#39;ve seen behind this is the same that Hungarian Notation took off to start with, editors for a long time were pretty shitty so it was hard to know what a variable type was, you&amp;#39;d constantly be scrolling up and down to work that out. A lot of the JavaScript editors we use (Visual Studio, Sublime Text 2, etc) don&amp;#39;t have as good JavaScript support as they do other languages. Generally this comes from the dynamic nature of JavaScript and that it can be quite hard to work out &lt;em&gt;what&lt;/em&gt; the type really is so the use of the &lt;code&gt;$&lt;/code&gt; prefix helps us identify it as a jQuery object.&lt;/p&gt;
&lt;p&gt;But it begs the question, if we use &lt;code&gt;$&lt;/code&gt; to help identify a jQuery object then why aren&amp;#39;t we using other prefixes to identify other variable types? What makes the jQuery objects in your code more important that the other objects which you have? And more to the point since JavaScript variables are dynamic you can change their type so what happens if you reassign the &lt;code&gt;$foo&lt;/code&gt; to something that&amp;#39;s &lt;em&gt;not&lt;/em&gt; of jQuery origins? I wouldn&amp;#39;t recommend that as you&amp;#39;re probably going to make a royal mess of your application but the fact remains that you can do it and there are valid scenarios for it.&lt;/p&gt;
&lt;p&gt;There are other arguments behind the use of Hungarian jQuery, one of those is scoping, say we&amp;#39;ve got this code block:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);

    $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/bar'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
        $&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.html(result);
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the reason behind this is we have a click handler and inside that click handler we want to perform an AJAX request and then populate the HTML of the clicked element with something from the server (crappy example but you get the gist). Because of the way JavaScript scoping works by the time the AJAX response handler is called the &lt;code&gt;this&lt;/code&gt; context is no longer the clicked element so we can&amp;#39;t work with it, instead we need to capture it in the closure scope but because &lt;code&gt;this&lt;/code&gt; is a reserved word we can&amp;#39;t reassign it, instead we create a jQuery version of it and since we are making a jQuery version we append the &lt;code&gt;$&lt;/code&gt; to the start. Personally I&amp;#39;d write the code this way:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);

    $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/bar'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
        target.html(result);
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s no longer using Hungarian Notation but still conveying the same point.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I really dislike Hungarian notation&lt;/strong&gt;, I was glad when the war was won and we no longer had to prefix our variables with silly things (don&amp;#39;t even get me started on &lt;code&gt;m_&lt;/code&gt;) but quite often I see it creeping back into the JavaScript developers coding style. So next time you think &amp;quot;I&amp;#39;ll prefix with &lt;code&gt;$&lt;/code&gt; so I know it&amp;#39;s jQuery&amp;quot; ask yourself why you didn&amp;#39;t also prefix that bool with &lt;code&gt;b&lt;/code&gt; so you knew it was a bool and that number with &lt;code&gt;i&lt;/code&gt; so you knew it&amp;#39;s a number.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>I helped kill Umbraco 5</title>
            <link href="/posts/2012-06-25-i-helped-kill-umbraco-5.html"/>
            <updated>2012-06-25T00:00:00.000Z</updated>
            <id>/posts/2012-06-25-i-helped-kill-umbraco-5.html</id>
            <content type="html">&lt;p&gt;Hi, my name&amp;#39;s Aaron Powell and I was involved in killing Umbraco 5.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;re new to this blog you may not have heard of my before so here&amp;#39;s a bit of background. I&amp;#39;ve been involved with Umbraco for about 4 years now. I originally joined the project to create LINQ to Umbraco, a somewhat ill-fated experiment into Code First development. I&amp;#39;ve presented at every CodeGarden since my first one in 2009 on a range of topics from LINQ to Umbraco to unit testing Umbraco and  this year on Signalr and RavenDB.&lt;/p&gt;
&lt;p&gt;I was also involved in some of the initial design and development of Umbraco 5 and worked with Shannon (mostly) as a sounding board when he needed to bounce ideas off someone while working on Umbraco 5.&lt;/p&gt;
&lt;p&gt;But late last year I announced that I was &lt;a href=&quot;http://www.aaron-powell.com/umbraco/so-long-and-thanks-for-all-the-fish&quot;&gt;leaving the project&lt;/a&gt; and it was bred out of frustrations towards  the direction Umbraco 5 was going and the role that someone like myself, an outsider to the HQ, could maintain on the project. Ultimately I didn&amp;#39;t believe I could contribute in the way I saw as useful to so it was decided that I would leave the project.&lt;/p&gt;
&lt;p&gt;Even after leaving the project I still stayed in contact with many of the people on it, I had a lot of respect for Niels, Shannon, Matt, etc and they are all people I consider friends who I&amp;#39;d often chat with on Skype or various other mediums. I then decided to build a commercial extension for Umbraco 5 as a way to provide feedback on the way the project was shaping up (and to make some money on the side :P).&lt;/p&gt;
&lt;h1&gt;Returning to Umbraco&lt;/h1&gt;
&lt;p&gt;A few months ago Niels contacted me with a proposition, I come to CodeGarden 12 and the retreat before hand to help work through the issues that the HQ was having with Umbraco 5 and the issues I had which caused me to leave in the first place. I was quite taken aback by this, I&amp;#39;d done a bit of venting on twitter while building my commercial package and I hadn&amp;#39;t thought that I&amp;#39;d consider going back to CodeGarden. But after a few discussions I believed that I could do something useful for the tens of thousands of Umbraco users out there by bringing my voice to the table.&lt;/p&gt;
&lt;p&gt;But it was clear that just because I was coming to &amp;quot;kick up a storm&amp;quot; didn&amp;#39;t mean that I would return to the project in the manner I previously had been involved.&lt;/p&gt;
&lt;h1&gt;The retreat&lt;/h1&gt;
&lt;p&gt;First off I&amp;#39;m happy to say at this retreat no one saw my naked ass and I think everyone who attended was grateful for that.&lt;/p&gt;
&lt;p&gt;Secondly this year we had a good mixed bag of people at the retreat, there was everyone from HQ employees to contributors to package developers to site builders and people just passionate about open source and we all were involved in various discussions.&lt;/p&gt;
&lt;h2&gt;What is Umbraco?&lt;/h2&gt;
&lt;p&gt;One of the discussions I was involved in was (from my point of view) really important in helping define where Umbraco would go in the future, we had a discussion about what &lt;em&gt;is&lt;/em&gt; Umbraco? While you might think that this is an easy question to answer &amp;quot;It&amp;#39;s a CMS&amp;quot; but that&amp;#39;s really only a small part of the picture. Here&amp;#39;s some of the learnings which came out of this discussion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Umbraco is a piece of software&lt;ul&gt;
&lt;li&gt;Yes this is a logical conclusion, Umbraco is a project that is released as Open Source that allows you to run a CMS. But most importantly is it&amp;#39;s a simple piece of software. Unlike many other CMS&amp;#39;s available you don&amp;#39;t have mark-up generated for you, someone said Umbraco respects the web in this manner, it gives you freedom to do that crazy design that your designer has come up with. Also through it&amp;#39;s simplicity it becomes really powerful, you can build anything from a 5 page brochureware site to a thousand view per second site because there&amp;#39;s so many extensibility points available for different kinds of developers while still regaining some level of control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Umbraco is community&lt;ul&gt;
&lt;li&gt;This may sound a bit wanky at first, a bit like marketing fluff but having been involved with Umbraco for so long I am still always amazed at just how passionate the people who use it are, and just how willing Umbraco users are to help other Umbraco users. &lt;a href=&quot;https://twitter.com/#!/drobar&quot;&gt;Doug Robar&lt;/a&gt; made a point about this, that when it&amp;#39;s late at night for him and he&amp;#39;s stuck with a project there&amp;#39;s always someone around that he can ping for advice even if they are on the other side of the world; no matter what time of day it is there always seems to be someone around willing to help out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Umbraco is the packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Niels touched on this in the keynote this year but when people thing Umbraco they also thing things like uComponents and DAMP, these kinds of things are almost invaluable to the Umbraco developer and without them we&amp;#39;d waste a lot of time doing the boring stuff over and over again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So really Umbraco is a sum of its parts, without these three aspects it wouldn&amp;#39;t be the same, we wouldn&amp;#39;t get behind it in the way that can have 380 people attend a conference. Then when we turned this learnings at Umbraco 5 we could see we didn&amp;#39;t have the same things there which is why it never really &lt;em&gt;felt&lt;/em&gt; like Umbraco.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What&amp;#39;s awesome about v5&lt;/h2&gt;
&lt;p&gt;Another discussion I was involved in (yes I&amp;#39;m aware that I keep saying things like &lt;em&gt;&amp;quot;Discussions I was involved with&amp;quot;&lt;/em&gt; as though I was a critical factor in them, that&amp;#39;s not the case, we had plenty of other discussions going on which were equally as important I just wasn&amp;#39;t in them so can&amp;#39;t talk about them :P) was looking at what made v5 such a good project (this was also an open space topic from CG12 coincidently!) and the more we looked at it the more we started to see that the things that made v5 compelling were really just approaching v4 concepts with 8 years of learning, things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property editors can save multiple values natively&lt;/li&gt;
&lt;li&gt;Trees/ applications/ macros and templates reside on disk&lt;/li&gt;
&lt;li&gt;Simple back-office sections&lt;/li&gt;
&lt;li&gt;There&amp;#39;s a defined structure to where packages reside&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Really what we were seeing is that most people didn&amp;#39;t care that the underlying systems could be swapped from nHibernate to something else, or that there was this really cool new unit-of-work concept, people spend their time configuring and extending the back office and the 1% of times that they really need to scale across multiple virtual servers on the cloud Umbraco may not even be the best fit for the project.&lt;/p&gt;
&lt;h2&gt;The community needed a better voice&lt;/h2&gt;
&lt;p&gt;While the community has had &lt;a href=&quot;http://our.umbraco.org&quot;&gt;Our&lt;/a&gt; for a few years now it has always been focused on the &lt;em&gt;user&lt;/em&gt; community, how do I solve problems &lt;em&gt;with&lt;/em&gt; Umbraco but it was never very good when it came to solving the problems &lt;em&gt;in&lt;/em&gt; Umbraco. This topic was more born out of discussions with various people and not a structured discussion but ultimately contributors, HQ and implementers alike wanted a way to discuss the direction of Umbraco itself, people have businesses built around it so when changes happen that they don&amp;#39;t understand (the what or the why) it can be a nervous time.&lt;/p&gt;
&lt;p&gt;Some of this is what happened throughout the v5 development process, decisions were made that the community felt they didn&amp;#39;t have a say in, that they assumed was for the best but they didn&amp;#39;t really know; ultimately they felt out of control. To this end we decided to set up the &lt;a href=&quot;http://www.aaron-powell.com/umbraco/introducing-umbraco-contributor-list&quot;&gt;Umbraco-dev mailing list&lt;/a&gt; so that the community has somewhere they can raise concerns directly to the people developing the product.&lt;/p&gt;
&lt;h1&gt;The downfall of v5&lt;/h1&gt;
&lt;p&gt;Hopefully you&amp;#39;ve started to see the picture I&amp;#39;ve been painting. There were many other discussions but I think these three really highlight how the decision was reached. Umbraco is a cool piece of software but without the community involved in it to them it was an unknown. There was lots of cool things in v5 but generally speaking they were evolutions on what people use day-to-day and as cool as other parts of v5 might have been it didn&amp;#39;t really bothered most people as it didn&amp;#39;t impact their average Umbraco project.&lt;/p&gt;
&lt;p&gt;So we started to think about &lt;strong&gt;how to rectify this&lt;/strong&gt; and &lt;strong&gt;we discussed this more than anything&lt;/strong&gt;. We looked at could we remove parts of v5 to make it simpler, to make it more enticing to your average Umbraco user. We looked at how to get more people involved in the processes, take the project back from being a HQ-owned initiative and get more community members involved. Many angles were looked at what would be needed to ensure v5&amp;#39;s success, and believe me I very much pushed for this having a vested commercial interest in this. But the more we looked the more we began realise that forcing v5 to go on &lt;em&gt;wouldn&amp;#39;t&lt;/em&gt; be in the best interest of everyone no matter how hard we tried.&lt;/p&gt;
&lt;p&gt;In the end there was only a single decision that sat just right, &lt;strong&gt;Umbraco 5 would be discontinued&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Along came CodeGarden&lt;/h1&gt;
&lt;p&gt;I can tell you that the lead up to the keynote this year was the most surreal experience I&amp;#39;ve had in a long time. We knew what was going to be announced but we had no idea how it would be taken by the community. CG12 had been touted as a v5 conference so on a scale of 1 to murderous just what was the crowed going to be like after the announcement? I applaud Niels for how he handled it, I can&amp;#39;t imagine it&amp;#39;s easy being up in front of that many people and delivering the news that Umbraco 5 was to be discontinued (if you haven&amp;#39;t yet I recommend watching the &lt;a href=&quot;http://umbraco.com/follow-us/blog-archive/2012/6/13/cg12-keynote-video.aspx&quot;&gt;keynote&lt;/a&gt;) and I was standing with some of the HQ and retreat guys just waiting for the angry mob.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But it never came.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While I&amp;#39;m &lt;strong&gt;not&lt;/strong&gt; saying that it was all sunshine and rainbows, there are people who are really annoyed at the decision, there are people who wont ever use Umbraco again, but having been at CodeGarden, in the room with the other 380 attendees I can tell you that without a doubt by the end of day one the mood was positive, the weird tension during registration and before the keynote was gone and people honestly seemed happy with the decision, there was a sense of relief in the room.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As I said at the start my name is Aaron Powell and I was involved with killing Umbraco 5. I know that there are people mad out there about the decision but I also know that for every angry person there&amp;#39;s a dozen happy people and that was why I came back this year to be involved with a project that makes people happy. I don&amp;#39;t deny that the next few months will be rough while the v4 project &amp;quot;restarts&amp;quot; but I&amp;#39;m excited to be apart of it again.&lt;/p&gt;
&lt;p&gt;I hope that this story has given you another insight on just how the decision came to be because the more open everyone is about this the better people can understand the reasoning behind it.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Introducing the Umbraco contributor mailing list</title>
            <link href="/posts/2012-06-13-introducing-umbraco-contributor-list.html"/>
            <updated>2012-06-13T00:00:00.000Z</updated>
            <id>/posts/2012-06-13-introducing-umbraco-contributor-list.html</id>
            <content type="html">&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Want to be involved in driving the Umbraco Open Source project, join the &lt;a href=&quot;https://groups.google.com/forum/#!forum/umbraco-dev&quot;&gt;Google Group&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;All the details&lt;/h1&gt;
&lt;p&gt;One of the things that has come out of the Umbraco retreat this year is that as a community we need to get more involved in the direction of the open source project. This has always been something that many people has wanted to do but the problem has been &lt;em&gt;how&lt;/em&gt; do you get involved.&lt;/p&gt;
&lt;p&gt;For many years there has been the Umbraco Core but no one was really sure about what it was and who really was involved. This lead to a limitation with getting the community excited and involved in working on the product of Umbraco itself as we often took the attitude of &lt;em&gt;the core has it under control&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well it&amp;#39;s time to change that, and in doing so I&amp;#39;m announcing the start of the Umbraco developer mailing list, which is running on &lt;a href=&quot;https://groups.google.com/forum/#!forum/umbraco-dev&quot;&gt;Google Groups&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this we need to get a few things clear though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a mailing list for discussing the &lt;strong&gt;open source project&lt;/strong&gt; and not the usage of Umbraco; if you have a question about the usage of Umbraco then &lt;strong&gt;please&lt;/strong&gt; use the excellent community site, &lt;a href=&quot;http://our.umbraco.org&quot;&gt;our.umbraco.org&lt;/a&gt;. The moderators will close threads that are of this nature and redirect you to the appropriate forum&lt;/li&gt;
&lt;li&gt;Anyone can join. Got a question about the direction of the project this is the place to ask, got a feature to propose this is the place to discuss it, want to know how to get involved in submitting patches then ask it here&lt;/li&gt;
&lt;li&gt;Make sure you search before you ask, maybe someone else had that idea so check out their discussion&lt;/li&gt;
&lt;li&gt;This is the friendly CMS so remember to be an adult and play nice, the moderators will tell you off if you&amp;#39;re being out of line&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What does this mean for the Core?&lt;/h2&gt;
&lt;p&gt;So you may be wondering what is the Core now? Well the goals of the Core haven&amp;#39;t changed, they were always about driving the Umbraco project but now we&amp;#39;re trying to make it easier for anyone to consider themselves part of the process. Ultimately the Core is the ones who have final say, they&amp;#39;ll be committing the code, managing the mailing list, handling pull requests and that kind of stuff.&lt;/p&gt;
&lt;h2&gt;Contributing code&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re wanting to contribute code but you&amp;#39;re not sure about how to go about it then here&amp;#39;s a few useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://shazwazza.com/post/A-UI-guide-to-using-Umbracoe28099s-new-repository-format-Mercurial.aspx&quot;&gt;Using TortoiseHG with Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/mercurial-101-for-umbraco-developers&quot;&gt;Using the Mercurial command line&lt;/a&gt; and &lt;a href=&quot;http://www.aaron-powell.com/umbraco-and-mercurial-how-to-contribute&quot;&gt;another article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tekpub.com/view/dotnet-oss/7&quot;&gt;Here&amp;#39;s a Tekpub video on using Mercurial on CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codegarden11.com/sessions/day-2/slot-five/collaboration-in-umbraco.aspx&quot;&gt;My talk from CodeGarden 11 on collaboration in Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Using ASP.NET MVC in Umbraco 4</title>
            <link href="/posts/2012-06-12-using-mvc-in-umbraco-4.html"/>
            <updated>2012-06-12T00:00:00.000Z</updated>
            <id>/posts/2012-06-12-using-mvc-in-umbraco-4.html</id>
            <content type="html">&lt;p&gt;By now you&amp;#39;ve probably heard the decision of Umbraco HQ to no longer investing resources in Umbraco MVC and instead the focus (from both HQ and the community) is on making Umbraco 4 a better product.&lt;/p&gt;
&lt;p&gt;One thing that  a lot of developers were waiting for with Umbraco was the ability to use MVC with Umbraco. Over the course of the retreat we looked at where this motivation came from any one of the things that we seemed to agree is that most Umbraco users aren&amp;#39;t concerned about whether the underlying technology is MVC or not, the just want to be able to write clean mark up which MVC, or more importantly Razor allows you to do.&lt;/p&gt;
&lt;p&gt;But there still is a valid reason for wanting to use MVC when building &lt;strong&gt;applications&lt;/strong&gt; in Umbraco, and by that I mean if you&amp;#39;re building say a booking platform you may prefer to write that part of your application in MVC. This application side of your website may not really need content management so the onus of Umbraco is very little. So how do you go about doing this, using MVC for your web application inside an Umbraco CMS?&lt;/p&gt;
&lt;h1&gt;It&amp;#39;s all ASP.NET&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve been following the movements of ASP.NET of recent months you&amp;#39;ll have seen a lot of emphasis by the ASP.NET team on the idea of &lt;strong&gt;One ASP.NET&lt;/strong&gt;, that WebForms, MVC, WebAPI and WebPages are all part of the same stack and all can play nicely together. &lt;a href=&quot;http://www.hanselman.com/&quot;&gt;Scott Hanselman&lt;/a&gt; has blogged in the past on creating &lt;a href=&quot;http://www.hanselman.com/blog/IntegratingASPNETMVC3IntoExistingUpgradedASPNET4WebFormsApplications.aspx&quot;&gt;hybrid ASP.NET applications&lt;/a&gt; which allow you to host MVC along side WebForms and that&amp;#39;s what I want to look at.&lt;/p&gt;
&lt;p&gt;Simply put...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropbox.com/u/9397363/memes/why-dont-we-have-both.png&quot; alt=&quot;Why don&amp;#39;t we have both?&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Before we begin&lt;/h1&gt;
&lt;p&gt;This is not a solution for everybody, what I&amp;#39;m going to look at through the rest of this blog is very much a &lt;strong&gt;proof of concept&lt;/strong&gt;, I haven&amp;#39;t deployed a site doing this, I&amp;#39;m writing this blog post in the back of a car while driving to Copenhagen. It&amp;#39;s designed as an idea to hopefully inspire more people to get involved. It will also require you to open up Visual Studio and do some coding, but I expect that if you&amp;#39;re planning on building an MVC application that&amp;#39;s a known fact.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also going to make the assumption that you are familiar with MVC, if you&amp;#39;re not please start by checking out the guides at &lt;a href=&quot;http://www.asp.net/mvc&quot;&gt;www.asp.net/mvc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codinghorror.com/blog/2007/03/the-works-on-my-machine-certification-program.html&quot;&gt;Finally&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropbox.com/u/9397363/memes/works-on-my-machine.png&quot; alt=&quot;Works on my machine&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;First things first I&amp;#39;m going to create an empty ASP.NET site. I&amp;#39;m using Visual Studio 2012 which comes with a completely empty project template:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/umbraco/mvc-v4/001.PNG&quot; alt=&quot;New project&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you aren&amp;#39;t running Visual Studio 2012 don&amp;#39;t fear, you can always use one of the other web project types and delete the files, here&amp;#39;s what my solution explorer looks like now:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/umbraco/mvc-v4/002.PNG&quot; alt=&quot;Solution overview&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next up grab yourself a copy of Umbraco 4, I&amp;#39;ve used &lt;a href=&quot;http://umbraco.codeplex.com/releases/view/81011&quot;&gt;Umbraco 4.7.2&lt;/a&gt; for this but as newer versions come out some of this may change. Once you&amp;#39;ve downloaded Umbraco 4.7.2 (you can use Web Platform Installer as well) copy all the files into the folder which your project resides in. &lt;strong&gt;Make sure you replace the web.config with the Umbraco provided one&lt;/strong&gt;. Also you don&amp;#39;t need to add any of the Umbraco files or folders to Visual Studio if you don&amp;#39;t want.&lt;/p&gt;
&lt;p&gt;You&amp;#39;re now ready to go with creating your Umbraco instance, feel free to setup your database, document types, etc.&lt;/p&gt;
&lt;h1&gt;Getting MVC installed&lt;/h1&gt;
&lt;p&gt;So now that we&amp;#39;ve got our Umbraco instance running we want to get our MVC application integrated. The first thing I want to do is to add MVC to the project, for this I&amp;#39;m going to use &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet&lt;/a&gt; as it&amp;#39;ll greatly reduce the effort in adding references, but you can do it manually if you require.&lt;/p&gt;
&lt;p&gt;Go ahead an install the &lt;code&gt;Microsoft.AspNet.Mvc&lt;/code&gt; NuGet package:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/umbraco/mvc-v4/003.PNG&quot; alt=&quot;Installing ASP.NET MVC&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I used the Package Management Console, but you could just as easily use the GUI tool. Assuming you have NuGet installed both options are available from Tools &amp;gt; Library Package Manager.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that that is done go ahead and create these folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App_Start&lt;/li&gt;
&lt;li&gt;Controllers&lt;/li&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Setting up our routes&lt;/h1&gt;
&lt;p&gt;Generally speaking you will create your routes inside the &lt;code&gt;Global.asax&lt;/code&gt; file. Umbraco has been pretty notorious about how it handles this file so I found it easier to &lt;strong&gt;not&lt;/strong&gt; register my routes there, instead I&amp;#39;m going to register my routes using the &lt;a href=&quot;http://www.google.com.au/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CFYQFjAA&amp;amp;url=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fsystem.web.preapplicationstartmethodattribute.aspx&amp;amp;ei=-kbXT-DfDYXRtAa8zc3lDw&amp;amp;usg=AFQjCNHsinP1-aIRC9LaERAs6BS0x_dh6g&amp;amp;sig2=ST3e-8kmro4SYFOZbb298w&quot;&gt;&lt;code&gt;PreApplicationStartMethod&lt;/code&gt;&lt;/a&gt; attribute and this is why we created the &lt;code&gt;App_Start&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Start off by creating an empty class in there:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebApplication2&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;App_Start&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RouteSetup&lt;/span&gt;
    {&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now add a new method that will be used by the &lt;code&gt;PreApplicationStartMethod&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebApplication2&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;App_Start&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RouteSetup&lt;/span&gt;
    {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Setup()
        {

        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: This method must be both &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next up, add the attribute:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Web;    
[assembly: PreApplicationStartMethod(typeof(WebApplication2.App_Start.RouteSetup), &lt;span class=&quot;string&quot;&gt;&quot;Setup&quot;&lt;/span&gt;)]
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebApplication2&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;App_Start&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RouteSetup&lt;/span&gt;
    {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Setup()
        {

        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;ve done here is told ASP.NET that we have a class which has a method we want to run when the application is starting up, and with this we can start injecting some routes:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;using System&lt;span class=&quot;variable&quot;&gt;.Web&lt;/span&gt;;
using System&lt;span class=&quot;variable&quot;&gt;.Web&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Mvc&lt;/span&gt;;
using System&lt;span class=&quot;variable&quot;&gt;.Web&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Routing&lt;/span&gt;;

[assembly: PreApplicationStartMethod(typeof(WebApplication2&lt;span class=&quot;variable&quot;&gt;.App_Start&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.RouteSetup&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;Setup&quot;&lt;/span&gt;)]
namespace WebApplication2&lt;span class=&quot;variable&quot;&gt;.App_Start&lt;/span&gt;
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;RouteSetup&lt;/span&gt;&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Setup()
        {
            RouteTable&lt;span class=&quot;variable&quot;&gt;.Routes&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.MapRoute&lt;/span&gt;(
                &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// Route name&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;{controller}/{action}/{id}&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// URL with parameters&lt;/span&gt;
                new { controller = &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, action = &lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = UrlParameter&lt;span class=&quot;variable&quot;&gt;.Optional&lt;/span&gt; } &lt;span class=&quot;comment&quot;&gt;// Parameter defaults&lt;/span&gt;
            );
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve added a couple of &lt;code&gt;using&lt;/code&gt; statements and I&amp;#39;ve also added a single route, here you can define as many routes as you want, go as crazy as you need for your application routing. But there&amp;#39;s still one more thing we need to do with the routing, we need to make sure Umbraco will also ignore it. The Umbraco routing engine is pretty greedy, it wants to handle everything, the problem is that this isn&amp;#39;t an Umbraco route so we don&amp;#39;t want it to be handled there. Luckily this is easy to do, open up the &lt;code&gt;Web.config&lt;/code&gt; and we&amp;#39;ll change the &lt;code&gt;umbracoReservedPaths&lt;/code&gt; appSetting:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;umbracoReservedPaths&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;~/umbraco,~/install/,~/home&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: The more complex your routes the more you&amp;#39;ll need to update this. It might be advisable to put all your routes behind a certain prefix. I&amp;#39;ve also not tested this with MVC Areas so I have no idea if that&amp;#39;ll work. Finally I have an idea on how to make the route registration simpler and more unobtrusive and I&amp;#39;ll post a follow up blog post.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Creating a controller and views&lt;/h1&gt;
&lt;p&gt;So I&amp;#39;m going to go ahead and create a really basic controller:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;using System.Web.Mvc;

namespace WebApplication1.Controllers
{
    public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HomeController&lt;/span&gt; :&lt;/span&gt; Controller
    {
        public ActionResult Index()
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; View();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just a standard MVC controller, go as nuts with it as needed. Now we&amp;#39;ll add the view:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;@{
    Layout = null;
    ViewBag.Title = &quot;Home&quot;;
}
&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;@ViewBag.Title&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello I'm a razor view.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: This view is &lt;strong&gt;stupidly&lt;/strong&gt; simple, but this is just a proof of concept :P.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note #2: You may not get the nice Visual Studio menu options for creating contollers and views, you also might find that the razor file has a lot of red squigglies, when this happens it&amp;#39;s because your Visual Studio project type is not an MVC project, there&amp;#39;s a GUID you can change in the csproj file but I&amp;#39;ll leave that to you to experiment with.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#39;re just about ready to host our MVC application!&lt;/p&gt;
&lt;h1&gt;Web.config for all&lt;/h1&gt;
&lt;p&gt;In this demo, because I used NuGet I&amp;#39;m using MVC 4.0 which also means you have Razor 2.0, this means we need to do some changes to the Umbraco web.config file to support this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change #1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You need to add your own &lt;code&gt;Web.config&lt;/code&gt; for the MVC views, this will reside at &lt;code&gt;/Views/Web.config&lt;/code&gt; in your project. The easiest way to get the contents is to grab it from a new MVC project. If you do that you need to remove a part though, as Umbraco already has some Razor support it will want to take over for the MVC side as well. Because of this you need to remove this part:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;system.web.webPages.razor&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;requirePermission&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;pages&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;requirePermission&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section is actually defined in the Umbraco Web.config for Razor support so declaring it a second time will result in an error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change #2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I said I&amp;#39;m using MVC 4.0 here which also uses Razor 2.0 and because of this we need to convert Umbraco up to Razor 2.0. So you&amp;#39;ll need to identify the above mentioned config section in the Umbraco web.config and change the &lt;code&gt;Version=1.0.0.0&lt;/code&gt; to &lt;code&gt;Version=2.0.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Done!&lt;/h1&gt;
&lt;p&gt;Yep with that all completed you&amp;#39;re done, you can now route to your MVC application side-by-side with your Umbraco CMS pages.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So over the course of this blog post we&amp;#39;ve looked at how you can get a MVC application working along with an Umbraco CMS in the same IIS/ website. There&amp;#39;s a few things to remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&amp;#39;re using MVC for the application side of our website only&lt;/li&gt;
&lt;li&gt;Umbraco is still handling all the content pages and you have to use traditional Umbraco practices (you know, like Razor!)&lt;/li&gt;
&lt;li&gt;You don&amp;#39;t have Umbraco content on the MVC pages &lt;em&gt;but&lt;/em&gt; you have the Umbraco API so you could always do calls to get editor data&lt;/li&gt;
&lt;li&gt;This was a proof-of-concept, implement it at your own risk&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Storing credentials in Windows 8</title>
            <link href="/posts/2012-06-04-storing-credentials-windows-8.html"/>
            <updated>2012-06-04T00:00:00.000Z</updated>
            <id>/posts/2012-06-04-storing-credentials-windows-8.html</id>
            <content type="html">&lt;p&gt;So you&amp;#39;re building a Windows 8 application and you want to authenticate against an external service. For this it&amp;#39;s likely that you&amp;#39;re going to want to store a username and password for the user so that you can query off to the external service without bugging them constantly.&lt;/p&gt;
&lt;p&gt;This was something that I had to do for my &lt;a href=&quot;http://www.aaron-powell.com/pinboard-for-win8&quot;&gt;Pinboard for Windows 8&lt;/a&gt; application so I wanted to make sure that I was doing it above board and no one would think I&amp;#39;ve been sneaky and abused their privacy.&lt;/p&gt;
&lt;h1&gt;Accessing credentials&lt;/h1&gt;
&lt;p&gt;Luckily Windows 8 provides you a nice and easy way which you can store the credentials your application has. I&amp;#39;ll admit that I&amp;#39;ve not done a lot of desktop application development so this may not be &lt;em&gt;that&lt;/em&gt; new but hey it&amp;#39;s new to me and new for WinJS :P. The way you interact with the credentials is through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/xaml/br227081.aspx&quot;&gt;&lt;code&gt;Windows.Security.Credentials.PasswordVault&lt;/code&gt;&lt;/a&gt; class and it&amp;#39;s shockingly simple to do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; resourceKey = &lt;span class=&quot;string&quot;&gt;'My app key'&lt;/span&gt;;
&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; passwordVault = new Windows.Security.Credentials.PasswordVault();

&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; credentials = passwordVault.findAllByResource(resourceKey);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off you need to create a resource key for your application; this is an identifier for your application&amp;#39;s credentials. The &lt;code&gt;FindAllByResource&lt;/code&gt; method will provide you with all the credentials you&amp;#39;ve stored, you can then filter this down as required to find the particular user you&amp;#39;re after.&lt;/p&gt;
&lt;p&gt;Once you have the username you can retrieve the password since the password wont be provided in a usable method initial (I&amp;#39;m guessing for security reasons) so you have to explicitly request it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var user = passwordVault&lt;span class=&quot;preprocessor&quot;&gt;.retrieve&lt;/span&gt;(resoruceKey, credentials[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;preprocessor&quot;&gt;.userName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;user&lt;/code&gt; object will have a password property that you can do what ever you need to do.&lt;/p&gt;
&lt;h1&gt;Where it gets ugly&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s the first time a user installs your application so you wont have any credentials. You want them to log in before you can do anything right? That makes sense so you check to see if there is a user:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resourceKey = &lt;span class=&quot;string&quot;&gt;'My app key'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passwordVault = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Windows.Security.Credentials.PasswordVault();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; credentials = passwordVault.findAllByResource(resourceKey);

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (credentials.length) {
    &lt;span class=&quot;comment&quot;&gt;//we've got a credential&lt;/span&gt;
} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;//no credentials yet&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right? &lt;strong&gt;Wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Where you expect to an empty credential store for your resource you actually get... &lt;strong&gt;an exception&lt;/strong&gt;! That right the code you&amp;#39;ll actually need looks more like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resourceKey = &lt;span class=&quot;string&quot;&gt;'My app key'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passwordVault = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Windows.Security.Credentials.PasswordVault();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; credentials;

&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    credentials = passwordVault.findAllByResource(resourceKey);
    &lt;span class=&quot;comment&quot;&gt;//we've got a credential&lt;/span&gt;
} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span class=&quot;comment&quot;&gt;//no credentials yet&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Le sigh...&lt;/em&gt; I haven&amp;#39;t found any better way to do this other than trying to get &lt;em&gt;all&lt;/em&gt; credentials using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/xaml/windows.security.credentials.passwordvault.retrieveall.aspx&quot;&gt;&lt;code&gt;retrieveAll&lt;/code&gt;&lt;/a&gt; method but that implies that it gets back all credentials regardless of the resource key, which is what we really want to identify our application.&lt;/p&gt;
&lt;h1&gt;Storing credentials&lt;/h1&gt;
&lt;p&gt;Once we get passed the oddity of try/ catch driven development it&amp;#39;s worthwhile thinking about storing credentials. Turns out that this is also really easy to do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var creds = new Windows&lt;span class=&quot;preprocessor&quot;&gt;.Security&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Credentials&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.PasswordCredential&lt;/span&gt;(resourceKey, username, password)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

passwordVault&lt;span class=&quot;preprocessor&quot;&gt;.add&lt;/span&gt;(creds)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now your store is updated and what&amp;#39;s also cool is that you can access them from Windows 8 itself. If you navigate to &lt;code&gt;Control Panel\User Accounts and Family Safety\Credential Manager&lt;/code&gt; you&amp;#39;ll see your newly stored credentials:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/windows-8-credentials-store.png&quot; alt=&quot;Credentials Store&quot;&gt;&lt;/p&gt;
&lt;p&gt;And there we go, all stored securely inside the Windows security store. The other cool thing about this is that it allows credentials to roam between devices, I haven&amp;#39;t been able to put this to the test yet though as I only have one machine with Windows 8 on it so roaming isn&amp;#39;t all that viable!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Storing credentials in Windows 8 is so simple but it has some strangeness about it. Your main point of call is the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/xaml/br227081.aspx&quot;&gt;&lt;code&gt;PasswordVault&lt;/code&gt;&lt;/a&gt; class, part of the Windows 8 runtime, which gives you a simple programming interface into the Windows security store.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>IndexedDB changed in IE10 PP6</title>
            <link href="/posts/2012-06-04-indexeddb-changed-ie10pp6.html"/>
            <updated>2012-06-04T00:00:00.000Z</updated>
            <id>/posts/2012-06-04-indexeddb-changed-ie10pp6.html</id>
            <content type="html">&lt;p&gt;When building &lt;a href=&quot;http://www.aaron-powell.com/pinboard-for-win8&quot;&gt;Pinboard for Windows 8&lt;/a&gt; I decided to use &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt; as the internal storage for the application since I was writing it using WinJS.&lt;/p&gt;
&lt;p&gt;Initially I wrote the application against the Consumer Preview release but when it came time to get it going for the Release Preview I hit a snag, the database layer was completely falling over! I kept getting an &lt;code&gt;InvalidAccessError&lt;/code&gt; every time I tried to open a transaction. My code was looking like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;transaction&lt;/span&gt; = db.&lt;span class=&quot;keyword&quot;&gt;transaction&lt;/span&gt;('&lt;span class=&quot;keyword&quot;&gt;my&lt;/span&gt;-store', IDBTransaction.READ_WRITE);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I couldn&amp;#39;t work out what was going wrong here, I hadn&amp;#39;t changed my code and reading the &lt;a href=&quot;http://www.w3.org/TR/2011/WD-IndexedDB-20111206/&quot;&gt;spec at the time&lt;/a&gt; everything looked exactly right...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watch out for fluid specs!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What I hadn&amp;#39;t noticed was that there was a new version of the IndexedDB spec in the works and in this spec the &lt;code&gt;IDBTransaction&lt;/code&gt; enum had been dropped in favour of string representations of the transaction types and &lt;em&gt;IE10 was implementing this spec&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So I had to update all my code to remove the enum values in favour of string values:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;var readOnlyTransaction = db.transaction(&lt;span class=&quot;attribute&quot;&gt;'my&lt;/span&gt;-store', &lt;span class=&quot;attribute&quot;&gt;'readonly&lt;/span&gt;');
var readWriteTransaction = db.transaction(&lt;span class=&quot;attribute&quot;&gt;'my&lt;/span&gt;-store', &lt;span class=&quot;attribute&quot;&gt;'readwrite&lt;/span&gt;');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This spec is now the current version and most of the browsers have moved to using it (although Chrome still insists on having the enum available it just raises a warning if you use it) so you&amp;#39;re code &lt;em&gt;should&lt;/em&gt; work once updated.&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;You should use my library, &lt;a href=&quot;http://aaronpowell.github.com/db.js/&quot;&gt;db.js&lt;/a&gt;, to simplify your interaction with IndexedDB across the different browsers.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Pinboard for Windows 8</title>
            <link href="/posts/2012-06-01-pinboard-for-win8.html"/>
            <updated>2012-06-01T00:00:00.000Z</updated>
            <id>/posts/2012-06-01-pinboard-for-win8.html</id>
            <content type="html">&lt;p&gt;With the release of the Windows 8 store today I&amp;#39;m excited to say that you can now download my &lt;a href=&quot;http://apps.microsoft.com/webpdp/app/pinboard/3ed0b8d9-544e-4242-aaa6-d836c47dd0d1&quot;&gt;Pinboard for Windows 8 application&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;A few months ago &lt;a href=&quot;https://twitter.com/#!/tathamoddie&quot;&gt;Tatham&lt;/a&gt; pointed me to a bookmarking service called &lt;a href=&quot;http://pinboard.in&quot;&gt;Pinboard&lt;/a&gt; which is described as antisocial bookmarking, and is aimed at being a super simple bookmarking service, it&amp;#39;s no fuss, no bells-and-whistles, it&amp;#39;s just a bookmarking service.&lt;/p&gt;
&lt;p&gt;When I first started using Windows 8 I really wanted to be able to interact with my bookmarks, particularly when I was using IE10 Metro. Since IE10 Metro is a plugin-free browsing experience I wouldn&amp;#39;t have a plugin like Chrome so how was I going to manage my bookmarks?&lt;/p&gt;
&lt;p&gt;Since Windows 8 aims to have seamless integration between different applications I wanted to leverage this, in particular I wanted to use the &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2012/05/14/sharing-links-from-ie10-on-windows-8.aspx&quot;&gt;Sharing Target&lt;/a&gt; capabilities. Also I wanted to be able to quickly find different bookmarks again Windows 8 provides a good way to do &lt;a href=&quot;http://blogs.msdn.com/b/b8/archive/2011/10/18/designing-search-for-the-start-screen.aspx&quot;&gt;search&lt;/a&gt; that can integrate with your application.&lt;/p&gt;
&lt;p&gt;So if you&amp;#39;ve got a Pinboard account (and if you don&amp;#39;t you should switch to using it!) grab my application and get bookmarking :D.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Understanding compression and minification</title>
            <link href="/posts/2012-05-29-understanding-compression-and-minification.html"/>
            <updated>2012-05-29T00:00:00.000Z</updated>
            <id>/posts/2012-05-29-understanding-compression-and-minification.html</id>
            <content type="html">&lt;p&gt;One of my colleagues raised a question on our internal discussion system as to why we should use minified JavaScript libraries. Now I&amp;#39;m sure everyone knows that you &lt;em&gt;should&lt;/em&gt; minimize your libraries but do you &lt;em&gt;really&lt;/em&gt; understand what the different levels of minification are and the benefits of the different levels? While I strongly recommend that you should ensure that on a production system you always have your JavaScript minified &lt;strong&gt;and&lt;/strong&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Gzip&quot;&gt;gzipped&lt;/a&gt; (well and the right caching headers but that&amp;#39;s beyond the scope of this blog post) let&amp;#39;s have a look as to exactly what differences it makes.&lt;/p&gt;
&lt;p&gt;For the exercise I decided that I would take the &lt;a href=&quot;http://blog.jquery.com/2012/03/21/jquery-1-7-2-released/&quot;&gt;jQuery 1.7.2&lt;/a&gt; release as it&amp;#39;s a very common JavaScript library and it&amp;#39;s very well written and formatted. I&amp;#39;m going to use the unminified version to run the steps against. For the minification I&amp;#39;ve decided to use &lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot;&gt;uglify js&lt;/a&gt; which is toting itself as the best library for minification, it&amp;#39;s also got a pretty nice API so I can work with it programmatically. Lastly I&amp;#39;ve got a tiny Node.js application running Express.js that is serving out the files.&lt;/p&gt;
&lt;h1&gt;Serving the raw file&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s start by looking at serving a completely raw file, the jQuery &lt;em&gt;development&lt;/em&gt; release and if we request our file we&amp;#39;ll see something like this as the response headers:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;327171&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the raw request is coming back at &lt;strong&gt;327171 bytes&lt;/strong&gt; which is pretty large. From a production point of view you wouldn&amp;#39;t exactly want to do this everytime. Let&amp;#39;s turn on gzip for this same request and see what happens:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;78390&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that I&amp;#39;ve turned on gzip compression our request is already down to &lt;strong&gt;78390 bytes&lt;/strong&gt;, this is a pretty drastic reduction already and all we&amp;#39;ve done is turn on compression. But we&amp;#39;re not really getting the most our of our response, gzipping is good, it takes care of common parts of our code, the &lt;code&gt;function&lt;/code&gt; keyword, whitespace, etc, but there&amp;#39;s still more we can get out of this.&lt;/p&gt;
&lt;h1&gt;Stripping comments&lt;/h1&gt;
&lt;p&gt;Comments are useful in your codebase but do you really need to send them down to the user? Probably not. So let&amp;#39;s strip them out before sending our response and see what impact this has. For this I&amp;#39;m going to use uglify.js and rebuilt the AST from our original source. I&amp;#39;m going to maintain the structure of our code so we&amp;#39;re going to have a bunch of whitespace still, it wont be exactly what jQuery originally had since we&amp;#39;ve had to rebuild the codebase from the AST but at least our code would still be useful if we want to step through. If we take a look at the first few lines of the file it looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;window&lt;/span&gt;, undefined)&lt;/span&gt; &lt;span class=&quot;collection&quot;&gt;{
    var document = window.document, navigator = window.navigator, location = window.location&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var jQuery = function&lt;span class=&quot;list&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;collection&quot;&gt;{
        var jQuery = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;selector&lt;/span&gt;, context)&lt;/span&gt; &lt;span class=&quot;collection&quot;&gt;{
            return new jQuery.fn.init&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;selector&lt;/span&gt;, context, rootjQuery)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }&lt;/span&gt;, _jQuery = window.jQuery, _$ = window.$, rootjQuery, quickExpr = /^&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:&lt;span class=&quot;collection&quot;&gt;[&lt;span class=&quot;comment&quot;&gt;^#&amp;lt;&lt;/span&gt;]&lt;/span&gt;*&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;[\w\W]&lt;/span&gt;+&amp;gt;)&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;[&lt;span class=&quot;comment&quot;&gt;^&amp;gt;&lt;/span&gt;]&lt;/span&gt;*$|#&lt;span class=&quot;list&quot;&gt;([\&lt;span class=&quot;title&quot;&gt;w&lt;/span&gt;\-]*)&lt;/span&gt;$)&lt;/span&gt;/, rnotwhite = /\S/, trimLeft = /^\s+/, trimRight = /\s+$/, rsingleTag = /&lt;span class=&quot;comment&quot;&gt;^&amp;lt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(\&lt;span class=&quot;title&quot;&gt;w+&lt;/span&gt;)&lt;/span&gt;\s*\/?&amp;gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;:&amp;lt;&lt;/span&gt;\/\1&amp;gt;)&lt;/span&gt;?$/, rvalidchars = /^&lt;span class=&quot;collection&quot;&gt;[\]&lt;/span&gt;,:&lt;span class=&quot;collection&quot;&gt;{}&lt;/span&gt;\s]&lt;/span&gt;*$/, rvalidescape = /\\&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:&lt;span class=&quot;collection&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;\\\/bfnrt]|u[0-9a-fA-F]{4})/g, rvalidtokens = /&quot;&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;[^&lt;span class=&quot;string&quot;&gt;&quot;\\\n\r]*&quot;&lt;/span&gt;|true|false|null|-?\d+&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:\.\d*)&lt;/span&gt;?&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:&lt;span class=&quot;collection&quot;&gt;[eE]&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;[+\-]&lt;/span&gt;?\d+)&lt;/span&gt;?/g, rvalidbraces = /&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:^|:|,)&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;:\s*\&lt;span class=&quot;collection&quot;&gt;[)+/g, rwebkit = /&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;webkit&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;[ \/]&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;([\&lt;span class=&quot;title&quot;&gt;w.&lt;/span&gt;]+)&lt;/span&gt;/, ropera = /&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;opera&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;:.*version&lt;/span&gt;)&lt;/span&gt;?&lt;span class=&quot;collection&quot;&gt;[ \/]&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;([\&lt;span class=&quot;title&quot;&gt;w.&lt;/span&gt;]+)&lt;/span&gt;/, rmsie = /&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;msie&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;([\&lt;span class=&quot;title&quot;&gt;w.&lt;/span&gt;]+)&lt;/span&gt;/, rmozilla = /&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;mozilla&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;:.*?&lt;/span&gt; rv:&lt;span class=&quot;list&quot;&gt;([\&lt;span class=&quot;title&quot;&gt;w.&lt;/span&gt;]+)&lt;/span&gt;)&lt;/span&gt;?/, rdashAlpha = /-&lt;span class=&quot;list&quot;&gt;([&lt;span class=&quot;title&quot;&gt;a-z&lt;/span&gt;]|&lt;span class=&quot;collection&quot;&gt;[0-9]&lt;/span&gt;)&lt;/span&gt;/ig, rmsPrefix = /&lt;span class=&quot;comment&quot;&gt;^-ms-/&lt;/span&gt;, fcamelCase = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;all&lt;/span&gt;, letter)&lt;/span&gt; &lt;span class=&quot;collection&quot;&gt;{
            return &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;letter&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;.toUpperCase&lt;span class=&quot;list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }&lt;/span&gt;, userAgent = navigator.userAgent, browserMatch, readyList, DOMContentLoaded, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, push = Array.prototype.push, slice = Array.prototype.slice, trim = String.prototype.trim, indexOf = Array.prototype.indexOf, class2type = &lt;span class=&quot;collection&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        jQuery.fn = jQuery.prototype = &lt;span class=&quot;collection&quot;&gt;{
            constructor: jQuery,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said this isn&amp;#39;t exactly what the jQuery source looked like since we&amp;#39;ve removed more whitespace but it&amp;#39;s close and most importantly it&amp;#39;s readable.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s look at the headers:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;254399&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we compare that to the original we&amp;#39;ve gone down to &lt;strong&gt;254399 bytes&lt;/strong&gt;. Cool even with that we&amp;#39;ve dropped a good bit of weight from our response. Now let&amp;#39;s also gzip it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;48566&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again we&amp;#39;re getting some better performance because we don&amp;#39;t have the comments which don&amp;#39;t compress as well as say whitespace and a slightly more organised codebase.&lt;/p&gt;
&lt;h1&gt;Mangling our code&lt;/h1&gt;
&lt;p&gt;One of the most common things that a minifier will do is &lt;em&gt;obfuscate&lt;/em&gt; your code, variables, functions, etc will all be renamed into smaller versions so that you have smaller files by having smaller names. Obviously this makes your code a whole lot harder to read (hence obfuscation) but it does do wonders for file size. Again we&amp;#39;re going to get uglify.js to help us out so let&amp;#39;s have a look at the first few lines again:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, b)&lt;/span&gt;&lt;/span&gt; {
    function h&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        var b = g[a] = {}, c, d&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        a = a.split&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;\s+/)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        for &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, d = a.length&lt;span class=&quot;comment&quot;&gt;; c &amp;lt; d; c++) {&lt;/span&gt;
            b[a[c]] = true&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }
        return b&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s quite different now isn&amp;#39;t it! You&amp;#39;ll see from the very first line in the original version we had two arguments &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;, these are now called &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, the body has also been rewritten so that there&amp;#39;s a different order for the code, functions are now at the top, the first being a function called &lt;code&gt;h&lt;/code&gt;. Here&amp;#39;s the original function that is now the &lt;code&gt;h&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createFlags&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(flags)&lt;/span&gt; {&lt;/span&gt;
    var object = flagsCache&lt;span class=&quot;matrix&quot;&gt;[flags]&lt;/span&gt; = &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;;
    flags = &lt;span class=&quot;transposed_variable&quot;&gt;flags.&lt;/span&gt;split(/\s+/);
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; = &lt;span class=&quot;transposed_variable&quot;&gt;flags.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
        object[flags[i]] = true;
    }&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; object;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the use of smaller variable names and this is done because the variables are never needed by any consumer of the API, so renaming &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt; wont be a problem because anyone who knew it was &lt;code&gt;object&lt;/code&gt; has also had their references updated. So what&amp;#39;s the impact on size?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;213222&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we compare this back to the last request you&amp;#39;ll see that it&amp;#39;s only slightly smaller, but this is the advantage of using minimal variable names (and keep in mind we still have whitespace). And now we&amp;#39;ll try gzipping it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;42854&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again we&amp;#39;re not really that might smaller than just the comment stripped version but we are shrinking our response down.&lt;/p&gt;
&lt;h1&gt;Optimising the codebase&lt;/h1&gt;
&lt;p&gt;Although variable minification can do good things to getting your files smaller you can get even more out of it if you&amp;#39;re smart about your codebase, in this stage we&amp;#39;re looking at tricks of the JavaScript language that you won&amp;#39;t want to actually write but are useful when you&amp;#39;re trying to get smaller files. Things like utilising the comma operator can be useful for chaining together statements and removing unreachable code are something best left to the machines, you can easily introduce errors into your JavaScript if you&amp;#39;re not careful. Let&amp;#39;s run this over our codebase:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, b)&lt;/span&gt;&lt;/span&gt; {
    function h&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        var b = g[a] = {}, c, d&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        a = a.split&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;\s+/)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        for &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, d = a.length&lt;span class=&quot;comment&quot;&gt;; c &amp;lt; d; c++) b[a[c]] = !0;&lt;/span&gt;
        return b&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well now &lt;em&gt;that&lt;/em&gt; is looking rather different isn&amp;#39;t it. You&amp;#39;ll see that there&amp;#39;s some interesting tricks that have been applied, in particular the use of &lt;code&gt;!0&lt;/code&gt;. Fascinating how you can exploit JavaScript boolean operations isn&amp;#39;t it. If you&amp;#39;re unsure of what this is doing in JavaScript &lt;code&gt;0&lt;/code&gt; is a falsey value, meaning that JavaScript will treat &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;false&lt;/code&gt;, but it&amp;#39;s not &lt;em&gt;actually&lt;/em&gt; false (&lt;code&gt;0 === false&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;) but by putting a &lt;code&gt;!&lt;/code&gt; operator it will force the value to be converted to an actual boolean by returning the inverse, and &lt;code&gt;!0 === true&lt;/code&gt;. Like I said, fascinating.&lt;/p&gt;
&lt;p&gt;So what&amp;#39;s it do for our response size (keep in mind we still have whitespace maintained):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;155600&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s looking good, we&amp;#39;ve really dropped the size nicely, and if we gzip it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;39185&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost there! It&amp;#39;s getting pretty small right there ey!&lt;/p&gt;
&lt;h1&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve pretty much run through all of the different steps to get our responses down, we&amp;#39;ve seen the impact of each step, but let&amp;#39;s roll it all together and also strip off the whitespace:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript; charset=utf-8&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;94656&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if we drop the whitespace we are &lt;em&gt;drastically&lt;/em&gt; reducing the size of our library but our code is next to impossible to step into if we need to debug it. This is a logical desire of a production system, you really shouldn&amp;#39;t be debugging through it. So what if we turn on gzipping this time, we&amp;#39;ve already removed the whitespace, the biggest space waste in our response so can we really get as much from gzipping?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;status&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;X-Powered-By&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Express&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;gzip&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;33632&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;application/javascript&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Connection&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, we&amp;#39;ve still got a really good levels of compression against our library, down to just &lt;strong&gt;33632 bytes&lt;/strong&gt; for jQuery.&lt;/p&gt;
&lt;h1&gt;Size Matters&lt;/h1&gt;
&lt;p&gt;Now that we&amp;#39;ve seen how we get to the end goal, an ultra-small version of our JavaScript library we should answer the question of &lt;em&gt;why&lt;/em&gt;. The simplest answer to the question is speed, by having a smaller file (~30kb vs ~350kb) we can send that down from the server a lot quicker. This is especially important when you&amp;#39;re looking at this from a mobile point of view, you&amp;#39;ve got a limited bandwidth allowance so you want to be able to send as much as quickly as possible.&lt;/p&gt;
&lt;p&gt;But what about from the point of view of high-speed network connections, is file size &lt;em&gt;really&lt;/em&gt; that important if you&amp;#39;re transmitting over ADSL2 or something? Well yes it still does matter, even if you can download the file fast you can download smaller files even faster and that will have an impact on the overall speed of your application, the faster all dependencies are loaded the faster your application becomes response to the end user.&lt;/p&gt;
&lt;p&gt;The other main reason to ensure that you&amp;#39;re files are as small as possible is caching. Again this is most important from a mobile browser point of view but it&amp;#39;s still very valid with desktop browsers. Mobile browsers have fairly limited cache allowances. Yahoo! did a &lt;a href=&quot;http://www.yuiblog.com/blog/2010/07/12/mobile-browser-cache-limits-revisited/&quot;&gt;blog post&lt;/a&gt; which they looked at the allowances for the different mobile devices (although it&amp;#39;s a bit out-of-date) and you can see from that you&amp;#39;ve not got a lot of play so the better packed your files the safer you&amp;#39;ll be in cache. Desktop browsers are a lot more flexible since you can change their cache allowances and they also have &lt;a href=&quot;http://www.blaze.io/mobile/understanding-mobile-cache-sizes/&quot;&gt;higher starting levels&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;ve seen throughout this blog exactly what makes up minification of JavaScript libraries, what different minification concepts bring to the table and ultimately just &lt;em&gt;why&lt;/em&gt; you should minify &lt;strong&gt;and&lt;/strong&gt; gzip your libraries in production. Keep in mind that there&amp;#39;s more to performance that I haven&amp;#39;t covered such as caching but there&amp;#39;s plenty of articles out there that can help you with that ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN series conclusion</title>
            <link href="/posts/2012-04-10-owin-conclusion.html"/>
            <updated>2012-04-10T00:00:00.000Z</updated>
            <id>/posts/2012-04-10-owin-conclusion.html</id>
            <content type="html">&lt;p&gt;Over the last few weeks I&amp;#39;ve done a small series of blog posts looking at the &lt;a href=&quot;http://owin.org/&quot;&gt;Open Web Interface for .NET, aka OWIN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The series was made up of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/hello-owin&quot;&gt;A Hello World introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/owin-and-middleware&quot;&gt;Introducing middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/owin-routing&quot;&gt;Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/owin-responses&quot;&gt;Responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;View Engines in both &lt;a href=&quot;http://www.aaron-powell.com/web/owin-view-engines&quot;&gt;simple&lt;/a&gt; and &lt;a href=&quot;http://www.aaron-powell.com/web/owin-view-engines-part-2&quot;&gt;advanced&lt;/a&gt; forms&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;github&lt;/a&gt; repository with all the code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I started look at OWIN after bitching at &lt;a href=&quot;https://twitter.com/#!/damianedwards&quot;&gt;Damian Edwards&lt;/a&gt; over the poor documentation and he told me to stop bitching and work it out. So I did and while doing it I though I&amp;#39;d do my best to contribute back so that others have a better starting point.&lt;/p&gt;
&lt;h2&gt;Major take away points&lt;/h2&gt;
&lt;p&gt;I had a lot of fun playing with OWIN but most importantly I think I&amp;#39;ve learnt a thing or two and here are my major take away points from the last few weeks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn your web stack.&lt;/strong&gt; This is something that I found really important; while WebForms is a very high level abstraction on the web MVC has really changed that, it&amp;#39;s quite close to the wire. But even then it&amp;#39;s sometimes not close enough. I&amp;#39;ve worked on projects where we&amp;#39;ve had to work around the gates put up by MVC to protect developers from doing something really stupid so sometimes you want something else. I can see where OWIN would fit in there, especially if you combine it with something like Nancyfx you can still get all the ASP.Net powers but also skip around it when required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Middleware is your friend.&lt;/strong&gt; Sure I&amp;#39;d &lt;a href=&quot;http://www.aaron-powell.com/ole&quot;&gt;done it before&lt;/a&gt; when it comes to middleware but I&amp;#39;ve always been interested as to how you&amp;#39;d approach it in .NET. JavaScript is a very nice language especially when it comes to functional-esq programming so being able to try a similar idea in .NET and compare the experience was interesting. Generics and delegates can be a &lt;strong&gt;bitch&lt;/strong&gt; in .NET, but it&amp;#39;s generally a problem you wont have to face.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don&amp;#39;t need everything up front.&lt;/strong&gt; While it may seems very convenient that I had a series of blogs that expanded on the ideas of the ones before it that was initially an accident. I started with the intention of just doing the first post but as I wrote the code our I could see it evolving. I didn&amp;#39;t even think about a View Engine until I&amp;#39;d already exhausted the routes and response sections, both of which somewhat relied upon an understanding of middleware. You can easily cut out sections of the series of you don&amp;#39;t need an application that has a View Engine (say a RESTful service). Modularity is power, it&amp;#39;s something that the Node.js and Ruby guys have known for a long time but projects like OWIN as making it more accessible in .NET.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Hopefully you&amp;#39;ve enjoyed the journey too and learnt a thing or two along the way. This series has been by no means an extensive dive into all parts OWIN, I&amp;#39;ll freely admit there&amp;#39;s things I ignored as I didn&amp;#39;t think them interesting enough (like how do you serve out statics like CSS and JavaScript?) and there&amp;#39;s other things that I didn&amp;#39;t even work out (like how Firefly works!). My goal was to give anyone who wants to play with OWIN a starting location and I think I&amp;#39;ve done that.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN and View Engines, Part 2</title>
            <link href="/posts/2012-04-02-owin-view-engines-part-2.html"/>
            <updated>2012-04-02T00:00:00.000Z</updated>
            <id>/posts/2012-04-02-owin-view-engines-part-2.html</id>
            <content type="html">&lt;p&gt;In the last post we had a bit of a look at &lt;a href=&quot;http://www.aaron-powell.com/web/owin-view-engines&quot;&gt;View Engines for OWIN&lt;/a&gt; and in this one I want to take the idea just a little bit further.&lt;/p&gt;
&lt;p&gt;Most web frameworks you come across will allow you to choose your own View Engine. ASP.Net MVC allows for this (although it can be tricky) and frameworks like Express.js or Nancy make it quite easy to drop in your own one.&lt;/p&gt;
&lt;p&gt;You may be wondering why you would want to do this? Apart from the &amp;quot;because you can&amp;quot; and &amp;quot;freedom of choice&amp;quot; reasons there is a slightly more valid reason. Most view engines while being generic often have a level of speciality to them; the developers who write it don&amp;#39;t know about every scenario you&amp;#39;d want to use it in. Let&amp;#39;s say you&amp;#39;re a Node.js programmer who has a love for CoffeeScript. You might want to use the &lt;a href=&quot;http://coffeekup.org/&quot;&gt;CoffeeKup&lt;/a&gt; View Engine since it allows you to write in you &lt;em&gt;native&lt;/em&gt; language (I don&amp;#39;t want to debate the merits of this it&amp;#39;s a valid scenario) but the problem with CoffeeKup is it can&amp;#39;t do XML (at least the last time I used it it couldn&amp;#39;t). This may not be really that big a deal for the majority of your application but what if you&amp;#39;ve got an RSS feed? Well then you can&amp;#39;t really expose that through your chosen View Engine so you&amp;#39;d want for that specific route to be able to change to a different View Engine.&lt;/p&gt;
&lt;h1&gt;Teasing out our View Engine&lt;/h1&gt;
&lt;p&gt;The first step to making our View Engine more extensible is I&amp;#39;m going to pull out an interface from the &lt;code&gt;RazorViewEngine&lt;/code&gt; we have:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IViewEngine&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Parse(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewName);
    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Parse&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewName,&lt;span class=&quot;constant&quot;&gt; T &lt;/span&gt;model);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I would just have to implement that interface to create a View Engine and not take a dependency on Razor at all.&lt;/p&gt;
&lt;p&gt;You obviously want to update the other references to &lt;code&gt;RazorViewEngine&lt;/code&gt; to just be the interface, such as on our singleton and generic argument constraints. Now everywhere we&amp;#39;ll just deal with the interface and never the concrete class.&lt;/p&gt;
&lt;h1&gt;Enabling multiple View Engines&lt;/h1&gt;
&lt;p&gt;Essentially what we&amp;#39;re doing there is enabling multiple View Engines and I&amp;#39;m going to do this via two methods on my &lt;code&gt;ViewEngineActivator&lt;/code&gt; called &lt;code&gt;RegisterViewEngine&lt;/code&gt; and &lt;code&gt;ResolveViewEngine&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RegisterViewEngine(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewEngineId, Func&amp;lt;IViewEngine&amp;gt; viewEngineActivator)
{
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
}

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IViewEngine ResolveViewEngine(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewEngineId)
{
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m choosing to do a lazy invocation of the View Engine, meaning that you provide a function to create it rather than a created instance. The reason I&amp;#39;ve done this is just so we don&amp;#39;t create it until we do actually require it. But because I only want to create it once anyway I&amp;#39;m going to store the created View Engine once the function executes. For storage I&amp;#39;m going to maintain a private variable like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;private static Dictionary&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;string,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Tuple&lt;/span&gt;&amp;lt;&lt;span class=&quot;attribute&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span class=&quot;attribute&quot;&gt;IViewEngine&lt;/span&gt;&amp;gt;&lt;/span&gt;, IViewEngine&amp;gt;&amp;gt; viewEngines = new Dictionary&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;string,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Tuple&lt;/span&gt;&amp;lt;&lt;span class=&quot;attribute&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span class=&quot;attribute&quot;&gt;IViewEngine&lt;/span&gt;&amp;gt;&lt;/span&gt;, IViewEngine&amp;gt;&amp;gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we&amp;#39;ll update our registration method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RegisterViewEngine(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewEngineId, Func&amp;lt;IViewEngine&amp;gt; viewEngineActivator)
{
    viewEngines.Add(viewEngineId, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tuple&amp;lt;Func&amp;lt;IViewEngine&amp;gt;, IViewEngine&amp;gt;(viewEngineActivator, (IViewEngine)&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said I&amp;#39;m staging the instance until it&amp;#39;s needed so inside the tuple I&amp;#39;m just storing a null value. You&amp;#39;ll also have noticed that I&amp;#39;m passing in an ID for the View Engine, this is so we can easily find it later on.&lt;/p&gt;
&lt;p&gt;Now we&amp;#39;ll go ahead and implement our resolution method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; static IViewEngine ResolveViewEngine(string viewEngineId)
{
    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (string.IsNullOrEmpty(viewEngineId))
    {
        &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; new ArgumentNullException(&lt;span class=&quot;string&quot;&gt;&quot;viewEngineId&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A ViewEngine ID needs to be provided for resolution&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (!viewEngines.ContainsKey(viewEngineId))
    {
        &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; new KeyNotFoundException(string.Format(&lt;span class=&quot;string&quot;&gt;&quot;The ViewEngine ID {0} has not been registered, ensure it is registered before use&quot;&lt;/span&gt;, viewEngineId));
    }

    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; engine = viewEngines[viewEngineId];

    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (engine.Item2 == null)
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; activator = engine.Item1;
        &lt;span class=&quot;title&quot;&gt;engine&lt;/span&gt; = viewEngines[viewEngineId] = new Tuple&amp;lt;Func&amp;lt;IViewEngine&amp;gt;, IViewEngine&amp;gt;(activator, engine.Item1());
    }

    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; engine.Item2;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re doing here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensuring that we are being provided an ID for the View Engine and that it does exist in the store&lt;/li&gt;
&lt;li&gt;Pulling out the tuple&lt;/li&gt;
&lt;li&gt;If we haven&amp;#39;t created the View Engine yet (stored in &lt;code&gt;Item2&lt;/code&gt;) we&amp;#39;ll create it&lt;/li&gt;
&lt;li&gt;Return the View Engine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now I need to make a way to register each View Engine. You &lt;em&gt;can&lt;/em&gt; do this by accessing the &lt;code&gt;ViewEngineActivator&lt;/code&gt; itself but that&amp;#39;s not quite as fluent when you&amp;#39;re working with the &lt;code&gt;IAppBuilder&lt;/code&gt; so we&amp;#39;ll chuck an extension method on there:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder RegisterViewEngine(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Func&amp;lt;IViewEngine&amp;gt; viewEngine, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewEngineId)
{
    ViewEngineActivator.RegisterViewEngine(viewEngineId, viewEngine);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Noting really special with this other than making our API read nicely:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;builder
    .DefaultViewEngine&amp;lt;RazorViewEngine&amp;gt;()
    .RegisterViewEngine(() =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XmlViewEngine(), &lt;span class=&quot;string&quot;&gt;&quot;xml&quot;&lt;/span&gt;)
    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; so &lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Accessing the right View Engine&lt;/h1&gt;
&lt;p&gt;So we&amp;#39;ve seen how to get a View Engine by an ID but we want to make it easier. Generally speaking you&amp;#39;re going to be only using a single View Engine for most of your routes. To this end I want to have a &lt;em&gt;default&lt;/em&gt; View Engine which will be loaded up, which is what our singleton was doing for us before; I&amp;#39;m going to rename it to &lt;code&gt;DefaultViewEngine&lt;/code&gt; to make it more discoverable and change it from being a standard get/ set to look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; static IViewEngine DefaultViewEngine
{
    &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;
    {
        &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (defaultViewEngine == null)
            defaultViewEngine = ResolveViewEngine(&lt;span class=&quot;string&quot;&gt;&quot;defaultViewEngine&quot;&lt;/span&gt;);

        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; defaultViewEngine;
    }
    &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;
    {
        &lt;span class=&quot;title&quot;&gt;defaultViewEngine&lt;/span&gt; = value;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I&amp;#39;ve got a backing field and I&amp;#39;m also going to be working under the assumption that there&amp;#39;s a View Engine called &lt;code&gt;defaultViewEngine&lt;/code&gt;. This means that you can set it as before or alternatively set it through lazy loading (which the if condition will take care of).&lt;/p&gt;
&lt;h1&gt;Using an alternate View Engine&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve made it to allow you to specify a default View Engine, specify alternate View Engines so let&amp;#39;s look at how to use them.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s two ways you could go about this, you could either add a new parameter to the route registration which is the View Engine to use or you can put it on the actual call to the View Engine. Personally I like approach two more as the View Engine isn&amp;#39;t really related to the route but to the route handler and it also means that as I want to do some overloads for the route methods its not going to mean a lot of duplicate code (which is the same reason that we went with the &lt;code&gt;View&lt;/code&gt; extension method to begin with if you remember).&lt;/p&gt;
&lt;p&gt;This gives us an extension method like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public static void View(this Response res, string view, string viewEngineId)
{
    var viewEngine = ViewEngineActivator&lt;span class=&quot;preprocessor&quot;&gt;.ResolveViewEngine&lt;/span&gt;(viewEngineId)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var output = viewEngine&lt;span class=&quot;preprocessor&quot;&gt;.Parse&lt;/span&gt;(view)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    res&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;preprocessor&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;preprocessor&quot;&gt;.End&lt;/span&gt;(output)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(And I&amp;#39;ll leave the model-based one to your imagination)&lt;/p&gt;
&lt;p&gt;It&amp;#39;s pretty simple as you can see, mostly just a set of pass through method calls and it means our handler could be like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;.View&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/foo&quot;&lt;/span&gt;, (req, res) =&amp;gt; {
    res&lt;span class=&quot;preprocessor&quot;&gt;.View&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fooEngine&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it&amp;#39;s true I&amp;#39;m hard-coding &lt;code&gt;text/html&lt;/code&gt; as the content type that&amp;#39;s something you can change yourself, or even make it so that the View Engine knows more about the content type that is being returned; I&amp;#39;ll leave those as your exercises.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This wrap up our look at View Engines; we&amp;#39;ve seen how to create something simple to support a single View Engine and then expanded on the concept to enable us to use a different View Engine if and when required.&lt;/p&gt;
&lt;p&gt;As always you can check out the full code up on the &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN and View Engines</title>
            <link href="/posts/2012-03-23-owin-view-engines.html"/>
            <updated>2012-03-23T00:00:00.000Z</updated>
            <id>/posts/2012-03-23-owin-view-engines.html</id>
            <content type="html">&lt;p&gt;In the &lt;a href=&quot;http://www.aaron-powell.com/web/owin-responses&quot;&gt;last post&lt;/a&gt; we looked at improving our responses in OWIN by adding some extensions methods to the response object and the next logical step for this is to think about HTML. While what we&amp;#39;ve brought together thus far is useful if you&amp;#39;re creating something that is just a web API if  you want to create an actual web site you probably need to respond with some HTML.&lt;/p&gt;
&lt;p&gt;To this end we&amp;#39;re going to need to think about creating a &lt;em&gt;View Engine&lt;/em&gt; that will be responsible for our HTML generation. The reason I want to go down this path is it makes it nicer if we want to add some level of dynamic data to the HTML we&amp;#39;re serving, say insert a user name or other things like that.&lt;/p&gt;
&lt;h1&gt;Picking our language&lt;/h1&gt;
&lt;p&gt;HTML isn&amp;#39;t a language that has dynamic features to it so we need to look at a templating language to leverage for this. If you look around there&amp;#39;s plenty of different HTML templating languages like HAML, Spark, Jade or even Razor.&lt;/p&gt;
&lt;p&gt;Since I want to make it something easy to understand for the .NET developer I&amp;#39;m going to use Razor as my templating language, and I&amp;#39;m going to use the &lt;a href=&quot;http://razorengine.codeplex.com/&quot;&gt;RazorEngine&lt;/a&gt; project to help me out (it saves me writing all the bootstrapping code).&lt;/p&gt;
&lt;h1&gt;Approaching the View Engine&lt;/h1&gt;
&lt;p&gt;So we&amp;#39;re going to use Razor but &lt;em&gt;how&lt;/em&gt; are we going to use it? We need some way to &amp;quot;create&amp;quot; our View Engine and then we will want to interact with it.&lt;/p&gt;
&lt;p&gt;Since the View Engine could be a little bit complex I&amp;#39;m going to create a class which will represent the engine. This will also mean that I can do some caching within the View Engine to ensure optimal performance.&lt;/p&gt;
&lt;p&gt;With that in mind how are we going to interact with the View Engine? We obviously don&amp;#39;t want to spin it up every single time, instead I want it to always be available. So this means that I&amp;#39;m going to have a static that lives &lt;em&gt;somewhere&lt;/em&gt; which I&amp;#39;ll want to interact with.&lt;/p&gt;
&lt;p&gt;Finally how will we get that View Engine instance? Do we have it magically created or do we want it lazy-loaded?&lt;/p&gt;
&lt;p&gt;These are all things to be considered but my approach is going to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a singleton for the View Engine&lt;/li&gt;
&lt;li&gt;Have a &lt;code&gt;ViewEngineActivator&lt;/code&gt; which we access it through&lt;/li&gt;
&lt;li&gt;The user must explicitly register the &lt;code&gt;ViewEngine&lt;/code&gt; they want to use in code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Coding the View Engine&lt;/h2&gt;
&lt;p&gt;Thinking about the View Engine there&amp;#39;s not a lot that the class would have to publicly expose, in fact I really think you only want two methods, one that takes a view name, one which takes a view name and a model.&lt;/p&gt;
&lt;p&gt;So the View Engine will look something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; RazorViewEngine
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Parse(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewName)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Parse&amp;lt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;&amp;gt;(viewName, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Parse&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; viewName, T model)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool that&amp;#39;s not very complex, let&amp;#39;s start on the activator:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewEngineActivator&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; RazorViewEngine ViewEngine { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we&amp;#39;ll make it possible to register a View Engine:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder UseViewEngine&amp;lt;TViewEngine&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder)
    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; TViewEngine: RazorViewEngine, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;()
{
    ViewEngineActivator.ViewEngine = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TViewEngine();
}

&lt;span class=&quot;comment&quot;&gt;/* snip */&lt;/span&gt;
builder.UseViewEngine&amp;lt;RazorViewEngine&amp;gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now  that the infrastructure code is all there we need to think about how we would go about reading in the views and turning them into something we can send down as a response. In our View Engine we&amp;#39;re going to need to know where to find the views. I like conventions so I&amp;#39;m going to expect them to be in the &lt;code&gt;views&lt;/code&gt; folder at the application root. But I&amp;#39;m a nice guy so I think it should be possible to put the views into another folder if you desire so I&amp;#39;ll add some constructors like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RazorViewEngine()
    : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;views&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;_layout&quot;&lt;/span&gt;)
{
}

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RazorViewEngine(string viewFolder, string layoutViewName)
{
    ViewFolder = Path&lt;span class=&quot;variable&quot;&gt;.Combine&lt;/span&gt;(AppDomain&lt;span class=&quot;variable&quot;&gt;.CurrentDomain&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.BaseDirectory&lt;/span&gt;, viewFolder);
    LayoutViewName = layoutViewName;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Directory&lt;span class=&quot;variable&quot;&gt;.Exists&lt;/span&gt;(ViewFolder))
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new DirectoryNotFoundException(&lt;span class=&quot;string&quot;&gt;&quot;The view folder specified cannot be located.\r\nThe folder should be in the root of your application which was resolved as &quot;&lt;/span&gt; + AppDomain&lt;span class=&quot;variable&quot;&gt;.CurrentDomain&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.BaseDirectory&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m also going to check to make sure that the views folder &lt;em&gt;does&lt;/em&gt; exist. I&amp;#39;m also wanting support a &amp;quot;layout&amp;quot; view so that you can do reusable HTML; it just makes sense.&lt;/p&gt;
&lt;p&gt;Since you&amp;#39;re now able to specify the Views folder I&amp;#39;ll add another extension method so you can provide that instead of using the default way:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder UseViewEngine&amp;lt;TViewEngine&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, TViewEngine viewEngine)
    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; TViewEngine: RazorViewEngine
{
    ViewEngineActivator.ViewEngine = viewEngine;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This also means that you could super-class the &lt;code&gt;RazorViewEngine&lt;/code&gt; if you want and provide additional functionality.&lt;/p&gt;
&lt;p&gt;Next up we&amp;#39;ll start implementing our &lt;code&gt;Parse&amp;lt;T&amp;gt;&lt;/code&gt; method. &lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public string Parse&amp;lt;T&amp;gt;(string viewName, T model)
{
    viewName = viewName&lt;span class=&quot;preprocessor&quot;&gt;.ToLower&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    if (!viewCache&lt;span class=&quot;preprocessor&quot;&gt;.ContainsKey&lt;/span&gt;(viewName))
    {
        var layout = FindView(LayoutViewName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        var view = FindView(viewName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        if (!view&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;)
            throw new FileNotFoundException(&lt;span class=&quot;string&quot;&gt;&quot;No view with the name '&quot;&lt;/span&gt; + view + &lt;span class=&quot;string&quot;&gt;&quot;' was found in the views folder (&quot;&lt;/span&gt; + ViewFolder + &lt;span class=&quot;string&quot;&gt;&quot;).\r\nEnsure that you have a file with that name and an extension of either cshtml or vbhtml&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var content = File&lt;span class=&quot;preprocessor&quot;&gt;.ReadAllText&lt;/span&gt;(view&lt;span class=&quot;preprocessor&quot;&gt;.FullName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        if (layout&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;)
            content = File&lt;span class=&quot;preprocessor&quot;&gt;.ReadAllText&lt;/span&gt;(layout&lt;span class=&quot;preprocessor&quot;&gt;.FullName&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;@Body&quot;&lt;/span&gt;, content)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        viewCache[viewName] = content&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    return Razor&lt;span class=&quot;preprocessor&quot;&gt;.Parse&lt;/span&gt;(viewCache[viewName], model)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you&amp;#39;ll see here is I&amp;#39;m creating a cache of views that get discovered for performance so it&amp;#39;s all shoved into a static dictionary that I&amp;#39;ve got*. Assuming that this is the first time we&amp;#39;ll look for the layout view and current view, raise an error if the view isn&amp;#39;t found, and then combine them all together.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*This is pretty hacky code and doesn&amp;#39;t take concurrency into account; make sure you do double-lock checking!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One convention I&amp;#39;m adding myself is that the &amp;quot;body&amp;quot; (aka, the current view) will be rendered where ever you place an &lt;code&gt;@Body&lt;/code&gt; directive. This is because we&amp;#39;re using Razor &lt;em&gt;the language&lt;/em&gt; which is slightly different to MVC&amp;#39;s Razor. The language doesn&amp;#39;t include the &lt;code&gt;RenderBody&lt;/code&gt; method, that&amp;#39;s specific for the implementation. When creating your own view engine though you&amp;#39;re at liberty to do this how ever you want. You could alternatively create your own base class that handles the body better, me, I&amp;#39;m lazy and want a quick demo.&lt;/p&gt;
&lt;p&gt;I finish off caching the generated template so that next time we can skip a bunch of the lookup steps and then get RazorEngine to parse the template and send back the HTML*.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*I&amp;#39;m not sure if this is the best way to do it with RazorEngine, I think you can do it better for caching but meh. Also, you don&amp;#39;t have to return HTML, you could use this engine to output any angled-bracket content.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Using our View Engine&lt;/h1&gt;
&lt;p&gt;Now that we have our View Engine written we need to work out how we&amp;#39;ll actually use it. Like we did in the last post I&amp;#39;m going to use extension methods on the Response object to provide the functionality:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Response res, string view)
{
    var output = ViewEngineActivator&lt;span class=&quot;variable&quot;&gt;.ViewEngine&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(view);

    res&lt;span class=&quot;variable&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.End&lt;/span&gt;(output);
}

&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Response res, string view, T model)
{
    var output = ViewEngineActivator&lt;span class=&quot;variable&quot;&gt;.ViewEngine&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(view, model);

    res&lt;span class=&quot;variable&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.End&lt;/span&gt;(output);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty simple, we&amp;#39;re really just acting as a bridge between the response and the view engine. Sure I&amp;#39;m also making the assumption that it&amp;#39;s &lt;code&gt;text/html&lt;/code&gt; that we&amp;#39;re returning despite saying above we can do any angled-bracket response, changing that can be your exercise dear reader.&lt;/p&gt;
&lt;h1&gt;Bringing it all together&lt;/h1&gt;
&lt;p&gt;So we&amp;#39;ve got everything written let&amp;#39;s start using it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder
    &lt;span class=&quot;preprocessor&quot;&gt;.UseViewEngine&lt;/span&gt;&amp;lt;RazorViewEngine&amp;gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/razor/basic&quot;&lt;/span&gt;, (req, res) =&amp;gt;
    {
        res&lt;span class=&quot;preprocessor&quot;&gt;.View&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Basic&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty simple to use our View Engine now isn&amp;#39;t it!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post we&amp;#39;ve had a look at what it&amp;#39;d take to produce a basic View Engine on top of OWIN, building on top of the knowledge and concepts of the last few posts.&lt;/p&gt;
&lt;p&gt;In the next post I&amp;#39;m going to take the idea of a View Engine one step further and give the user a lot more power.&lt;/p&gt;
&lt;p&gt;As always you can check out the full code up on the &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Watch your OS</title>
            <link href="/posts/2012-03-21-watch-your-os.html"/>
            <updated>2012-03-21T00:00:00.000Z</updated>
            <id>/posts/2012-03-21-watch-your-os.html</id>
            <content type="html">&lt;p&gt;Today some of my colleagues were trying to integrate &lt;a href=&quot;http://csslint.net/&quot;&gt;csslint&lt;/a&gt; into the build process of a project using the &lt;a href=&quot;https://github.com/stubbornella/csslint&quot;&gt;nodejs package&lt;/a&gt; but they kept hitting an issue:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! Unsupported
npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; compatible &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; your operating system &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; architecture: csslint@&lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;
npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! Valid OS:    darwin,linux
npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! Valid Arch:  any
npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! Actual OS:   win32
npm &lt;span class=&quot;built_in&quot;&gt;ERR&lt;/span&gt;! Actual Arch: ia32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I had a crack on my machine and it worked &lt;strong&gt;just fine&lt;/strong&gt;. This was rather confusing until we compared versions. I was running version &lt;em&gt;0.6.11&lt;/em&gt; where as they were running &lt;em&gt;0.6.13&lt;/em&gt;. This didn&amp;#39;t make sense, why could I install it but they couldn&amp;#39;t?&lt;/p&gt;
&lt;p&gt;I put on my detective hat and went hunting, the first thing I found was that there is an OS restriction in the package.json file:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&quot;os&quot;:&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&quot;darwin&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;&quot;linux&quot;&lt;/span&gt;]&lt;span class=&quot;string&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn&amp;#39;t include &lt;code&gt;windows&lt;/code&gt; anywhere, but it also doesn&amp;#39;t explain why it worked on my Win7 x64 install but not theirs.&lt;/p&gt;
&lt;p&gt;Then I went back and checked out what changed between the two versions of Node.js, in particular what changed with npm.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s when I came across the &lt;a href=&quot;http://blog.nodejs.org/2012/03/13/version-0-7-6-unstable/&quot;&gt;release notes for 0.7.6&lt;/a&gt;. While true this is for the 0.7.&lt;em&gt; unstable branch and we&amp;#39;re using the 0.6.&lt;/em&gt; stable what&amp;#39;s worth noting is the first change for npm version 1.1.8:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add support for os/cpu fields in package.json (Adam Blackburn)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I then looked at the 0.6.13 release, it&amp;#39;s using npm 1.1.9. Compare that to 0.6.11 which used npm 1.1.1 and I think we&amp;#39;ve found our issue. In the change between the two Node versions we&amp;#39;ve got a new npm version which &lt;em&gt;supports something that wasn&amp;#39;t supported before&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;A simple &lt;a href=&quot;https://github.com/stubbornella/csslint/pull/252&quot;&gt;fork and pull request&lt;/a&gt; and the problem is solved and now we have to wait for the next version for csslint to be published.&lt;/p&gt;
&lt;h1&gt;Lesson Learnt&lt;/h1&gt;
&lt;p&gt;npm now supports the OS (and CPU) package.json property from &lt;a href=&quot;http://wiki.commonjs.org/wiki/Packages/1.1&quot;&gt;CommonJS&lt;/a&gt; so make sure you check that properly!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN Responses</title>
            <link href="/posts/2012-03-19-owin-responses.html"/>
            <updated>2012-03-19T00:00:00.000Z</updated>
            <id>/posts/2012-03-19-owin-responses.html</id>
            <content type="html">&lt;p&gt;In the last post we looked at &lt;a href=&quot;http://www.aaron-powell.com/web/owin-routing&quot;&gt;Routing in OWIN&lt;/a&gt; as we built up a simple little route engine. Today I want to look at how to bring power to our responses by making it easier to respond with different types.&lt;/p&gt;
&lt;p&gt;In ASP.Net MVC you&amp;#39;re probabily use to write code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; ActionResult Index() {
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; Json(new { &lt;span class=&quot;title&quot;&gt;FirstName&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Aaron&quot;&lt;/span&gt;, LastName = &lt;span class=&quot;string&quot;&gt;&quot;Powell&quot;&lt;/span&gt; });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here our Action (which comes from our Route) is defining that we want to output JSON to the response and it gives us a nice way which we can do it. Let&amp;#39;s see about adding something similar to our application.&lt;/p&gt;
&lt;h1&gt;Responding with JSON&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ll start with an easy task, we&amp;#39;ll make it easier to respond with JSON. To do this there&amp;#39;s two things which we need to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the appropriate content type is set on the response&lt;/li&gt;
&lt;li&gt;Put a value into the response that is valid JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With those two requirements in mind we need to think about is just how we want the API to work, do we want an extension method on the &lt;code&gt;IAppBuilder&lt;/code&gt; interface? If so how do we handle different request types, are we going to have a lot of boilerplate code to cover all that? Or maybe we should go with the &lt;a href=&quot;http://nancyfx.org&quot;&gt;Nancy&lt;/a&gt; approach and have a return value from our delegate. At the moment our delegate just executes some code; well maybe we could have it return instead. This would be advantageous as it would be somewhat familiar to MVC developers.&lt;/p&gt;
&lt;p&gt;But neither of these options are really ideal in my opinion as they require a lot of code to make them work. We&amp;#39;d be constantly writing extension methods to handle this and when we get to another type (say XML) we&amp;#39;d either have to create yet another extension method or ensure we have a viable base type that we can return (which is what &lt;code&gt;ActionResult&lt;/code&gt; does for MVC). Admittedly this is may be a symptom of our design thus far, but keep in mind that this is more about exploring the various concepts without adding huge amounts of overhead.&lt;/p&gt;
&lt;p&gt;So this leaves us with one final option, augment the &lt;code&gt;Response&lt;/code&gt; object to have these methods on it. This is the approach I want to go with as it feels cleaner (and it&amp;#39;s more familiar to me coming from &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express.js&lt;/a&gt;). Rather than super-classing the &lt;code&gt;Response&lt;/code&gt; object which we already have (like we did with the &lt;code&gt;Request&lt;/code&gt; object) I&amp;#39;m going to stick with good ol&amp;#39; fashioned extension methods. This makes it much easier to include the methods and also avoids having to change our delegate signatures (like we did when we introduced &lt;code&gt;RoutedRequest&lt;/code&gt;) so we&amp;#39;ll spin up a new class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RouteExtensions&lt;/span&gt; 
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Json(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Response res, &lt;span class=&quot;keyword&quot;&gt;dynamic&lt;/span&gt; obj, bool useJavaScriptNaming = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the basis for our extension method, I&amp;#39;m taking in two arguments, one of which is optional. The &lt;em&gt;main&lt;/em&gt; argument, &lt;code&gt;obj&lt;/code&gt; will represent the value which we want to serialize and send down to the client. I&amp;#39;m also having an optional boolean argument (defaulted to true) which will indicate whether we want to use JavaScript naming conventions (more on that in a second).&lt;/p&gt;
&lt;p&gt;For the serialization we&amp;#39;re going to be using the &lt;a href=&quot;http://json.codeplex.com/&quot;&gt;JSON.Net&lt;/a&gt; serializer as it really is awesome.&lt;/p&gt;
&lt;p&gt;The first things we want to do in our extension method are setting the content type and status code (since we can assume here that it&amp;#39;ll be successful by this being called; you could pass in the status code if you wanted but for simplicities sake we&amp;#39;ll hard code it):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Json(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Response res, &lt;span class=&quot;keyword&quot;&gt;dynamic&lt;/span&gt; obj, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; useJavaScriptNaming = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
{
    res&lt;span class=&quot;variable&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;;

       &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new NotImplementedException();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lovely, now to think about serialization. As I said I&amp;#39;m going to use JSON.Net and the reason I&amp;#39;m having the optional boolean argument is because .NET naming conventions are different to JavaScript (.NET uses PascalCase where as JavaScript is all about camelCase) so I want to force the conversion myself but allow people to opt-out of it if they want (which is something we&amp;#39;ve needed on the project I&amp;#39;m on at the moment). Luckily JSON.Net allows us to do this very easily:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Json(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Response res, &lt;span class=&quot;keyword&quot;&gt;dynamic&lt;/span&gt; obj, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; useJavaScriptNaming = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)
{
    res&lt;span class=&quot;variable&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;;
    res&lt;span class=&quot;variable&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;;

    var serializer = new JsonSerializer();

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (useJavaScriptNaming)
        serializer&lt;span class=&quot;variable&quot;&gt;.ContractResolver&lt;/span&gt; = new CamelCasePropertyNamesContractResolver();

    res&lt;span class=&quot;variable&quot;&gt;.End&lt;/span&gt;(JObject&lt;span class=&quot;variable&quot;&gt;.FromObject&lt;/span&gt;(obj, serializer)&lt;span class=&quot;variable&quot;&gt;.ToString&lt;/span&gt;());
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See, quite easy. We start by creating a serializer, check the boolean argument and add a contract resolver of &lt;code&gt;CamelCasePropertyNamesContractResolver&lt;/code&gt; if we want to do JavaScript naming and finish off by ending the response with a serialized object.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There may be an easier way to do this, I&amp;#39;m hardly a JSON.Net expert this is just the way I&amp;#39;ve come across doing it and it works fine for my needs.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Sending out JSON&lt;/h1&gt;
&lt;p&gt;Once importing the namespace for our extension methods we can get cracking on using it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/json&quot;&lt;/span&gt;, (req, res) =&amp;gt; {
    res&lt;span class=&quot;preprocessor&quot;&gt;.Json&lt;/span&gt;(new { FirstName = &lt;span class=&quot;string&quot;&gt;&quot;Aaron&quot;&lt;/span&gt;, LastName = &lt;span class=&quot;string&quot;&gt;&quot;Powell&quot;&lt;/span&gt; })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah it&amp;#39;s just that simple! And since this is all within the scope of the request you can access any of the properties you have on your request (such as your named arguments) and work them into the response:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/json/:name&quot;&lt;/span&gt;, (req, res) =&amp;gt; {
    res&lt;span class=&quot;preprocessor&quot;&gt;.Json&lt;/span&gt;(new { Name = req&lt;span class=&quot;preprocessor&quot;&gt;.UrlSegments&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.name&lt;/span&gt; })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So this wraps up a quick look at how we can start enriching our responses by adding different response types. Using the method described above you could easily create methods to return text, XML, or even a VCard, basically anything you want from your application.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s all starting to come together nicely but there&amp;#39;s something quite important missing... HTML. In our next instalment we&amp;#39;ll look at producing a View Engine to respond with HTML.&lt;/p&gt;
&lt;p&gt;As always you can check out the full code up on the &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN routing</title>
            <link href="/posts/2012-03-16-owin-routing.html"/>
            <updated>2012-03-16T00:00:00.000Z</updated>
            <id>/posts/2012-03-16-owin-routing.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.aaron-powell.com/web/owin-and-middleware&quot;&gt;Last time around&lt;/a&gt; we started looking at middleware in OWIN and how to handle different request types. So now comes the next logical step, how do we handle different URLs? Currently we don&amp;#39;t have the facilities to handle different URLs, aka routing, so let&amp;#39;s work on that.&lt;/p&gt;
&lt;h2&gt;Understanding routing&lt;/h2&gt;
&lt;p&gt;Before we dive into coding our solution it&amp;#39;s a good idea to think about what routing really is. You&amp;#39;re probably familiar with this from ASP.Net MVC with code such as:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    routes&lt;span class=&quot;variable&quot;&gt;.MapRoute&lt;/span&gt;(
        &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;,                                              &lt;span class=&quot;comment&quot;&gt;// Route name&lt;/span&gt;
        &lt;span class=&quot;string&quot;&gt;&quot;{controller}/{action}/{id}&quot;&lt;/span&gt;,                           &lt;span class=&quot;comment&quot;&gt;// URL with parameters&lt;/span&gt;
        new { controller = &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, action = &lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; }  &lt;span class=&quot;comment&quot;&gt;// Parameter defaults&lt;/span&gt;
    );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&amp;#39;s really important is line three, where we are defining what the URL we are going to be targeting looks like. With MVC routing we do a few other things such naming the route and providing default values for the segments of the URL that we&amp;#39;re trying to match but that&amp;#39;s not really of interest to us. If we think about the kinds of URLs we&amp;#39;re going to constructing we can break it down as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;#39;ll probably something static in the URL&lt;/li&gt;
&lt;li&gt;Retrieve records we&amp;#39;ll probably have some kind of pattern to match&lt;/li&gt;
&lt;li&gt;Some URL segments may be useful in the handler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok we understand a bit of &lt;em&gt;how&lt;/em&gt; we want to construct our route matching let&amp;#39;s set about implementing it. To do this we&amp;#39;re going to build on top of the extension methods we built last time, but for this we&amp;#39;re going to need to be passing in a URL, well a pattern to match the URLs.&lt;/p&gt;
&lt;h1&gt;Defining our route matching&lt;/h1&gt;
&lt;p&gt;The first thing we&amp;#39;ll do is look at the routes systems in other middleware projects like &lt;a href=&quot;https://github.com/NancyFx/Nancy/wiki/Defining-routes&quot;&gt;Nancy&lt;/a&gt;, &lt;a href=&quot;http://expressjs.com/guide.html#routing&quot;&gt;Express.js&lt;/a&gt; on Node and &lt;a href=&quot;http://www.sinatrarb.com/intro.html#Routes&quot;&gt;Sinatra&lt;/a&gt; on Ruby. Something that we can see from these three projects (and other middleware projects out there) is that they support the URL matching scenarios I described above (coincidence?) and they do it is similar ways. All allow you to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A static value&lt;/li&gt;
&lt;li&gt;A named value&lt;ul&gt;
&lt;li&gt;This is slightly different in Nancy to the other two, Nancy uses &lt;code&gt;{name}&lt;/code&gt; to define a named value where as the others use &lt;code&gt;:name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A pattern-matched value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this example I&amp;#39;m going to use the Sinatra/ Express.js routing style (&lt;code&gt;:name&lt;/code&gt; not &lt;code&gt;{name}&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Breaking down our route matching&lt;/h2&gt;
&lt;p&gt;So now that we know what we want to be able &lt;em&gt;do&lt;/em&gt; in our URLs let&amp;#39;s think about &lt;em&gt;how&lt;/em&gt; we&amp;#39;d do it.&lt;/p&gt;
&lt;p&gt;Static values should be pretty easy, it&amp;#39;s just a string that we want to match against and equality statements should be right to take care of that, let&amp;#39;s move on.&lt;/p&gt;
&lt;p&gt;Named values is next on the list, what we want to do here is take this particular URL segment and then grab the value to provide into our handler, maybe we can get away with just sub-stringing here?&lt;/p&gt;
&lt;p&gt;Pattern matching... hmm that&amp;#39;s an interesting one, but you know what it&amp;#39;s not really that hard, there&amp;#39;s a very simple way to do pattern matching... Regex!&lt;/p&gt;
&lt;h2&gt;Regex ALL the things!&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s say we want this URL to match:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/users/1234/unsubscribe/&lt;/span&gt;email&lt;span class=&quot;property&quot;&gt;@mail&lt;/span&gt;.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The URL has two static sections to it, &lt;code&gt;/users/&lt;/code&gt; and &lt;code&gt;/unsubscribe/&lt;/code&gt;, it also has two dynamic sections, something that we can assume is an id and an email address. Both of these segments likely to be useful within our handler so we&amp;#39;d want to be able to capture them. And if we think about the id segment it&amp;#39;s likely we have some kind of a pattern that could represent it and for the email we just want to capture it (althought it&amp;#39;s true we could also put a pattern in place to match the email &lt;a href=&quot;http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx&quot;&gt;but email matching is complex&lt;/a&gt; so I don&amp;#39;t want to match it in our URL, that&amp;#39;s for the business logic to validate).&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s look at a pattern for the URL to meet our requirements:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;/users/(?&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;\d{1,5})/unsubscribe/:email&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright that&amp;#39;s looking good, we&amp;#39;ve got a regex to restrict our id to be what we have known in our system and we&amp;#39;ve said we want to capture the email, but how would we &lt;em&gt;actually&lt;/em&gt; match that URL? The answer... regex the whole URL (regardless of whether I now have &lt;a href=&quot;http://regex.info/blog/2006-09-15/247&quot;&gt;two problems&lt;/a&gt;)! The reason I want to regex the URL is otherwise we have to do a bunch of string splitting, manipulation and guff code just to match all the segments, which is really what we are doing in a Regex itself.&lt;/p&gt;
&lt;p&gt;So I&amp;#39;m going to start with a new extension methods class called &lt;code&gt;Routing&lt;/code&gt; and we&amp;#39;ll focus on processing GET requests (and can refactor later for the other verbs). Inside this class I&amp;#39;m going to create a private method to break down our URL pattern into something that&amp;#39;ll actually match:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Regex RouteToRegex(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; route)
    {
       &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing I want to do is split out each segment of the URL:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Regex RouteToRegex(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; route)
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parts = route.Split(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[] { &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; }, StringSplitOptions.RemoveEmptyEntries).AsEnumerable();

        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us an array like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;parts[0] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[1] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;(?&amp;lt;id&amp;gt;\d{1,5})&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[2] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;unsubscribe&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[3] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;:email&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well then, three out of those four parts &lt;em&gt;look like regexs already&lt;/em&gt;, want to match the work &lt;strong&gt;users&lt;/strong&gt;, well &lt;strong&gt;users&lt;/strong&gt; will do that. Want to capture a number one to five characters in length, well we&amp;#39;ve got a named capture group for that too. The only thing that doesn&amp;#39;t look like a regex is &lt;code&gt;:email&lt;/code&gt;, but is something that looks unique and we could match against.&lt;/p&gt;
&lt;p&gt;Now we need to go through the array and find any of these &lt;code&gt;:email&lt;/code&gt;-esq values and turn them into &lt;strong&gt;named catch-all groups&lt;/strong&gt; as that&amp;#39;s what we want to do. Again, regex comes to the rescue, and with this I&amp;#39;m going to some LINQ trickery:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; Regex paramRegex = new Regex(@&lt;span class=&quot;string&quot;&gt;&quot;:(?&amp;lt;name&amp;gt;[A-Za-z0-9_]*)&quot;&lt;/span&gt;, RegexOptions&lt;span class=&quot;variable&quot;&gt;.Compiled&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Regex RouteToRegex(string route)
    {
        var parts = route&lt;span class=&quot;variable&quot;&gt;.Split&lt;/span&gt;(new[] { &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; }, StringSplitOptions&lt;span class=&quot;variable&quot;&gt;.RemoveEmptyEntries&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.AsEnumerable&lt;/span&gt;();

        parts = parts&lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(part =&amp;gt; !paramRegex&lt;span class=&quot;variable&quot;&gt;.IsMatch&lt;/span&gt;(part) ? 
            part :
            string&lt;span class=&quot;variable&quot;&gt;.Join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,
                paramRegex&lt;span class=&quot;variable&quot;&gt;.Matches&lt;/span&gt;(part)
                    &lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;Match&amp;gt;()
                    &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(match =&amp;gt; match&lt;span class=&quot;variable&quot;&gt;.Success&lt;/span&gt;)
                    &lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(match =&amp;gt; string&lt;span class=&quot;variable&quot;&gt;.Format&lt;/span&gt;(
                        &lt;span class=&quot;string&quot;&gt;&quot;(?&amp;lt;{0}&amp;gt;.+?)&quot;&lt;/span&gt;,
                        match&lt;span class=&quot;variable&quot;&gt;.Groups&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;\.&quot;&lt;/span&gt;)
                        )
                    )
                )
            );

        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new NotImplementedException();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off I&amp;#39;ve created a regex to &lt;em&gt;match our catch-all&lt;/em&gt; which resides in the static field. Next I&amp;#39;m going to go through each of the URL segments and if they aren&amp;#39;t a match to the pattern then they are already regexable and we&amp;#39;ll just return them, otherwise we&amp;#39;ll get all the matches and then them into the named catch-all capture group. Our array will then look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;parts[0] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[1] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;(?&amp;lt;id&amp;gt;\d{1,5})&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[2] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;unsubscribe&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;parts[3] =&lt;span class=&quot;value&quot;&gt;= &lt;span class=&quot;string&quot;&gt;&quot;(?&amp;lt;email&amp;gt;.+?)&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly we&amp;#39;ll rejoin all the regex parts with &lt;code&gt;/&lt;/code&gt; separators so that it is back to being a URL as well as put start and end terminators (we&amp;#39;ll also make it case-insensitive and compile the regex for speed):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Regex RouteToRegex(string route)
    {
        var parts = route&lt;span class=&quot;variable&quot;&gt;.Split&lt;/span&gt;(new[] { &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; }, StringSplitOptions&lt;span class=&quot;variable&quot;&gt;.RemoveEmptyEntries&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.AsEnumerable&lt;/span&gt;();

        parts = parts&lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(part =&amp;gt; !paramRegex&lt;span class=&quot;variable&quot;&gt;.IsMatch&lt;/span&gt;(part) ? 
            part :
            string&lt;span class=&quot;variable&quot;&gt;.Join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,
                paramRegex&lt;span class=&quot;variable&quot;&gt;.Matches&lt;/span&gt;(part)
                    &lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;Match&amp;gt;()
                    &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(match =&amp;gt; match&lt;span class=&quot;variable&quot;&gt;.Success&lt;/span&gt;)
                    &lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(match =&amp;gt; string&lt;span class=&quot;variable&quot;&gt;.Format&lt;/span&gt;(
                        &lt;span class=&quot;string&quot;&gt;&quot;(?&amp;lt;{0}&amp;gt;.+?)&quot;&lt;/span&gt;,
                        match&lt;span class=&quot;variable&quot;&gt;.Groups&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;\.&quot;&lt;/span&gt;)
                        )
                    )
                )
            );

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new Regex(&lt;span class=&quot;string&quot;&gt;&quot;^/&quot;&lt;/span&gt; + string&lt;span class=&quot;variable&quot;&gt;.Join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, parts) + &lt;span class=&quot;string&quot;&gt;&quot;$&quot;&lt;/span&gt;, RegexOptions&lt;span class=&quot;variable&quot;&gt;.Compiled&lt;/span&gt; | RegexOptions&lt;span class=&quot;variable&quot;&gt;.IgnoreCase&lt;/span&gt;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta-Da! We now have a matching algorithm like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;^&lt;span class=&quot;regexp&quot;&gt;/users/&lt;/span&gt;(?&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;\d{1,5})/unsubscribe/(?&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;email&lt;/span&gt;&amp;gt;&lt;/span&gt;.+?)$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste that into your favourite regex tester and take it for a whirl!&lt;/p&gt;
&lt;h1&gt;Matching our route&lt;/h1&gt;
&lt;p&gt;Now that we &lt;em&gt;can&lt;/em&gt; match our route maybe we should expose that. As I said we&amp;#39;ll create an extension method that allows us to do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; route, Action&amp;lt;Request, Response&amp;gt; app)
{
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks like the one from the last post but we&amp;#39;re taking in a route as the first argument, meaning we can do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;/users/(?&amp;lt;id&amp;gt;\d{1,5})/unsubscribe/:email&quot;&lt;/span&gt;, (req, res) =&amp;gt; {
    res&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;preprocessor&quot;&gt;.End&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Unsibscribed\r\b&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The logic of this method isn&amp;#39;t going to be much different to the ones from the last post with the addition of doing a match against our regex:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; static IAppBuilder &lt;span class=&quot;keyword&quot;&gt;Get&lt;/span&gt;(this IAppBuilder builder, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; route, Action&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Request&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;&amp;gt; app)
    {
        var regex = RouteToRegex(route);

        return builder.Use&amp;lt;AppDelegate&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt; =&amp;gt; (env, result, fault) =&amp;gt;
        {
            var path = (&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;)env[&lt;span class=&quot;string&quot;&gt;&quot;owin.RequestPath&quot;&lt;/span&gt;];

            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (path.EndsWith(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;))
            {
                path = path.TrimEnd(&lt;span class=&quot;comment&quot;&gt;'/');&lt;/span&gt;
            }

            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;)env[&lt;span class=&quot;string&quot;&gt;&quot;owin.RequestMethod&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt; &amp;amp;&amp;amp; regex.IsMatch(path))
            {
                var req = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Request&lt;/span&gt;(env);
                var res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;(result);
                app(req, res);
            }
            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
            {
                &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;(env, result, fault);
            }
        });
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So up front we create our regex and then inside the handler we will match against it as well as checking the Request verb. You&amp;#39;ll see that we&amp;#39;re getting the URL (path) out, again this comes from the OWIN Environment Variables. The only other thing we&amp;#39;re doing is stripping the trailing &lt;code&gt;/&lt;/code&gt;. This is more personal preference (and I&amp;#39;m sure some SEO expert can give a good reason for it) but you don&amp;#39;t have to remove it if you don&amp;#39;t want, you&amp;#39;d just have to ensure the regex can handle that scenario.&lt;/p&gt;
&lt;p&gt;But now we&amp;#39;re able to filter the requests by URL and it&amp;#39;s all going to track nicely for us!&lt;/p&gt;
&lt;h1&gt;Capturing our URL segments&lt;/h1&gt;
&lt;p&gt;As I said earlier in the post generally when we have a specific URL segment to match we do that because we care about the value and we&amp;#39;ll be wanting it in our handler. Currently though we&amp;#39;re not passing that in are we? Well we should solve that! At the moment I&amp;#39;m using the Gate &lt;code&gt;Request&lt;/code&gt; object for the handler but it wont really do what I want here, at least not in an overly discoverable way (since it inherits from a &lt;code&gt;Dictionary&amp;lt;string, object&amp;gt;&lt;/code&gt; it&amp;#39;s not too hard but I want to make it easier). Instead I want to extend it, so I&amp;#39;m going to create a superclass called &lt;code&gt;RoutedRequest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;RoutedRequest&lt;/code&gt; class I want to surface any of the matched segments and to do this I&amp;#39;m going to use a &lt;a href=&quot;http://www.aaron-powell.com/dynamics-library&quot;&gt;helper class I wrote a while ago for using Dynamics&lt;/a&gt; and pass in a dictionary that represents all matched values. This makes our &lt;code&gt;RoutedRequest&lt;/code&gt; class nice and simple:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RoutedRequest&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Request&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RoutedRequest(IDictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, object&amp;gt; env, Regex regex, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; path):
        base(env)
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; groups = regex.Match(path).Groups;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dic = regex.GetGroupNames().ToDictionary(name =&amp;gt; name, name =&amp;gt; groups[name].Value);

        UrlSegments = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DynamicDictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;(dic);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; dynamic UrlSegments { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now once we update the &lt;code&gt;Get&lt;/code&gt; method we can update our handler like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder
            &lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;/users/(?&amp;lt;id&amp;gt;\d{1,5})/subscribed/:email&quot;&lt;/span&gt;, (req, res) =&amp;gt;
            {
                res&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
                res&lt;span class=&quot;preprocessor&quot;&gt;.End&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Email &quot;&lt;/span&gt; + req&lt;span class=&quot;preprocessor&quot;&gt;.UrlSegments&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.email&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; is subscribed.\r\n&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll notice that off the &lt;code&gt;req&lt;/code&gt; object we can go through the &lt;code&gt;UrlSegments&lt;/code&gt; property and use &lt;em&gt;dot-notation&lt;/em&gt; to access the email address that was submitted. This is pretty sexy if I do say so myself.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll admit that this was quite a long post as the subject of routing &lt;em&gt;is a complex one&lt;/em&gt;. Hopefully though you&amp;#39;ve seen that without a lot of code we&amp;#39;ve made a phenomenally powerful little route engine (really, it&amp;#39;s quite a simple bit of code in the end).&lt;/p&gt;
&lt;p&gt;While the route that we&amp;#39;ve been looking at is rather complex our little engine is capable of pretty much anything, we don&amp;#39;t &lt;em&gt;need&lt;/em&gt; to be putting in regexs, we can get away with routes like &lt;code&gt;/home&lt;/code&gt; or &lt;code&gt;/about&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Next time we&amp;#39;ll look at how we can make our responses more powerful with simple helper methods.&lt;/p&gt;
&lt;p&gt;As always you can check out the full code up on the &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>OWIN and Middleware</title>
            <link href="/posts/2012-03-15-owin-and-middleware.html"/>
            <updated>2012-03-15T00:00:00.000Z</updated>
            <id>/posts/2012-03-15-owin-and-middleware.html</id>
            <content type="html">&lt;p&gt;In my &lt;a href=&quot;http://www.aaron-powell.com/web/hello-owin&quot;&gt;last post&lt;/a&gt; I looked at getting started with the basics of OWIN and how to create a server which wont do anything overly useful. In this post I want to go a step further and look at how we can start introducing our own layers on top of OWIN (and Gate) to make it nicer to do like &lt;em&gt;web stuff&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;It&amp;#39;s all about the modules&lt;/h1&gt;
&lt;p&gt;One of the aims of OWIN is to be very lightweight and as we saw in the last post OWIN itself doesn&amp;#39;t really have anything in it and it doesn&amp;#39;t really do anything. This means that you&amp;#39;re entirely responsible for what you do and don&amp;#39;t have included in your server. What this means is that OWIN is very modular, it&amp;#39;s a mix-and-match of what you want to include in your project and if you don&amp;#39;t want something then don&amp;#39;t include the assembly, but it also means that you often have to do something yourself, and this is done through modules.&lt;/p&gt;
&lt;h1&gt;Middleware&lt;/h1&gt;
&lt;p&gt;In comes the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Middleware&quot;&gt;Middleware&lt;/a&gt;; now this isn&amp;#39;t a new concept in software but it&amp;#39;s probably foreign to most .NET developers, particularly ASP.Net as we&amp;#39;ve always had it built in and never needed to think about it. But with OWIN it&amp;#39;s not so, you&amp;#39;ve kind of got to start from scratch.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now this isn&amp;#39;t entirely true, there&amp;#39;s already OWIN middleware out there like &lt;a href=&quot;http://nancyfx.org/&quot;&gt;Nancy&lt;/a&gt;, &lt;a href=&quot;https://github.com/kayak/kayak&quot;&gt;Kayak&lt;/a&gt; and &lt;a href=&quot;http://nuget.org/packages/gate.middleware&quot;&gt;Gate.Middleware&lt;/a&gt; to name a few, but I want to introduce the concept and what to do to make a basic middleware. Really you want to be looking at existing libraries to give you what you need.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Back in the last example we had a single method that was handling all the requests that were coming in, be they to &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;/favicon.ico&lt;/code&gt;, a HTTP GET or POST, everything was handed to this one method. But this isn&amp;#39;t really ideal now is it? You can&amp;#39;t really expect an application to be run out of a single delegate now can you? Let&amp;#39;s start with a simple handler.&lt;/p&gt;
&lt;h1&gt;Handling different verbs&lt;/h1&gt;
&lt;p&gt;I want to start by making it easy to filter requests by the HTTP verb used, so I can have different handlers for GET, POST, PUT, etc. This is a pretty common scenario we&amp;#39;d want to handle if we&amp;#39;re building a RESTful service so let&amp;#39;s get started.&lt;/p&gt;
&lt;p&gt;To implement this I want to extend the &lt;code&gt;IAppBuilder&lt;/code&gt; interface that we came across in our last post through the use of extension methods and I&amp;#39;m also going to build on top of &lt;a href=&quot;http://nuget.org/packages/gate&quot;&gt;Gate&lt;/a&gt; for simplicities sake. So I&amp;#39;ll start with crating our class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Middleware&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, &lt;span class=&quot;comment&quot;&gt;/* todo - something goes there */&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is our extension method, we&amp;#39;re going to extend &lt;code&gt;IAppBuilder&lt;/code&gt; but what will the argument(s) be that we&amp;#39;re passing in? Well we&amp;#39;re going to want something to execute, we&amp;#39;re going to want a delegate, and since I want the consumer of my API to be able to get pretty good control over what&amp;#39;s happening I&amp;#39;ll pass in a &lt;code&gt;Request&lt;/code&gt; and &lt;code&gt;Response&lt;/code&gt; object which come from Gate:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Middleware&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Action&amp;lt;Request, Response&amp;gt; app) {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows me to consume the API like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;builder&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;((req, res) =&amp;gt; {
    res&lt;span class=&quot;preprocessor&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;
    res&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!\r\b&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.End&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what does the implementation look like? It&amp;#39;s all well and good to have an API but if all it does is throw a &lt;code&gt;NotImplementedException&lt;/code&gt; it&amp;#39;s kind of a shitty API...&lt;/p&gt;
&lt;p&gt;So inside out &lt;code&gt;Get&lt;/code&gt; method we need to ensure that we&amp;#39;re only invoking the delegate provided when it&amp;#39;s correct to do so, aka, when the request has come in as a HTTP GET.&lt;/p&gt;
&lt;p&gt;The OWIN specification is nice enough to tell us what is happening in the request as it&amp;#39;s coming in through the use of a few &lt;a href=&quot;http://owin.org/spec/owin-1.0.0draft5.html#EnvironmentDictionary&quot;&gt;environment variables it defines&lt;/a&gt;, the one of interest to us is &lt;code&gt;owin.RequestMethod&lt;/code&gt;. From here we can work out if we actually have to do something with the request or hand it off to something else.&lt;/p&gt;
&lt;p&gt;The crux of what we&amp;#39;re going to be coding will sit on top of the &lt;code&gt;IAppBuilder.Use&amp;lt;TApp&amp;gt;&lt;/code&gt; method, and we&amp;#39;ll also return this to allow for method chaining (since &lt;code&gt;Use&lt;/code&gt; returns an &lt;code&gt;IAppBuilder&lt;/code&gt;) and it&amp;#39;ll look like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Action&amp;lt;Request, Response&amp;gt; app) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.&lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt;&amp;lt;AppDelegate&amp;gt;(next =&amp;gt; (env, result, fault) =&amp;gt; {
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
        });
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generic type we&amp;#39;re going to be specifying is that of &lt;a href=&quot;http://owin.org/spec/owin-1.0.0draft5.html#ApplicationDelegate&quot;&gt;AppDelegate&lt;/a&gt; which defines a few basic arguments (read the spec!)and ultimately allows us to do some processing. The first step of which we want to check the HTTP Verb that has come in:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Action&amp;lt;Request, Response&amp;gt; app) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.&lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt;&amp;lt;AppDelegate&amp;gt;(next =&amp;gt; (env, result, fault) =&amp;gt; {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((string)env[&lt;span class=&quot;string&quot;&gt;&quot;owin.RequestMethod&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) {
                &lt;span class=&quot;comment&quot;&gt;// yay&lt;/span&gt;
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;comment&quot;&gt;// nay&lt;/span&gt;
            }
        });
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s pretty simple isn&amp;#39;t it, a request comes it, it gets handed to our delegate, we run a condition against and and if it matches we want to then pass that along to the handler that our API consumer provided us:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Action&amp;lt;Request, Response&amp;gt; app) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.&lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt;&amp;lt;AppDelegate&amp;gt;(next =&amp;gt; (env, result, fault) =&amp;gt; {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((string)env[&lt;span class=&quot;string&quot;&gt;&quot;owin.RequestMethod&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Request(env);
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response(result);
                app(req, res);
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;comment&quot;&gt;// nay&lt;/span&gt;
            }
        });
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we match our verb we&amp;#39;re creating a Request and Response object (these are helpers from Gate) which the handler can then manipulate. The handler is invoked (it&amp;#39;s the &lt;code&gt;app&lt;/code&gt; variable) and our processing is on its way.&lt;/p&gt;
&lt;p&gt;But what do we do if it&amp;#39;s not a GET request? Welcome to the world of delegates. You&amp;#39;ll notice that there was a &lt;code&gt;next&lt;/code&gt; variable defined to represent the &lt;code&gt;AppDelegate&lt;/code&gt;, well we haven&amp;#39;t used it yet, but that&amp;#39;s what comes into play now when you don&amp;#39;t want to handle the current request (or can&amp;#39;t), we hand it off to someone else then it&amp;#39;s their damn problem.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IAppBuilder Get(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; IAppBuilder builder, Action&amp;lt;Request, Response&amp;gt; app) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.&lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt;&amp;lt;AppDelegate&amp;gt;(next =&amp;gt; (env, result, fault) =&amp;gt; {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((string)env[&lt;span class=&quot;string&quot;&gt;&quot;owin.RequestMethod&quot;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Request(env);
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Response(result);
                app(req, res);
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                next(env, result, fault);
            }
        });
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta-Da! We&amp;#39;ve got our handler that will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take a delegate of something to execute when we&amp;#39;ve got a request&lt;/li&gt;
&lt;li&gt;When a request comes in it&amp;#39;ll check if matches our desired verb&lt;/li&gt;
&lt;li&gt;If it&amp;#39;s a matched verb then we&amp;#39;ll hand it to our delegate&lt;/li&gt;
&lt;li&gt;Otherwise give it back to your server for someone else to deal with it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can then go and create extensions for all the verbs you want supported as well.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post we&amp;#39;ve had a bit of a look at what to do to make it a bit easier to work with OWIN by starting our own layer of middleware. We created a little middleware helper to give us easy methods to provide delegates for the different HTTP verbs and hopefully given you a starting point for where you could build out other middleware features.&lt;/p&gt;
&lt;p&gt;Next time we&amp;#39;ll look at what you need to do to have routing included in your application.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve decided to create a &lt;a href=&quot;https://github.com/aaronpowell/Owin.HelloWorld&quot;&gt;GitHub repository&lt;/a&gt; which you can see the code and follow the progress of these blog posts.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Hello OWIN</title>
            <link href="/posts/2012-03-14-hello-owin.html"/>
            <updated>2012-03-14T00:00:00.000Z</updated>
            <id>/posts/2012-03-14-hello-owin.html</id>
            <content type="html">&lt;p&gt;Long time readers of my blog will probably be aware that I&amp;#39;ve become quite a fan of &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;. One of the things that I&amp;#39;ve liked about working with it is that it&amp;#39;s very bare bones so you&amp;#39;re working very closely with the HTTP pipeline, something that you don&amp;#39;t do with ASP.Net (WebForms in particular, MVC is much closer but still a reasonable abstraction).&lt;/p&gt;
&lt;p&gt;About 18 months ago a .NET project popped up on the radar though, a project called &lt;a href=&quot;http://owin.org&quot;&gt;OWIN&lt;/a&gt;. OWIN isn&amp;#39;t really a coding project though, it&amp;#39;s a specification that defines how web applications and .NET web servers should communicate with each other. The nice thing about this is that is is really bare bones, like with Node.js OWIN defines a very thin layer on top of HTTP which can be very powerful.&lt;/p&gt;
&lt;h1&gt;Hello OWIN&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;ve decided you want to get started with OWIN, well where do you start?&lt;/p&gt;
&lt;p&gt;As I mentioned about OWIN is really just a specification and if you read the &lt;a href=&quot;http://owin.org/#about&quot;&gt;About&lt;/a&gt; page it states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OWIN defines a single anonymous delegate signature, and therefore introduces no dependencies; there is no OWIN source code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That means that you don&amp;#39;t &lt;em&gt;actually&lt;/em&gt; build against OWIN*, you want to look at some of the modules built on top of it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*Note this isn&amp;#39;t entirely true, you can build against the OWIN NuGet package but it&amp;#39;s painfully difficult to anything :P. Check out &lt;a href=&quot;https://github.com/loudej/firefly/blob/541d0a77648dc1214fe280fa0b3a143e2d3a0373/src/sample/HelloWorld/Program.cs&quot;&gt;this&lt;/a&gt; for an example of a Hello World on just OWIN.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead you probably want to have a look at &lt;a href=&quot;http://nuget.org/packages/gate&quot;&gt;Gate&lt;/a&gt;, which is a set of helpers that sits on top of OWIN and makes it a bunch nicer to work with and it&amp;#39;s what I&amp;#39;m going to use in this example.&lt;/p&gt;
&lt;p&gt;The first thing I wanted to do was replicate the Node.js demo of creating a basic Hello World server:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var http = require(&lt;span class=&quot;string&quot;&gt;'http'&lt;/span&gt;);
&lt;span class=&quot;transposed_variable&quot;&gt;http.&lt;/span&gt;createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;transposed_variable&quot;&gt;res.&lt;/span&gt;writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;cell&quot;&gt;{&lt;span class=&quot;string&quot;&gt;'Content-Type'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'text/plain'&lt;/span&gt;}&lt;/span&gt;);
  &lt;span class=&quot;transposed_variable&quot;&gt;res.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Hello World\n'&lt;/span&gt;);
}).listen(&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'127.0.0.1'&lt;/span&gt;);
&lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Server running at http://127.0.0.1:1337/'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if this is our goal how do we go about it with OWIN and Gate?&lt;/p&gt;
&lt;h2&gt;Project Setup&lt;/h2&gt;
&lt;p&gt;Since there&amp;#39;s no Gate project template (that I&amp;#39;ve found) we&amp;#39;ll start with just a C# Class Library project. To this you&amp;#39;ll want to add a dependency on Gate (and that&amp;#39;ll include OWIN) and we&amp;#39;re ready to go.&lt;/p&gt;
&lt;p&gt;Most OWIN hosts (we&amp;#39;ll talk about that in a minute) use a convention that to run there needs to be a public class named &lt;code&gt;Startup&lt;/code&gt; in the root namespace of the assembly you&amp;#39;re running, so we&amp;#39;ll make one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Startup&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Configuration(IAppBuilder builder) {

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside our &lt;code&gt;Startup&lt;/code&gt; class we&amp;#39;ve got a &lt;code&gt;Configuration&lt;/code&gt; method (taking &lt;code&gt;IAppBuilder&lt;/code&gt; which comes from OWIN). This method is where we will define how to handle the requests that are coming in, basically where we define our Hello World.&lt;/p&gt;
&lt;h2&gt;Creating a configuration&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m going to use the &lt;code&gt;RunDirect&lt;/code&gt; extension method (which resides in the &lt;code&gt;Gate&lt;/code&gt; namespace) as it&amp;#39;s as close as we get to the above Node.js function structure, and it looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    public static void Configuration(IAppBuilder builder) {
        builder
            &lt;span class=&quot;preprocessor&quot;&gt;.RunDirect&lt;/span&gt;((req, res) =&amp;gt; {
                res&lt;span class=&quot;preprocessor&quot;&gt;.Status&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;200 OK&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
                res&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

                res&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!\r\n&quot;&lt;/span&gt;)
                    &lt;span class=&quot;preprocessor&quot;&gt;.End&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code should be fairly easy to understand, we get two inputs and &lt;code&gt;Request&lt;/code&gt; object and a &lt;code&gt;Response&lt;/code&gt; object. These come from &lt;code&gt;Gate&lt;/code&gt; (and this is why I recommend Gate over raw OWIN) and are really just dictionaries with a couple of helpful properties and methods for doings the simple stuff you&amp;#39;d want to be doing. &lt;/p&gt;
&lt;h2&gt;Hosting our application&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re still following along you&amp;#39;ll remember me saying that OWIN is really just a specification, it defines what the communication interfaces look like but it doesn&amp;#39;t define &lt;em&gt;how&lt;/em&gt; they should work, for that you&amp;#39;re going to need an OWIN host. The ideal way to do this is through &lt;a href=&quot;http://whereslou.com/2012/02/20/ghost-exe-a-generic-host-for-owin-applications&quot;&gt;ghost&lt;/a&gt;. Ghost is just an executable that you can run against a class library and spin up your project. Unfortunately I&amp;#39;ve been having &lt;a href=&quot;https://github.com/owin/gate/issues/74&quot;&gt;problems running ghost&lt;/a&gt; so rather than looking at producing something that requires hosting we can look at making our application &lt;strong&gt;self hosting&lt;/strong&gt;. For this I&amp;#39;m going to use &lt;a href=&quot;http://loudej.github.com/firefly&quot;&gt;Firefly&lt;/a&gt; as it&amp;#39;s a nice and simple host for OWIN applications, so go and install it from NuGet.&lt;/p&gt;
&lt;p&gt;Now we&amp;#39;ve got the dependency on Firefly we need to make an executable rather than a class library. Start by adding a Program class and a Main method like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Program&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args) {

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can go into your project properties and change the output type to a Console Application and set the appropriate startup object. All easier than creating a new project I think ;).&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also going to add a dependency on &lt;code&gt;Gate.Builder&lt;/code&gt; which is another utility library that takes away some of the grunt work for setting up your application host. With this we&amp;#39;re going to do 3 things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create builder for our application (an implementation of &lt;code&gt;IAppBuilder&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create a Firefly server&lt;/li&gt;
&lt;li&gt;Provide Firefly with our application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what our &lt;code&gt;Main&lt;/code&gt; method will now look like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AppBuilder();
        &lt;span class=&quot;comment&quot;&gt;//Tell the builder to use our configuration&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = builder.Build(Startup.Configuration);

        &lt;span class=&quot;comment&quot;&gt;//Start up the server on port 1337&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerFactory().Create(app, &lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;);

        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Server running at http://127.0.0.1:1337/&quot;&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;//Stay running!&lt;/span&gt;
        Console.ReadKey();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;There we go hit F5 and your app will be running, just the same as our initial Node.js example and the full code can be found &lt;a href=&quot;https://gist.github.com/2032972&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that this isn&amp;#39;t overly difficult to do, the trick is finding the various dependencies that you require, remember I use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gate&lt;/li&gt;
&lt;li&gt;Gate.Builder&lt;/li&gt;
&lt;li&gt;Firefly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next post we&amp;#39;ll look at how to handle requests in a better fashion with a basic middleware implementation.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How to explain where to put your JavaScript in a page</title>
            <link href="/posts/2012-02-21-scripts-are-blocking.html"/>
            <updated>2012-02-21T00:00:00.000Z</updated>
            <id>/posts/2012-02-21-scripts-are-blocking.html</id>
            <content type="html">&lt;p&gt;I decided that I&amp;#39;m tired of explaining why you should do JavaScript combination and avoid inline scripts.&lt;/p&gt;
&lt;p&gt;So here&amp;#39;s a comic that should explain it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aaron-powell.com/get/web-dev/comic.png&quot;&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/web-dev/comic-small.png&quot; alt=&quot;JavaScript placement&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click for a larger version.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>KendoUI Bootstrapper</title>
            <link href="/posts/2012-02-16-kendo-ui-bootstrapper.html"/>
            <updated>2012-02-16T00:00:00.000Z</updated>
            <id>/posts/2012-02-16-kendo-ui-bootstrapper.html</id>
            <content type="html">&lt;p&gt;For my Stats It project I&amp;#39;m using &lt;a href=&quot;http://kendoui.com&quot;&gt;KendoUI&lt;/a&gt; as my UI widget layer (and charting) as it has several more UI widgets that I&amp;#39;m looking for than jQuery UI offers. But there&amp;#39;s one thing I hate having to do, and that&amp;#39;s constantly write code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'.datePicker'&lt;/span&gt;).kendoDatePicker();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This goes for all libraries I&amp;#39;ve used, you&amp;#39;re constantly having to &lt;em&gt;bootstrap&lt;/em&gt; the UI widgets so that they appear. Now there&amp;#39;s a good reason for this, so you can pass in options, etc to setup your controls for their actual use, but I find that you end up with a lot of boilerplate code around that is doing the same thing each time and when trying to be &lt;a href=&quot;http://en.wikipedia.org/wiki/Don&amp;#39;t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; this is annoying.&lt;/p&gt;
&lt;h1&gt;Introducing KendoUI Bootstrapper&lt;/h1&gt;
&lt;p&gt;In an effort to address the lack of DRYness in my projects I started a new library which is up on github called &lt;a href=&quot;https://github.com/aaronpowell/Kendo-UI-Bootstrapper&quot;&gt;KendoUI Bootstrapper&lt;/a&gt; with the goal of solving this problem for me.&lt;/p&gt;
&lt;p&gt;Basically what this library does is automatically creates your KendoUI widgets for you and then exposes them out in an API so you can interact with them. This means that if you want to do anything &amp;quot;custom&amp;quot; to a widget (say set a min/ max for a date picker) you use the widget API to do it, rather than passing it in as a setting to the constructor.&lt;/p&gt;
&lt;h1&gt;Using KendoUI Bootstrapper&lt;/h1&gt;
&lt;p&gt;Say you&amp;#39;ve got some date pickers that you want to use, to do so you&amp;#39;d have something like this in your HTML:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;startDate&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;endDate&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to get the bootstrapper to work you need to add a &lt;code&gt;data-*&lt;/code&gt; attribute, in the form of &lt;code&gt;data-kendo=&amp;quot;&amp;lt;widget type&amp;gt;&amp;quot;&lt;/code&gt;, so for the date pickers we now have this in our HTML:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;startDate&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-kendo&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;date&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;endDate&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-kendo&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;date&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you need to add a reference to the Bootstrapper JavaScript file are tell it to do its this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;window&lt;span class=&quot;preprocessor&quot;&gt;.kendo&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.bootstrap&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bootstapper with augment the &lt;code&gt;window.kendo&lt;/code&gt; object by adding a &lt;code&gt;datePickers&lt;/code&gt; property which will have two properties of its own, one called &lt;code&gt;startDate&lt;/code&gt; and one called &lt;code&gt;endDate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This kind of thing I would put in my master JavaScript file for the page so that all my widgets are setup initially for me, but in the page JavaScript that is responsible for my date range picker I would have something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;    var start = &lt;span class=&quot;transposed_variable&quot;&gt;window.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;kendo.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;datePickers.&lt;/span&gt;start,
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; = &lt;span class=&quot;transposed_variable&quot;&gt;window.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;kendo.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;datePickers.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;;

    var startChange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        var startDate = &lt;span class=&quot;transposed_variable&quot;&gt;start.&lt;/span&gt;value();

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (startDate) &lt;span class=&quot;cell&quot;&gt;{
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
            end.min(startDate);
        }&lt;/span&gt;
    };

    var endChange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        var endDate = &lt;span class=&quot;transposed_variable&quot;&gt;end.&lt;/span&gt;value();

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (endDate) &lt;span class=&quot;cell&quot;&gt;{
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
            start.max(endDate);
        }&lt;/span&gt;
    };

    &lt;span class=&quot;transposed_variable&quot;&gt;start.&lt;/span&gt;bind(&lt;span class=&quot;string&quot;&gt;'change'&lt;/span&gt;, startChange);
    &lt;span class=&quot;transposed_variable&quot;&gt;end.&lt;/span&gt;bind(&lt;span class=&quot;string&quot;&gt;'change'&lt;/span&gt;, endChange);

    &lt;span class=&quot;transposed_variable&quot;&gt;start.&lt;/span&gt;max(&lt;span class=&quot;transposed_variable&quot;&gt;end.&lt;/span&gt;value());
    &lt;span class=&quot;transposed_variable&quot;&gt;end.&lt;/span&gt;min(&lt;span class=&quot;transposed_variable&quot;&gt;start.&lt;/span&gt;value());

    &lt;span class=&quot;transposed_variable&quot;&gt;end.&lt;/span&gt;max(new Date());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I&amp;#39;ve implemented the same code that can be found in the &lt;a href=&quot;http://demos.kendoui.com/web/datepicker/rangeselection.html&quot;&gt;KendoUI demos&lt;/a&gt; but rather than performing some setup as part of the &amp;quot;construtor&amp;quot; for the date picker and then using the API I&amp;#39;m doing everything through the API. I find this more preferable as it means I have a separation of concerns, I know that in my JavaScript file I have two objects that represent what could be a date picker without having to have any dive into the HTML, it&amp;#39;s just a programming API. This means I can stub them out and write some tests against them, testing pure logic rather than testing against the DOM.&lt;/p&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;At the moment this project is under development and I&amp;#39;m really developing it on an &lt;em&gt;as needed&lt;/em&gt; basis, ie - if I haven&amp;#39;t used the widget it&amp;#39;s not going to be there :P. But if you want to add features then send me a pull request!&lt;/p&gt;
&lt;p&gt;Obviously this doesn&amp;#39;t cater for 100% of scenarios, there will be scenarios which this &lt;strong&gt;wont&lt;/strong&gt; work, and if that&amp;#39;s the case don&amp;#39;t put a &lt;code&gt;data-kendo&lt;/code&gt; attribute on your element and wire it up yourself.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also been told by some of the people at Telerik that there may be some problems with APIs not working &lt;em&gt;as expected&lt;/em&gt; in KendoUI itself. If that&amp;#39;s the case this is a good test bed to have them find these problems and fix them so I see this as more of an opportunity to help the KendoUI team to have as good an API as possible.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Macros in packages</title>
            <link href="/posts/2012-01-25-macros-in-packages.html"/>
            <updated>2012-01-25T00:00:00.000Z</updated>
            <id>/posts/2012-01-25-macros-in-packages.html</id>
            <content type="html">&lt;p&gt;So you&amp;#39;re working on an Umbraco 5 package and you want to be able to ship your own Macro with it. Seems like a common scenario you want to do yeah? It&amp;#39;s something that&amp;#39;s possible in v4 right? So how do you go about doing it in v5?&lt;/p&gt;
&lt;h1&gt;Some background&lt;/h1&gt;
&lt;p&gt;In v4 Macros were a bit of a pain to ship, in case you didn&amp;#39;t know they were stored in the database and their data model was... less than ideal mainly as they evolved from being XSLT components to also supporting .NET, Iron* and eventually Razor.&lt;/p&gt;
&lt;p&gt;Well here&amp;#39;s a fun fact about v5 Macros &lt;strong&gt;they aren&amp;#39;t in the database&lt;/strong&gt;, Macros in v5 are actually stored in Hive. Out of the box they will be run of the file system Hive provider but since they are in Hive you could (in theory) stick them into the Database, on a FTP or anywhere crazy that you want. But really, them being on the file system is pretty fantastic as it means that it&amp;#39;s really easy to include them in Source Control, something that was a huge problem with the Umbraco projects I&amp;#39;d worked with in the past.&lt;/p&gt;
&lt;p&gt;You will find your macros (by default) at the location &lt;code&gt;~/App_Data/Umbraco/Macros&lt;/code&gt; and this contains a serialized XML version of your macro, which looks a lot like the exported Macro definitions in v4, just not quite as confusing. Also this is a configuration value that comes from the &lt;code&gt;/configuration/umbraco/macros[@rootPath]&lt;/code&gt; section of the web.config. Again this is something that you can change but you probably shouldn&amp;#39;t :P.&lt;/p&gt;
&lt;h1&gt;Installing Macros from your package&lt;/h1&gt;
&lt;p&gt;In my &lt;a href=&quot;http://www.aaron-powell.com/umbraco/creating-an-installer-task&quot;&gt;last post&lt;/a&gt; I introduced tasks and again this is what you&amp;#39;ll want to use to install your macro with your package.&lt;/p&gt;
&lt;p&gt;The first thing you want to do is copy your macro file from the Macros folder into somewhere that&amp;#39;ll include it in your package. I use a folder called &lt;strong&gt;Macros&lt;/strong&gt; that sites at the root of my package, but it&amp;#39;s ultimately a personal preference thing so you can put that folder anywhere inside your package.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note Matt Brailsford has a great post on &lt;a href=&quot;http://blog.mattbrailsford.com/2011/09/30/automating-umbraco-v5-package-creation-using-msbuild/&quot;&gt;how to create v5 packages&lt;/a&gt;, a must-read until there&amp;#39;s a UI to do it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Part of the v5 source includes a task that can help you with this and it&amp;#39;s called &lt;code&gt;CopyFileTask&lt;/code&gt; and it allows you to copy a single file from one location to another. You&amp;#39;ll see this task used as part of the &lt;em&gt;DevDataset&lt;/em&gt; that&amp;#39;s shipping with the RC builds but what you want to do is something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Umbraco.Cms.Web.Tasks.CopyFileTask, Umbraco.Cms.Web.Tasks&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;trigger&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post-package-install&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;source&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Macros/MyMacro.macro&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;destination&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;~/App_Data/Umbraco/Macros/MyMacro.macro&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding that to your web.config in your packages (as described in my last post) will copy the file from the &lt;strong&gt;Macros&lt;/strong&gt; folder in your package (or what ever folder you&amp;#39;ve put them into) to the Umbraco Macros folder.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Yes, that&amp;#39;s it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seriously, it&amp;#39;s so much easier to ship Macros in v5 that v4 and the fact that they are running off disk (don&amp;#39;t be a dick and use some crazy Hive provider for them like Examine!) makes installing them as simple as copying a file.&lt;/p&gt;
&lt;p&gt;But I think there&amp;#39;s some room for improvements around this still and as I work on my v5 tasks set I&amp;#39;m going to be doing a simpler task for installing Macros, but in the meantime the above will work nicely &lt;strong&gt;today&lt;/strong&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating an installer task</title>
            <link href="/posts/2012-01-24-creating-an-installer-task.html"/>
            <updated>2012-01-24T00:00:00.000Z</updated>
            <id>/posts/2012-01-24-creating-an-installer-task.html</id>
            <content type="html">&lt;p&gt;As you possibly know I&amp;#39;m working on an extension for Umbraco 5 called &lt;a href=&quot;http://stats-it.com&quot;&gt;Stats It&lt;/a&gt; and I&amp;#39;ve initially been focusing on making the install process nice and smooth for people who want to get up and running with the package. A good install experience will do wonders for giving your project credibility.&lt;/p&gt;
&lt;p&gt;For this I have had to do a bit of digging into the &lt;strong&gt;Task&lt;/strong&gt; system which is coming in v5, which is acting as a replacement for the traditional .NET event system, and in this article I&amp;#39;m going to share some tips when building &lt;strong&gt;installer tasks&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Right task for the job&lt;/h1&gt;
&lt;p&gt;In v5 there are two kinds of tasks available, &lt;strong&gt;Standard Tasks&lt;/strong&gt; (my name) and &lt;strong&gt;Configuration Tasks&lt;/strong&gt; and depending on what you&amp;#39;re wanting to do you&amp;#39;ll need to choose the right kind of task. Here&amp;#39;s a quick overview of the two task types:&lt;/p&gt;
&lt;h2&gt;Standard Task&lt;/h2&gt;
&lt;p&gt;This is the most common type of task that you&amp;#39;ll be creating; a task inherits from &lt;code&gt;Umbraco.Cms.Web.Tasks.AbstractWebTask&lt;/code&gt; and requires a &lt;code&gt;Umbraco.Framework.Tasks.TaskAttribute&lt;/code&gt; to be added so that the Umbraco framework layer will be able to find it (and you need to provide the attribute with a Guid for identification). This task type is very basic and can be used for any task that is raised in the system and then execute a piece of code, because of this you can think of it as being very similar to the event handlers that were in the Umbraco 4 system (or that you&amp;#39;ll find in any .NET application).&lt;/p&gt;
&lt;h2&gt;Configuration Tasks&lt;/h2&gt;
&lt;p&gt;This task is primarily used in the install/ uninstall process of Umbraco 5 and inherits from &lt;code&gt;Umbraco.Cms.Web.Tasks.ConfigurationTask&lt;/code&gt;. Where the previous task type you require an attribute the Configuration Tasks &lt;strong&gt;don&amp;#39;t&lt;/strong&gt; and you&amp;#39;ll get some very undesired results if you &lt;em&gt;do&lt;/em&gt; include the attribute. The power of this task type though is it allows you to specify values in the configuration file for the task, providing static values into the task as it is executed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note - there is another task type &lt;code&gt;Umbraco.Framework.Tasks.AbstractTask&lt;/code&gt; which is the base class for the &lt;code&gt;AbstractWebTask&lt;/code&gt; but instead of relying on the web-side of Umbraco 5 it can be run without any web references. This would what you want if you are using the Umbraco framework outside of a web context, which it can do in-theory, but it&amp;#39;s well beyond the scope of this post :P.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Task configuration&lt;/h1&gt;
&lt;p&gt;In addition to creating a class you&amp;#39;ll also need to add a section in your configuration file that your task definition will reside within. There are two ways to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add to the master web.config file (not recommended as it can have upgrade issues)&lt;/li&gt;
&lt;li&gt;Add your own package&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#39;m going to make the assumption that you&amp;#39;re creating your own package here and you&amp;#39;ll have your own web.config that you want to work against. First off you need to ensure you have the right web.config section:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configSections&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;umbraco.cms&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;tasks&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Umbraco.Cms.Web.Configuration.Tasks.TasksConfiguration, Umbraco.Cms.Web&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;requirePermission&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configSections&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the basis of your web.config file (and assuming there&amp;#39;s nothing else in it yet) and what we&amp;#39;ve done is created a new web.config section called &lt;strong&gt;umbraco.cms&lt;/strong&gt; and in that included the &lt;strong&gt;tasks&lt;/strong&gt; section which uses a type provided by Umbraco.&lt;/p&gt;
&lt;p&gt;Next we need to register our tasks:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;umbraco.cms&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;MyPackages.Tasks.MyAwesomeTask, MyPackage&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;trigger&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post-package-install&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;umbraco.cms&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section would appear after the &lt;code&gt;&amp;lt;/configSections&amp;gt;&lt;/code&gt; node and adds the section which we defined and then within that we add our tasks. There are two pieces of information we have to provide it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The fully qualified type of our task (namespace + classname + assembly)&lt;/li&gt;
&lt;li&gt;A trigger for the task, for install tasks there is one called &lt;code&gt;post-package-install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that&amp;#39;s the setup, now to make a task.&lt;/p&gt;
&lt;h1&gt;Creating your first task&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;re working on the next awesome package for Umbraco 5 and you need some stuff to happen when you install your package, well let&amp;#39;s get cracking and make your first task. We&amp;#39;ll do a basic task which will email you on package install, kind of a basic pingback to tell you when someone has installed the package. First up we&amp;#39;ll make a class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;using System;
using Umbraco&lt;span class=&quot;variable&quot;&gt;.Cms&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Web&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Context&lt;/span&gt;;
using Umbraco&lt;span class=&quot;variable&quot;&gt;.Cms&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Web&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Tasks&lt;/span&gt;;
using Umbraco&lt;span class=&quot;variable&quot;&gt;.Framework&lt;/span&gt;;
using Umbraco&lt;span class=&quot;variable&quot;&gt;.Framework&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Tasks&lt;/span&gt;;

namespace TaskDemo
{
    [Task(&lt;span class=&quot;string&quot;&gt;&quot;{C1C251E1-CACF-447A-9516-694251C16B08}&quot;&lt;/span&gt;, TaskTriggers&lt;span class=&quot;variable&quot;&gt;.PostPackageInstall&lt;/span&gt;)]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;EmailOnInstall&lt;/span&gt; : &lt;span class=&quot;id&quot;&gt;AbstractWebTask&lt;/span&gt;&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; EmailOnInstall(IUmbracoApplicationContext applicationContext) : base(applicationContext)
        {
        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; override &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Execute(TaskExecutionContext context)
        {
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new NotImplementedException();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is as empty a file as you can possibly have for an Umbraco 5 task, currently this will just error on install, pretty useful!&lt;/p&gt;
&lt;p&gt;The important stuff will be happening within the &lt;code&gt;Execute&lt;/code&gt; method, this is the method that is invoked when task is run and obviously where you want to put your logic, so let&amp;#39;s build it out:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public override void Execute(TaskExecutionContext context)
{
    var email = new MailMessage
                    {
                        From = new MailAddress(&lt;span class=&quot;string&quot;&gt;&quot;phone-home@demo.com&quot;&lt;/span&gt;)
                    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    email&lt;span class=&quot;preprocessor&quot;&gt;.To&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new MailAddress(&lt;span class=&quot;string&quot;&gt;&quot;new-install@demo.com&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    email&lt;span class=&quot;preprocessor&quot;&gt;.Subject&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;A new install has happened!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    email&lt;span class=&quot;preprocessor&quot;&gt;.Body&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hey dude,\r\nSomeone has installed your awesome package!\r\nH5YR!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var smtpClient = new SmtpClient()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    //server config skipped
    smtpClient&lt;span class=&quot;preprocessor&quot;&gt;.Send&lt;/span&gt;(email)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go, a &lt;em&gt;very&lt;/em&gt; basic implementation of a task has been done! Here&amp;#39;s the config for this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configSections&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;umbraco.cms&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;tasks&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Umbraco.Cms.Web.Configuration.Tasks.TasksConfiguration, Umbraco.Cms.Web&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;requirePermission&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;sectionGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configSections&lt;/span&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;umbraco.cms&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;TaskDemo.EmailOnInstall, TaskDemo&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;trigger&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post-package-install&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;umbraco.cms&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something you may notice is that in my config &lt;strong&gt;and&lt;/strong&gt; in my class I&amp;#39;ve had to specify the trigger, this could be a mistake that I&amp;#39;ve made in my understanding thus-far but it seems to me that that is needed, someone feel free to correct me ;).&lt;/p&gt;
&lt;h1&gt;Creating a configuration task&lt;/h1&gt;
&lt;p&gt;As stipulated the above task is &lt;strong&gt;very&lt;/strong&gt; basic but it does show you how you can work with the basics of a task. Well let&amp;#39;s say that you want to create something a bit more advanced, say you want to have a task that will grant permissions to your custom application when the package is installed (this is a common problem solved in the PackageActionContrib in v4). For this we&amp;#39;ll leverage the Configuration Task type so that we can make it a reusable task.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; System;
&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; Umbraco.Cms.Web.Context;
&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; Umbraco.Cms.Web.Tasks;
&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; Umbraco.Framework.Tasks;

&lt;span class=&quot;title&quot;&gt;namespace&lt;/span&gt; TaskDemo
{
    &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; class GrantPermissions : ConfigurationTask
    {
        &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; GrantPermissions(ConfigurationTaskContext configurationTaskContext) : base(configurationTaskContext)
        {
        }

        &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; override void Execute(TaskExecutionContext context)
        {
            &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; new NotImplementedException();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So again we&amp;#39;ve got our skeleton class but this time we inherit from &lt;code&gt;ConfigurationTask&lt;/code&gt; so that we can provide it with configuration values.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;Execute&lt;/code&gt; method we can access the &lt;code&gt;ConfigurationTaskContext.Parameters&lt;/code&gt; property which will contain the parameters that are passed in from our configuration file, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Execute(TaskExecutionContext context)
{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!ConfigurationTaskContext.Parameters.ContainsKey(&lt;span class=&quot;string&quot;&gt;&quot;application&quot;&lt;/span&gt;))
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;No application supplied&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple check to make sure that we did get an application supplied, I want that as a pre-condition so that people don&amp;#39;t break things on me!&lt;/p&gt;
&lt;p&gt;But let&amp;#39;s do something with the application provided:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: We&amp;#39;re diving into the Hive here, I&amp;#39;m going to glance over how Hive works here, that&amp;#39;s beyond the scope of this article, just believe me when I say that the code does work :P&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; override &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Execute(TaskExecutionContext context)
{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!ConfigurationTaskContext&lt;span class=&quot;variable&quot;&gt;.Parameters&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.ContainsKey&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;application&quot;&lt;/span&gt;))
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new ArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;No application supplied&quot;&lt;/span&gt;);

    var controller = (Controller)context&lt;span class=&quot;variable&quot;&gt;.EventSource&lt;/span&gt;;
    &lt;span class=&quot;comment&quot;&gt;//Get the ID of the current user&lt;/span&gt;
    var &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = ((UmbracoBackOfficeIdentity)controller&lt;span class=&quot;variable&quot;&gt;.User&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Identity&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.Id&lt;/span&gt;;
    &lt;span class=&quot;comment&quot;&gt;//Access the Hive user store&lt;/span&gt;
    using (var uow = ApplicationContext&lt;span class=&quot;variable&quot;&gt;.Hive&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.OpenWriter&lt;/span&gt;&amp;lt;ISecurityStore&amp;gt;())
    {
        &lt;span class=&quot;comment&quot;&gt;//find the current user in Hive&lt;/span&gt;
        var entity = uow&lt;span class=&quot;variable&quot;&gt;.Repositories&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Get&lt;/span&gt;&amp;lt;User&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;);
        &lt;span class=&quot;comment&quot;&gt;//Add the specified app to their permissions&lt;/span&gt;
        var apps = new List&amp;lt;string&amp;gt;(entity&lt;span class=&quot;variable&quot;&gt;.Applications&lt;/span&gt;)
                        {
                            ConfigurationTaskContext&lt;span class=&quot;variable&quot;&gt;.Parameters&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;application&quot;&lt;/span&gt;]
                        };
        &lt;span class=&quot;comment&quot;&gt;//Update their permissions&lt;/span&gt;
        entity&lt;span class=&quot;variable&quot;&gt;.Applications&lt;/span&gt; = apps;
        &lt;span class=&quot;comment&quot;&gt;//Tell Hive to update the object -- possibly not needed&lt;/span&gt;
        uow&lt;span class=&quot;variable&quot;&gt;.Repositories&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.AddOrUpdate&lt;/span&gt;(entity);
        &lt;span class=&quot;comment&quot;&gt;//tell Hive that we want to save the changes to its store&lt;/span&gt;
        uow&lt;span class=&quot;variable&quot;&gt;.Complete&lt;/span&gt;();
        controller&lt;span class=&quot;variable&quot;&gt;.HttpContext&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.CreateUmbracoAuthTicket&lt;/span&gt;(entity);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve put some comments inline to explain the code as it goes but the important part is that we are reading the task parameters out and adding it to the users permissions.&lt;/p&gt;
&lt;p&gt;Once this is all updated it amazingly will just give a new icon in the applications tray on the install of the package!&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s have a look at the config:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;TaskDemo.GrantPermissions, TaskDemo&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;trigger&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post-package-install&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;application&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;my-awesome-app&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;tasks&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;While the code above may look a little bit scare to begin with it&amp;#39;s actually not that bad when it comes to creating tasks. There&amp;#39;s a few simple rules which you need to remember:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick the right type of task for your work, do you want to pass in config values or can you compile everything together?&lt;/li&gt;
&lt;li&gt;Do you need to work with anything web specific or is just the base FrameworkContext going to be enough?&lt;/li&gt;
&lt;li&gt;Make sure you subscribe to the right event!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;#39;s a few tasks built into the core of Umbraco 5 for copying files so that can also provide a good reference source.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Heroku, SendGrid and NodeJS</title>
            <link href="/posts/2012-01-05-heroku-sendgrid-nodejs.html"/>
            <updated>2012-01-05T00:00:00.000Z</updated>
            <id>/posts/2012-01-05-heroku-sendgrid-nodejs.html</id>
            <content type="html">&lt;p&gt;Last night I launched the registration site for &lt;a href=&quot;http://stats-it.com&quot;&gt;Stats It&lt;/a&gt;, and Umbraco 5 add-on I&amp;#39;m working on and I wanted to get the site out quickly and well... cheaply so I decided that I&amp;#39;d just do a 1 page site in NodeJS.&lt;/p&gt;
&lt;p&gt;For hosting I wanted to go with &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; as I just love how simply I can get a site from my local machine to deployed with the platform and I also love how many &lt;a href=&quot;http://addons.heroku.com/&quot;&gt;add-ons&lt;/a&gt; there are available.&lt;/p&gt;
&lt;p&gt;To send emails there&amp;#39;s a couple of choices, I decided to go with &lt;a href=&quot;http://addons.heroku.com/sendgrid&quot;&gt;SendGrid&lt;/a&gt; for no reason other than they were the first that I saw :P.&lt;/p&gt;
&lt;p&gt;So install SendGrid into your heroku app (I&amp;#39;m using the free version):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;tag&quot;&gt;heroku&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;addons&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:add&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;sendgrid&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:starter&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now you need something to send emails from NodeJS, for this I&amp;#39;ve gone with &lt;a href=&quot;https://github.com/Marak/node_mailer&quot;&gt;node_mailer&lt;/a&gt; as it was the first in my search results and it&amp;#39;s got a dead simple API. What&amp;#39;s really cool about Heroku is that when you have add-ons such as SendGrid installed you get the config options injected, meaning sending an email is as simple as this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var email = require(&lt;span class=&quot;string&quot;&gt;'mailer'&lt;/span&gt;);

email.send({
    &lt;span class=&quot;method&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'smtp.sendgrid.net'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'587'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;authentication:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'plain'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;username:&lt;/span&gt; process.env.&lt;span class=&quot;class&quot;&gt;SENDGRID_USERNAME&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;password:&lt;/span&gt; process.env.&lt;span class=&quot;class&quot;&gt;SENDGRID_PASSWORD&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;domain:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'heroku.com'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'someone@somewhere.com'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'someone@somewhere-else.com'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;subject:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'You sent an email'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;body:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Hey look at that!'&lt;/span&gt;
}, function (err, result) {
    //&lt;span class=&quot;class&quot;&gt;Do&lt;/span&gt; your error handling
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You have to hard-code these settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host: &amp;#39;smtp.sendgrid.net&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port: &amp;#39;587&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authentication: &amp;#39;plain&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But Heroku will inject the username &amp;amp; password for you, both of which will be on the &lt;code&gt;process.env&lt;/code&gt; object, like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.env.SENDGRID_USERNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.env.SENDGRID_PASSWORD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there you have it, you&amp;#39;re not ready to send emails from NodeJS on Heroku.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Stubbing AJAX responses with tbd and AmpliyJS</title>
            <link href="/posts/2011-12-29-stubbing-ajax-responses-with-tbd.html"/>
            <updated>2011-12-29T00:00:00.000Z</updated>
            <id>/posts/2011-12-29-stubbing-ajax-responses-with-tbd.html</id>
            <content type="html">&lt;p&gt;A project which I&amp;#39;m working on at the moment I&amp;#39;m using &lt;a href=&quot;http://amplifyjs.com/&quot;&gt;AmplifyJS&lt;/a&gt; to simplify my front-end routing through to my underlying data service calls. The problem is that I haven&amp;#39;t got the backend services ready yet (there&amp;#39;s some outstanding blockers in the API I&amp;#39;m working against) so I&amp;#39;m focusing my work on the front end.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s the obvious problem, I want to push data to the UI but I don&amp;#39;t have any way to get the data.&lt;/p&gt;
&lt;p&gt;Luckily I wrote &lt;a href=&quot;http://www.aaron-powell.com/javascript/building-data-with-tbd&quot;&gt;tbd recently&lt;/a&gt; which can solve one of the problems, it can generate data to pump into my new UI and this is where AmplifyJS really comes to shine.&lt;/p&gt;
&lt;h1&gt;Introduction to faking data with amplify.request&lt;/h1&gt;
&lt;p&gt;To simplify my front-end routing I&amp;#39;m going to be using the &lt;a href=&quot;http://amplifyjs.com/api/request/&quot;&gt;Request API&lt;/a&gt; from AmplifyJS and if you&amp;#39;re not familiar with it check out the &lt;a href=&quot;http://amplifyjs.com/api/request/&quot;&gt;docs&lt;/a&gt; before going further as I only plan to cover the testing side of it.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say I have a route defined like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.define('get-&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;', 'ajax', &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;url&lt;/span&gt;: '/&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;service'&lt;/span&gt;,
    &lt;span class=&quot;title&quot;&gt;dataType&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;json'&lt;/span&gt;,
    &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;: '&lt;span class=&quot;type&quot;&gt;GET&lt;/span&gt;'
}&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And later in my app I&amp;#39;m accessing it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request('get-&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;', function &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
    //&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;templating&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pump&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;
}&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So where does the faking data come in? Well the cool thing about how Amplify is designed means that you can &lt;em&gt;replace a defined request&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Say what?!&lt;/p&gt;
&lt;p&gt;First thing we need to understand is the &lt;a href=&quot;http://amplifyjs.com/api/request/#request_types&quot;&gt;request types&lt;/a&gt;. When you define your request in AmplifyJS the 2nd argument you pass in is the &lt;code&gt;request type&lt;/code&gt;, generally speaking this will be &lt;code&gt;ajax&lt;/code&gt; as that is the provided request type in the API. You can define your own types so if you were wanting to pull in from an OData service you can setup that, add a new key to the &lt;code&gt;request types&lt;/code&gt; and then it&amp;#39;s all sweet (sorry how to do that is beyond this articles scope).&lt;/p&gt;
&lt;p&gt;Where it gets really interesting is that if your provide only two arguments to the &lt;code&gt;define&lt;/code&gt; method, a key and a &lt;strong&gt;function&lt;/strong&gt; this works as well. In this case &lt;strong&gt;your function is executed when you invoke the request&lt;/strong&gt;. Now let&amp;#39;s add this code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.define('my-&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;', function &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;settings&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;settings&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;({
        &lt;span class=&quot;title&quot;&gt;status&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;success'&lt;/span&gt;,
        &lt;span class=&quot;title&quot;&gt;items&lt;/span&gt;: { }&lt;/span&gt;&lt;/span&gt;
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will make it so that whenever I call my request I will get a successful response with no data. There are properties which you need to set, first is the &lt;code&gt;status&lt;/code&gt; to &lt;code&gt;success&lt;/code&gt; so that AmplifyJS knows the response was successful, second is the &lt;code&gt;items&lt;/code&gt; property which will contain any data you want returned to the method.&lt;/p&gt;
&lt;h2&gt;Setting up your project&lt;/h2&gt;
&lt;p&gt;Now you&amp;#39;ve got the basics down I thought I&amp;#39;d just give a bit of an insight into how I go about including this into a project. As mentioned you can override a defined request as many times as you want:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;amplify.request.define(&lt;span class=&quot;string&quot;&gt;'my-data'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'ajax'&lt;/span&gt;, { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; });
amplify.request.define(&lt;span class=&quot;string&quot;&gt;'my-data'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'odata'&lt;/span&gt;, { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; });
amplify.request.define(&lt;span class=&quot;string&quot;&gt;'my-data'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (settings) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I&amp;#39;ve setup the request three times but the last one to be executed is the one included.&lt;/p&gt;
&lt;p&gt;The way I setup my project is that I have a file which I define my requests in, all of them together (or at least logically broken down into groups of common requests). For when I&amp;#39;m wanting to stub out my requests I create a secondary file and include the stubbed out requests in there and then include it &lt;em&gt;directly after the main file&lt;/em&gt;. This means that once the real request is created it&amp;#39;s immediately replaced with fake out.&lt;/p&gt;
&lt;p&gt;With the fake requests in a separate file I can include or exclude them as I please, as my services come online or even use them in unit tests.&lt;/p&gt;
&lt;h1&gt;Building your data&lt;/h1&gt;
&lt;p&gt;The idea of doing this all with AmplifyJS was shown to me by &lt;a href=&quot;http://twitter.com/elijahmanor&quot;&gt;Elijah Manor&lt;/a&gt;. He sent me this &lt;a href=&quot;http://jsfiddle.net/slace/ubeeK/&quot;&gt;jsfiddle&lt;/a&gt; which shows it all setup.&lt;/p&gt;
&lt;p&gt;The problem with examples like this is that they are using fixed data, every reload of that page will show you exactly the same thing and clicking the refresh button on the UI will reload the data with exactly the same data. Now in this demo it&amp;#39;s not really that bit a deal, the data doesn&amp;#39;t really need to look different each time it&amp;#39;s not going to make much difference. But what if you are doing something that will look different based on the data, say you&amp;#39;re doing some charting?&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve created a &lt;a href=&quot;http://jsfiddle.net/slace/8tBYt/&quot;&gt;jsfiddle&lt;/a&gt; to demonstrate this, when you click the button the chart will be rebuilt with different data.&lt;/p&gt;
&lt;p&gt;Now here&amp;#39;s my mock request:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;delphi&quot;&gt;amplify.request.define(&lt;span class=&quot;string&quot;&gt;'get-data'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(settings)&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{
    var data = tbd.from({}&lt;/span&gt;)
                .&lt;span class=&quot;title&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;'category'&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tbd.utils.random(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'e'&lt;/span&gt;)&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;
                .&lt;span class=&quot;title&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;'value'&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tbd.utils.range(10, 100)&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;
                .&lt;span class=&quot;title&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tbd.utils.range(3, 8)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;);&lt;/span&gt;

    settings.success(&lt;span class=&quot;comment&quot;&gt;{
        status: 'success',
        items: data
    }&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;tbd&lt;/code&gt; I&amp;#39;m scaffolding out a data series for my charting API, using the alphabet as the &lt;em&gt;label&lt;/em&gt; and then a randomly chosen number between 10 and 100 for the value. This means that as I generate new data my UI will change (I&amp;#39;m leveraging one of &lt;code&gt;tbd&lt;/code&gt;&amp;#39;s util methods to generate a random number of results as well (I might clean up the API to make that simpler in the future).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And there we have it an example of how we can combine a couple of helpful JavaScript libraries to make it easier to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify out UI request layer&lt;/li&gt;
&lt;li&gt;Make sure our development isn&amp;#39;t halted while data services are under development&lt;/li&gt;
&lt;li&gt;Have less hard coded data responses&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Some useful Jasmine extensions</title>
            <link href="/posts/2011-12-23-useful-jasmine-extensions.html"/>
            <updated>2011-12-23T00:00:00.000Z</updated>
            <id>/posts/2011-12-23-useful-jasmine-extensions.html</id>
            <content type="html">&lt;p&gt;For &lt;a href=&quot;http://www.aaron-powell.com/javascript/building-data-with-tbd&quot;&gt;tbd, a JavaScript helper I&amp;#39;ve written&lt;/a&gt; I&amp;#39;ve been using &lt;a href=&quot;http://pivotal.github.com/jasmine/&quot;&gt;Jasmine&lt;/a&gt; for my testing.&lt;/p&gt;
&lt;p&gt;Some of the tests I&amp;#39;ve had to go beyond what &lt;a href=&quot;http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Matchers.html&quot;&gt;matchers&lt;/a&gt; are available out of the box so I thought I&amp;#39;d share them here (mostly so I&amp;#39;ve got an easy point for myself to find them again :P).&lt;/p&gt;
&lt;h1&gt;A quick into to adding your own matcher&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve you&amp;#39;re new to Jasmine and haven&amp;#39;t added your own matchers here&amp;#39;s a quick tutorial.&lt;/p&gt;
&lt;p&gt;You need to use the &lt;a href=&quot;http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Suite.html#beforeEach&quot;&gt;beforeEach&lt;/a&gt; and call &lt;a href=&quot;http://pivotal.github.com/jasmine/jsdoc/symbols/jasmine.Spec.html#addMatchers&quot;&gt;addMatchers&lt;/a&gt;, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;() &lt;span class=&quot;tuple&quot;&gt;{
   this.&lt;span class=&quot;function_name&quot;&gt;addMatchers&lt;/span&gt;(&lt;span class=&quot;tuple&quot;&gt;{
       always&lt;span class=&quot;variable&quot;&gt;True&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;()&lt;span class=&quot;tuple&quot;&gt;{
           //put your logic in here to determine truthy results
           return true;
       }&lt;/span&gt;
   });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can call it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('something')&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;alwaysTrue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test extension that I&amp;#39;ve created isn&amp;#39;t really useful as it will always return true but you can put in any logic you want.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; object has an &lt;code&gt;actual&lt;/code&gt; property, which is the value from your &lt;code&gt;expect&lt;/code&gt; method and the arguments passed to the call are passed in.&lt;/p&gt;
&lt;h1&gt;My matchers&lt;/h1&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;beforeEach(function() {
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.addMatchers&lt;/span&gt;({
        toBeInArray: function() {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ~[]&lt;span class=&quot;variable&quot;&gt;.slice&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.call&lt;/span&gt;(arguments)&lt;span class=&quot;variable&quot;&gt;.indexOf&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.actual&lt;/span&gt;);
        },
        toBeInDateRange: function(min, max) {
            var actual = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.actual&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.getTime&lt;/span&gt;();
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; actual &amp;lt;= max&lt;span class=&quot;variable&quot;&gt;.getTime&lt;/span&gt;() &amp;amp;&amp;amp; actual &amp;gt;= min&lt;span class=&quot;variable&quot;&gt;.getTime&lt;/span&gt;();
        },
        toBeInNumericalRange: function (min, max) {
            var actual = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.actual&lt;/span&gt;;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; actual &amp;lt;= max &amp;amp;&amp;amp; actual &amp;gt;= min;
        }
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s how you use them:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('a')&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;toByInArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('a', 'b', 'c')&lt;/span&gt;;
&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;toBeInNumericalRange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;;
&lt;span class=&quot;title&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(new &lt;span class=&quot;variable&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2011&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;)&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;toBeInDateRange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(new &lt;span class=&quot;variable&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2011&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;)&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; D&lt;span class=&quot;title&quot;&gt;ate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2011&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully this is helpful to someone else :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2011, a year in review</title>
            <link href="/posts/2011-12-22-2011-a-year-in-review.html"/>
            <updated>2011-12-22T00:00:00.000Z</updated>
            <id>/posts/2011-12-22-2011-a-year-in-review.html</id>
            <content type="html">&lt;p&gt;As the year wraps up it brings time for the atypical year in review post!&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;http://www.aaron-powell.com/2010-a-year-in-review&quot;&gt;last year&lt;/a&gt; I declared to be the year of the conferences but of course this year was just as crazy with conferences.&lt;/p&gt;
&lt;p&gt;I...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Got a &lt;a href=&quot;http://www.aaron-powell.com/mvp11&quot;&gt;Microsoft MVP award&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Went to the USA for my first time to go to MIX11 and talked FunnelWeb at the Open Source Fest&lt;ul&gt;
&lt;li&gt;Vegas is &lt;strong&gt;insane&lt;/strong&gt; and I don&amp;#39;t think I&amp;#39;ve ever been as hung over in my life as I&amp;#39;d been&lt;/li&gt;
&lt;li&gt;Hanging out with &lt;a href=&quot;http://twitter.com/#!/gblock&quot;&gt;Glenn Block&lt;/a&gt; was heaps of fun, he&amp;#39;s such a top guy&lt;/li&gt;
&lt;li&gt;I got to have lunch with &lt;a href=&quot;http://twitter.com/#!/shanselman&quot;&gt;Scott Hanselman&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/#!/haacked&quot;&gt;Phil Haack&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/robconery&quot;&gt;Rob Conery&lt;/a&gt; which was pretty awesome from a nerd point of view&lt;/li&gt;
&lt;li&gt;The pre-party also allowed me to meet some of my idols in Douglas Crockford, &lt;a href=&quot;http://twitter.com/#!/Encosia&quot;&gt;Dave Ward&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/elijahmanor&quot;&gt;Elijah Manor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next stop was Melbourne and DDD Melbourne where I got to present on JavaScript craziness&lt;ul&gt;
&lt;li&gt;And watching &lt;a href=&quot;http://twitter.com/#!/stevegodbold&quot;&gt;Steve Godbold&lt;/a&gt; rap was just hilarious&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next up was &lt;a href=&quot;http://www.aaron-powell.com/remix11&quot;&gt;REMIX&lt;/a&gt; where I spoke on being a web developer and had to do an impromptu session where I talked about JavaScript again (although admittedly I lost the audience on the second talk :P)&lt;/li&gt;
&lt;li&gt;It wasn&amp;#39;t long until I was back on a plane to get to Denmark for CodeGarden 11 where I talked about everything from ASP.NET MVC to what is interesting in Umbraco 5&lt;ul&gt;
&lt;li&gt;I have since been removed from the &lt;a href=&quot;http://www.aaron-powell.com/umbraco/so-long-and-thanks-for-all-the-fish&quot;&gt;Umbraco project&lt;/a&gt; but I stand by what got me removed, instead I am trying to get people &lt;a href=&quot;http://www.aaron-powell.com/umbraco/i-want-you&quot;&gt;involved from the outside&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back in Australia and it was time for DDD Sydney and a revisit my DDD Melbourne talk about getting freaky with JavaScript and talk about Open Source in the panel session run by Nick Hodge&lt;/li&gt;
&lt;li&gt;But no rest for wicked it was time for &lt;a href=&quot;http://www.aaron-powell.com/speaking/teched-nz-2011&quot;&gt;Teched NZ&lt;/a&gt; (&lt;a href=&quot;http://www.aaron-powell.com/speaking/teched-nz-2011/slides&quot;&gt;slides&lt;/a&gt;) and then &lt;a href=&quot;http://www.aaron-powell.com/speaking/teched-au-2011&quot;&gt;Teched AU&lt;/a&gt; (&lt;a href=&quot;http://www.aaron-powell.com/speaking/teched-au-2011/slides&quot;&gt;slides &amp;amp; video&lt;/a&gt;) &lt;ul&gt;
&lt;li&gt;I got voted one of the top sessions in the web track which was pretty exciting!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phew!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For the first time in 2 years though I &lt;em&gt;didn&amp;#39;t&lt;/em&gt; resign from my job, I know, shockingly I&amp;#39;m still working at the same company I was working for this time last year.&lt;/p&gt;
&lt;p&gt;Generally speaking I&amp;#39;ve scaled back my Open Source work, I&amp;#39;ve still tried to be active in the various communities but instead of actively developing I&amp;#39;ve tried to be more of a voice of reason. I&amp;#39;ve release a few small things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another &lt;a href=&quot;http://www.aaron-powell.com/javascript/postman&quot;&gt;pub/sub library&lt;/a&gt; in JavaScript&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;http://www.aaron-powell.com/javascript/javascript-quiz&quot;&gt;JavaScript quiz&lt;/a&gt; website&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/javascript/rebuilding-javascript-quiz-in-nodejs&quot;&gt;Which I then rewrite in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;But admittedly it&amp;#39;s not been getting a lot of love these days from myself or the community&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A library to &lt;a href=&quot;http://www.aaron-powell.com/javascript/building-data-with-tbd&quot;&gt;building test data&lt;/a&gt; in JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here&amp;#39;s to a more JavaScript filled 2012!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>I want you</title>
            <link href="/posts/2011-12-19-i-want-you.html"/>
            <updated>2011-12-19T00:00:00.000Z</updated>
            <id>/posts/2011-12-19-i-want-you.html</id>
            <content type="html">&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/i-want-you.jpg&quot; alt=&quot;alt text&quot; title=&quot;I want you&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hi, my name&amp;#39;s Aaron and I&amp;#39;m a former member of the Umbraco core team. Before I &lt;a href=&quot;http://www.aaron-powell.com/umbraco/so-long-and-thanks-for-all-the-fish&quot;&gt;departed&lt;/a&gt; the core team something I was pushing for was greater involvement between the core (and HQ) and the Umbraco &lt;strong&gt;developer&lt;/strong&gt; community.&lt;/p&gt;
&lt;p&gt;Let me make sure I clear one thing up first, Umbraco has a great user community, our.umbraco thrives with huge number of contributors helping everyone out from the beginner to the advanced. The extensions community is also a hive (sic) of activity.&lt;/p&gt;
&lt;p&gt;The community that I&amp;#39;m talking about is the one around developing &lt;em&gt;Umbraco as a product&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re reading this you most likely have some vested interest in Umbraco, you&amp;#39;re  doing freelancing and implementing it, your company sells solutions based around it or you are like me and just find CMSs sexy (well let&amp;#39;s hope that&amp;#39;s not the case :P). Whatever the case may be the direction of the product does have an impact on you so you should make sure your voice is heard. Even if you&amp;#39;re not a developer your voice is important, feedback about things you/ your clients find challenging, features you&amp;#39;d like to see, testing alpha/ beta/ RC released or even just questioning why something was done a particular way.&lt;/p&gt;
&lt;h2&gt;How do I get involved?&lt;/h2&gt;
&lt;p&gt;This all sounds well and good but &lt;em&gt;what&lt;/em&gt; should you do?&lt;/p&gt;
&lt;p&gt;A few months ago the &lt;a href=&quot;http://umbraco5contrib.codeplex.com/&quot;&gt;Umbraco 5 contrib&lt;/a&gt; was opened up and it&amp;#39;s already starting to get some stuff around this up there.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://umbraco5contrib.codeplex.com/discussions/279569&quot;&gt;There&amp;#39;s a post on contributing&lt;/a&gt; and then there&amp;#39;s the &lt;a href=&quot;http://umbraco5contrib.codeplex.com/discussions/279728&quot;&gt;discussion around automated UI testing&lt;/a&gt; which &lt;a href=&quot;http://blog.mattbrailsford.com/&quot;&gt;Matt Braildsford&lt;/a&gt; took into a larger discussion last week.&lt;/p&gt;
&lt;p&gt;Lastly there&amp;#39;s a room on &lt;a href=&quot;http://uchat.mattbrailsford.com/&quot;&gt;JabbR&lt;/a&gt; but it&amp;#39;s a little quiet still these days.&lt;/p&gt;
&lt;p&gt;Keep an eye on the &lt;a href=&quot;http://twitter.com/#!/search/%23Umbraco&quot;&gt;Umbraco twitter stream&lt;/a&gt; and grab &lt;a href=&quot;http://nightly.umbraco.org/&quot;&gt;nightly Umbraco builds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Raise a &lt;a href=&quot;http://umbraco5contrib.codeplex.com/discussions&quot;&gt;discussion&lt;/a&gt; if you don&amp;#39;t understand why something was implemented some way (&lt;a href=&quot;http://our.umbraco.org/&quot;&gt;but keep implementation discussions to our.umbraco&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://umbraco.codeplex.com/SourceControl/list/changesets&quot;&gt;Monitor change set commits&lt;/a&gt; and make sure they are still conforming to what standards there are.&lt;/p&gt;
&lt;h1&gt;So c&amp;#39;mon, get involved!&lt;/h1&gt;
</content>
        </entry>
    
        <entry>
            <title>You don't need to use $.proxy</title>
            <link href="/posts/2011-12-12-you-dont-need-jquery-proxy.html"/>
            <updated>2011-12-12T00:00:00.000Z</updated>
            <id>/posts/2011-12-12-you-dont-need-jquery-proxy.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve been recently going through some extending of a jQuery UI widget which a colleague had written when I came across quite a number of statements that were using the &lt;a href=&quot;http://api.jquery.com/jQuery.proxy/&quot;&gt;proxy&lt;/a&gt; method from jQuery.&lt;/p&gt;
&lt;p&gt;For anyone who&amp;#39;s not familiar with the &lt;code&gt;proxy&lt;/code&gt; method is allows you to take a function and specify a context (the &lt;code&gt;this&lt;/code&gt; value) so when you pass it around for execution you always know what you&amp;#39;re going to have as the context.&lt;/p&gt;
&lt;p&gt;The method has been around for a while and it did serve a good purpose but these days its usefulness is becoming limited and I&amp;#39;m going to look at a few reasons as to why you shouldn&amp;#39;t be using it.&lt;/p&gt;
&lt;h1&gt;Understand this&lt;/h1&gt;
&lt;p&gt;The most common reason I see that people will use &lt;code&gt;proxy&lt;/code&gt; is because they don&amp;#39;t understand how &lt;code&gt;this&lt;/code&gt; works in JavaScript. While there are dozens of articles through your favourite search engine explaining &lt;code&gt;this&lt;/code&gt; (&lt;a href=&quot;http://javascriptweblog.wordpress.com/2010/08/30/understanding-javascripts-this/&quot;&gt;here&amp;#39;s a good start&lt;/a&gt;) I&amp;#39;ll do my best to give a quick overview.&lt;/p&gt;
&lt;p&gt;When people come from C# they already have a notion of &lt;code&gt;this&lt;/code&gt; and what it represents, unfortunately this is a broken assumption when moving to JavaScript. In C# &lt;code&gt;this&lt;/code&gt; represents the current class which you&amp;#39;re working within but since JavaScript &lt;em&gt;isn&amp;#39;t&lt;/em&gt; a classical language there isn&amp;#39;t the concept of a &lt;em&gt;class&lt;/em&gt; so you couldn&amp;#39;t really associate it to one could you?&lt;/p&gt;
&lt;p&gt;Instead &lt;code&gt;this&lt;/code&gt; represents the context for which a function is executed for and different kinds of execution result in different contexts. Here&amp;#39;s a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Invoking a function from an object will set the context to the owner object&lt;/li&gt;
&lt;li&gt;Invoking a function literal will set the context to the global object (&lt;code&gt;window&lt;/code&gt; in a browser)&lt;/li&gt;
&lt;li&gt;Invoking a function with apply/ call allows it to be controlled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is why a lot of people get utterly confused with &lt;code&gt;this&lt;/code&gt; in JavaScript.&lt;/p&gt;
&lt;p&gt;But what does this have to do with the &lt;code&gt;$.proxy&lt;/code&gt; method? As I said one of the most common reasons I see people using it is because they want to be able to access members of a particular object within a callback (such as a function called from an AJAX success). Because they are aware that in their outer function they can go &lt;code&gt;this.foo&lt;/code&gt; they expect it to be available within the callback (after all isn&amp;#39;t the callback in the same class?) but it will fail so they use &lt;code&gt;$.proxy&lt;/code&gt; to ensure that they can access the member(s) they require.&lt;/p&gt;
&lt;p&gt;So why is it a poor choice in this scenario? Well the reason is  that you can solve the problem in a much simpler fashion, by understanding JavaScript closures. You can draw a lot of similarities between JavaScript closures and C# closures, but the simplest explanation is that a variable with be within scope until all functions that require is have been descoped. But with the case of &lt;code&gt;this&lt;/code&gt;, since it changes between function scopes the &lt;code&gt;var that = this&lt;/code&gt; pattern emerged in JavaScript.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s have a look at some code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = {
    makeRequest: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;, $.proxy(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.update(result);
            }, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)
        );
    },

    update: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; }
};

&lt;span class=&quot;comment&quot;&gt;//somewhere later in the code&lt;/span&gt;
foo.makeRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re using the &lt;code&gt;proxy&lt;/code&gt; method to make it possible to access the &lt;code&gt;update&lt;/code&gt; method, since when we called the &lt;code&gt;makeRequest&lt;/code&gt; method its &lt;code&gt;this&lt;/code&gt; is a reference to &lt;code&gt;foo&lt;/code&gt; (we&amp;#39;re assuming that the assignment of &lt;code&gt;foo&lt;/code&gt; is out of scope for the &lt;code&gt;makeRequest&lt;/code&gt; method). So let&amp;#39;s update it to use variable closures:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = {
    makeRequest: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
        $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
            that.update(result);
        });
    },

    update: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; }
};

foo.makeRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference here is that I&amp;#39;m assigning the value of &lt;code&gt;this&lt;/code&gt; to a variable before the callback is created and inside the callback I refer back to the variable.&lt;/p&gt;
&lt;p&gt;So why is this better than using &lt;code&gt;proxy&lt;/code&gt;? The primary reason is readability, if you look at the first snippet you&amp;#39;re intention is obscured by the use of &lt;code&gt;proxy&lt;/code&gt; to change the scope. When someone who understands JavaScript comes to that snippet they have to know what the use of &lt;code&gt;proxy&lt;/code&gt; is and why the &lt;code&gt;this&lt;/code&gt; context needs to be controlled. With the second snippet it&amp;#39;s clearer to see that you want to call the &lt;code&gt;update&lt;/code&gt; method on the same object which &lt;code&gt;makeRequest&lt;/code&gt; was invoked from.&lt;/p&gt;
&lt;h1&gt;Use built-in methods&lt;/h1&gt;
&lt;p&gt;An often missed note of JavaScript (well ECMAScript really) is that the functionality that is provided by &lt;code&gt;proxy&lt;/code&gt; (and the similar methods in the other libraries) is built into the language, through the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind&lt;/a&gt; method. The &lt;code&gt;bind&lt;/code&gt; method was added as part of ECMAScript 5 and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creates a new function that, when called, itself calls this function in the context of the provided this value, with a given sequence of arguments preceding any provided when the new function was called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm that sounds pretty much like what you get from the &lt;code&gt;proxy&lt;/code&gt; method yet it&amp;#39;s built into the language.&lt;/p&gt;
&lt;p&gt;This means that you can (potentially) get a performance boost (&lt;a href=&quot;http://jsperf.com/bind-vs-jquery-proxy&quot;&gt;check it out on JSPerf&lt;/a&gt;) by using a native browser API rather than the wrapper. Also at the time of writing jQuery (1.7.1) doesn&amp;#39;t use the native browser method it does the code itself.&lt;/p&gt;
&lt;p&gt;Performance aside the main difference between the jQuery implementation and the ECMASCript 5 specification is the jQuery &lt;code&gt;proxy&lt;/code&gt; method &lt;em&gt;does not throw a type error if the first argument is not a function&lt;/em&gt; which the &lt;a href=&quot;http://es5.github.com/#x15.3.4.5&quot;&gt;spec states&lt;/a&gt; &lt;code&gt;bind&lt;/code&gt; will do. So although they are named differently they are providing the same functionality except for a critical check.&lt;/p&gt;
&lt;p&gt;The take away from this point is that it&amp;#39;s built into the language so using it makes a lot of sense and when you&amp;#39;re in browsers that don&amp;#39;t support it it&amp;#39;s easy to polyfil the missing API (the mdn docs include the polyfil).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That wraps up my &amp;quot;rant&amp;quot; against using the &lt;code&gt;proxy&lt;/code&gt; method in jQuery. The goal of this article was to teach you a bit more about the JavaScript language and that things people commonly try and work around have simpler solutions.&lt;/p&gt;
&lt;p&gt;By understanding language concepts such as &lt;code&gt;this&lt;/code&gt; and closures you can avoid manipulating scope.&lt;/p&gt;
&lt;p&gt;By knowing what&amp;#39;s new in the language you can use built-in APIs and make faster and more portable code.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Building data with tbd</title>
            <link href="/posts/2011-12-12-building-data-with-tbd.html"/>
            <updated>2011-12-12T00:00:00.000Z</updated>
            <id>/posts/2011-12-12-building-data-with-tbd.html</id>
            <content type="html">&lt;p&gt;When building a UI that is driven by JavaScript one of the most tedious tasks is ensuring that you have data which you can populate into the UI to develop against. If you&amp;#39;re like me you probably prefer to do the UI component before the server component. Alternatively you could be working in a team where someone else is responsible for developing the server component at the same time as you&amp;#39;re developing the UI. Which ever the case is you&amp;#39;ll find yourself in a situation where you don&amp;#39;t have the data to build out your UI.&lt;/p&gt;
&lt;p&gt;This is a situation that I find myself in quite often and it always left me thinking about how I would throw together some data to do the UI. Generally speaking it&amp;#39;d involve a bunch of copy and pasted lines of JavaScript which builds up an object graph. This &lt;em&gt;does work&lt;/em&gt; but it&amp;#39;s not a great way to simulate data, especially if you want to change the data volumes and see how the UI will react.&lt;/p&gt;
&lt;p&gt;Coming from a .NET background I&amp;#39;ve used libraries like &lt;a href=&quot;http://nbuilder.org/&quot;&gt;NBuilder&lt;/a&gt; and &lt;a href=&quot;http://fabricator.codeplex.com/&quot;&gt;Fabricator&lt;/a&gt; in the past. These libraries take an input object and will generate a series of fake data from it.&lt;/p&gt;
&lt;p&gt;So I thought &amp;quot;hey, why not create that in JavaScript&amp;quot; and from there &lt;strong&gt;tbd&lt;/strong&gt; was born!&lt;/p&gt;
&lt;h1&gt;tbd - Test Data Builder&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aaronpowell/tbd&quot;&gt;tbd&lt;/a&gt;, or Test Data Builder is a project I started to create (fake) data using JavaScript. There&amp;#39;s a bit of a joke in the name, when I was trying to pick a name I was thinking &amp;quot;what&amp;#39;d be quirky, it&amp;#39;s for building test data, oh sweet, &lt;strong&gt;tbd&lt;/strong&gt; since it can be Test Data Builder or &lt;em&gt;To Be Defined&lt;/em&gt;, which makes for a good play on words&amp;quot;. Now the astute reader will notice the mistake immediately but for those with reading problems like me you&amp;#39;ll need a hint, Test Data Builder is actually &lt;strong&gt;tdb&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The idea behind tbd was to be able to take a JavaScript object and create a bunch more of them, as many as you want! I also wanted it to be disconnected to the browser so you could run it in both Node.js and the browser. For running it in the browser you need to add a reference to the file and with Node.js it&amp;#39;s up on &lt;a href=&quot;http://search.npmjs.org/#/tbd&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a basic example of how to use it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = tbd.from&lt;span class=&quot;container&quot;&gt;({ &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;world'&lt;/span&gt; })&lt;/span&gt;.make&lt;span class=&quot;container&quot;&gt;(10)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create an array of 10 objects all which are identical. Since JavaScript doesn&amp;#39;t have reflection like .NET there isn&amp;#39;t a way to get an inferred type of a property, instead you have to assign it a &amp;#39;default&amp;#39; value. This can have an advantage though as it means you can also only have tbd generate values for properties you actually want random data for. So how do you do values?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = tbd.from&lt;span class=&quot;container&quot;&gt;({ &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;: 1 })&lt;/span&gt;&lt;/span&gt;
            .prop('foo').use(function() { return &lt;span class=&quot;type&quot;&gt;Math&lt;/span&gt;.random(); }).done()
            .make(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create an array of 10 items which have a unique random number (well as unique as a random number can be :P) for the property &lt;code&gt;foo&lt;/code&gt;. To break down the way it works you need to understand the fluent API for properties.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pass the property name to the &lt;code&gt;prop&lt;/code&gt; method as a string&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Pro tip - if the property name doesn&amp;#39;t exist on the source object it&amp;#39;ll still be added!&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pass a value or function into the &lt;code&gt;use&lt;/code&gt; method&lt;ul&gt;
&lt;li&gt;If you pass a value that will be used for each object&lt;/li&gt;
&lt;li&gt;If you pass a function it&amp;#39;ll be invoked for each object&lt;/li&gt;
&lt;li&gt;There&amp;#39;s some helper methods we&amp;#39;ll look at later&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;done&lt;/code&gt; to signify you&amp;#39;ve finished with that property so you&amp;#39;re back to the root API and allow you to modify more properties&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last thing you always call is &lt;code&gt;make&lt;/code&gt; and specify the number of objects you want.&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s it, you can go off and create all the data you could ever want.&lt;/p&gt;
&lt;h1&gt;Making better fake data&lt;/h1&gt;
&lt;p&gt;Since tbd is a really dumb API if you don&amp;#39;t tell it what to do with a property it wont do anything. So how do you produce &lt;em&gt;better fake data&lt;/em&gt;? That might sound like a silly question but say you&amp;#39;re trying to build some graphs, you don&amp;#39;t want all the data to be the same do you?&lt;/p&gt;
&lt;p&gt;Well to simplify this tbd ships with a number of useful utilities for generating better fake data. The full list you can get off the &lt;a href=&quot;https://github.com/aaronpowell/tbd/blob/master/README.md&quot;&gt;readme&lt;/a&gt; but are some of the most useful IMO. All of these reside in the &lt;code&gt;tbd.utils&lt;/code&gt; namespace.&lt;/p&gt;
&lt;h2&gt;Pick a random value&lt;/h2&gt;
&lt;p&gt;Say you want to randomly choose a value from a set of values, say a bunch of different word, there&amp;#39;s a handy method that&amp;#39;ll do that called &lt;code&gt;random&lt;/code&gt; and you use it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = tbd.from&lt;span class=&quot;container&quot;&gt;({ &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;world'&lt;/span&gt; })&lt;/span&gt;&lt;/span&gt;
            .prop('hello').use(tbd.utils.random('me',&lt;span class=&quot;string&quot;&gt; 'no me'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt; 'why not me!'&lt;/span&gt;)).done()
            .make(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method takes &lt;em&gt;n number of arguments&lt;/em&gt; and it will randomly choose one of them for each object. You can pass in any data type that you want to this and it&amp;#39;ll take a random from the list so you&amp;#39;re not just restricted to strings.&lt;/p&gt;
&lt;h2&gt;Better random numbers and dates&lt;/h2&gt;
&lt;p&gt;While the &lt;code&gt;random&lt;/code&gt; method is great if you have a small set of data to go through but what if you don&amp;#39;t? What if you want a random number between 1 and 1000? Typing that out would &lt;strong&gt;suck&lt;/strong&gt;. Well luckily there is the &lt;code&gt;range&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = tbd.from&lt;span class=&quot;container&quot;&gt;({ &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;world'&lt;/span&gt; })&lt;/span&gt;&lt;/span&gt;
            .prop('hello').use(tbd.utils.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)).done()
            .make(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;code&gt;range&lt;/code&gt; you pass in a min and max value and something from in there will be used. This method also supports dates so you can randomly choose a date from within a range.&lt;/p&gt;
&lt;h2&gt;Sequences&lt;/h2&gt;
&lt;p&gt;Sometimes you just want an ordered list of values and that&amp;#39;s where &lt;code&gt;sequential&lt;/code&gt; comes in. Sequential you provide a start point and you&amp;#39;ll get a value incremented by one each time from there:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = tbd.from&lt;span class=&quot;container&quot;&gt;({ &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;world'&lt;/span&gt; })&lt;/span&gt;&lt;/span&gt;
            .prop('hello').use(tbd.utils.sequential(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)).done()
            .make(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: I had a mistake in the initial post, the method is &lt;code&gt;sequential&lt;/code&gt; not &lt;code&gt;sequence&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Date sequences&lt;/h3&gt;
&lt;p&gt;One cool thing about the &lt;code&gt;sequential&lt;/code&gt; api is that you can provide it a date and it will increment that. By default the dates will shift one day at a time to get you to your new date:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;tbd.&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;({ &lt;span class=&quot;type&quot;&gt;date&lt;/span&gt;: new Date })
    .&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt;('foo').use(tbd.utils.sequential(new Date() /* optional parameter &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; increment, default &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; 'd' */)
    .make(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);
//&lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; '&lt;span class=&quot;property&quot;&gt;day&lt;/span&gt;' &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; will be incremented &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; starting value&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can overload this to increment by other date parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;y -&amp;gt; Year&lt;/li&gt;
&lt;li&gt;M -&amp;gt; Month&lt;/li&gt;
&lt;li&gt;d -&amp;gt; Day (default)&lt;/li&gt;
&lt;li&gt;h -&amp;gt; Hour&lt;/li&gt;
&lt;li&gt;m -&amp;gt; Minutes&lt;/li&gt;
&lt;li&gt;s -&amp;gt; Seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So this wraps up our look at &lt;code&gt;tbd&lt;/code&gt;, a useful little tool I wrote to make it easier to build out some fake data for when you&amp;#39;re mocking a UI or to pump into a test.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aaronpowell/tbd&quot;&gt;Grab it today!&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Xamlizer - How to implement something silly in JavaScript</title>
            <link href="/posts/2011-10-24-xamlizer-implementing-something-silly-in-javascript.html"/>
            <updated>2011-10-24T00:00:00.000Z</updated>
            <id>/posts/2011-10-24-xamlizer-implementing-something-silly-in-javascript.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve never done much Xaml development, I started reading a WPF book and played around with it only to realise I didn&amp;#39;t have any understanding of this concept of a stateful application or how layouts were going to work. And as a web developer who never saw the appeal of Flash I also never got into Silverlight as there was never a problem in my life that it would solve.&lt;/p&gt;
&lt;p&gt;The one thing I do remember from my brief foray into that scary other world is the reliance on &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; and &lt;code&gt;INotifyPropertyChanging&lt;/code&gt; interfaces. I&amp;#39;ve always thought that the idea behind these two interfaces was a good one, the primary problem though is how you actually have to implement them. Seriously, there&amp;#39;s a lot of shit code you have to implement.&lt;/p&gt;
&lt;p&gt;So I decided to do something a bit silly, I decided to implement the two interfaces in JavaScript.&lt;/p&gt;
&lt;h3&gt;A dumb idea with a point&lt;/h3&gt;
&lt;p&gt;Now I see no real reason to use the code that I&amp;#39;m going to look at in any current development (I&amp;#39;ll explain why later) but more importantly I want to look at something that is part of ECMAScript 5 that doesn&amp;#39;t get the attention it deserves, &lt;a href=&quot;http://es5.github.com/#x15.2.3.6&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;JavaScript properties throughout history&lt;/h1&gt;
&lt;p&gt;JavaScript, unlike languages such as C#, doesn&amp;#39;t really have this concept of a property like you get there, the idea of a &lt;em&gt;get&lt;/em&gt; and &lt;em&gt;set&lt;/em&gt; operating being something that you can control. Really this is how a &lt;em&gt;class&lt;/em&gt; in JavaScript with some public properties looks:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var person = {
    &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;lastName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when we want to update a property we&amp;#39;d do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;profile&quot;&gt;&lt;span class=&quot;filename&quot;&gt;person.firstName = 'John';&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there&amp;#39;s nothing wrong with this, it does what you&amp;#39;ll want to do &lt;em&gt;in a lot of scenarios&lt;/em&gt;, the problem is when you&amp;#39;re wanting a slightly more complex scenario, say you want to react to a change to the &lt;code&gt;firstName&lt;/code&gt; property, maybe perform some validation.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume we want to have an &lt;code&gt;age&lt;/code&gt; property on our &lt;code&gt;person&lt;/code&gt;. Obviously we want to make sure that &lt;code&gt;age&lt;/code&gt; is at least 0 and probably less than 110 (sounds reasonable :P), well how do you do this?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validation before assigning the property?&lt;ul&gt;
&lt;li&gt;That&amp;#39;ll work, but what if we&amp;#39;re exposing it to external API&amp;#39;s? How can we enforce the validation to them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Functions as properties&lt;/h3&gt;
&lt;p&gt;The general way which this problem is solved is to rather than use assignable properties you use functions as properties, making your code look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = (function() {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _age;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        &lt;span class=&quot;comment&quot;&gt;//firstName, lastName, etc&lt;/span&gt;
        age: function(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt;) {
              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; !== undefined &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) {
                _age = &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt;;
              } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;comment&quot;&gt;//Raise an error&lt;/span&gt;
              }
              &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _age;
        }
    }
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we use the &lt;code&gt;age&lt;/code&gt; property like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;person&lt;span class=&quot;preprocessor&quot;&gt;.age&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(person&lt;span class=&quot;preprocessor&quot;&gt;.age&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;; //outputs 27&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this isn&amp;#39;t really &lt;em&gt;that&lt;/em&gt; bad, the main pain point to it is that we now have a different way to assign the value, we do it through a function invocation rather than through an assignment statement. This can come to light if you&amp;#39;re writing a JavaScript templating engine, you need to check if the &lt;em&gt;property&lt;/em&gt; is actually a property or a function property. But we do get some nice stuff like the fact that in JavaScript you don&amp;#39;t need to do overloads so we can have the one function perform both the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; operation for our property.&lt;/p&gt;
&lt;p&gt;Libraries such as &lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; use this pattern for properties to do their UI binding but it can cause confusion, like in KnockoutJS if you want to bind to a property you&amp;#39;d do something like this: &lt;code&gt;data-bind=&amp;quot;css: { someClass: someBoolean }&amp;quot;&lt;/code&gt; which Knockout will understand it&amp;#39;s an observable property and bind to the result of the function, but if you want to use the &lt;strong&gt;false&lt;/strong&gt; value you need to do &lt;code&gt;data-bind=&amp;quot;css: { someClass: !someBoolean() }&amp;quot;&lt;/code&gt;. Note that this time it&amp;#39;s &lt;strong&gt;invoked the property as a function&lt;/strong&gt; rather than just using the property.&lt;/p&gt;
&lt;p&gt;The can be a bit confusing and I&amp;#39;ve seen more than one developer (including myself) getting stumped as to why their bindings weren&amp;#39;t working only to realise that it&amp;#39;d because they are binding to &lt;code&gt;!someBoolean&lt;/code&gt; which equates to &lt;code&gt;!function() { }&lt;/code&gt; rather than the &lt;strong&gt;result&lt;/strong&gt; of the function. It&amp;#39;s a very face-palm moment.&lt;/p&gt;
&lt;h1&gt;Introducing ES5 properties&lt;/h1&gt;
&lt;p&gt;As part of the ECMAScript 5 spec the concept of properties was addresses and has resulted in the &lt;code&gt;Object.defineProperty&lt;/code&gt; API (and an API to define multiple at once, being &lt;code&gt;Object.defineProperties&lt;/code&gt;) and this allows us to (among other things) define &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; method bodies for our properties.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s revisit our &lt;code&gt;person.age&lt;/code&gt; property example from above, but do it using an ECMAScript 5 property:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = (function() {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _age;

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newPerson = { 
        firstName: &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;,
        lastName: &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;
    };

    Object.defineProperty(newPerson, &lt;span class=&quot;string&quot;&gt;'age'&lt;/span&gt;, {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: function() { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _age; },
        &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;: function(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;) {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;) {
                _age = &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;comment&quot;&gt;//raise error&lt;/span&gt;
            }
        }
    });

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newPerson;
})();
person.age = &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;;
console.log(person.age);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you can see here the difference between the &lt;em&gt;function property&lt;/em&gt; and the ES5 property.&lt;/p&gt;
&lt;p&gt;With ES5 the property with a function body &lt;em&gt;looks just like a public field&lt;/em&gt;. Now there&amp;#39;s a few other things you can do here, such as make properties read-only and exclude them from &lt;code&gt;for...in&lt;/code&gt; loops, and for that check out the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;MDN&lt;/a&gt; (you can also do body-less properties), but it makes it very easy to build smarts into your objects. Also like .NET if you want to provide a &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt; you need to have a backing store, but that&amp;#39;s easy to get around with closure scope.&lt;/p&gt;
&lt;p&gt;So that covers a basic look ES5 properties. Now back to our bad idea...&lt;/p&gt;
&lt;h1&gt;Implementing INotifyPropertyChange in JavaScript&lt;/h1&gt;
&lt;p&gt;As I demonstrated above it is possible to add a body to your properties let&amp;#39;s do something with that idea.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not familiar with &lt;code&gt;INotifyPropertyChang*&lt;/code&gt; then you should read the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx&quot;&gt;MSDN&lt;/a&gt; &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanging.aspx&quot;&gt;docs&lt;/a&gt;. The &lt;strong&gt;TL;DR&lt;/strong&gt; is that you use trigger the &lt;code&gt;Changing&lt;/code&gt; event before you assign the property and then the &lt;code&gt;Changed&lt;/code&gt; event after it&amp;#39;s assigned and the UI can react.&lt;/p&gt;
&lt;p&gt;As I said I think there&amp;#39;s a lot of value in this pattern, it&amp;#39;s just that as most Xaml devs will tell you implementing it is a real pain in the ass.&lt;/p&gt;
&lt;p&gt;So say you wanted to implement it in JavaScript, it&amp;#39;s not overly hard, ultimately we need to do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;Object.defineProperty(foo, '&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt;', {
    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;: function() { &lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt;; },
    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;: function(val) {
        propertyChanging(this, '&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt;');
        _&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt; = val;
        propertyChanged(this, '&lt;span class=&quot;keyword&quot;&gt;prop&lt;/span&gt;');    
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve ignored the guff code like what the &lt;code&gt;propertyChang*&lt;/code&gt; methods are doing as well as subscribing handlers to the events but you get the idea. This really don&amp;#39;t look any different to the C# version though does it? So what&amp;#39;s the point?&lt;/p&gt;
&lt;h2&gt;Making it better through the magic of JavaScript&lt;/h2&gt;
&lt;p&gt;As you can see there&amp;#39;s a lot of boilerplate code that you need to get this working. In .NET there&amp;#39;s no real way to avoid this (unless you do some magic under the covers). But one of the cool things about JavaScript being a dynamic language is that we can modify an object pretty damn easily. Let&amp;#39;s go back to our &lt;code&gt;person&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var person = {
    &lt;span class=&quot;method&quot;&gt;firstName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Aaron'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;lastName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Powell'&lt;/span&gt;,
    &lt;span class=&quot;method&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now imagine that I want to implement my JavaScript version of &lt;code&gt;INotifyPropertyChang*&lt;/code&gt; on it so that my UI can react whenever I update the values, but I don&amp;#39;t want to be going through and writing this all out myself, I&amp;#39;ve got a bunch of objects that I want to &lt;em&gt;promote&lt;/em&gt; to implementing the interfaces.&lt;/p&gt;
&lt;p&gt;Well since JavaScript doesn&amp;#39;t actually have interfaces in the language it&amp;#39;s a bit tricky, and this is where my funky little script comes in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hello Xamlizer!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I&amp;#39;ve created a little JavaScript code snippet which I&amp;#39;ve called &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/1318702&quot;&gt;Xamlizer&lt;/a&gt;&lt;/strong&gt; that&amp;#39;ll take an object and implement &lt;code&gt;INotifyPropertyChang*&lt;/code&gt; on it. Now the script isn&amp;#39;t really that smart, all it does is goes through all the properties of the object and then converts them into properties that implement our pattern.&lt;/p&gt;
&lt;p&gt;You can then use it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var person = &lt;span class=&quot;tuple&quot;&gt;{
    first&lt;span class=&quot;variable&quot;&gt;Name&lt;/span&gt;: '&lt;span class=&quot;variable&quot;&gt;Aaron&lt;/span&gt;',
    last&lt;span class=&quot;variable&quot;&gt;Name&lt;/span&gt;: '&lt;span class=&quot;variable&quot;&gt;Powell&lt;/span&gt;',
    age: &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;
}&lt;/span&gt;;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;xamlizer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(person)&lt;/span&gt;;
&lt;span class=&quot;title&quot;&gt;person&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;addPropertyChanging&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;(object, property) &lt;span class=&quot;tuple&quot;&gt;{
    console.&lt;span class=&quot;function_name&quot;&gt;log&lt;/span&gt;('&lt;span class=&quot;variable&quot;&gt;Property&lt;/span&gt; ' + property + 'changing');
}&lt;/span&gt;);

person.age = &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we go, we&amp;#39;ve got a script that&amp;#39;ll turn our normal JavaScript objects into something that can notify subscribers when the property changes.&lt;/p&gt;
&lt;p&gt;If you dig into the code for Xamlizer you&amp;#39;ll see that it doesn&amp;#39;t do anything really complex, it just modifies some properties. &lt;em&gt;Note: As I said it&amp;#39;s not really that smart, it actually modifies anything public on the object, so if you have a function that is public it might get crazy :P. But hey, it&amp;#39;s just demo code!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And if you want to see it in action check out the &lt;a href=&quot;http://jsfiddle.net/slace/Zemxm/&quot;&gt;jsfiddle&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Well this wraps up our look at the limitations in how you have to do properties in ES3, the changes which ES5 provides you with (although their usefulness at the moment is debatable since we have to support ES3 browsers for a while still) and finished off with looking at how to implement a generic library to change fields to properties with debatable usefulness.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Tips for travelling as a geek</title>
            <link href="/posts/2011-10-12-tips-for-travelling-as-a-geek.html"/>
            <updated>2011-10-12T00:00:00.000Z</updated>
            <id>/posts/2011-10-12-tips-for-travelling-as-a-geek.html</id>
            <content type="html">&lt;p&gt;Anyone who follows me on &lt;a href=&quot;http://twitter.com/slace&quot;&gt;twitter&lt;/a&gt; will have probably noticed that in the last two weeks I&amp;#39;ve been tweeting with a geolocation in Vietnam. If you&amp;#39;re really smart you may have worked out that I was on holidays over there!&lt;/p&gt;
&lt;p&gt;I had a bit of tech with me, an iPad, iPhone, laptop and 2 kindles so I thought I&amp;#39;d share some of my experiences and tips for travelling as a geek.&lt;/p&gt;
&lt;h1&gt;Stay connected&lt;/h1&gt;
&lt;p&gt;Something that I find is very useful when travelling is having access to the internet. It allows me to do those useful things such as email/ skype my parents, use google maps and check in on foursquare.&lt;/p&gt;
&lt;p&gt;So my first pointer when going overseas is work out how you plan to stay connected. Most hotels I&amp;#39;ve stayed in recently have had free wifi so if that&amp;#39;s good enough for you then check out the places you plan to stay. Also a lot of cafe&amp;#39;s and bars (particularly ones targeting travellers) offer free wifi so that can allow you your mid-day twitter fix.&lt;/p&gt;
&lt;p&gt;The other option is picking up a local sim. I&amp;#39;ve been to the USA, Denmark and Vietnam this year and all those countries have prepaid sims which you can pick up and drop into your device. For the USA check out things like &lt;a href=&quot;http://www.wireless.att.com/cell-phone-service/go-phones/index.jsp#fbid=xkUQSfBVUcY&quot;&gt;GoPhone&lt;/a&gt; from AT&amp;amp;T. In Denmark I picked up a sim card from the post office (don&amp;#39;t remember who the provider was though) for 99 Danish Krone that lasted for 1 week and in Vietnam I got a sim for a month for the whole of $1USD!&lt;/p&gt;
&lt;p&gt;So before you go check out the country and you&amp;#39;ll probably find an easy way to pick up a sim card. We found this really useful in Vietnam as it meant we could look up an address rather than relying on shitty maps in guide books, saving an argument or two with the girlfriend :P.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before you go for a local sim card make sure your phone is network unlocked. I ended up in Denmark with a network locked phone and my sim wasn&amp;#39;t usable in it :(&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Internet beats books&lt;/h1&gt;
&lt;p&gt;Like a studious traveller we picked up our copy of the &lt;a href=&quot;http://www.lonelyplanet.com/&quot;&gt;Lonely Planet&lt;/a&gt; but by the end of the trip we were only use it for one purpose, the find out where &lt;strong&gt;not&lt;/strong&gt; to go.&lt;/p&gt;
&lt;p&gt;Now I don&amp;#39;t want to rag on Lonely Planet too much but it&amp;#39;s really hard for a print book to keep pace with the internet. Instead we turned to good ol&amp;#39; technology (since I had a local sim) to find out stuff to do. Now I want to talk about two sites that are invaluable if you&amp;#39;re travelling.&lt;/p&gt;
&lt;h2&gt;Wikitravel&lt;/h2&gt;
&lt;p&gt;Url: &lt;a href=&quot;http://wikitravel.org&quot;&gt;&lt;a href=&quot;http://wikitravel.org&quot;&gt;http://wikitravel.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wikitravel is the wikipedia of travel websites. It&amp;#39;s got lots of great tips on history of a place, what to see while you&amp;#39;re there how to get in, out and around. The kind of stuff you can get out of a Lonely Planet guide book but it is able to be kept up to date (say around pricing of cabs). It can even give you those handy tips that you wont find out until you&amp;#39;ve hit them (such as Melbourne trams having coin-only ticket machines).&lt;/p&gt;
&lt;p&gt;That said be careful of vandalism/ shameless self promotion on the site, you&amp;#39;ll occasionally find companies promoting themselves on there. It&amp;#39;s generally pretty easy to pick them though.&lt;/p&gt;
&lt;h2&gt;Trip Advisor&lt;/h2&gt;
&lt;p&gt;Url: &lt;a href=&quot;http://www.tripadvisor.com/&quot;&gt;&lt;a href=&quot;http://www.tripadvisor.com/&quot;&gt;http://www.tripadvisor.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trip Advisor is a &lt;strong&gt;must&lt;/strong&gt; when you&amp;#39;re planning your trip and when you&amp;#39;re away. The site is full of user generated content and allows for people to enter information about places they&amp;#39;ve visited, stayed, eaten at, etc and then vote against them.&lt;/p&gt;
&lt;p&gt;Again this is something that kills Lonely Planet. Where Lonely Planet can only have a finite amount of places listed and gets out of date, a site based around generate content can reflect the actual mood of travellers to an area.&lt;/p&gt;
&lt;p&gt;We used this to find recommendations for hotels, places to eat or just check out others opinions for places we got recommended by friends.&lt;/p&gt;
&lt;h1&gt;Have adapters&lt;/h1&gt;
&lt;p&gt;It goes without saying that when you&amp;#39;re travelling having local power adapters is a valuable thing but what I found more valuable was carrying a multi-port adapter. Don&amp;#39;t go crazy and take like a 10 port power board if you only have 2 devices but they can be handy (particularly if you&amp;#39;re travelling for work as well as play).&lt;/p&gt;
&lt;h1&gt;Travel insurance&lt;/h1&gt;
&lt;p&gt;It goes without saying that you should have travel insurance with you but make sure that your policy will cover you for the devices you are carrying with you. Last thing you want is to lose your laptop and find out that you only had $500 of coverage!&lt;/p&gt;
&lt;p&gt;I went with &lt;a href=&quot;http://www.travelinsurancedirect.com.au/&quot;&gt;Travel Insurance Direct&lt;/a&gt; who have a reasonably well priced set of plans including yearly world-wide plans.&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Get a local sim&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;http://wikitravel.org&quot;&gt;WikiTravel&lt;/a&gt; and &lt;a href=&quot;http://www.tripadvisor.com/&quot;&gt;Trip Advisor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make sure your travel insurance will cover your gear&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Rebuilding JavaScript Quiz in Nodejs</title>
            <link href="/posts/2011-10-12-rebuilding-javascript-quiz-in-nodejs.html"/>
            <updated>2011-10-12T00:00:00.000Z</updated>
            <id>/posts/2011-10-12-rebuilding-javascript-quiz-in-nodejs.html</id>
            <content type="html">&lt;p&gt;A few months back I &lt;a href=&quot;http://www.aaron-powell.com/javascript/javascript-quiz&quot;&gt;announced a new site&lt;/a&gt; I was running called &lt;a href=&quot;http://javascriptquiz.com&quot;&gt;JavaScript Quiz&lt;/a&gt;. When I started to site it was to be done quickly so I chose an out-of-the-box blogging platform, that being &lt;a href=&quot;http://posterous.com/&quot;&gt;Posterous&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then I&amp;#39;ve come to realise that it &lt;em&gt;isn&amp;#39;t&lt;/em&gt; the platform I want wanting to go with. One of my main problems with it is its comment management system. Anyone who has submitted an answer to me will know what I&amp;#39;m talking about, the excessive spam which you end up with when I do publish all the answers.&lt;/p&gt;
&lt;p&gt;Well because of this I decided to move away from Posterous and go with a new platform. As my new platform I decided that I wanted to use &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; because well this is a JavaScript quiz so why not use JavaScript!&lt;/p&gt;
&lt;h1&gt;The software&lt;/h1&gt;
&lt;p&gt;When looking at what I wanted to do with the new site I decided I wanted something that was easy to create a site in and also easy to update content it. A lot of people are raving about &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; of recent, which is a Ruby &lt;em&gt;CMS&lt;/em&gt; which runs a flat file system website and Markdown as an editing language.&lt;/p&gt;
&lt;p&gt;This seemed ideal, JavaScript Quiz isn&amp;#39;t a big site nor is it a dynamic site so something that runs off flat files is very ideal. I&amp;#39;m also quite a fan of Markdown (&lt;a href=&quot;http://funnelweblog.com/what-is-markdown&quot;&gt;which we use in FunnelWeb&lt;/a&gt;) so being able to write my posts in that is very nice an idea.&lt;/p&gt;
&lt;p&gt;So I started looking for a Node.js alternative as I&amp;#39;d prefer to use something than write it myself (&lt;a href=&quot;http://www.aaron-powell.com/umbraco/so-long-and-thanks-for-all-the-fish&quot;&gt;I&amp;#39;m a bit over developing a CMS at the moment&lt;/a&gt;) and I came across a project called &lt;a href=&quot;https://github.com/balupton/docpad&quot;&gt;Docpad&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Intro to Docpad&lt;/h2&gt;
&lt;p&gt;Docpad is a Node.js CMS in a similar style to Jekyll written by a guy from Sydney named &lt;a href=&quot;http://twitter.com/balupton&quot;&gt;Benjamin Lupton&lt;/a&gt; (and I like supporting home-grown software so that was a big plus). It&amp;#39;s got a good set of templating engines to pick from so you don&amp;#39;t have to use raw HTML if you want something a bit more cool for your templates (more shortly) and best of all it&amp;#39;s shit simple to use.&lt;/p&gt;
&lt;p&gt;You need to install the following &lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt; packages and you&amp;#39;re off and running:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coffee-script&lt;/li&gt;
&lt;li&gt;express&lt;/li&gt;
&lt;li&gt;docpad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;#39;re better off installing both &lt;code&gt;coffee-script&lt;/code&gt; and &lt;code&gt;docpad&lt;/code&gt; globally since they both have executables but you don&amp;#39;t have to.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I had problems using Node.js with cygwin on Windows, I couldn&amp;#39;t get &lt;code&gt;docpad&lt;/code&gt; to install but that seemed to be a cygwin issue as it worked fine on both my Linux and OSX machines, just something to watch out for :).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t a Docpad tutorial, go check out the &lt;a href=&quot;https://github.com/balupton/docpad/wiki&quot;&gt;docs&lt;/a&gt; if you want to learn more.&lt;/p&gt;
&lt;h2&gt;Templates&lt;/h2&gt;
&lt;p&gt;As I mentioned Docpad has a number of different HTML templating engines available, you can use &lt;a href=&quot;https://github.com/sstephenson/eco&quot;&gt;Eco&lt;/a&gt;, &lt;a href=&quot;https://github.com/visionmedia/jade&quot;&gt;Jade&lt;/a&gt;, &lt;a href=&quot;http://haml-lang.com/&quot;&gt;Haml&lt;/a&gt; or the one I chose, &lt;a href=&quot;http://coffeekup.org/&quot;&gt;CoffeeKup&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;CoffeeKup is a way of using &lt;a href=&quot;http://coffeescript.org&quot;&gt;CoffeeScript&lt;/a&gt; as a HTML template engine. It&amp;#39;s pretty cool and it means that you&amp;#39;re able to do some really powerful things with the templates and interacting with the document you&amp;#39;re rendering. Plus it means that we&amp;#39;re using JavaScript/ CofeeScript for most of our site (one language to rule them all!).&lt;/p&gt;
&lt;h2&gt;CSS&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not using any of the CSS templating engines (despite submitting a request for &lt;a href=&quot;https://github.com/aeosynth/ccss&quot;&gt;CCSS&lt;/a&gt; to be included :P) mainly because I&amp;#39;m using &lt;a href=&quot;http://h5bp.com&quot;&gt;HTML5 Boiler Plate&lt;/a&gt;&amp;#39;s css and I don&amp;#39;t want to have to convert it every time I upgrade.&lt;/p&gt;
&lt;p&gt;The rest of the CSS is really basic and I&amp;#39;ve just cobbled together so I can get the site live, expect it to be improved as I get more time.&lt;/p&gt;
&lt;h1&gt;Fixing commenting&lt;/h1&gt;
&lt;p&gt;As I mentioned commenting is something that was really a pain to anyone who was entering the quiz each week as you&amp;#39;d get spammed up with emails (don&amp;#39;t worry, I got them all as well so it was &lt;strong&gt;very&lt;/strong&gt; annoying). Good news is that the new site wont have this problem, I&amp;#39;ve gone with &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; for comments (still moderated) which means that it should be much nicer an experience.&lt;/p&gt;
&lt;p&gt;From an admin point of view it&amp;#39;s much nicer as well :).&lt;/p&gt;
&lt;h1&gt;Hosting&lt;/h1&gt;
&lt;p&gt;One advantage of Posterous was that it was a hosted solution so it wasn&amp;#39;t costing me any more and this is something that I wanted to ensure didn&amp;#39;t change. I decided that I&amp;#39;d go with &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; for my hosting since they have &lt;a href=&quot;http://blog.heroku.com/archives/2011/6/22/the_new_heroku_2_node_js_new_http_routing_capabilities/&quot;&gt;offered Node.js hosting for a while now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that I am also using Git to store the site and I have it hosted on GitHub at the moment (sorry it&amp;#39;s not a public repo :P).&lt;/p&gt;
&lt;p&gt;Because of this I have a nice workflow of being able to edit my content, run it through the Docpad &amp;#39;compiler&amp;#39; and commit in the generated HTML. This then goes up to Heroku and just runs off the flat files.&lt;/p&gt;
&lt;p&gt;Ideally I&amp;#39;d not be committing the generated files and have part of the app startup code generate the files but so far I&amp;#39;ve had nothing but trouble getting it working that way. Heroku&amp;#39;s cedar stack (which is where node.js runs) &lt;strong&gt;is&lt;/strong&gt; a writable file system but something still seems to be going amiss (and it&amp;#39;s not exactly easy to dig into...).&lt;/p&gt;
&lt;h1&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;So this is how I&amp;#39;ve gone about the relaunch of JavaScript Quiz. The new site should be active soon (awaiting the DNS to change over :P). I wont be porting the old comments so the old site will stay active. Hopefully I&amp;#39;ve got the redirects all sorted out (yes the 404 page is pretty shit so far :P). Hopefully this provides a nice new home for the site.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating a ViewModel from the server</title>
            <link href="/posts/2011-09-18-creating-vms-from-server.html"/>
            <updated>2011-09-18T00:00:00.000Z</updated>
            <id>/posts/2011-09-18-creating-vms-from-server.html</id>
            <content type="html">&lt;p&gt;If you&amp;#39;ve been doing much work with &lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; you&amp;#39;ll probably see examples where the code looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; todoViewModel = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ko.observableArray([&lt;span class=&quot;string&quot;&gt;'Item 1'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Item 2'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Item 3'&lt;/span&gt;]);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.selectedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ko.observable(&lt;span class=&quot;string&quot;&gt;'Item 1'&lt;/span&gt;);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;m trying to point out here is that the &lt;code&gt;viewModel&lt;/code&gt; is being defined in JavaScript and that the items within it are coded into your JavaScript.&lt;/p&gt;
&lt;p&gt;While you can argue that this is demo code and it should only be treated as such something I&amp;#39;ve noticed is &lt;em&gt;there isn&amp;#39;t any other examples&lt;/em&gt;. I haven&amp;#39;t seen any example where they are talking about getting the data initially from the server for their viewModel.&lt;/p&gt;
&lt;p&gt;So how do you approach this? In this article I&amp;#39;m going to look at how to create a viewModel from the server using ASP.Net MVC.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I&amp;#39;m talking about doing a viewModel as part of the initial page load since generally speaking you&amp;#39;ll have been doing data layer interaction as part of the request. Building a viewModel using an AJAX request is a different story and I wont be covering.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;From the server to the client&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s get started with an example of our controller:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TaskController&lt;/span&gt; :&lt;/span&gt; Controller
{
    public ActionResult Index()
    {
        var vm = new TaskViewModel
                     {
                         Tasks = new[] { new Task(&lt;span class=&quot;string&quot;&gt;&quot;Write Blog Post&quot;&lt;/span&gt;), new Task(&lt;span class=&quot;string&quot;&gt;&quot;Publish Blog Post&quot;&lt;/span&gt;) }
                     };

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; View(vm);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m just going to have a reasonably simple ViewModel that just has a collection of tasks that I want to display as part of my KnockoutJS-built UI but the tasks are to be pulled in from my data layer (obviously this is demo code and it&amp;#39;s hard coded so you&amp;#39;ll have to use your imagination for that part :P).&lt;/p&gt;
&lt;p&gt;For the view I&amp;#39;m just creating something that is very simple for the task list:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit:addTask&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    Add task: &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;'value:taskToAdd, valueUpdate: &quot;afterkeydown&quot;'&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;enable: taskToAdd().length &amp;gt; 0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Add&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Your values:&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;multiple&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;multiple&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;options:tasks&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;click: removeSelected, enable: hasTasks&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Remove&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;click: sortTasks, enable: hasTasks&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Sort&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a conundrum, how do I as part of my response create a KnockoutJS ViewModel that I can then use in my UI?&lt;/p&gt;
&lt;h1&gt;It&amp;#39;s all about the serialization&lt;/h1&gt;
&lt;p&gt;When I was prototyping this for my current project I remembers that &lt;a href=&quot;http://twitter.com/#!/shazwazza&quot;&gt;Shannon&lt;/a&gt; has mentioned that he&amp;#39;d done something similar himself and I&amp;#39;ve shamelessly taken his approach and am using it :P.&lt;/p&gt;
&lt;p&gt;His approach was to use a serializer to create a JSON object from the model (there was some other stuff in the skype message he sent me but I&amp;#39;ll confess to having not read that :P). For the serialization you can use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer.aspx&quot;&gt;JavaScriptSerializer&lt;/a&gt;, the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.datacontractjsonserializer.aspx&quot;&gt;DataContractJsonSerializer&lt;/a&gt; or &lt;a href=&quot;http://json.codeplex.com/&quot;&gt;Json.NET&lt;/a&gt;. Personally I prefer Json.NET and it&amp;#39;s what I&amp;#39;ll be using in this demo.&lt;/p&gt;
&lt;p&gt;So let&amp;#39;s make a little HTML helper to do this for us:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HtmlHelperExtensions&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IHtmlString KnockoutFrom&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; HtmlHelper&amp;lt;T&amp;gt; html, T obj)
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; serializer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonSerializer
                             {
                                 ContractResolver = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CamelCasePropertyNamesContractResolver()
                             };

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlString(JObject.FromObject(obj, serializer).ToString());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we&amp;#39;re doing here is creating an instance of the &lt;code&gt;JsonSerializer&lt;/code&gt; from Json.NET and telling it to use the &lt;code&gt;CamelCasePropertyNamesContractResolver&lt;/code&gt;. This is why I like Json.NET, it allows me to convert my .NET naming conventions into JavaScript conventions without a lot of effort. Lastly we just return the serialized object. Not really anything special happening in here.&lt;/p&gt;
&lt;p&gt;Now in my View I can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@Html.&lt;span class=&quot;function&quot;&gt;KnockoutFrom(Model)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm but this isn&amp;#39;t really helpful, we&amp;#39;re just getting out JSON blob in our view, I still would have to do a bunch of work to actually make it usable and especially if I am doing this on a lot of pages it&amp;#39;s a lot of code that I&amp;#39;d prefer not to do every time. So let&amp;#39;s see if we can improve our extension method.&lt;/p&gt;
&lt;h1&gt;Setting up the viewModel&lt;/h1&gt;
&lt;p&gt;So what do we want from our improved version? Well I&amp;#39;d like the observables to be set up for me and I&amp;#39;d like it to avoid global variables.&lt;/p&gt;
&lt;p&gt;To do this what I&amp;#39;m going to do is update my extension method to use the &lt;a href=&quot;http://knockoutjs.com/documentation/plugins-mapping.html&quot;&gt;Knockout Mapping plugin&lt;/a&gt;. This plugin is really sweet as it allows me to map a JSON object into a KnockoutJS object and is great when you&amp;#39;re working with AJAX data, you can easily pull down some data from the server and then use the plugin to extend it into your ViewModel.&lt;/p&gt;
&lt;p&gt;In this case though I&amp;#39;m going to use it to map the JSON version of our server ViewModel into our KnockoutJS one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    public static IHtmlString KnockoutFrom&amp;lt;T&amp;gt;(this HtmlHelper&amp;lt;T&amp;gt; html, T obj)
    {
        var serializer = new JsonSerializer
                             {
                                 ContractResolver = new CamelCasePropertyNamesContractResolver()
                             }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var sb = new StringBuilder()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;(function() {&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var json = JObject&lt;span class=&quot;preprocessor&quot;&gt;.FromObject&lt;/span&gt;(obj, serializer)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;var vm = ko.mapping.fromJS(&quot;&lt;/span&gt; + json + &lt;span class=&quot;string&quot;&gt;&quot;);&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ko.applyBindings(vm);&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;})();&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        return new HtmlString(sb&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main updates here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#39;m using a &lt;code&gt;StringBuilder&lt;/code&gt; to build up some JavaScript (normally I hate server-generated JavaScript but here it serves a good purpose)&lt;/li&gt;
&lt;li&gt;I&amp;#39;m creating an &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot;&gt;immediately-invoked function expression&lt;/a&gt; to prevent leakage&lt;/li&gt;
&lt;li&gt;I&amp;#39;m doing my binding straight away, hiding the need for that too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Excellent, this works, at least it works to an extent as we still have a few problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if I want to restrict where the binding happens?&lt;/li&gt;
&lt;li&gt;What about adding methods to my KnockoutJS viewModel?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Improving interactivity&lt;/h1&gt;
&lt;p&gt;While the above will work fine for simple scenarios it&amp;#39;s not great if you have a complex UI that you want to work with, and realistically it&amp;#39;s not likely you&amp;#39;ll have a viewModel you don&amp;#39;t want  to extend with dependantObservables or anything, so let&amp;#39;s do some refactoring.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to change the end of my extension method to look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;var vm = ko.mapping.fromJS(&quot;&lt;/span&gt; + json + &lt;span class=&quot;string&quot;&gt;&quot;);&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var type = obj&lt;span class=&quot;preprocessor&quot;&gt;.GetType&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var ns = JavaScriptify(type&lt;span class=&quot;preprocessor&quot;&gt;.Namespace&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;namespace('&quot;&lt;/span&gt; + ns + &lt;span class=&quot;string&quot;&gt;&quot;');&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(ns + &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt; + JavaScriptify(type&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot; = vm;&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        sb&lt;span class=&quot;preprocessor&quot;&gt;.Append&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;})();&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        return new HtmlString(sb&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve done here is instead of doing the bindings I&amp;#39;m just going to create a global object which the viewModel will be assigned to (but I am &lt;a href=&quot;http://www.aaron-powell.com/slace-core-javascript-library&quot;&gt;namespacing&lt;/a&gt; it so it&amp;#39;s a bit better). This object I can then interact with in my JavaScript and add methods/ properties/ etc to myself.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m also using a helper method to make the .NET namespace &amp;amp; type names friendlier for JavaScript:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; string JavaScriptify(string s)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; string&lt;span class=&quot;variable&quot;&gt;.Join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, s&lt;span class=&quot;variable&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(x =&amp;gt; x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.ToString&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.ToLower&lt;/span&gt;() + x&lt;span class=&quot;variable&quot;&gt;.Substring&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, x&lt;span class=&quot;variable&quot;&gt;.Length&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this new extension method I can update my View to play around with the viewModel before binding:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&amp;lt;script&amp;gt;
    @&lt;span class=&quot;transposed_variable&quot;&gt;Html.&lt;/span&gt;KnockoutFrom(Model)

    $(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;cell&quot;&gt;{
        var model = knockout.serverViewModels.models.taskViewModel;

        model.addTask = function() {}&lt;/span&gt;;
        &lt;span class=&quot;transposed_variable&quot;&gt;model.&lt;/span&gt;taskToAdd = new &lt;span class=&quot;transposed_variable&quot;&gt;ko.&lt;/span&gt;observable(&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;);
        &lt;span class=&quot;transposed_variable&quot;&gt;model.&lt;/span&gt;removeSelected = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;;
        &lt;span class=&quot;transposed_variable&quot;&gt;model.&lt;/span&gt;hasTasks = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;;
        &lt;span class=&quot;transposed_variable&quot;&gt;model.&lt;/span&gt;sortTasks = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;;

        &lt;span class=&quot;transposed_variable&quot;&gt;ko.&lt;/span&gt;applyBindings(model);
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This wraps up my post on how to convert your server ViewModel into something that can be used in your KnockoutJS, allowing you to push all data down in the initial request rather than subsequent ones.&lt;/p&gt;
&lt;p&gt;Thanks to Shannon for the initial idea, hopefully this little extension will make it even easier.&lt;/p&gt;
&lt;p&gt;If you want to grab the code it is &lt;a href=&quot;http://hg.apwll.me/knockoutjs-server-viewmodels&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One final note, the Json.NET serializer &lt;strong&gt;does&lt;/strong&gt; support the &lt;code&gt;DataMember&lt;/code&gt; attributes, so you can also selectively include properties from your server ViewModel by attributing them too.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>So long and thanks for all the fish</title>
            <link href="/posts/2011-09-15-so-long-and-thanks-for-all-the-fish.html"/>
            <updated>2011-09-15T00:00:00.000Z</updated>
            <id>/posts/2011-09-15-so-long-and-thanks-for-all-the-fish.html</id>
            <content type="html">&lt;p&gt;So it saddens me to say but as of today I will not be contributing to Umbraco, I have been stepped down from my contributor role on the project.&lt;/p&gt;
&lt;p&gt;I wish Shannon, Alex, Matt, Niels and the rest of the team the best for the Umbraco 5 release.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Going beyond the browser with QUnit - Part 2</title>
            <link href="/posts/2011-09-05-qunit-beyond-the-browser-part-2.html"/>
            <updated>2011-09-05T00:00:00.000Z</updated>
            <id>/posts/2011-09-05-qunit-beyond-the-browser-part-2.html</id>
            <content type="html">&lt;p&gt;In my &lt;a href=&quot;http://www.aaron-powell.com/javascript/qunit-beyond-the-browser-part-1&quot;&gt;last post&lt;/a&gt; I talked about what you need to do if you want to monitor changes and run tests automatically under Node.js but there was a few assumptions in there. One of the main assumptions I had was that you weren&amp;#39;t doing any DOM interactions.&lt;/p&gt;
&lt;p&gt;In this part we&amp;#39;re going to look at how you can use DOM interactions in your QUnit tests and still run them under Node.js.&lt;/p&gt;
&lt;h1&gt;Working in a DOM-less JavaScript environment&lt;/h1&gt;
&lt;p&gt;One thing that can trip people up when they first come to Node.js is they don&amp;#39;t realise that JavaScript isn&amp;#39;t tied to the browser. In reality JavaScript is just a language that happens to be used predominately in the browser, meaning that the &lt;code&gt;window&lt;/code&gt; object isn&amp;#39;t part of the JavaScript specification, it&amp;#39;s just something that&amp;#39;s part of the runtime.&lt;/p&gt;
&lt;p&gt;So when you&amp;#39;re running your code under Node.js you can&amp;#39;t just &lt;code&gt;document.getElementById&lt;/code&gt; or &lt;code&gt;$(&amp;#39;#foo&amp;#39;)&lt;/code&gt;. Uh-oh, how are we going to run tests against the DOM, after all if you want to test a library like Knockout.Unobtrusive you kind of need to be able to do that!&lt;/p&gt;
&lt;p&gt;Well don&amp;#39;t fear, the smart people in the Node.js community have solved this problem with a nice little package, &lt;a href=&quot;http://search.npmjs.org/#/jsdom&quot;&gt;jsdom&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;jsdom is essentially an implementation of the DOM in Node.js allowing you do create a &lt;code&gt;document&lt;/code&gt; object, a &lt;code&gt;window&lt;/code&gt; object and interact with it as though it was in a browser.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: There are limitations to &lt;code&gt;jsdom&lt;/code&gt;, it doesn&amp;#39;t do everything you&amp;#39;d want but it&amp;#39;s a great way to do basic interactions such as we want to do in our tests.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Updating out test runner&lt;/h1&gt;
&lt;p&gt;In my previous post I showed you how to set up a basic test runner in your Cakefile. For our tests we&amp;#39;re going to need to add some new stuff into our runtime (Node.js) and to do that we can use the &lt;code&gt;dep&lt;/code&gt; option when we set up the runner:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;test = 
  &lt;span class=&quot;symbol&quot;&gt;deps:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;./tests/test-env.js&quot;&lt;/span&gt;]
  &lt;span class=&quot;symbol&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./&lt;span class=&quot;subst&quot;&gt;#{output}&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt;.js&quot;&lt;/span&gt;,
  &lt;span class=&quot;symbol&quot;&gt;tests:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./tests/&lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt;.tests.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;m going to do is create a &lt;code&gt;test-env.js&lt;/code&gt; file which will be executed before the tests, allowing me to set up our pesudo-DOM.&lt;/p&gt;
&lt;h1&gt;Creating our test environment&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m going to set up a few new variables:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsdom = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'jsdom'&lt;/span&gt;),
    fs = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;),
    dom = fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&quot;./tests/knockout.unobtrusive.tests.html&quot;&lt;/span&gt;).toString(),
    document = jsdom.jsdom(dom, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, { features: { QuerySelector: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; } }),
    window = document.createWindow(),
    navigator = {
      userAgent: &lt;span class=&quot;string&quot;&gt;'node-js'&lt;/span&gt;
    };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First thing I&amp;#39;m doing here is importing &lt;code&gt;jsdom&lt;/code&gt; and &lt;code&gt;fs&lt;/code&gt;. This will mean I can work with &lt;code&gt;jsdom&lt;/code&gt; and the file system.&lt;/p&gt;
&lt;p&gt;The next step is to pull in our test HTML page as a string. We&amp;#39;ve got some base HTML which we&amp;#39;ll be interacting with during our tests. This is also the HTML we&amp;#39;d be running in our browser for our browser-based tests because keep in mind we want to share our tests between Node.js and the browser.&lt;/p&gt;
&lt;p&gt;Now that we have our DOM as a string we&amp;#39;ll create our &lt;code&gt;document&lt;/code&gt; object from it. One other thing we are doing is specifying that we do want &lt;code&gt;querySelector&lt;/code&gt; and &lt;code&gt;querySelectorAll&lt;/code&gt; available, and this is done with the &lt;code&gt;{ features: { QuerySelector: true } }&lt;/code&gt; argument to &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lastly we need to create a &lt;code&gt;window&lt;/code&gt; object and a &lt;code&gt;navigator&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;So when we have all these local variables we need to make sure that they&amp;#39;ll be available everywhere:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;global&lt;span class=&quot;preprocessor&quot;&gt;.window&lt;/span&gt; = window&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
global&lt;span class=&quot;preprocessor&quot;&gt;.navigator&lt;/span&gt; = navigator&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
global&lt;span class=&quot;preprocessor&quot;&gt;.document&lt;/span&gt; = window&lt;span class=&quot;preprocessor&quot;&gt;.document&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike the browser Node.js&amp;#39;s global object is called &lt;code&gt;global&lt;/code&gt;, once we add our variables to that they&amp;#39;ll be available in any of the other files we use in the runner.&lt;/p&gt;
&lt;h1&gt;Augmenting our tests&lt;/h1&gt;
&lt;p&gt;In the original set of tests that were in the Knockout.Unobtrusive project there was a heavy reliance on jQuery. Now admittedly there is a &lt;a href=&quot;http://search.npmjs.org/#/jquery&quot;&gt;jQuery npm package&lt;/a&gt; but I couldn&amp;#39;t get it running on Node.js 0.4.10 but it&amp;#39;s not really important (I&amp;#39;d prefer not to rely on jQuery in my tests anyway).&lt;/p&gt;
&lt;p&gt;So I&amp;#39;m going to do a check for jQuery (our Node.js tests wont have it):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; get, getAll, camalizer, &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;,&lt;/span&gt;
  &lt;span class=&quot;typedef&quot;&gt;dataMatcher = /&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;-&lt;span class=&quot;container&quot;&gt;(.+)&lt;/span&gt;/,&lt;/span&gt;
  dashAlphaMatcher = /-([a-z])/ig;

&lt;span class=&quot;title&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;typedef&quot;&gt;typeof $ !== 'undefined') &lt;span class=&quot;container&quot;&gt;{
  &lt;span class=&quot;title&quot;&gt;getAll&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt; = $;
}&lt;/span&gt; else &lt;span class=&quot;container&quot;&gt;{
  &lt;span class=&quot;title&quot;&gt;camalizer&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;letter&lt;/span&gt;) {
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;letter&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;toUpperCase&lt;/span&gt;();
  }&lt;/span&gt;;&lt;/span&gt;

  &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = function&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;el&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;attribute&lt;/span&gt;,
        &lt;span class=&quot;title&quot;&gt;attributes&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;attributes&lt;/span&gt;,
        &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; = {}&lt;/span&gt;;&lt;/span&gt;

    for(var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = attributes.length; i &amp;lt; il; i++) {
      attribute = attributes[i];
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;typedef&quot;&gt;dataMatcher.test&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;attribute&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
        &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;attribute&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;dataMatcher&lt;/span&gt;)[1].&lt;span class=&quot;title&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;dashAlphaMatcher&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;camalizer&lt;/span&gt;)] = &lt;span class=&quot;title&quot;&gt;attribute&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;;
      }&lt;/span&gt;&lt;/span&gt;
    }

    return function(attr) {
      return &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;[attr];&lt;/span&gt;
    };
  };

  get = function(id) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(id.indexOf('#') === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
      id = id.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, id.length);
    }

    var el = document.getElementById(id);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!el) {
      el = document.querySelectorAll(id)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
    }

    el.&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;el&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;
    return el;
  };

  getAll = function(selector) {
    var el,
        elements = document.querySelectorAll(selector);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(elements[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; !elements[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;typedef&quot;&gt;dataset) &lt;span class=&quot;container&quot;&gt;{
      &lt;span class=&quot;title&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;=0, &lt;span class=&quot;title&quot;&gt;il&lt;/span&gt;=&lt;span class=&quot;title&quot;&gt;elements&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;title&quot;&gt;il&lt;/span&gt;; &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;++) {
        &lt;span class=&quot;title&quot;&gt;el&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;elements&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;];
        &lt;span class=&quot;title&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;el&lt;/span&gt;);
      }&lt;/span&gt;&lt;/span&gt;
    }

    elements.each = function(fn) {
      var that = this;
      that.forEach(function(value, index) {
        fn.apply(that, [index, value]);
      });
    };

    return elements;
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok so the obvious first step is to check for jQuery and then we&amp;#39;re deferring everything to that, but instead of just exposing &lt;code&gt;$&lt;/code&gt; I&amp;#39;m going to expose two methods, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;getAll&lt;/code&gt;. The former will be useful for getting a single element, the latter for multiple elements.&lt;/p&gt;
&lt;p&gt;Next I&amp;#39;m creating two helper methods, the first being a camel case method (handy for working with &lt;code&gt;data-*&lt;/code&gt; and the second simulating the &lt;code&gt;.data&lt;/code&gt; API which you get from jQuery itself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The data method isn&amp;#39;t exactly the same as using the $.data API, but I&amp;#39;m only replicating what I need at the current time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In our simulated data API it will iterate through all the attributes and find any &lt;code&gt;data-*&lt;/code&gt; ones (using a regex to look for them) then turning them into camel cased strings (like the spec, so &lt;code&gt;data-foo-bar&lt;/code&gt; becomes &lt;code&gt;fooBar&lt;/code&gt;). It&amp;#39;s probably a bit more complicated than it needs to be but it works nicely as I want.&lt;/p&gt;
&lt;p&gt;The only other interesting point of note is that the &lt;code&gt;getAll&lt;/code&gt; method will also simulate the &lt;code&gt;.each&lt;/code&gt; API from jQuery so that we can use those loops in our tests.&lt;/p&gt;
&lt;p&gt;And there you go you&amp;#39;re essentially done. Once you replace all your usages of jQuery in your tests for the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;getAll&lt;/code&gt; API then you&amp;#39;ll be ready to roll!&lt;/p&gt;
&lt;h1&gt;Be careful with DOM manipulations&lt;/h1&gt;
&lt;p&gt;Something that I got tripped up with when porting the Knockout.Unobtrusive tests was that you don&amp;#39;t want your DOM manipulations to persist across the tests.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;ve done work with QUnit you&amp;#39;ll know that if you a DOM element with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;qunit-fixture&lt;/code&gt; then it&amp;#39;ll get rebuilt after every single test.&lt;/p&gt;
&lt;p&gt;Well there&amp;#39;s a problem, the Node.js implementation of QUnit isn&amp;#39;t designed to work with the DOM so naturally this doesn&amp;#39;t work. But it&amp;#39;s an easy one to get around, QUnit exposes a method called &lt;code&gt;reset&lt;/code&gt; that you can use to force a reset of the &lt;code&gt;qunit-fixture&lt;/code&gt; element. Since the Node.js one doesn&amp;#39;t worry about the DOM it doesn&amp;#39;t have this method.&lt;/p&gt;
&lt;p&gt;To implement this ourselves we&amp;#39;ll create a &lt;code&gt;module&lt;/code&gt; for our test that we can have a &lt;code&gt;teardown&lt;/code&gt; method on the end of it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;QUnit.module(&lt;span class=&quot;string&quot;&gt;'createBindings'&lt;/span&gt;, {
  teardown: &lt;span class=&quot;reserved&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!QUnit.reset) {
      &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; the reset
    }
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: you need to either access &lt;code&gt;module&lt;/code&gt; via &lt;code&gt;QUnit.module&lt;/code&gt; or assign that to &lt;code&gt;module&lt;/code&gt; yourself because &lt;code&gt;module&lt;/code&gt; is a reserved word in Node.js.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the reset method I&amp;#39;ve created a helper function back in the &lt;code&gt;test-env.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;global&lt;span class=&quot;preprocessor&quot;&gt;.rebuildDom&lt;/span&gt; = function() {
  global&lt;span class=&quot;preprocessor&quot;&gt;.document&lt;/span&gt; = jsdom&lt;span class=&quot;preprocessor&quot;&gt;.jsdom&lt;/span&gt;(dom, null, { features: { QuerySelector: true } })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
  global&lt;span class=&quot;preprocessor&quot;&gt;.window&lt;/span&gt; = global&lt;span class=&quot;preprocessor&quot;&gt;.document&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.createWindow&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will rebuild both the &lt;code&gt;document&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt; objects from the original DOM string. So we can update our module like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;variable&quot;&gt;QUnit&lt;/span&gt;.module('create&lt;span class=&quot;variable&quot;&gt;Bindings&lt;/span&gt;', &lt;span class=&quot;tuple&quot;&gt;{
  teardown: &lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;function_name&quot;&gt;ction&lt;/span&gt;() &lt;span class=&quot;tuple&quot;&gt;{
    if(!&lt;span class=&quot;variable&quot;&gt;QUnit&lt;/span&gt;.reset) &lt;span class=&quot;tuple&quot;&gt;{
      &lt;span class=&quot;function_name&quot;&gt;rebuildDom&lt;/span&gt;();
    }&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m aware that this has been a bit of a long and complicated post but hopefully it gives you some starting points for how you could approach doing online &amp;amp; offline JavaScript tests.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Slides from WEB203</title>
            <link href="/posts/2011-09-04-slides.html"/>
            <updated>2011-09-04T00:00:00.000Z</updated>
            <id>/posts/2011-09-04-slides.html</id>
            <content type="html">&lt;p&gt;I recently spoke at Teched AU in a session called Chasing the Evolving Web.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the assets from the talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/get/presentations/auteched/WEB203_Powell.pptx&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://channel9.msdn.com/Events/TechEd/Australia/Tech-Ed-Australia-2011/web203&quot;&gt;Recording&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here&amp;#39;s a list of the tools which I looked at in my presentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://h5bp.com&quot;&gt;HTML5 Boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://modernizr.com&quot;&gt;Modernizr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yepnopejs.com&quot;&gt;YepNope.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://raphaeljs.com&quot;&gt;RaphaelJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amplifyjs.com&quot;&gt;AmplifyJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://knockoutjs.com&quot;&gt;Knockout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Going beyond the browser with QUnit - Part 1</title>
            <link href="/posts/2011-09-03-qunit-beyond-the-browser-part-1.html"/>
            <updated>2011-09-03T00:00:00.000Z</updated>
            <id>/posts/2011-09-03-qunit-beyond-the-browser-part-1.html</id>
            <content type="html">&lt;p&gt;When it comes to unit testing my JavaScript my preferred framework is &lt;a href=&quot;http://docs.jquery.com/Qunit&quot;&gt;QUnit&lt;/a&gt;. If you&amp;#39;re not familiar with QUnit it&amp;#39;s the test framework for &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; so I think it&amp;#39;s reasonably well up to the task of testing JavaScript.&lt;/p&gt;
&lt;p&gt;Recently I wrote an article on a &lt;a href=&quot;http://www.aaron-powell.com/javascript/knockoutjs-preparser&quot;&gt;preparser I&amp;#39;ve written for Knockout&lt;/a&gt;. Interestingly enough at the same time Brendan Satrom had &lt;a href=&quot;http://bsatrom.github.com/Knockout.Unobtrusive/&quot;&gt;the same idea&lt;/a&gt;. I quite like the approach that Brendan has taken so I decided to have a poke around in the code and see if we could even merge the two projects.&lt;/p&gt;
&lt;p&gt;The first thing I noticed when looking into the code was that it was written using &lt;a href=&quot;http://jashkenas.github.com/coffee-script/&quot;&gt;CoffeeScript&lt;/a&gt;. The second thing I noticed was that the tests were all written using QUnit and were to be run in the browser. But there was a bit of a nuisance, the tests were against the compiles JavaScript, not the raw CoffeeScript (it was running against the generated file), to do any modifications, and test them, you have to copy the CoffeeScript to the online compiler, the back to the compiled file and then run the tests.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m sure you can see where the problems can come into this solution.&lt;/p&gt;
&lt;p&gt;Well I&amp;#39;ve done a few small projects using CoffeeScript in the past and I&amp;#39;ve also included some tests into it so I decided at having a crack at getting this to work.&lt;/p&gt;
&lt;h1&gt;Getting your tools together&lt;/h1&gt;
&lt;p&gt;So to get started I&amp;#39;m using Windows and I&amp;#39;m going to be using Node.js to do the browser-less coding. Although I&amp;#39;m aware there is a version of Node.js for Windows I&amp;#39;m still using a self-compiled version with cygwin because &lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt; works fine under cygwin but not with the Windows compiled version.&lt;/p&gt;
&lt;p&gt;Additionally I&amp;#39;m going to be using a few npm packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://search.npmjs.org/#/coffee-script&quot;&gt;CoffeeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://search.npmjs.org/#/qunit&quot;&gt;QUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://search.npmjs.org/#/colors&quot;&gt;Colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Getting started by watching cake&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve done much work with CoffeeScript you&amp;#39;ll probably have come across the concept of a &lt;a href=&quot;http://jashkenas.github.com/coffee-script/#cake&quot;&gt;Cakefile&lt;/a&gt;, if you haven&amp;#39;t, a Cakefile is a CoffeeScript version of a &lt;a href=&quot;http://rake.rubyforge.org/files/doc/rakefile_rdoc.html&quot;&gt;Rakefile&lt;/a&gt; (or MSBuild is a similar concept if you&amp;#39;re coming from .NET just a lot more horrible), so I&amp;#39;m going to start off by using Cake to create a file system watcher.&lt;/p&gt;
&lt;p&gt;The basic idea if I want to have a Cake task which will monitor for changes on the file system (specifically our CoffeeScript file) and when a change happens we&amp;#39;ll compile it to JavaScript and run our tests.&lt;/p&gt;
&lt;p&gt;First off I&amp;#39;ll define some constants in our Cakefile:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;fs = &lt;span class=&quot;value&quot;&gt;require 'fs'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;path = &lt;span class=&quot;value&quot;&gt;require 'path'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;CoffeeScript = &lt;span class=&quot;value&quot;&gt;require 'coffee-script'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;file = &lt;span class=&quot;value&quot;&gt;'knockout.unobtrusive'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;source = &lt;span class=&quot;value&quot;&gt;'coffee'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;output = &lt;span class=&quot;value&quot;&gt;'js'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next it&amp;#39;s time to setup our &lt;code&gt;watch&lt;/code&gt; task:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;task &lt;span class=&quot;comment&quot;&gt;'watch', 'Watch prod source files and build changes', -&amp;gt;&lt;/span&gt;
    msg = &lt;span class=&quot;string&quot;&gt;&quot;Watching for changes in #{source}&quot;&lt;/span&gt;
    console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; msg

    fs.watchFile &lt;span class=&quot;string&quot;&gt;&quot;#{source}/#{file}.coffee&quot;&lt;/span&gt;, (curr, prev) -&amp;gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; +curr.mtime isnt +prev.mtime
            console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Saw change in #{source}/#{file}.coffee&quot;&lt;/span&gt;
            try
              invoke &lt;span class=&quot;comment&quot;&gt;'build'&lt;/span&gt;
              console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;'build complete'&lt;/span&gt;
              invoke &lt;span class=&quot;comment&quot;&gt;'tests'&lt;/span&gt;
            catch e
              msg = &lt;span class=&quot;comment&quot;&gt;'Error with CoffeeScript build'&lt;/span&gt;
              console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; msg
              console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;#39;re using the standard &lt;code&gt;watchFile&lt;/code&gt; method in Node and in the callback we&amp;#39;ll ensure that the change times aren&amp;#39;t equal (double-checking for false positives) and if there&amp;#39;s a valid change we want to execute the following two tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally we&amp;#39;re wrapping this in a &lt;code&gt;try/ catch&lt;/code&gt; so that if it fails we can provide a useful message but have the watcher keep running (say if you save while you&amp;#39;re half-way through a change you wont get a major failure or anything).&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s have a look at the &lt;code&gt;build&lt;/code&gt; task. This task will allow us to compile our coffee file into JavaScript. This is just going to be a standard Cake task as well so you can use it elsewhere if you want:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;task &lt;span class=&quot;string&quot;&gt;'build'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;builds &lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt;&quot;&lt;/span&gt;, -&amp;gt;
    console.log &lt;span class=&quot;string&quot;&gt;&quot;building &lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt; from coffeescript&quot;&lt;/span&gt;
    code = fs.readFileSync &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{source}&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt;.coffee&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'utf8'&lt;/span&gt;
    fs.writeFile &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{output}&lt;/span&gt;/&lt;span class=&quot;subst&quot;&gt;#{file}&lt;/span&gt;.js&quot;&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;CoffeeScript&lt;/span&gt;.compile code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Node (well JavaScript) is a callback-based programming model generally speaking you&amp;#39;ll be doing asynchronous operations, even with the file system. Node has provided some changes though to allow for &lt;em&gt;synchronous&lt;/em&gt; programming. In this case I&amp;#39;m going to be using the synchronous read operation. The main reason for this is so that I don&amp;#39;t have to pass around a callback which will then do the tests (this could get messy in the Cakefile).&lt;/p&gt;
&lt;p&gt;Once the read operation is completed we pipe the output into the CofeeScript compiler API (which we can call from CoffeeScript/ JavaScript) and write the output of that into a JavaScript file.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;build&lt;/code&gt; task is done the next step in our watcher is to call out to our test runner. As mentioned above I wanted to reuse the QUnit tests that already shipped in source of Knockout.Unobtrusive I plan to use the Node.js implementation of QUnit. It&amp;#39;s rather simple and again we&amp;#39;ll create a Cake task:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;task &lt;span class=&quot;attribute&quot;&gt;'tests&lt;/span&gt;', &lt;span class=&quot;string&quot;&gt;&quot;run tests for #{file}&quot;&lt;/span&gt;, -&amp;gt;
    console.log &lt;span class=&quot;attribute&quot;&gt;'Time&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; some tests! '
    runner = require &lt;span class=&quot;attribute&quot;&gt;'qunit&lt;/span&gt;'
    sys = require &lt;span class=&quot;attribute&quot;&gt;'sys&lt;/span&gt;'
    colors = require &lt;span class=&quot;attribute&quot;&gt;'colors&lt;/span&gt;'
    test = 
      code: &lt;span class=&quot;string&quot;&gt;&quot;./#{output}/#{file}.js&quot;&lt;/span&gt;,
      tests: &lt;span class=&quot;string&quot;&gt;&quot;./tests/#{file}.tests.js&quot;&lt;/span&gt;

    runner.options.summary = false

    &lt;span class=&quot;keyword&quot;&gt;report&lt;/span&gt; = (r) -&amp;gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r.errors
        msg = &lt;span class=&quot;string&quot;&gt;&quot;Uh oh, there were errors&quot;&lt;/span&gt;
        sys.puts msg.bold.red
      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
        msg = &lt;span class=&quot;attribute&quot;&gt;'All&lt;/span&gt; test pass'
        sys.puts msg.green

    runner.run test, &lt;span class=&quot;keyword&quot;&gt;report&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So a few things of note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&amp;#39;re using the runner which comes with QUnit for Node.js&lt;/li&gt;
&lt;li&gt;We&amp;#39;re creating an object with our tests info which includes:&lt;ul&gt;
&lt;li&gt;The file under test&lt;/li&gt;
&lt;li&gt;The tests to execute&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#39;m suppressing the summary (we execute the tests a lot so there&amp;#39;s no need to see it)&lt;/li&gt;
&lt;li&gt;Lastly there&amp;#39;s a callback for when the runner finishes which will either dump a message on success or failure (with a pretty colour!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the point of view of the Cakefile that&amp;#39;s really all we have a need for, we&amp;#39;ve got our watcher up and running and we can just kick it off:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;cake&lt;/span&gt; watch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now whenever we edit our CoffeeScript file it&amp;#39;ll go nicely.&lt;/p&gt;
&lt;h1&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;So this wraps up the first part of migrating our tests out of the browser to make a more automated series of JavaScript tests.&lt;/p&gt;
&lt;p&gt;Next time we&amp;#39;ll look at how to deal with some of the limitations of working in a DOM-less environment.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Slides from WUX202</title>
            <link href="/posts/2011-09-03-slides.html"/>
            <updated>2011-09-03T00:00:00.000Z</updated>
            <id>/posts/2011-09-03-slides.html</id>
            <content type="html">&lt;p&gt;I recently spoke at Teched NZ in a session called Chasing the Evolving Web.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the slides from the talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/get/presentations/tenz11/Chasing-the-evolving-web.pptx&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here&amp;#39;s a list of the tools which I looked at in my presentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://h5bp.com&quot;&gt;HTML5 Boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://modernizr.com&quot;&gt;Modernizr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yepnopejs.com&quot;&gt;YepNope.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://raphaeljs.com&quot;&gt;RaphaelJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://easeljs.com&quot;&gt;EaselJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amplifyjs.com&quot;&gt;AmplifyJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://knockoutjs.com&quot;&gt;Knockout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://backbonejs.com&quot;&gt;Backbone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>JavaScript: A story</title>
            <link href="/posts/2011-08-09-a-story.html"/>
            <updated>2011-08-09T00:00:00.000Z</updated>
            <id>/posts/2011-08-09-a-story.html</id>
            <content type="html">&lt;p&gt;Everyone use to notice the old war veteran that sat on the corner. His uniform was tatty and he’s always be spouting about his heyday with lines like “Don’t  you remember my role in the first browser war” and “If it wasn’t for me VBScript would be the language of choice of the browser!”. We’d look at him with pity, throw a few dollars his way and carry on with our day but never really got to know him. People who weren&amp;#39;t from around here would come by occasionally and notice our friend and look on bemused, wondering why we put up with him.&lt;/p&gt;
&lt;p&gt;As the years went by we’d still see him sitting on his corner, but gradually he was looking less dishevelled. We still threw him money and chuckled to ourselves when he’d say “You’re not the only one who does this, everyone listens to me, I’m the most popular out there”. I mean who could really take the guy seriously? We&amp;#39;d put up with him for years now, we knew some of his quirks but we never really paid him the time of day unless we wanted to get lost in pain and suffering.&lt;/p&gt;
&lt;p&gt;Then one day he was gone; there was no dishevelled old man sitting on our corner in tatty military gear. We felt sad, had our old friend passed away at the end of the first decade in the 21st century? Should we have paid more attention to him; maybe actually loved him? In reflection maybe he wasn&amp;#39;t so crazy; maybe he did have a point; maybe there really was a time when his uniform sparkled and we&amp;#39;d have looked at him with awe.&lt;/p&gt;
&lt;p&gt;But then we noticed someone looking at us. We turned to see a proud looking man in a shiny new military uniform and as we looked longer we noticed that it wasn’t some stranger looking at us but it was our old friend JavaScript. He was now sober, he’d been given a shave, a shiny new uniform and an array of new armaments. But what was most important was that he was looking for action.&lt;/p&gt;
&lt;p&gt;He saw us looking back at him, he smiled and shouted “I’m ready for round two, let&amp;#39;s get this browser war started”.&lt;/p&gt;
&lt;p&gt;And with a quiet dignity he wandered off to help us fight the next generation of wars.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Introducing the KnockoutJS preparser</title>
            <link href="/posts/2011-08-09-knockoutjs-preparser.html"/>
            <updated>2011-08-09T00:00:00.000Z</updated>
            <id>/posts/2011-08-09-knockoutjs-preparser.html</id>
            <content type="html">&lt;p&gt;In my &lt;a href=&quot;/javascript/why-i-don-t-like-knockoutjs&quot;&gt;previous post&lt;/a&gt; I outlined one of the biggest issues I have with &lt;a href=&quot;http://knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; as being its WPF/ Silverlight binding syntax and how it requires you to put JavaScript into your HTML.&lt;/p&gt;
&lt;p&gt;Now I&amp;#39;m a pretty firm believe that if you are going to criticise something then you better make it constructive. Just saying &amp;quot;I don&amp;#39;t like &lt;code&gt;blah&lt;/code&gt;&amp;quot; isn&amp;#39;t helpful to a) the author of &lt;code&gt;blah&lt;/code&gt; or b) people wanting to learn more about &lt;code&gt;blah&lt;/code&gt;, so I decided that I would follow up my criticism of KnockoutJS with a way &lt;em&gt;I&lt;/em&gt; would go about fixing it.&lt;/p&gt;
&lt;h1&gt;Introducing the KnockoutJS preparser&lt;/h1&gt;
&lt;p&gt;To address my issue with KnockoutJS use of JavaScript in HTML I started looking at how I would go about it and the solution I kept coming back to was using the &lt;code&gt;data-*&lt;/code&gt; attributes to describe in my HTML an intention. I decided that if I could do this in a good, convention approach then I should be able to translate it back into a KnockoutJS binding with minimal impact.&lt;/p&gt;
&lt;p&gt;Out of this idea (and a challenge from my colleague &lt;a href=&quot;http://duc.as&quot;&gt;Ducas&lt;/a&gt;) I set about taking my idea from my brain and putting in code.&lt;/p&gt;
&lt;p&gt;Essentially what I came up with was taking this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-ko-text&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And turning it into this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text: firstName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that you take &lt;code&gt;data-ko-*&lt;/code&gt; as a prefix and use that to describe what could (well will...) become your binding syntax. Once getting this done I threw the code up on github and you can grab it from the &lt;a href=&quot;https://github.com/aaronpowell/KnockoutJS-Pre-parser&quot;&gt;KnockoutJS Pre-Parser&lt;/a&gt; project page.&lt;/p&gt;
&lt;h1&gt;What does it address&lt;/h1&gt;
&lt;p&gt;The ultimate goal is to be able to use the &lt;code&gt;data-ko-*&lt;/code&gt; to describe out what you want in your HTML and the pre-parser will pick that up and &lt;em&gt;Knockout-ify&lt;/em&gt; it for you. Ideally I&amp;#39;d like to support all &lt;strong&gt;common&lt;/strong&gt; scenarios and so far I support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic bindings with text, css, value, etc&lt;/li&gt;
&lt;li&gt;Template name binding&lt;/li&gt;
&lt;li&gt;Pre-parser syntax within a template&lt;/li&gt;
&lt;li&gt;Template options (but not completely, you still have to embed JSON in your template options attribute. I added it about 3 hours ago so it&amp;#39;s still being worked on :P)&lt;/li&gt;
&lt;li&gt;Event handler wire ups (if you want a complex handler like defining scope, etc you&amp;#39;ll still have to embed JavaScript for now, I&amp;#39;m trying to work out how to get around that)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How to use it&lt;/h1&gt;
&lt;p&gt;If you really want to know how to use it I suggest you read the &lt;a href=&quot;https://github.com/aaronpowell/KnockoutJS-Pre-parser/blob/master/README.md&quot;&gt;Readme&lt;/a&gt; or the tests but the quick and dirty is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Include it after you include KnockoutJS&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pre-parser will actually hijack the &lt;code&gt;ko.applyBinding&lt;/code&gt; method and perform the pre-parsing at that point, no custom stuff needs to be done to make it work :).&lt;/p&gt;
&lt;h1&gt;Where to get it&lt;/h1&gt;
&lt;p&gt;At the moment the only way to get it is via &lt;a href=&quot;https://github.com/aaronpowell/KnockoutJS-Pre-parser&quot;&gt;Github&lt;/a&gt;, depending on interest/ motivation I&amp;#39;ll put it up on Nuget for people to get it via as well.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So this wraps up my introduction to the KnockoutJS Pre-parser and an approach I am taking to address one of the issues which I have with KnockoutJS. Feel free to give me any feedback you have on the library and the idea in general.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Are you going to Teched NZ?</title>
            <link href="/posts/2011-08-08-teched-nz-2011.html"/>
            <updated>2011-08-08T00:00:00.000Z</updated>
            <id>/posts/2011-08-08-teched-nz-2011.html</id>
            <content type="html">&lt;p&gt;Because if you are you can see me not once, not twice, but three time, and really, who wouldn&amp;#39;t want to see me that much :P.&lt;/p&gt;
&lt;p&gt;Come down to &lt;a href=&quot;http://newzealand.msteched.com/topic/details/COS204&quot;&gt;COS204 - Umbraco and Azure&lt;/a&gt; to learn about how awesome Umbraco is and how it really does love Azure.&lt;/p&gt;
&lt;p&gt;Or if web is more your thing jump on over to &lt;a href=&quot;http://newzealand.msteched.com/topic/details/WUX202&quot;&gt;WUX202 - Chasing the Evolving Web&lt;/a&gt; to learn about being a modern web developer and &lt;a href=&quot;http://newzealand.msteched.com/topic/details/WUX203&quot;&gt;WUX203 - JavaScript Pitfalls for the .NET Developer&lt;/a&gt; to learn about common problems encountered when doing JavaScript development and how to avoid them.&lt;/p&gt;
&lt;p&gt;See you in Auckland!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Are you going to Teched Australia?</title>
            <link href="/posts/2011-08-08-teched-au-2011.html"/>
            <updated>2011-08-08T00:00:00.000Z</updated>
            <id>/posts/2011-08-08-teched-au-2011.html</id>
            <content type="html">&lt;p&gt;Because if you are you get to see me not once but twice! Woot!&lt;/p&gt;
&lt;p&gt;Come down and check out &lt;a href=&quot;http://australia.msteched.com/topic/details/WEB203&quot;&gt;WEB203 - Chasing the Evolving Web&lt;/a&gt; and learn how to keep ahead of the game when it comes to doing the latest and greatest on the web.&lt;/p&gt;
&lt;p&gt;In addition you should come to &lt;a href=&quot;http://australia.msteched.com/topic/details/DEV305&quot;&gt;DEV305 - An MMO in 45 Minutes: Developing for 2 screens and a cloud without being cut&lt;/a&gt; for some utter bedlam with myself, &lt;a href=&quot;http://lzcd.com&quot;&gt;Luke Drumm&lt;/a&gt;, &lt;a href=&quot;http://www.richard-banks.org&quot;&gt;Richard Banks&lt;/a&gt; and &lt;a href=&quot;http://azure.snagy.name/blog/&quot;&gt;Steve Nagy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you there!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why I don't like KnockoutJS</title>
            <link href="/posts/2011-08-08-why-i-don-t-like-knockoutjs.html"/>
            <updated>2011-08-08T00:00:00.000Z</updated>
            <id>/posts/2011-08-08-why-i-don-t-like-knockoutjs.html</id>
            <content type="html">&lt;p&gt;A few times I&amp;#39;ve ruffled a few features by making the statement that I am not a fan of &lt;a href=&quot;http://knockoutjs.com/&quot;&gt;KnockoutJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me start by clarifying a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I think the &lt;em&gt;concept&lt;/em&gt; of KnockoutJS is a good one&lt;/li&gt;
&lt;li&gt;It&amp;#39;s nothing against Steve Sanderson, to have come up with it in the first place is impressive&lt;/li&gt;
&lt;li&gt;This is my opinion and I will still recommend that others try it and form their own opinions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok so on to backing up my statement and let me start by showing you why I am not a fan:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;click: registerClick, enable: !hasClickedTooManyTimes()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can&amp;#39;t see it? I&amp;#39;ll remove some of the &amp;#39;guff&amp;#39;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;-bind=&quot;click: registerClick, enable: !hasClickedTooManyTimes&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right there, the &lt;code&gt;data-bind=&amp;quot;...&amp;quot;&lt;/code&gt; is what I don&amp;#39;t like, the fact that I&amp;#39;m embedding &lt;em&gt;potentially large amounts of JavaScript in my HTML&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So ultimately what it comes down to is that I have an issue with the binding syntax that is used with KnockoutJS. Now I (think) understand &lt;em&gt;why&lt;/em&gt; it is like this, KnockoutJS has a lot of relationships with the WPF/ Sliverlight binding idea (and MVVM obviously) so it &lt;em&gt;makes sense&lt;/em&gt; to people coming from those backgrounds. Me, I&amp;#39;m &lt;strong&gt;not&lt;/strong&gt; a WPF/ Silverlight developer, never have been (I did try my hand at WPF but just didn&amp;#39;t get very far...).&lt;/p&gt;
&lt;h2&gt;Why does it bother me?&lt;/h2&gt;
&lt;p&gt;You may be asking yourself that if the problem I have is with the syntax and not concept then where&amp;#39;s the real issue, heck it&amp;#39;s only a small part of it.&lt;/p&gt;
&lt;p&gt;And this is where it gets into the &amp;quot;don&amp;#39;t take my word, use it yourself&amp;quot; part of the post. I&amp;#39;m a web purest and I believe there should be a strict separation between your UI and your functionality, even in the client aspect. This means that your HTML file should only contain HTML and your JavaScript file is where the client &amp;#39;brain&amp;#39; resides.&lt;/p&gt;
&lt;p&gt;Having been around ASP.Net for a while (and particularly Web Forms) the idea of obtrusive JavaScript is something that you grow up with. You&amp;#39;re use to seeing in-line event handlers, JavaScript tacked at the bottom of the page, etc. This is a smell, your HTML file is no longer responsible for what HTML is, a mark-up language, it&amp;#39;s starting to try and become self aware, to intrinsically know that when I click a button some JavaScript has to be fired, that kind of stuff.&lt;/p&gt;
&lt;p&gt;This is smarts that I don&amp;#39;t want my HTML to have.&lt;/p&gt;
&lt;p&gt;In the web we&amp;#39;ve also seen a shift on this in recent years away from have JavaScript in HTML, and even within Microsoft we&amp;#39;ve seen them acknowledge this with the jQuery unobtrusive validation plugin which was released with MVC3. &lt;/p&gt;
&lt;p&gt;The shift has seen us using HTML to describe the intention. Using the jQuery unobtrusive validation as an example we use the &lt;code&gt;data-validate-*&lt;/code&gt; attributes to describe our validation rules, and then we use JavaScript to convey those rules into a functional concept.&lt;/p&gt;
&lt;p&gt;This results in a clean separation between HTML and JavaScript with HTML going back to just describing intention and JavaScript taking those intentions and running with it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post has basically outlined my primary grievance with KnockoutJS. As stated, I don&amp;#39;t have a problem with the &lt;em&gt;concept&lt;/em&gt; of it, the idea of two-way binding is quite nice but what&amp;#39;s required to achieve that is where the issue lies.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Having fun and digging deep into amplifyjs and the request API</title>
            <link href="/posts/2011-07-12-fun-in-amplifyjs-request.html"/>
            <updated>2011-07-12T00:00:00.000Z</updated>
            <id>/posts/2011-07-12-fun-in-amplifyjs-request.html</id>
            <content type="html">&lt;p&gt;Have you played with &lt;a href=&quot;http://amplifyjs.com&quot;&gt;amplifyjs&lt;/a&gt; yet? Played with it&amp;#39;s cool way of handling requests?&lt;/p&gt;
&lt;p&gt;I really like the way you can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;//&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; our &lt;span class=&quot;type&quot;&gt;JavaScript&lt;/span&gt; bootstrapper
&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.define(&lt;span class=&quot;string&quot;&gt;&quot;searchTwitter&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ajax&quot;&lt;/span&gt;, {
    url: &lt;span class=&quot;string&quot;&gt;&quot;http://search.twitter.com/search.json?callback=?&quot;&lt;/span&gt;,
    &lt;span class=&quot;typedef&quot;&gt;dataType: &quot;jsonp&quot;,&lt;/span&gt;
    cache: &lt;span class=&quot;number&quot;&gt;30000&lt;/span&gt;
});

//&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; some other file
&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request('searchTwitter', { q:&lt;span class=&quot;string&quot;&gt; 'amplifyjs'&lt;/span&gt; }, function (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
    //&lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returned&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;
}&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s nice and clean a way to setup request pointers which you can then mock out for testing purposes.&lt;/p&gt;
&lt;p&gt;But you know, it&amp;#39;s not as clean as I&amp;#39;d really like and if you know me you&amp;#39;ll know that I like to try and do something with an API that you&amp;#39;re &lt;strong&gt;not meant to do&lt;/strong&gt;. So while playing with amplify I decided to dive into the code and work at how it was mapping my defined requests to the method call and doing so I found something interesting (and well... fun!):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.resources.searchTwitter({
  &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;container&quot;&gt;{ &lt;span class=&quot;title&quot;&gt;q&lt;/span&gt;: '&lt;span class=&quot;title&quot;&gt;amplifyjs'&lt;/span&gt; }&lt;/span&gt;,&lt;/span&gt;
  success: function(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
    //&lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;returned&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;
  }&lt;/span&gt;&lt;/span&gt;
}, {});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep that&amp;#39;s right, the &lt;code&gt;request&lt;/code&gt; function has a &lt;strong&gt;public&lt;/strong&gt; property called &lt;code&gt;resources&lt;/code&gt;, which has properties added to it that represent the requests which have been defined.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using an &lt;code&gt;ajax&lt;/code&gt; request (as I defined at the start) you have two arguments to pass in:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The settings object, most of which are passed to &lt;a href=&quot;http://api.jquery.com/jQuery.ajax/&quot;&gt;&lt;code&gt;$.ajax&lt;/code&gt;&lt;/a&gt;. In this case I&amp;#39;m passing in the data object and a success callback, a bit more explicitly obviously&lt;/li&gt;
&lt;li&gt;I haven&amp;#39;t quite worked out what the 2nd parameter is for other than passing in an &lt;code&gt;abort&lt;/code&gt; handler in (but it does seem to be overridden at the end of the function anyway...)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Whether or not the knowledge that you can do this is kind of any use I don&amp;#39;t know, I just think it&amp;#39;s kind of cool :P.&lt;/p&gt;
&lt;h3&gt;Some points of note&lt;/h3&gt;
&lt;p&gt;The arguments of your method hanging off resources will depend on the &lt;em&gt;type of request&lt;/em&gt;. Amplifyjs has &lt;a href=&quot;http://amplifyjs.com/api/request/#built-in_types&quot;&gt;build in request types&lt;/a&gt; and supports custom types, so the arguments may be different, eg:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.&lt;span class=&quot;typedef&quot;&gt;types.foo = function&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;) {
      &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;('&lt;span class=&quot;title&quot;&gt;aww&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;!');
      &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;) {
        &lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;);
      }&lt;/span&gt;&lt;/span&gt;
    };
};

&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.define('bar',&lt;span class=&quot;string&quot;&gt; 'foo'&lt;/span&gt;, {});

&lt;span class=&quot;title&quot;&gt;amplify&lt;/span&gt;.request.resources.bar(function() { //just a function &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; an argument
    console.log('hey, it works!');
});&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This isn&amp;#39;t a documented feature so it &lt;strong&gt;works on my machine&lt;/strong&gt; and may not work ever again&lt;/li&gt;
&lt;li&gt;I offer no warranty on this code&lt;/li&gt;
&lt;li&gt;Custom request types must return a function (in fact any request types have to return a function)&lt;/li&gt;
&lt;li&gt;It&amp;#39;s your choice as to whether a &lt;code&gt;TypeError&lt;/code&gt; is better than the built in error handling&lt;/li&gt;
&lt;li&gt;This was really just a thought experiment to push an API to its limit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>JavaScript Quiz</title>
            <link href="/posts/2011-07-10-javascript-quiz.html"/>
            <updated>2011-07-10T00:00:00.000Z</updated>
            <id>/posts/2011-07-10-javascript-quiz.html</id>
            <content type="html">&lt;p&gt;Today I released a little website, &lt;a href=&quot;http://javascriptquiz.com&quot;&gt;&lt;a href=&quot;http://javascriptquiz.com&quot;&gt;http://javascriptquiz.com&lt;/a&gt;&lt;/a&gt;, which was inspired by &lt;a href=&quot;http://cssquiz.com&quot;&gt;&lt;a href=&quot;http://cssquiz.com&quot;&gt;http://cssquiz.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically it&amp;#39;s a site which I&amp;#39;ll put out JavaScript questions for people to tackle. If you have any ideas for questions which you&amp;#39;d like to see put out to the community feel free to drop me an email (I&amp;#39;m sure if you&amp;#39;re cluey you can find it on this site :P).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>My geek origin</title>
            <link href="/posts/2011-07-06-geek-origin.html"/>
            <updated>2011-07-06T00:00:00.000Z</updated>
            <id>/posts/2011-07-06-geek-origin.html</id>
            <content type="html">&lt;p&gt;In the spirits of &lt;a href=&quot;http://www.aaron-powell.com/about&quot;&gt;things you never needed to know about me&lt;/a&gt; I decided to share my &lt;a href=&quot;http://delicategeniusblog.com/?p=1292&quot;&gt;Geek Origin&lt;/a&gt; story with the world.&lt;/p&gt;
&lt;p&gt;When I was in late primary school (or maybe early high school, I&amp;#39;m not really sure, at this old age my mind is starting to go) I asked my parents to enroll me in a holiday program which involved playing with Lego and electronics.&lt;/p&gt;
&lt;p&gt;This was back in the mid-90&amp;#39;s so having access to a fully decked out Lego kit and PC connector wasn&amp;#39;t exactly the norm (wait, am I saying it now is :P) so having the opportunity to spend a whole lot of time just playing with it seemed like the most awesome idea in the world.&lt;/p&gt;
&lt;p&gt;So off I trotted to my holiday program where I was joined by a number of other kids my age and an instructor who gave us great piles of Lego, some command boards and showed us the basics of connecting it on the computer. We had some basic scenarios which we were to work through that involved making a merry-go-round that would stop after a period of time (and some others) but there was an more exciting prize on the horizon, if we finished early we got to have free time to do what we wanted.&lt;/p&gt;
&lt;p&gt;Now I&amp;#39;d always been someone who had to &lt;em&gt;know how it worked&lt;/em&gt;. My dad would bring old telephones home from work and give me a screw driver and let me go to town with tinkering (and more than one electrical shock). I successfully destroyed more than one old radio that I found on council pickup day by trying to figure out where all the wires were going. So when the promise of doing what I wanted with these strange combination of statements on a computer and a pile of Lego &lt;strong&gt;it was ON&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After completing the basic tasks I set about changing the parameters. What if I change &lt;strong&gt;this&lt;/strong&gt; number? Oh look it gets a lot faster, and if I combine it with a change to the looping statement I can make it go round one way a few times then reverse itself. We dubbed our creation the merry-go-round of death (c&amp;#39;mon, we were like 10 :P)!&lt;/p&gt;
&lt;p&gt;The power was intoxicating...&lt;/p&gt;
&lt;p&gt;But then the thrill started to die down, there&amp;#39;s only so much I can do with this merry-go-round, so I started looking for the next &lt;em&gt;big thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Outside the window of the community centre was an intersection, an intersection with traffic lights. So I sat there watching them and I knew what I had to do, I had to replicate them in Lego.&lt;/p&gt;
&lt;p&gt;I broke down my current creation, put together a basic Lego intersection and opened up a new command editor and got cracking. Before I knew it I had lights going on and off, all perfectly in sync with the lights outside our window. I marveled in the control I had over my own little intersection.&lt;/p&gt;
&lt;p&gt;When the day was done we got to print out our little programs (on a dot matrix printer mind you!) which I proudly showed my parents, who gave me the blank stare that these days I&amp;#39;m all to use to seeing :P.&lt;/p&gt;
&lt;p&gt;And this concludes my trip down memory lane to back where I fell in love with the power over computers programming has given me.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Introducing Postman - A JavaScript Messaging Library</title>
            <link href="/posts/2011-07-02-postman.html"/>
            <updated>2011-07-02T00:00:00.000Z</updated>
            <id>/posts/2011-07-02-postman.html</id>
            <content type="html">&lt;h1&gt;Prelude&lt;/h1&gt;
&lt;p&gt;Back in May I presented at DDD Melbourne on JavaScript design patterns. One of the patterns that I was talking about was the idea of &lt;a href=&quot;http://en.wikipedia.org/wiki/Publish/subscribe&quot;&gt;pub/ sub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me start by saying that this isn&amp;#39;t the &lt;a href=&quot;http://www.aaron-powell.com/javascript-eventmanager&quot;&gt;first time I have blogged about pub/ sub&lt;/a&gt;, it&amp;#39;s also not the first time I&amp;#39;d written one, but essentially I wrote the following code snippet on stage for the audience:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
  var cache = {}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

  function pub&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, args)&lt;/span&gt;&lt;/span&gt; {
    if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;!cache[name])&lt;/span&gt;&lt;/span&gt; {
      cache[name] = {
        subs = []
      }
    }
    for&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il=cache[name].subs.length&lt;span class=&quot;comment&quot;&gt;; i&amp;lt;il; i++) {&lt;/span&gt;
      cache[name].subs[i].apply&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, args)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
  }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

  function sub&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, fn)&lt;/span&gt;&lt;/span&gt; {
    if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;!cache[name])&lt;/span&gt;&lt;/span&gt; {
      cache[name] = {
        subs = []
      }
    }
    cache[name].subs.push&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
  }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

  this.pubsub = {
    pub: pub,
    sub: sub
  }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is short and to the point and with the addition of some error checking in it you could probably use that in a live environment.&lt;/p&gt;
&lt;h1&gt;Post-DDD&lt;/h1&gt;
&lt;p&gt;After the conference I decided that I wanted to revisit how write pub/ sub and essentially scrap the library I last wrote and write it again (for the record I &lt;em&gt;know&lt;/em&gt; there are plenty of existing JavaScript pub/ sub libraries out there already, but mine will be cooler, just read on :P).&lt;/p&gt;
&lt;p&gt;But something else I wanted to do, and use this project as a sandbox for it, was learn more about &lt;a href=&quot;http://coffeescript.org&quot;&gt;Coffeescript&lt;/a&gt;. If you haven&amp;#39;t heard about Coffeescript but are doing a lot of JavaScript then I suggest you give it a look. Essentially it&amp;#39;s a language on top of JavaScript which aims to remove some of the syntax guff that exists, turning JavaScript into a language that is very similar to Ruby.&lt;/p&gt;
&lt;p&gt;So I decided to start a new project, this would be called &lt;code&gt;[Postman][4]&lt;/code&gt; that handles sending and receiving messages.&lt;/p&gt;
&lt;h1&gt;Hello Mr Postman&lt;/h1&gt;
&lt;p&gt;So &lt;a href=&quot;http://github.com/aaronpowell/postman&quot;&gt;Postman&lt;/a&gt; is available on &lt;a href=&quot;http://github.com/aaronpowell&quot;&gt;my github repository&lt;/a&gt; and at the moment I&amp;#39;m quite happy with its feature set. Like a good pub/ sub library you can send and receive messages, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;postman.&lt;/span&gt;receive(&lt;span class=&quot;string&quot;&gt;'some-message'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(args) &lt;span class=&quot;cell&quot;&gt;{
  //handle &lt;span class=&quot;string&quot;&gt;'some-message'&lt;/span&gt;
}&lt;/span&gt;);

&lt;span class=&quot;transposed_variable&quot;&gt;postman.&lt;/span&gt;deliver(&lt;span class=&quot;string&quot;&gt;'some-message'&lt;/span&gt;, &lt;span class=&quot;matrix&quot;&gt;[&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt;]&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So with the &lt;code&gt;receive&lt;/code&gt; method you can add your handlers (sub), and with your &lt;code&gt;deliver&lt;/code&gt; method will fire messages (pub). So yes, nothing different to your standard pub/ sub except for the fact that it has a quirky syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Postman&lt;/code&gt; also has the ability to change methods, every method returns the &lt;code&gt;Postman&lt;/code&gt; so he can chain up his operations:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;postman.deliver(&lt;span class=&quot;attribute&quot;&gt;'message1&lt;/span&gt;').deliver(&lt;span class=&quot;attribute&quot;&gt;'message2&lt;/span&gt;');&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Making the Postman smart&lt;/h1&gt;
&lt;p&gt;Remember that I said &lt;code&gt;Postman&lt;/code&gt; was going to be the coolest pub/ sub library and you should use it above all others? Well there is actual a feature that I have included that I haven&amp;#39;t seen in many other libraries and that&amp;#39;s the idea of a &lt;strong&gt;message bus&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Message Bus 101&lt;/h2&gt;
&lt;p&gt;The idea of turning a pub/ sub into a message bus came to me in a recent project at work where we were using pub/ sub quite extensively but we have a bit of an issue, we couldn&amp;#39;t ensure that the subscriptions were happening &lt;em&gt;before&lt;/em&gt; the publishing was done. This meant that we could have components on our page not receiving the messages and this can be a real issue for us.&lt;/p&gt;
&lt;p&gt;With a message bus though we actually track all the messages that were previously published and when a subscriber attaches its callback function it will receive the previously published messages.&lt;/p&gt;
&lt;p&gt;That means that we can do the following:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cmake&quot;&gt;postman.deliver('&lt;span class=&quot;keyword&quot;&gt;message&lt;/span&gt;');
//some other code
postman.receive('&lt;span class=&quot;keyword&quot;&gt;message&lt;/span&gt;', &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
  console.log('&lt;span class=&quot;keyword&quot;&gt;message&lt;/span&gt; was received');
});&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Internally what &lt;code&gt;Postman&lt;/code&gt; does is tracks every &lt;code&gt;deliver&lt;/code&gt; method call and the arguments provided to it and when ever a &lt;code&gt;receive&lt;/code&gt; call happens it will iterate through the delivery history and then call the callback with each of the history point.&lt;/p&gt;
&lt;h2&gt;Usefulness of a Message Buss&lt;/h2&gt;
&lt;p&gt;So now that you&amp;#39;ve seen that with &lt;code&gt;Postman&lt;/code&gt; we can not only publish and receive messages using a known order of execution you can see that we&amp;#39;re also allowing an unknown order of execution to happen and our messages are still going to end up at the required destination.&lt;/p&gt;
&lt;p&gt;Told you it would be cool ;).&lt;/p&gt;
&lt;p&gt;Something else that &lt;code&gt;Postman&lt;/code&gt; exposes from its API is a way to get rid of messages. If you&amp;#39;re building a long-running JavaScript application you may find a point where messages reside in the history much longer than you&amp;#39;d like them to, and future subscribers might not care about the state of the application back when the messages first were published. It&amp;#39;s also important for memory management, you don&amp;#39;t want large JavaScript objects sitting in memory if you don&amp;#39;t really need them there. So what &lt;code&gt;Postman&lt;/code&gt; does is exposes a method called &lt;code&gt;dropMessages&lt;/code&gt; and we can use the method like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;profile&quot;&gt;&lt;span class=&quot;filename&quot;&gt;postman.dropMessages('some-message');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Postman&lt;/code&gt; will then remove all the call history for the passed in message name. As cool as this is it might be important to drop messages &lt;em&gt;conditionally&lt;/em&gt;. To do this &lt;code&gt;Postman&lt;/code&gt; allows you to not just pass in a message name, but a criteria which determines the messages to drop.&lt;/p&gt;
&lt;p&gt;The criteria that you pass in can be either a function or a date, so you can determine which messages to drop using logic (say if you wanted to drop based on the args that it received) or drop messages older than a certain date.&lt;/p&gt;
&lt;p&gt;If you use a function to drop messages it&amp;#39;ll take a callback that internally get&amp;#39;s passed to the &lt;code&gt;[Array.map][7]&lt;/code&gt; function, so make sure that you implement it to take those arguments, with the element value being a JavaScript object matching the following schema:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; [],
  created: Date,
  lastPublished: Date
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; property is the arguments that passed into the message (an empty array if you don&amp;#39;t provide arguments), &lt;code&gt;created&lt;/code&gt; being a date object which is when the message was raised and &lt;code&gt;lastPublished&lt;/code&gt; was when the message was last sent to the a callback.&lt;/p&gt;
&lt;p&gt;Lastly when you call the &lt;code&gt;receive&lt;/code&gt; method you can pass in an optional third argument which indicates whether the history will be ignored or not. By default history &lt;strong&gt;wont&lt;/strong&gt; be ignored but if you&amp;#39;re doing a subscription that you don&amp;#39;t want the history provided to it you can use it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;postman.&lt;/span&gt;receive(&lt;span class=&quot;string&quot;&gt;'some-message'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;cell&quot;&gt;{ }&lt;/span&gt;, true);&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Something else I decided to do with &lt;code&gt;Postman&lt;/code&gt; was to ensure that it does actually work as advertised. To do this I&amp;#39;ve gone about writing a test suite which you can find &lt;a href=&quot;https://github.com/aaronpowell/Postman/blob/master/test/tests.js&quot;&gt;here&lt;/a&gt;. A lot of people neglect testing when writing JavAScript, but I think it&amp;#39;s quite important to at the very lest sanity check your own API. I&amp;#39;ve used &lt;a href=&quot;http://docs.jquery.com/Qunit&quot;&gt;Qunit&lt;/a&gt; and it&amp;#39;s super simple to write out the tests. Fire up the &lt;a href=&quot;https://github.com/aaronpowell/Postman/blob/master/test/tests.html&quot;&gt;html&lt;/a&gt; in the browser and you&amp;#39;ll see just how the tests themselves pass ;).&lt;/p&gt;
&lt;h2&gt;Node.js&lt;/h2&gt;
&lt;p&gt;The final goal of &lt;code&gt;Postman&lt;/code&gt; was to be entirely unreliant on the DOM so that you could run it in a server-side JavaScript implementation such as &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;. I&amp;#39;ll try and get this popped up on &lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt; so if you want to use it in your Node projects it&amp;#39;ll be nice and easy.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So this wraps up my introduction to &lt;code&gt;Postman&lt;/code&gt;. As I said pub/ sub is a pattern that is &lt;em&gt;done to death&lt;/em&gt; but I hope that this library has a few features which make you choose it over the myriad of existing pub/ sub libraries out there ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>This post is best viewed in some other browser</title>
            <link href="/posts/2011-06-08-best-viewed-in-some-other-browser.html"/>
            <updated>2011-06-08T00:00:00.000Z</updated>
            <id>/posts/2011-06-08-best-viewed-in-some-other-browser.html</id>
            <content type="html">&lt;p&gt;Does everyone remember the good old days of when websites had the introduction&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This website is best viewed in 800x600 and Internet Explorer 5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No? We&amp;#39;ll you missed the &amp;#39;good old days&amp;#39; of the browser wars which saw the different browser vendors supporting different features which resulted in web developers having to pick and choose what browser(s) their websites would work in.&lt;/p&gt;
&lt;p&gt;Fast forward a half dozen years and we end up in 2011 where we see a new browser war going on and this time the focus is on HTML5. With the browser vendors turning out new versions at a speed we haven&amp;#39;t seen in a long time, &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/04/12/native-html5-first-ie10-platform-preview-available-for-download.aspx&quot;&gt;8 to 12 weeks for IE&lt;/a&gt;, &lt;a href=&quot;https://docs.google.com/present/view?id=dg63dpc6_4d7vkk6ch&amp;amp;pli=1&quot;&gt;12 weeks for Chrome&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/devnews/index.php/2011/04/07/new-development-channels-and-repositories-for-rapid-releases/&quot;&gt;14 weeks for Firefox&lt;/a&gt;, the features available in each browser can (and often are) different.&lt;/p&gt;
&lt;p&gt;Take for the example the &lt;a href=&quot;http://diveintohtml5.org/forms.html&quot;&gt;HTML5 input types&lt;/a&gt;, most specifically the the date picker. For years we&amp;#39;ve been using plugins for our favorite JavaScript library to create date pickers so it was only natural that the browsers would evolve to having built in. But there&amp;#39;s a problem, only some browsers do support them.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t a huge issue because through tools such as &lt;a href=&quot;http://modernizr.com&quot;&gt;Modernizr&lt;/a&gt; we can detect if a browser does or doesn&amp;#39;t support it and use a &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;polyfill or shim&lt;/a&gt; to patch the gaps. Awesome, but what if the browser has &lt;em&gt;partial support&lt;/em&gt;? For example at the time of writing the current version of Chrome is &lt;strong&gt;12.0.742.91 (Official Build 87961)&lt;/strong&gt; running WebKit &lt;strong&gt;534.30 (branches/chromium/742@88085)&lt;/strong&gt; and it supports &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot; /&amp;gt;&lt;/code&gt;, but it only has partial support. Here&amp;#39;s how it looks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/web-dev/chrome-input-date.PNG&quot; alt=&quot;Chrome date input&quot;&gt;&lt;/p&gt;
&lt;p&gt;In fact Opera is the only browser that has full support for it.&lt;/p&gt;
&lt;p&gt;But that&amp;#39;s fine, as I said before we can use a polyfill to add the date picker, only there&amp;#39;s a problem. Because the partial support which the WebKit engine has kind of has a date picker but kind of doesn&amp;#39;t you still end up with the scroll bar on the side. Additionally you can&amp;#39;t change the format of the date that you&amp;#39;re entering.&lt;/p&gt;
&lt;p&gt;Another interesting fact is that the &lt;code&gt;&amp;lt;input type=&amp;quot;number&amp;quot; /&amp;gt;&lt;/code&gt; in this build also appears to be miss-implementing the HTML5 spec and inserting a comma every three digits.&lt;/p&gt;
&lt;p&gt;There was also the &lt;a href=&quot;http://www.xtranormal.com/watch/7991991/web-sockets-we-are-the-first&quot;&gt;saga about Web Sockets spec changing&lt;/a&gt; and potential security holes (which saw &lt;a href=&quot;http://hacks.mozilla.org/2010/12/websockets-disabled-in-firefox-4/&quot;&gt;Firefox disabling them by default&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And this brings me back to my original question, are we going back to the days when the differences between the browsers are holding us back from doing what we need to in complex web applications or are polyfills and shims going to save us from another generation of websites which &lt;em&gt;work best in some other browser&lt;/em&gt;?&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Adding data attributes to MVC3 forms with HtmlHelpers</title>
            <link href="/posts/2011-05-26-data-attribute-mvc3-forms.html"/>
            <updated>2011-05-26T00:00:00.000Z</updated>
            <id>/posts/2011-05-26-data-attribute-mvc3-forms.html</id>
            <content type="html">&lt;p&gt;In a site I&amp;#39;m working on I wanted to add a data attribute, you know, &lt;code&gt;data-*&lt;/code&gt;, to a form that was being generated from a controller action in MVC3. So I have the code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;@using(Html.BeginFor(&lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, FormMethod.Posts) {
    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- form contents --&amp;gt;&lt;/span&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I want the form to be opening in a new window, but I&amp;#39;m a good developer and I don&amp;#39;t like littering my code with &lt;code&gt;target=&amp;quot;_blank&amp;quot;&lt;/code&gt;, instead I have some jQuery that I&amp;#39;m using to detect elements that are to go into new windows and adding the attribute programmatically.&lt;/p&gt;
&lt;p&gt;I want to run this jQuery method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;$('form[&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;-external=true]').attr&lt;span class=&quot;container&quot;&gt;('&lt;span class=&quot;title&quot;&gt;target'&lt;/span&gt;, '&lt;span class=&quot;title&quot;&gt;_blank'&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I was stumped, how do you add &lt;code&gt;data-external&lt;/code&gt; to the form? The HtmlHelper &lt;em&gt;does&lt;/em&gt; allow you to pass in attributes, but they are done through an anonymous .NET object, and &lt;code&gt;-&lt;/code&gt; isn&amp;#39;t valid in a member name in C# (it is in the CLR though), so this code doesn&amp;#39;t complie:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;@using(&lt;span class=&quot;type&quot;&gt;Html&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;BeginFor&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;FormMethod&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Posts&lt;/span&gt;, new { &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;-external = &quot;true&quot; }) &lt;span class=&quot;container&quot;&gt;{&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good thing is that the MVC team have already got this sorted, instead of a hyphen you can use an underscore:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;(Html.BeginFor(&lt;span class=&quot;string&quot;&gt;&quot;Index&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;, FormMethod.Posts, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; { data_external = &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; }) {&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you&amp;#39;ll get a form like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/home/index&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-external&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully this will prove handy for someone else too.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>jQuery validation, JavaScript form submitting and another bad idea</title>
            <link href="/posts/2011-05-21-jquery-validation-and-javascript-posts.html"/>
            <updated>2011-05-21T00:00:00.000Z</updated>
            <id>/posts/2011-05-21-jquery-validation-and-javascript-posts.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;/javascript/jquery-validation-and-dynamic-forms&quot;&gt;In my last post&lt;/a&gt; I looked at how to use jQuery validation in a dynamic form and some problems you can have with handling rule sets.&lt;/p&gt;
&lt;p&gt;Something I mentioned in the posts was that I was also submitting the form using JavaScript rather than a form post or anything. This didn&amp;#39;t actually make it into the final post and part of the reason was it would have added a heck of a lot more to the overall post, making it a lot longer than I think anyone would want to read. The other part of the reason was I started writing the post at 11pm on Friday night and finished it on Saturday night so I may have got a bit sidetracked :P (even though I did proof read it I missed that part!).&lt;/p&gt;
&lt;p&gt;So as promised here is the conclusion to my last post :P.&lt;/p&gt;
&lt;h1&gt;Submitting forms with JavaScript&lt;/h1&gt;
&lt;p&gt;When submitting a form with JavaScript there&amp;#39;s a few ways you can go about it, one of the ways is to use an AJAX request on the form submit, so basically serializing the form fields into a JSON blob which you include in your POST.&lt;/p&gt;
&lt;p&gt;This is good because you can do progressive enhancement since you have an actual URL to POST to if JavaScript is disabled.&lt;/p&gt;
&lt;p&gt;But no, we&amp;#39;re not going down that route, instead we&amp;#39;re going to be calling a JavaScript method on our external API. This poses some problems, we don&amp;#39;t have URL to submit to. But we still have a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, so we&amp;#39;ve got an issue, we have to avoid the form submit!&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; postForm(validation, form) {
    var fields = form.find('input'),
        &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;container&quot;&gt;{}&lt;/span&gt;;&lt;/span&gt;

    for(var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il=fields.length; i&amp;lt;il; i++) {
        var field = fields[i];

        &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;[i] = &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;: $(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;val&lt;/span&gt;(),
            &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;: $(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;attr&lt;/span&gt;('&lt;span class=&quot;title&quot;&gt;type'&lt;/span&gt;)
        }&lt;/span&gt;;&lt;/span&gt;
    }

    external.submit(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, that was pretty easy to build up our &lt;em&gt;submit&lt;/em&gt; schema, so we can hook it up into jQuery Validation:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; buildForm(form, fields) {
    var fieldset = form.find('fieldset'),
            ol = $('&amp;lt;ol&amp;gt;&amp;lt;/ol&amp;gt;'),
            templates = {
                    text: $('text-template'),
                    date: $('date-template') //and so on for more templates
            },
            rules = {},
            messages = {}
            settings = {
                rules: rules,
                messages: messages,
                submitHandler: function postForm(validator, form) {
                    var fields = form.find('input'),
                        &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;container&quot;&gt;{}&lt;/span&gt;;&lt;/span&gt;

                    for(var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il=fields.length; i&amp;lt;il; i++) {
                        var field = fields[i];

                        &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;[i] = &lt;span class=&quot;container&quot;&gt;{
                            &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;: $(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;val&lt;/span&gt;(),
                            &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;: $(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;).&lt;span class=&quot;title&quot;&gt;attr&lt;/span&gt;('&lt;span class=&quot;title&quot;&gt;type'&lt;/span&gt;)
                        }&lt;/span&gt;;&lt;/span&gt;
                    }

                    external.submit(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;
                }
            };
    //parse form code from the last post

    //update this line to use our object &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; the inline object
    $.extend(validationRules.settings, settings);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I&amp;#39;ve updated the code from the last post which now includes the &lt;code&gt;submitHandler&lt;/code&gt; property on the settings for the validation rules. This is a method that will be called once the form passes all validation rules that have been applied to it.&lt;/p&gt;
&lt;p&gt;This is a fine piece of code, it works exactly as we would expect, except there&amp;#39;s an issue, &lt;strong&gt;the form will still post&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;jQuery Validation works by tying into the form submit event, and the &lt;code&gt;submitHandler&lt;/code&gt; method is called as part of that, so if all validation passes it&amp;#39;ll allow the browser to finish executing the submit operation. This is a problem, we&amp;#39;re not defining an action or a method and according to the W3C spec the &lt;a href=&quot;http://dev.w3.org/html5/spec-author-view/spec.html#attr-fs-action&quot;&gt;default action&lt;/a&gt; is the URL of the forms owner and the &lt;a href=&quot;http://dev.w3.org/html5/spec-author-view/spec.html#attr-fs-method&quot;&gt;default method&lt;/a&gt; is GET. Crap, so even if we don&amp;#39;t specify anything it&amp;#39;ll still have some default operations.&lt;/p&gt;
&lt;p&gt;But it&amp;#39;s not &lt;em&gt;really&lt;/em&gt; a problem, we can just use the &lt;code&gt;preventDefault&lt;/code&gt; method to stop the event from continuing because if we can stop the event from going on we don&amp;#39;t have to worry about the form submitting completely.&lt;/p&gt;
&lt;p&gt;Well that&amp;#39;s good, but we have a problem, how do we cancel the event? Sadly the &lt;code&gt;submitHandler&lt;/code&gt; method has no access to the form event object. According to the source though we can pass in &lt;code&gt;debug: true&lt;/code&gt; as a setting to the validator which will then calls &lt;code&gt;preventDefault&lt;/code&gt;, but that looks ugly, having &lt;code&gt;debug: true&lt;/code&gt; in production code...&lt;/p&gt;
&lt;p&gt;So the only solution is we modify the source for the validation plugin. Good news is I have modified the jQuery Validation plugin, I have a fork &lt;a href=&quot;https://github.com/aaronpowell/jquery-validation/commit/6a5eadd42661655d80248a825431bf30c56a34af&quot;&gt;here&lt;/a&gt; which I hope the pull request of gets accepted ;).&lt;/p&gt;
&lt;p&gt;Now we update our &lt;code&gt;submitHandler&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;submitHandlers: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(validator, form, event)&lt;/span&gt; {&lt;/span&gt;
    var fields = &lt;span class=&quot;transposed_variable&quot;&gt;form.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'input'&lt;/span&gt;),
        data = &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;;

    &lt;span class=&quot;transposed_variable&quot;&gt;event.&lt;/span&gt;preventDefault();&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So to wrap up the second part of the intended one-part series we&amp;#39;ve looked at how you can work around using JavaScript to send data and still prevent a browser from submitting the data.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>jQuery validation, dynamic forms and a really bad idea</title>
            <link href="/posts/2011-05-20-jquery-validation-and-dynamic-forms.html"/>
            <updated>2011-05-20T00:00:00.000Z</updated>
            <id>/posts/2011-05-20-jquery-validation-and-dynamic-forms.html</id>
            <content type="html">&lt;p&gt;Currently at work I&amp;#39;m part of a team that&amp;#39;s developing a really JavaScript heavy application and in doing so we&amp;#39;re finding problems, challenges and solutions. One such that I was working on recently I thought I&amp;#39;d share with you as it was a majour source of frustration, but ultimately I succeeded in it and that made it all the worth while!&lt;/p&gt;
&lt;p&gt;The section of the application I&amp;#39;ve been working on deals with an external data source which manages some systems that the user interacts with. We don&amp;#39;t have &lt;em&gt;any&lt;/em&gt; C# code that supports this section of the application, everything is provided by a third party and a JavaScript API which they have provided us with for interaction. This means that whenever we need display something to the user they are providing us with the data. Generally speaking this is fairly straight forward, they are providing lists of data, messages, etc, but there&amp;#39;s one step that is quite tricky, and that is developing a form.&lt;/p&gt;
&lt;p&gt;So to set up the scenario what we are running through a multi-part form. On the first step of the form we give the user an option of what they want to add and then on the second step we display a form with a number of fields. The thing is that these fields are defined &lt;strong&gt;by the option chosen on step 1&lt;/strong&gt;, meaning that we have to generate the form &lt;em&gt;on the fly&lt;/em&gt;. Breaking it down what we&amp;#39;re getting back from the external API is a JSON object which represents a form schema. It dictates the fields we&amp;#39;re including, the order they appear in and the types of inputs. To then throw another spanner in the works the fields all need to be validated. Each field is mandatory and we have some special fields such as date fields.&lt;/p&gt;
&lt;p&gt;Essentially I have to take this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;fields&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; [{
        type: &lt;span class=&quot;string&quot;&gt;'text'&lt;/span&gt;,
        label: &lt;span class=&quot;string&quot;&gt;'First Name'&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;rules&quot;&gt;{
        &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'text'&lt;/span&gt;,
        label: &lt;span class=&quot;string&quot;&gt;'Last Name'&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;rules&quot;&gt;{
        &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;string&quot;&gt;'date'&lt;/span&gt;,
        label: &lt;span class=&quot;string&quot;&gt;'DOB'&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And turn it into the following:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;fieldset&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-0&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-0&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-1&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-1&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;DOB&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-2&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-2&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;date&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;fieldset&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;#39;s have a look at how you generate a form from a JSON schema, display it to the user and ultimately configure some validation.&lt;/p&gt;
&lt;p&gt;Oh, and to cap it all off we don&amp;#39;t actually have a .NET method which we&amp;#39;re posting the form to, there&amp;#39;s no ASMX, no Controller Action, no PostBack. Instead we&amp;#39;re submitting the form back into a JavaScipt API call which our external service is providing to us!&lt;/p&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;p&gt;When getting started with these we already had a lot of design patterns in place and JavaScript libraries to play with. For the purpose of this blog post I&amp;#39;m going to look at the tools which are relivent to what I&amp;#39;m doing and which will (hopefully) save you some time if/ when you have to do something similar.&lt;/p&gt;
&lt;p&gt;These tools are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; (duh!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.jquery.com/Plugins/validation&quot;&gt;jQuery Validate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.jquery.com/jquery.tmpl/&quot;&gt;jQuery Templating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Building your form&lt;/h1&gt;
&lt;p&gt;So I&amp;#39;m going to be building out my form based on a JSON schema, but I want to do it in such a way as that I don&amp;#39;t have any &amp;quot;magic strings&amp;quot; which are responsible for DOM element creation. I&amp;#39;m trying really hard to keep a good clean separation between the HTML and the JavaScript so littering my parser with HTML snippets kind of throws off my concept a bit.&lt;/p&gt;
&lt;p&gt;Instead though I&amp;#39;ve decided to take a different route, I&amp;#39;m going to use the fantastic jQuery template enging to create the form fields to begin with. If you&amp;#39;re not familiar with the jQuery Templating enging then I suggest reading their docs before going much further and getting confused.&lt;/p&gt;
&lt;p&gt;Now my schema will only support a sub-set of form fields, so I don&amp;#39;t need to worry about having a solution for every different scneario, instead I&amp;#39;m catering for the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regular text fields&lt;/li&gt;
&lt;li&gt;Password fields&lt;/li&gt;
&lt;li&gt;Date fields&lt;/li&gt;
&lt;li&gt;Checkbox fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So for this I&amp;#39;m going to create separate templates for each of the form field types that are supported:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/x-jquery-tmpl&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text-template&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
    &amp;lt;li&amp;gt;
        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;${label}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/x-jquery-tmpl&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text-template&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
    &amp;lt;li&amp;gt;
        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;${label}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;field-${index}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;password&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(And so on, I wont put out all the templates here, it&amp;#39;ll get a bit repetative)&lt;/p&gt;
&lt;p&gt;You could go about this a slightly different way and put conditional statements in your template. Personally I&amp;#39;m against that for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You end up with larger and potentially more complex templates&lt;/li&gt;
&lt;li&gt;Template parsing has an overhead. The more logic you put into a template the more slower it&amp;#39;ll become to parse as the regexs have to work that bit harder&lt;/li&gt;
&lt;li&gt;You&amp;#39;re loosing your separation of concerns but bringing JavaScript into your templating engine&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since we&amp;#39;re only templating our form fields we&amp;#39;ve got t ohave a starting HTML snippet that we&amp;#39;ll be appending to:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;fieldset&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;fieldset&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Parsing our schema&lt;/h1&gt;
&lt;p&gt;So now we know how we&amp;#39;re going to go about building our HTML we now have to parse our schema. It&amp;#39;s a fairly simple concept, we need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Itterate through each field in the response&lt;/li&gt;
&lt;li&gt;Determine the type&lt;/li&gt;
&lt;li&gt;Parse the template with the field info&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#39;s assume that we&amp;#39;ve made it to the wizard step that we&amp;#39;ve called out to our external service to provide the JSON schema, now we&amp;#39;ve got to deal with it.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        //call out to our external API
        external.getForm&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'form-identifier', function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
            //this callback will handle the parsing
            buildForm&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'form')&lt;/span&gt;&lt;/span&gt;, result.fields)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        })&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    })&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a fairly simple little code snippet, we&amp;#39;re expecting to call our external API which will in turn send us our JSON schema. Now let&amp;#39;s implement the &lt;code&gt;buildForm&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; buildForm(form, fields) {
    var fieldset = form.find('fieldset'),
        ol = $('&amp;lt;ol&amp;gt;&amp;lt;/ol&amp;gt;'),
        templates = {
            text: $('text-template'),
            date: $('date-template') //and so on for more templates
        };

    for(var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = fields.length; i &amp;lt; il; i++) {
        var field = fields[i],
            field.index = i, //so we've got a unique &lt;span class=&quot;type&quot;&gt;ID&lt;/span&gt; for the field
            html = {};

        switch(field.&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;text'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;text&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);
                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;date'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);
                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;('&lt;span class=&quot;type&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &quot;' + &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; + '&quot; &lt;span class=&quot;title&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supported&lt;/span&gt;.\&lt;span class=&quot;title&quot;&gt;r&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;&quot; + &lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;);
        }&lt;/span&gt;&lt;/span&gt;
    }
    ol.appendTo(fieldset);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this is really simple code, we&amp;#39;re defining some variables up front which will be needed, and also some pointers to our templates (because caching jQuery selectors is a very good idea people!). Next we go through each item in the fields collection, find the right template and then apply the field to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro tip - templates aren&amp;#39;t just for dealing with collections, you can apply a single JavaScript object to it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once we&amp;#39;ve build up a full form it wil then be added to the DOM, this is just for athetics, rather than appending each one to the DOM as you loop through it does it in a single go. This means you can have some fun animations if you want to make the form appear, rather than a staggered approach if you were adding to the DOM as you go.&lt;/p&gt;
&lt;p&gt;Essentially we are done, the JSON schema has been parsed and we&amp;#39;ve now got a form which the users will see and be able to work with. It&amp;#39;s also surprisingly easy to do.&lt;/p&gt;
&lt;h1&gt;Adding validation&lt;/h1&gt;
&lt;p&gt;As I mentioned in the introduction to the article the fields need to be validated as well. Depending on how you&amp;#39;re getting your JSON schema you may receive the validation down the pipe as part of the schema, but in this example I&amp;#39;m going to have all fields validated.&lt;/p&gt;
&lt;p&gt;One thing to note, I&amp;#39;m assuming that this code is in run in an ASP.NET MVC3 application, so I&amp;#39;ve got the unobtrusive jQuery validation also included which has an interesting side effect, it parses all forms and tries to set up the validation rules. But sadly we don&amp;#39;t have the form built so the validation rules can&amp;#39;t get created!&lt;/p&gt;
&lt;p&gt;Because we&amp;#39;ve got unobtrusive validation included and it&amp;#39;s already parsed our form it poses a bit of a problem, when you pass your rules into the &lt;code&gt;validate&lt;/code&gt; method it wont do anything. When the plugin runs it adds a data attribute to the form which contains all the rules (&lt;code&gt;$(&amp;#39;form&amp;#39;).data(&amp;#39;validator&amp;#39;)&lt;/code&gt; is where it is). This is problematic, we can&amp;#39;t &lt;strong&gt;revalidate&lt;/strong&gt; the form if we put unobtrusive rules on it.&lt;/p&gt;
&lt;h2&gt;Building validation rules&lt;/h2&gt;
&lt;p&gt;Although we may not be able to go with the unobtrusive validation it&amp;#39;s not a &lt;em&gt;big&lt;/em&gt; issue IMO, we&amp;#39;re already being unobtrusive by running out JavaScript to build the form in a separate file (you &lt;em&gt;are&lt;/em&gt; doing that right...), so we can just build up the rules as we&amp;#39;re parsing our schema:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; buildForm(form, fields) {
    var fieldset = form.find('fieldset'),
        ol = $('&amp;lt;ol&amp;gt;&amp;lt;/ol&amp;gt;'),
        templates = {
            text: $('text-template'),
            date: $('date-template') //and so on for more templates
        },
        rules = {},
        messages = {};

    for(var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = fields.length; i &amp;lt; il; i++) {
        var field = fields[i],
            field.index = i,
            html = {},
            id =&lt;span class=&quot;string&quot;&gt; 'field-'&lt;/span&gt; + i;

        rules[id] = {
            required: true; //setup the rule for this field, we're just putting required &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; true
        };
        messages[id] = {
            required:&lt;span class=&quot;string&quot;&gt; 'The field is required'&lt;/span&gt; //create a message for when the field is invalid
        };

        switch(field.&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;text'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;text&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);
                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;date'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);

                &lt;span class=&quot;title&quot;&gt;rules&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;].&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;true&lt;/span&gt;;
                &lt;span class=&quot;title&quot;&gt;messages&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;].&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt; = '&lt;span class=&quot;type&quot;&gt;That&lt;/span&gt;\'&lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;date'&lt;/span&gt;;

                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;('&lt;span class=&quot;type&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &quot;' + &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; + '&quot; &lt;span class=&quot;title&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supported&lt;/span&gt;.\&lt;span class=&quot;title&quot;&gt;r&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;&quot; + &lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;);
        }&lt;/span&gt;&lt;/span&gt;
    }
    ol.appendTo(fieldset);
    //wait, how &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; we add the rules?
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above we&amp;#39;ve added a few new variables, one which will hold our ruleset and one which will hold the messages. Each rule is based off the name (or ID, I forget which) of the form field, so I&amp;#39;ve created a variable in the loop that&amp;#39;s the ID. You could then add this to the &lt;code&gt;field&lt;/code&gt; object and have the template parse it rather than having duplicate code (but I&amp;#39;m lazy and it&amp;#39;s not overly exciting so I&amp;#39;ll skip it :P).&lt;/p&gt;
&lt;p&gt;Now though we have all our rules made how do we go about adding them? As I mentioned the form has already been parsed thanks to the unobtrusive validation plugin, so when we do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;tag&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.validate&lt;/span&gt;(&lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;rules&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; rules, messages: message }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing happens...&lt;/p&gt;
&lt;p&gt;Well actually something useful happens, when you do call &lt;code&gt;validate&lt;/code&gt; it&amp;#39;ll return the validation rules.&lt;/p&gt;
&lt;p&gt;Rules which we can modify ;).&lt;/p&gt;
&lt;p&gt;That&amp;#39;s right, we don&amp;#39;t &lt;em&gt;need&lt;/em&gt; to &amp;quot;parse the form&amp;quot; again, we can just modify the ruleset that&amp;#39;s already there, so we&amp;#39;ll update our code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; buildForm(form, fields) {
    var fieldset = form.find('fieldset'),
        ol = $('&amp;lt;ol&amp;gt;&amp;lt;/ol&amp;gt;'),
        templates = {
            text: $('text-template'),
            date: $('date-template') //and so on for more templates
        },
        validationRules = form.validate(),
        rules = {},
        messages = {};

    for(var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = fields.length; i &amp;lt; il; i++) {
        var field = fields[i],
            field.index = i,
            html = {},
            id =&lt;span class=&quot;string&quot;&gt; 'field-'&lt;/span&gt; + i;

        rules[id] = {
            required: true; //setup the rule for this field, we're just putting required &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; true
        };
        messages[id] = {
            required:&lt;span class=&quot;string&quot;&gt; 'The field is required'&lt;/span&gt; //create a message for when the field is invalid
        };

        switch(field.&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;text'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;text&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);
                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;case&lt;/span&gt; '&lt;span class=&quot;title&quot;&gt;date'&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;templates&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt;
                        .&lt;span class=&quot;title&quot;&gt;tmpl&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;)
                        .&lt;span class=&quot;title&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;ol&lt;/span&gt;);

                &lt;span class=&quot;title&quot;&gt;rules&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;].&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;true&lt;/span&gt;;
                &lt;span class=&quot;title&quot;&gt;messages&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;].&lt;span class=&quot;title&quot;&gt;date&lt;/span&gt; = '&lt;span class=&quot;type&quot;&gt;That&lt;/span&gt;\'&lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;date'&lt;/span&gt;;

                &lt;span class=&quot;title&quot;&gt;break&lt;/span&gt;;

            &lt;span class=&quot;title&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;('&lt;span class=&quot;type&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &quot;' + &lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; + '&quot; &lt;span class=&quot;title&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;supported&lt;/span&gt;.\&lt;span class=&quot;title&quot;&gt;r&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;n&lt;/span&gt;&quot; + &lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;field&lt;/span&gt;);
        }&lt;/span&gt;&lt;/span&gt;
    }
    ol.appendTo(fieldset);

    $.extend(validationRules.settings, { rules: rules, messages: messages });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Up front we&amp;#39;ve defined another variable which will hold our existing validation information and then at the tail of the method we&amp;#39;re using the &lt;code&gt;$.extend&lt;/code&gt; method to add our new rules to the existing rules. Well the be specific we&amp;#39;re passing the &lt;code&gt;validationRules.settings&lt;/code&gt; property, as that&amp;#39;s actually where the rules (and messages) reside, not on the root object.&lt;/p&gt;
&lt;h2&gt;Alternate way to build up rules&lt;/h2&gt;
&lt;p&gt;Part of the jQuery Validate plugin is it adds a &lt;code&gt;rules&lt;/code&gt; method onto the jQuery objects, this means you can add rules that way. The problem I&amp;#39;ve found with this though is if the input field isn&amp;#39;t in the DOM you can&amp;#39;t use the &lt;code&gt;rules&lt;/code&gt; method since internally it&amp;#39;ll look back up the DOM for the form they are attached to, but there&amp;#39;s no DOM to walk yet so it&amp;#39;ll throw an error.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This has been a fairly full-on article, we&amp;#39;ve looked at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to use jQuery templates to build a HTML snippet&lt;/li&gt;
&lt;li&gt;How we can parse a JSON schema for a form&lt;/li&gt;
&lt;li&gt;How to extend the existing validation rules to support new rules from the schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully this has given a bit of an insight into how to do some crazy, way out problems, but also how to do some more real-world scenarios such as updating an existing from with JavaScript and then augmenting the validation rules.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>REMIX 11</title>
            <link href="/posts/2011-04-28-remix11.html"/>
            <updated>2011-04-28T00:00:00.000Z</updated>
            <id>/posts/2011-04-28-remix11.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m going to be speaking at &lt;a href=&quot;http://www.noisetosignal.com.au/remix/&quot;&gt;REMIX11&lt;/a&gt; this year, I&amp;#39;ll be presenting &lt;a href=&quot;http://www.noisetosignal.com.au/remix/sessions/&quot;&gt;Chasing the evolving web: things you need to know to be a modern web developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So get yourself a ticket and come watch the show, REMIX is 1 - 2 June and you can &lt;a href=&quot;https://isa.infosalons.com.au/remix11/remix11/start.asp&quot;&gt;register here&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why do you care where your packages are?</title>
            <link href="/posts/2011-04-27-why-does-package-location-matter.html"/>
            <updated>2011-04-27T00:00:00.000Z</updated>
            <id>/posts/2011-04-27-why-does-package-location-matter.html</id>
            <content type="html">&lt;p&gt;As a consultant I&amp;#39;ve had an opportunity to see the way different project manage their external dependencies, and being an active member of in open source projects has given me a good view on this as well. From all this I&amp;#39;ve noticed an interesting trend, &lt;strong&gt;there&amp;#39;s no agreed standard for where to put external dependencies&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;At previous companies I&amp;#39;ve worked with structures like a folder above the solution root called &lt;code&gt;lib&lt;/code&gt;, a &lt;code&gt;dll&lt;/code&gt; folder at the root of the solution or a common folder on the file system which every project gets its assemblies from.&lt;/p&gt;
&lt;p&gt;Open source projects are much better, &lt;a href=&quot;http://www.funnelweblog.com&quot;&gt;FunnelWeb&lt;/a&gt; has both a &lt;code&gt;lib&lt;/code&gt; folder (above solution root) and the NuGet &lt;code&gt;packages&lt;/code&gt; folder, &lt;a href=&quot;http://webformmvp.com&quot;&gt;WebForms MVP&lt;/a&gt; has a &lt;code&gt;Dependencies&lt;/code&gt; folder and a NuGet one, where as &lt;a href=&quot;http://umbraco.codeplex.com&quot;&gt;Umbraco&lt;/a&gt; 4.7 has a &lt;code&gt;foreign dlls&lt;/code&gt; (at solution root) and Umbraco 5 has &lt;code&gt;Resources/References&lt;/code&gt; above the solution root.&lt;/p&gt;
&lt;p&gt;So as you can see there&amp;#39;s not a lot of commonality between projects, and the more projects you sample the more you&amp;#39;ll see this trend; some overlap by generally speaking each project has its own flavor. Even Umbraco doesn&amp;#39;t keep it consistent between the two versions (yes this can be argued with the legacy nature of 4.x but it&amp;#39;s a bit of a weak excuse, they are &lt;em&gt;drastically&lt;/em&gt; different).&lt;/p&gt;
&lt;h2&gt;A look at other communities&lt;/h2&gt;
&lt;p&gt;Over the last few months I&amp;#39;ve been playing around with both Ruby and Node.js and one of the first things you&amp;#39;ll notice when working with these technologies is that this &lt;em&gt;confusion&lt;/em&gt; doesn&amp;#39;t exist.&lt;/p&gt;
&lt;p&gt;It wasn&amp;#39;t until a few months after I started with these technologies that I actually learnt where external dependencies actually exist on your computer, and there&amp;#39;s a really good reason for that.&lt;/p&gt;
&lt;p&gt;Take Ruby for example, Ruby has had the &lt;code&gt;gem&lt;/code&gt; tool for a long time and you use &lt;code&gt;gem&lt;/code&gt; to download an open source library and include it into your project. Say I want to build a site using &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;, I run:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;gem&lt;/span&gt; install sinatra&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I have Sinatra on my machine (assuming I didn&amp;#39;t previously) and I can include it into my project. If I throw my project up on &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; and someone else grabs it they can install the gems I required themselves (or not if they already have them). And if I&amp;#39;m a really proactive developer I can create a Gemfile file and they can use &lt;code&gt;bundler&lt;/code&gt; to install all the gems I specified. But where these gems &lt;em&gt;install&lt;/em&gt; to is not important, in fact you&amp;#39;re encouraged to not care by the fact that there is no feedback regarding that in &lt;code&gt;gem install&lt;/code&gt; process.&lt;/p&gt;
&lt;p&gt;Noe.js has a similar story using &lt;code&gt;npm&lt;/code&gt;, and it works in a similar manner, you install packages but dont&amp;#39; concern yourself as to where they actually go on disk.&lt;/p&gt;
&lt;h2&gt;Then there was NuGet&lt;/h2&gt;
&lt;p&gt;So what we&amp;#39;ve seen with Ruby and Node.js is that the focus around a package management tool really helps getting around the problem of where to put your dependencies. As is often the case .NET is late to the party, but now it&amp;#39;s here with its shiny new tool, &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you work with NuGet you find that it has a very gem-like feel to it, when you install a NuGet package it doesn&amp;#39;t tell you where the file(s) end up on disk, &lt;em&gt;they just end up somewhere&lt;/em&gt;. Well it turns out that it&amp;#39;s not very hard to work out where they were, they reside in a &lt;code&gt;packages&lt;/code&gt; folder existing at the level of the solution. This is not quite as nice as the global gem or npm, it&amp;#39;s still including them in the scope of a particular project, but to an extent you can see why it is this way, the Visual Studio tools probably needed an easy way in which they can find somewhere that is scoped to the solution.&lt;/p&gt;
&lt;p&gt;Fantastic, with NuGet we&amp;#39;ve now got one less thing that&amp;#39;ll be different between .NET projects (there&amp;#39;s still coding standard, project naming, etc to deal with :P), right... right? Well apparently not. While having a browse around the NuGet issue list I noticed that the top-voted NuGet issue is on this topic, &lt;a href=&quot;http://nuget.codeplex.com/workitem/215&quot;&gt;that the package location should be customizable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This smacks of developers thinking that they don&amp;#39;t like change. That they have always done something some way and that it should always be done that way. Don&amp;#39;t get me wrong, I&amp;#39;m not saying that the NuGet &lt;code&gt;packages&lt;/code&gt; folder is perfect and that we should just blindly follow it, I&amp;#39;m just saying that &lt;strong&gt;it doesn&amp;#39;t matter&lt;/strong&gt;, it can be in a folder at the root of the solution, in a folder in a users Documents folder or hard-coded into the Windows directory, it shouldn&amp;#39;t matter.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;.NET developers often get hung up on &lt;em&gt;doing it their way&lt;/em&gt; and not being willing to change. One such hang up is the location of external references, but it shouldn&amp;#39;t matter, let the package manager dictate it for you and have one less standard that you are maintaining for yourself.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>It’s CodeGarden time!</title>
            <link href="/posts/2011-04-27-it-s-codegarden-time.html"/>
            <updated>2011-04-27T00:00:00.000Z</updated>
            <id>/posts/2011-04-27-it-s-codegarden-time.html</id>
            <content type="html">&lt;p&gt;Well it’s that time of year again, the time when &lt;a href=&quot;http://codegarden11.com/&quot;&gt;CodeGarden&lt;/a&gt; is coming back!&lt;/p&gt;  &lt;p&gt;As is tradition I’ll be in attendance (3rd year running) and representing a new employer (although I’m not sure if that’s such a good tradition to have upheld…).&lt;/p&gt;  &lt;p&gt;This year I’ll be doing two sessions, first is on day 2 entitled &lt;a href=&quot;http://codegarden11.com/sessions/day-2/slot-five/collaboration-in-umbraco.aspx&quot;&gt;Collaboration in Umbraco&lt;/a&gt; and I’ll be talking about how the move from TFS to Mercurial has helped Umbraco grow as well as some other practices that we employ to keep Umbraco as one of the top open source projects in the ASP.NET space.    &lt;br /&gt;My second session will be co-presented with &lt;a href=&quot;http://twitter.com/alex_norcliffe&quot;&gt;Alex Norcliffe&lt;/a&gt; and is entitled &lt;a href=&quot;http://codegarden11.com/sessions/day-3/slot-two/0-to-hive-in-45.aspx&quot;&gt;0 to Hive in 45&lt;/a&gt; where we’ll be going on a crazy journey into the depths of the Umbraco v5 API and look at how to plug in your own data model. I’m really excited about this session and hopefully we’ll be able to keep a good amount of it under wraps so that we can totally blow your mind on the day!&lt;/p&gt;  &lt;p&gt;Other than this you’ll find me milling around the various sessions, helping out in the hands on labs and just generally causing trouble ;), so feel free to say hi!&lt;/p&gt;</content>
        </entry>
    
        <entry>
            <title>I can haz MVP</title>
            <link href="/posts/2011-04-03-mvp11.html"/>
            <updated>2011-04-03T00:00:00.000Z</updated>
            <id>/posts/2011-04-03-mvp11.html</id>
            <content type="html">&lt;p&gt;Incase you don&amp;#39;t follow &lt;a href=&quot;http://twitter.com/slace&quot;&gt;me on twitter&lt;/a&gt; you may have missed the annoncement over the weekend that I&amp;#39;ve been awarded my first &lt;a href=&quot;https://mvp.support.microsoft.com/communities/MVP.aspx&quot;&gt;Microsoft MVP award&lt;/a&gt;, for Internet Explorer (Development)!&lt;/p&gt;
&lt;p&gt;Stay tuned for all things awesome web :D.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Fun with Expression Trees and property binding</title>
            <link href="/posts/2011-03-30-binding.html"/>
            <updated>2011-03-30T00:00:00.000Z</updated>
            <id>/posts/2011-03-30-binding.html</id>
            <content type="html">&lt;p&gt;The client I&amp;#39;m currently working for is using an MVP pattern with WebForms (not &lt;a href=&quot;http://webformsmvp.com&quot;&gt;WebFormsMVP&lt;/a&gt; but an internally developed one) which is using an active view pattern. What this means is that the model contains all the data for both incoming and outgoing requests.&lt;/p&gt;
&lt;p&gt;Say a button click happens, the form posts and the model is updated with the data of the input fields, which the presenter then takes over.&lt;/p&gt;
&lt;p&gt;This results in a lot of code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;txtFirstName&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt; = Model&lt;span class=&quot;preprocessor&quot;&gt;.FirstName&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
txtLastName&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt; = Model&lt;span class=&quot;preprocessor&quot;&gt;.LastName&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;Model&lt;span class=&quot;preprocessor&quot;&gt;.FirstName&lt;/span&gt; = txtFirstName&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
Model&lt;span class=&quot;preprocessor&quot;&gt;.LastName&lt;/span&gt; = txtLastName&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the developers here had finally got sick of typing out model binding code and decided to implement model binding like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;Bindings&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Binding {
    Data = () =&amp;gt; Model&lt;span class=&quot;preprocessor&quot;&gt;.FirstName&lt;/span&gt;,
    Ui = () =&amp;gt; txtFirstName&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;,
    Direction = BindingDirection&lt;span class=&quot;preprocessor&quot;&gt;.ReadWrite&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this is a pretty neat solution and it solved the problem &lt;em&gt;for the most part&lt;/em&gt;. Internally it&amp;#39;s using Expression Trees, but it makes two very crutial expectation, &lt;em&gt;Data can only come from &lt;code&gt;Model.PropertyName&lt;/code&gt;, meaning you can really work with indexers, etc&lt;/em&gt; and &lt;em&gt;&lt;code&gt;Model.PropertyName&lt;/code&gt; will return a class not a struct&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I decided that I wanted to use it for something a bit different, I wanted to bind a boolean value to a check box. Unfortuantely this doesn&amp;#39;t work as the boolean Expression Tree fails with the expectations listed above.&lt;/p&gt;
&lt;p&gt;Thinking that there must be another way to go about this I decided to have a bit of a play around with Expression Trees myself and came up with the following idea.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note - this isn&amp;#39;t actually the code we&amp;#39;re using here. We have a .NET 3.5 application and the following code only works in .NET 4.0 due to some changes/ improvements of Expressions Trees.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;A quick note on .NET 4.0 Expression Trees&lt;/h2&gt;
&lt;p&gt;If you haven&amp;#39;t really dug around much with Expression Trees in .NET 4.0 you may not be aware that they actually evolved a lot in the new CLR, in fact the .NET 4.0 version is not really an Expression Tree any more, it&amp;#39;s actually a &lt;em&gt;Statement Tree&lt;/em&gt; and it&amp;#39;s scarily close to a full blow Abstract Syntax Tree (AST). &lt;a href=&quot;http://community.bartdesmet.net/&quot;&gt;Bart De Smet&lt;/a&gt; has two really good blogs on the topic, &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2009/08/10/expression-trees-take-two-introducing-system-linq-expressions-v4-0.aspx&quot;&gt;a look at the new Statement Trees&lt;/a&gt; and &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2009/08/11/statement-trees-with-less-pain-follow-up-on-system-linq-expressions-v4-0.aspx&quot;&gt;some ways to reduce the pain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But if you&amp;#39;re not into reading those posts the high level view is that in .NET 4.0 you can actually produce Expressions which are more like methods. You can create &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.linq.expressions.expression.ifthen.aspx&quot;&gt;IfThen&lt;/a&gt; statements, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd294144.aspx&quot;&gt;variable declarations&lt;/a&gt;, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd324043.aspx&quot;&gt;loops&lt;/a&gt;, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb155837.aspx&quot;&gt;etc&lt;/a&gt;. And that&amp;#39;s pretty cool in my book!&lt;/p&gt;
&lt;h2&gt;Back to binding&lt;/h2&gt;
&lt;p&gt;So back at our original experiement I wanted to work out a way I could take the data and the ui, hook them up with an expression to support two-way binding. With .NET 4.0 you can do that really bloody easy since there is an &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd268005.aspx&quot;&gt;Assign&lt;/a&gt; expression which we can play with.&lt;/p&gt;
&lt;p&gt;Assign works like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;Expression&lt;span class=&quot;preprocessor&quot;&gt;.Assign&lt;/span&gt;(
    target,
    source
)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means you can do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;Expression&lt;span class=&quot;preprocessor&quot;&gt;.Assign&lt;/span&gt;(
    () =&amp;gt; foo&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;,
    Expression&lt;span class=&quot;preprocessor&quot;&gt;.Constant&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)
)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this will do is create an expression which looks like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fantastic :D&lt;/p&gt;
&lt;p&gt;But let&amp;#39;s step back a bit and flesh out a more complete example. First off I need to create some variables to bind:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; foo = new Foo();
&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; foo2 = new Foo {&lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt;};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll create some expressions:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;Expression&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Func&amp;lt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt; exp1 = () =&amp;gt; foo.Bar;
Expression&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Func&amp;lt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt; exp2 = () =&amp;gt; foo2.Bar;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you start breaking apart the expression trees above what you&amp;#39;ll find that you have is an expression which has a body of type &lt;code&gt;System.Linq.Expressions.PropertyExpression&lt;/code&gt; (which is an internal class!) and if you want to try and break it apart you&amp;#39;ll be able to find out the variable you&amp;#39;ve accessed the property on, as well as the property accessed.&lt;/p&gt;
&lt;p&gt;What&amp;#39;s cool about a &lt;code&gt;PropertyExpression&lt;/code&gt; is that we can do things such as read or write from the property. So now we&amp;#39;ll create our assignment expression:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var binder = Expression&lt;span class=&quot;preprocessor&quot;&gt;.Assign&lt;/span&gt;(
        exp1&lt;span class=&quot;preprocessor&quot;&gt;.Body&lt;/span&gt;,
        exp2&lt;span class=&quot;preprocessor&quot;&gt;.Body&lt;/span&gt;
)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re passing in the body of the expression (our &lt;code&gt;PropertyExpression&lt;/code&gt;) as both the source and the target, which will result in C# like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt; = foo2&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note - you can&amp;#39;t really get the C#, it&amp;#39;s not possible as all it really can generate is IL and metadata.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So there you go, basic binding done. It&amp;#39;s time to compile and ship it!&lt;/p&gt;
&lt;p&gt;First create a lambda for us: &lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var lambda = Expression&lt;span class=&quot;preprocessor&quot;&gt;.Lambda&lt;/span&gt;(binder)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile the lambda into a &lt;code&gt;Delegate&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var func = lambda&lt;span class=&quot;preprocessor&quot;&gt;.Compile&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Execute the delegate:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;func&lt;span class=&quot;preprocessor&quot;&gt;.DynamicInvoke&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(foo&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; //baz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then update &lt;code&gt;foo2&lt;/code&gt; and recall the delegate:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo2&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
func&lt;span class=&quot;preprocessor&quot;&gt;.DynamicInvoke&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(foo&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; //Hello World!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This above code is actually not tied to WebForms, or any particular UI of .NET, you could use it in anything that supported the .NET 4.0 expression trees.&lt;/p&gt;
&lt;p&gt;Keep in mind that this is &lt;strong&gt;a thought expermiment&lt;/strong&gt; and I haven&amp;#39;t exactly done a lot of testing of the code. All I know is that it worked in my basic tests :P. Since we&amp;#39;re using .NET 3.5 at this client I&amp;#39;m not able to actually put it into the framework, so I&amp;#39;m just leaving it here as a thought experiement.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re interested in the &lt;a href=&quot;http://hg.apwll.me/modelbinding&quot;&gt;full code it is here&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>An uninformed overview of NuGet</title>
            <link href="/posts/2011-03-28-an-uninformed-overview.html"/>
            <updated>2011-03-28T00:00:00.000Z</updated>
            <id>/posts/2011-03-28-an-uninformed-overview.html</id>
            <content type="html">&lt;p&gt;In case you&amp;#39;ve been living under a rock for the last few months you should have heard about &lt;a href=&quot;http://nuget.codeplex.com&quot;&gt;NuGet&lt;/a&gt;, and if you have been here&amp;#39;s the abridged version.&lt;/p&gt;
&lt;p&gt;NuGet is a package manager for .NET projects. Basically think Ruby Gems, NPM for Node.js, etc and you&amp;#39;ll come up with NuGet for .NET.&lt;/p&gt;
&lt;p&gt;NuGet isn&amp;#39;t the first attempt at a unified package management system, &lt;a href=&quot;http://www.openwrap.org/&quot;&gt;OpenWrap&lt;/a&gt; was here first, but it didn&amp;#39;t seem to have the reach that NuGet seems to have (yes this could be because you&amp;#39;ve got the official Microsoft stamp of awesome, lots more &lt;em&gt;Microsoft shills&lt;/em&gt; blogging about it, etc), but that shouldn&amp;#39;t be important, what&amp;#39;s more important is there is actually a package management story for .NET now.&lt;/p&gt;
&lt;h2&gt;How does NuGet work though?&lt;/h2&gt;
&lt;p&gt;Well NuGet is made up of two parts, first there is the &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet Gallery&lt;/a&gt; which packages are uploaded, packages can be downloaded, etc. This is data provided to connecting clients using &lt;a href=&quot;http://odata.org&quot;&gt;OData&lt;/a&gt; (which allows cool things like &lt;a href=&quot;http://www.aaron-powell.com/nuget/linqpad&quot;&gt;querying with LINQPad&lt;/a&gt;). You can also create your own NuGet server using the &lt;a href=&quot;http://nuget.org/List/Packages/NuGet.Server&quot;&gt;NuGet.Server&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Consuming NuGet can be done a couple of ways. As mentioned above you can use an OData reader such as LINQPad. You can write your own consumer that uses the &lt;a href=&quot;http://nuget.org/List/Packages/NuGet.Core&quot;&gt;NuGet.Core&lt;/a&gt; package (which I covered in detail in &lt;a href=&quot;http://www.aaron-powell.com/creating-a-nuget-plugin-engine&quot;&gt;this post&lt;/a&gt;) or you can use the &lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c&quot;&gt;Visual Studio 2010 tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Visual Studio tool also include a set of Powershell scripts which mean that you can call out to NuGet from Powershell, although I&amp;#39;m not entirely sure how well it&amp;#39;d work outside of Visual Studio as it does seem to use some of the VS API to add references to a project. But the Powershell tools are cool, they allow you to do things like &lt;a href=&quot;http://www.aaron-powell.com/nuget/global-install-package&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What makes up a NuGet package&lt;/h2&gt;
&lt;p&gt;A NuGet package, or &lt;strong&gt;nupkg&lt;/strong&gt; file, it really just a ZIP file with a manifest within it. The &lt;a href=&quot;http://nuget.codeplex.com/documentation?title=Nuspec%20Format&quot;&gt;nuspec format&lt;/a&gt; is documented and can easily be implemented. The way the files are treated has also &lt;a href=&quot;http://nuget.codeplex.com/wikipage?title=Package%20Conventions&quot;&gt;been documented&lt;/a&gt; and most of it is based off of conventions. Really the main two you need to know are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/lib files go into the project references&lt;/li&gt;
&lt;li&gt;/Content files go into the root of the project (and folder nesting is allowed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s also a &lt;a href=&quot;http://nuget.codeplex.com/releases&quot;&gt;Package Explorer tool available&lt;/a&gt; if you want to dig around the internals of existing packages.&lt;/p&gt;
&lt;h2&gt;Should you care?&lt;/h2&gt;
&lt;p&gt;I think that NuGet is something that is very vital to the .NET ecosystem. The lack of a unified package management system has been the bane of .NET development for a long time. Yes NuGet wasn&amp;#39;t the first, but does that really matter. I don&amp;#39;t care for the arguments that were waged when NuGet first came out. Accept that it&amp;#39;s here to stay and move on.&lt;/p&gt;
&lt;p&gt;And with that said I&amp;#39;m of the opinion that &lt;strong&gt;if it&amp;#39;s not on NuGet then it doesn&amp;#39;t exist&lt;/strong&gt;. Harsh as this may seem but I&amp;#39;ve got better things to do than:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the latest stable build&lt;/li&gt;
&lt;li&gt;Monitor a project for new versions&lt;/li&gt;
&lt;li&gt;Update my version when new releases are out &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ask any Rubiest if they&amp;#39;d use something that wasn&amp;#39;t a gem and you&amp;#39;ll pretty much always receive a &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Is NuGet just for Open Source?&lt;/h2&gt;
&lt;p&gt;This was a question asked at a developer event recently, and although it seems that most of the projects which are on NuGet are OSS I don&amp;#39;t see why NuGet would be confined to OSS.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t think that you could really do anything truly commercial from the official NuGet feed, but I can&amp;#39;t see why you couldn&amp;#39;t have a trial version of a library on there and as part of the install process&amp;#39; T&amp;amp;C&amp;#39;s state that it&amp;#39;s got restrictions.&lt;/p&gt;
&lt;h2&gt;NuGet and Mono&lt;/h2&gt;
&lt;p&gt;Something that was a topic of discussion last night with Demis was &amp;quot;Does NuGet work on Mono?&amp;quot; and from the quick searching I did it would seem that there isn&amp;#39;t a Mono version of the &amp;quot;Add Library Reference&amp;quot; dialog that the Visual Studio tools provide. From what I read there is some limitations to running NuGet on Mono (and I&amp;#39;m referring to the Mono CLR) due to some CLR 4 features that NuGet uses which aren&amp;#39;t available on Mono yet.&lt;/p&gt;
&lt;p&gt;Demis argued that if Microsoft was really serious about NuGet being a way to deliver open source projects to developers then they should be ensuring that it has Mono tooling.&lt;/p&gt;
&lt;p&gt;I beg to differ on this point. Microsoft have done (mostly) the right things so far, the &lt;a href=&quot;http://nuget.codeplex.com/SourceControl/list/changesets&quot;&gt;source is available&lt;/a&gt;, there are &lt;a href=&quot;http://nuget.codeplex.com/documentation&quot;&gt;contribution guidelines&lt;/a&gt; if you want to fix issues and there is documentation on the package format. This is about as open source as you&amp;#39;re going to find from Microsoft these days and it&amp;#39;s a heck of a lot better than the Microsoft of old, but as for actually building the tools for MonoDevelop, I think that&amp;#39;s something they should stay away from.&lt;/p&gt;
&lt;p&gt;If Microsoft was to add the support to MonoDevelop then it could be seen very much as an overbearing effort to push the platform (not that it&amp;#39;s not being pushed hard already :P).&lt;/p&gt;
&lt;h2&gt;Want to know more?&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re wanting to know more about NuGet I suggest that you keep an eye on &lt;a href=&quot;http://blog.davidebbo.com/&quot;&gt;David Ebbo&lt;/a&gt; and &lt;a href=&quot;http://weblogs.asp.net/davidfowler/&quot;&gt;David Fowler&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Animating with JavaScript</title>
            <link href="/posts/2011-03-13-javascript-animation.html"/>
            <updated>2011-03-13T00:00:00.000Z</updated>
            <id>/posts/2011-03-13-javascript-animation.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve always considered the &lt;a href=&quot;http://api.jquery.com/animate/&quot;&gt;animation&lt;/a&gt; aspect of jQuery to be a bit of black magic (and well I still do :P) but at the same time I want to know how it works.&lt;/p&gt;
&lt;p&gt;Recent a client had a need for some really basic animation (changing some elements dimentions) and they aren&amp;#39;t using jQuery (and aren&amp;#39;t in a position to add it as a dependency) so I needed to work out another solution. This gave me the opportunity I&amp;#39;d wanted, a chance to delve into what it would take to make animation work.&lt;/p&gt;
&lt;p&gt;Well turns out it&amp;#39;s not really that complex, in fact it can be done in about 60 lines of code. Rather building suspense &lt;a href=&quot;http://hg.slace.biz/javascript-tools/src/3322dbbdc2fe/JavaScriptTools/Scripts/slace.animator.js&quot;&gt;here is the code&lt;/a&gt; that I&amp;#39;ll be going over.&lt;/p&gt;
&lt;p&gt;Now that you&amp;#39;ve seen the full code let&amp;#39;s see about breaking it down.&lt;/p&gt;
&lt;h1&gt;Creating a starting point&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m going to use a self executing function to setup what we need, let&amp;#39;s create a skeleton like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;reserved&quot;&gt;var&lt;/span&gt; animator = (&lt;span class=&quot;reserved&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;reserved&quot;&gt;function&lt;/span&gt;(el, opts) {
        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; stuff
    };
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s two input arguments, an element to target and a set of options which will be the CSS properties we want to manipulate.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll do some basic validation, ensuring there was either an element or an ID selector (no I&amp;#39;m &lt;strong&gt;not&lt;/strong&gt; building a selector engine too :P) and ensuring that we did receive some CSS rules. Then a type check is done against &lt;code&gt;el&lt;/code&gt; to see if it was a DOM element or a selector (and yeah it&amp;#39;s pretty basic) but the ulimate goal is to get a single DOM element which we can work against.&lt;/p&gt;
&lt;p&gt;Next let&amp;#39;s setup some variables we&amp;#39;ll need:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;sql&quot;&gt;var &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; = +new &lt;span class=&quot;keyword&quot;&gt;Date&lt;/span&gt;,
    duration = opts.duration || &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; + duration,
    calc = el.currentStyle || getComputedStyle(el, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;),
    style = buildStyles(opts.css),
    data = {};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Here&amp;#39;s a trick, you can do &lt;code&gt;+new Date&lt;/code&gt; to grab the ticks right now ;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#39;re grabing a few values such as the start and end time periods, the duration for an animation (or a default of 600 miliseconds), the styles of the element (using &lt;code&gt;currentStyle&lt;/code&gt; or &lt;code&gt;getComputedStyle&lt;/code&gt; depending on whether you&amp;#39;re in a current generation browser or not). The current styles are going to be important when we get to the actual animation stage. The property (or method) returns an array which contains all the CSS rules applied to the element. Why do we need this? Well when we&amp;#39;re doing the animation we need to know how far we have to &amp;#39;travel&amp;#39;. If say you&amp;#39;re going from &lt;code&gt;padding-top:10px&lt;/code&gt; to &lt;code&gt;padding-top:30px&lt;/code&gt; we don&amp;#39;t want to cover 30px in total, just 20px, and if we know the starting point then we wont break the existing UI.&lt;/p&gt;
&lt;p&gt;Next we&amp;#39;re going to build up the styles. For this we&amp;#39;re going to jump out to a method to handle that.&lt;/p&gt;
&lt;h1&gt;Building the style rules&lt;/h1&gt;
&lt;p&gt;First we need a list of CSS properties which we&amp;#39;ll support:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;var supported = (&lt;span class=&quot;attribute&quot;&gt;'padding&lt;/span&gt;-top,padding-bottom,padding-left,padding-right,font-size,line-height,margin-top,margin-bottom,'
                + &lt;span class=&quot;attribute&quot;&gt;'margin&lt;/span&gt;-left,margin-right,border-top,border-bottom,border-left,border-right,width,height').split(',');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This I&amp;#39;m doing as a comma-separated string which is then split (I just find it more readable) and as you can see it just supports dimention-based manipulation.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll next build up a string which represents the full style rule set that we&amp;#39;re wanting to create:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buildStyles = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(style)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; style) {
        s += &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;':'&lt;/span&gt; + (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; style[x] == &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt; ? style[x]() : style[x]) + &lt;span class=&quot;string&quot;&gt;';'&lt;/span&gt;;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see here we&amp;#39;re also supporting functions for the style rules, it allows you to create funky rules based on calculations too :D. Basically it will take this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;rules&quot;&gt;{ 
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;css&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; {
        &lt;span class=&quot;string&quot;&gt;'font-size'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'30px'&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;'padding-top'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'10px'&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And produce this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;font&lt;/span&gt;-&lt;span class=&quot;tag&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:30px&lt;/span&gt;; &lt;span class=&quot;tag&quot;&gt;padding&lt;/span&gt;-&lt;span class=&quot;tag&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:10px&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to get tricky and filter out the rules which are not supported by out little library:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;var el = document.createElement('div');
el.innerHTML = '&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;' + s + '&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;';
var res = {};
for (var i = 0, l = supported.length; i &lt;span class=&quot;tag&quot;&gt;&amp;lt; &lt;span class=&quot;attribute&quot;&gt;l&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;++) {
    &lt;span class=&quot;attribute&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;attribute&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;attribute&quot;&gt;el.firstChild.style&lt;/span&gt;[&lt;span class=&quot;attribute&quot;&gt;supported&lt;/span&gt;[&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;]])) {
        &lt;span class=&quot;attribute&quot;&gt;res&lt;/span&gt;[&lt;span class=&quot;attribute&quot;&gt;supported&lt;/span&gt;[&lt;span class=&quot;attribute&quot;&gt;i&lt;/span&gt;]] = &lt;span class=&quot;attribute&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;x&lt;/span&gt;);
    }
}
&lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;res&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re producing a DOM element, then adding a child with the full rule set that was request. We&amp;#39;ll then go through all the supported rules, see if it was specified and then build up an object to return which has the rule set we desire. We&amp;#39;ve also got a little &lt;code&gt;parse&lt;/code&gt; method here which uses float parsing and regex to return &lt;code&gt;30px&lt;/code&gt; into &lt;code&gt;30&lt;/code&gt; which we can calculate against.&lt;/p&gt;
&lt;p&gt;That completes our building of the styles and now we can go back to the core method.&lt;/p&gt;
&lt;h1&gt;Handling the styles&lt;/h1&gt;
&lt;p&gt;Now that we&amp;#39;ve got the styles that we need to animate we have to make a clone of the style rules but set the values to that of the DOM element we&amp;#39;re naimating:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var p in style)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;] = &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(calc[p])&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is going back to the &lt;code&gt;currentStyles&lt;/code&gt; (or &lt;code&gt;getComputedStyles&lt;/code&gt;) object we found earlier.&lt;/p&gt;
&lt;h1&gt;Making it animate&lt;/h1&gt;
&lt;p&gt;So this sees all the boilerplate code out of the way we&amp;#39;ve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Got our start, end and duration&lt;/li&gt;
&lt;li&gt;Know what styles we originally had&lt;/li&gt;
&lt;li&gt;Know what styles we need to get to&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well let&amp;#39;s actually make it work!&lt;/p&gt;
&lt;p&gt;For this I&amp;#39;m going to use a recursive setTimeout pattern (which I covered &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blink&quot;&gt;in more details here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is the code that we&amp;#39;re going to need:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;    setTimeout(function go() {
        var now = +new &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt;,
        pos = now &amp;gt; end ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (now - start) / duration;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (now &amp;gt;= end) {
            return;
        }
        for (var p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; style) {
            el.style[p] = (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;[p] + &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;] - &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;])&lt;/span&gt; * &lt;span class=&quot;container&quot;&gt;((-&lt;span class=&quot;type&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;pos&lt;/span&gt; * &lt;span class=&quot;type&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;PI&lt;/span&gt;)&lt;/span&gt; / 2) + 0.5)) + 'px';&lt;/span&gt;
        }
        setTimeout(go, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);
    }, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;#39;s break it down. We&amp;#39;re grabbing the current ticks and working out just how much more ground there is to cover.&lt;/p&gt;
&lt;p&gt;But first off we need to check if we&amp;#39;ve hit the time period to do the animation in, and if so, just exit out of the timeout.&lt;/p&gt;
&lt;p&gt;If we are to keep going though we&amp;#39;ll get a bit crazy. So we&amp;#39;ll itterate through all the properties in the style settings we have been told to animate. But this is the crazy part:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;[p] + &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;] - &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;])&lt;/span&gt; * &lt;span class=&quot;container&quot;&gt;((-&lt;span class=&quot;type&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;cos&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;pos&lt;/span&gt; * &lt;span class=&quot;type&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;PI&lt;/span&gt;)&lt;/span&gt; / 2) + 0.5))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&amp;#39;t recall where I got this code from but I believe it was from within the jQuery source somewhere. Basically it&amp;#39;s some funky maths to determine a stable incrementation value based on the time remaining for the animation. And this is the most important part, you want to be able to animate at a consistent rate across the duration of the animation. By using the &lt;code&gt;pos&lt;/code&gt; (which is defined earlier in the method) we can accurately assume the distance each animation step has to cover.&lt;/p&gt;
&lt;p&gt;Once all style properties have been processed a timeout of 10 miliseconds is placed to re-execute the animation loop.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;To wrap we&amp;#39;ve looked at a way to make a really small and simple animation library. This is &lt;em&gt;not&lt;/em&gt; a replacement for jQuery (or any other animation library) but just a good chance to shed some light on how something a little bit black magic works.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s plenty of things missing from this implementation, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using CSS3 animations&lt;/li&gt;
&lt;li&gt;supporting animation chaining (eg: &lt;code&gt;animate(&amp;#39;h1&amp;#39;, { css: {&amp;#39;padding-top&amp;#39;:&amp;#39;30px&amp;#39;} }); animate(&amp;#39;h1&amp;#39;, { css: {&amp;#39;padding-top&amp;#39;: &amp;#39;10px&amp;#39;} });&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;notification of animiation completing (aka &lt;code&gt;$.Deferred&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But hopefully it does give you some interesting things to think about and &lt;a href=&quot;http://jsfiddle.net/slace/mVrN2/&quot;&gt;if you want to have a play I&amp;#39;ve put a jsfiddle up for it&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>ServerHere - When you just need a webserver</title>
            <link href="/posts/2011-03-08-serverhere.html"/>
            <updated>2011-03-08T00:00:00.000Z</updated>
            <id>/posts/2011-03-08-serverhere.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve been doing a lot of JavaScript development recently and as cool as &lt;a href=&quot;http://jsfiddle.net&quot;&gt;jsfiddle&lt;/a&gt; there&amp;#39;s a few things that really irk me about it (which is a topic for another day) and sometimes you just want to run the file locally to see how it goes.&lt;/p&gt;
&lt;p&gt;So you go and create a HTML and JavaScript file on your file system and you open it in your browser and you have that crazy file system path in your address bar. Most browsers this is fine for, but IE likes to try and be a bit more secure so I&amp;#39;ll often see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/javascript/ie-security.PNG&quot; alt=&quot;IE security warning&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sure you can change IE&amp;#39;s security settings to be a little less aggressive and not give you that warning but I quite like that my browser is trying to be a bit secure, I don&amp;#39;t see why that&amp;#39;s such a bad thing.&lt;/p&gt;
&lt;p&gt;But it can be a pain, if you don&amp;#39;t accept the security warning your JavaScript doesn&amp;#39;t work.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s several ways I could go about solving this problem, I could use Visual Studio and IIS Express (or Cassini if you&amp;#39;re old-school :P), I could map my local IIS install to that folder or I could write my own web server.&lt;/p&gt;
&lt;p&gt;Guess what I did!&lt;/p&gt;
&lt;h1&gt;ServerHere&lt;/h1&gt;
&lt;p&gt;If you guessed that I wrote my own web server then you guessed right. I&amp;#39;ve created a little project called &lt;strong&gt;&lt;a href=&quot;http://hg.slace.biz/serverhere&quot;&gt;ServerHere&lt;/a&gt;&lt;/strong&gt; which does exactly what the name implies, &lt;em&gt;creates a web server from the current folder&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s a commandline tool and you use it just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;tex&quot;&gt;PS&amp;gt; cd c:&lt;span class=&quot;command&quot;&gt;\SomeFolderToServe&lt;/span&gt;
PS&amp;gt; c:&lt;span class=&quot;command&quot;&gt;\Path&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\To&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\ServerHere&lt;/span&gt;.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there you go now you&amp;#39;ll have a server running at &lt;code&gt;http://+:8080&lt;/code&gt; (meaning &lt;code&gt;localhost&lt;/code&gt; and machine name will work).&lt;/p&gt;
&lt;p&gt;If you want to change the port it runs on you&amp;#39;ll need to run it as an administrator and then run it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;tex&quot;&gt;PS&amp;gt; c:&lt;span class=&quot;command&quot;&gt;\Path&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\To&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\ServerHere&lt;/span&gt;.exe /p:1234&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it&amp;#39;ll run on port &lt;code&gt;1234&lt;/code&gt; rather than &lt;code&gt;8080&lt;/code&gt; (or &lt;code&gt;6590&lt;/code&gt; which is  the default administrator port, just to avoid potential conflicts).&lt;/p&gt;
&lt;h1&gt;How do it work&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s a nifty little class in the .NET framework called &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.httplistener.aspx&quot;&gt;HttpListener&lt;/a&gt; and this is the core of building your own web server. Basically it&amp;#39;s a little class for handling the HTTP protocol.&lt;/p&gt;
&lt;p&gt;To use it you need to create a new instance of the class and then specify some prefixes:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var listener = new HttpListener()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
listener&lt;span class=&quot;preprocessor&quot;&gt;.Prefixes&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
listener&lt;span class=&quot;preprocessor&quot;&gt;.Start&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have a server running and listening on port 8080, via localhost. You can specify what ever hostname you want, or port number (but keep in mind that if you want to run a non-standard port you need to run as an administrator).&lt;/p&gt;
&lt;p&gt;To actually handle the requests you can do it synchronously or asynchronously, obviously depending what&amp;#39;s best for your scenario. ServerHere listens asynchronously so I&amp;#39;ll cover that off (if you&amp;#39;re interested in synchronous usages check the MSDN docs).&lt;/p&gt;
&lt;p&gt;First off we&amp;#39;ll create our web server class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;HttpServer&lt;/span&gt;&lt;/span&gt;
{
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; HttpListener _listener;

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpServer()
    {
        _listener = new HttpListener();
        _listener&lt;span class=&quot;variable&quot;&gt;.Prefixes&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;);
        _listener&lt;span class=&quot;variable&quot;&gt;.Start&lt;/span&gt;();

        _listener&lt;span class=&quot;variable&quot;&gt;.BeginGetContext&lt;/span&gt;(HandleResponse, null);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; HandlerResponse(IAsyncResult result) { ... }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re using here is the &lt;code&gt;BeginGetContext&lt;/code&gt; method, this will then deal with an async request. When the &lt;code&gt;Context&lt;/code&gt; (which is a HttpContext basically) is ready (ie - someone has requested a URL) you can handle it, write to it, etc:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;private void HandleResponse(IAsyncResult result)
{
    HttpListenerContext context&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    try
    {
        context = _listener&lt;span class=&quot;preprocessor&quot;&gt;.EndGetContext&lt;/span&gt;(result)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        _listener&lt;span class=&quot;preprocessor&quot;&gt;.BeginGetContext&lt;/span&gt;(HandleResponse, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    catch (HttpListenerException)
    {
        return&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    using (var response = context&lt;span class=&quot;preprocessor&quot;&gt;.Response&lt;/span&gt;)
    {
        response&lt;span class=&quot;preprocessor&quot;&gt;.StatusCode&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        response&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        using (var writer = new StreamWriter(response&lt;span class=&quot;preprocessor&quot;&gt;.OutputStream&lt;/span&gt;))
        {
            writer&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            writer&lt;span class=&quot;preprocessor&quot;&gt;.Flush&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }
        response&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the context from the listener (you want to catch the &lt;code&gt;HttpListenerException&lt;/code&gt; which will be thrown if the server is shutting down)&lt;/li&gt;
&lt;li&gt;Keep the server alive by re-issuing a &lt;code&gt;BeginGetContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get the response from the context&lt;/li&gt;
&lt;li&gt;Set a status code&lt;/li&gt;
&lt;li&gt;Set a content type&lt;/li&gt;
&lt;li&gt;Write something to the response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;ll leave it as an exercise to the reader to work out how to react to different URLs, return more useful responses, etc.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;To wrap up we&amp;#39;ve seen a handy little tool for a scenario that you&amp;#39;ll probably never come across.&lt;/p&gt;
&lt;p&gt;We then looked at the basics for creating your own web server.&lt;/p&gt;
&lt;p&gt;Now go, &lt;a href=&quot;http://hg.slace.biz/serverhere/src&quot;&gt;grab the source&lt;/a&gt; and create web servers to your hearts content!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Making the Internet Explorer JavaScript tools better</title>
            <link href="/posts/2011-03-02-ie9-console-thoughts.html"/>
            <updated>2011-03-02T00:00:00.000Z</updated>
            <id>/posts/2011-03-02-ie9-console-thoughts.html</id>
            <content type="html">&lt;p&gt;Previously I&amp;#39;ve blogged about a limitation of &lt;a href=&quot;/ie-9-console-assert&quot;&gt;console.assert from the IE9 developer tools&lt;/a&gt;. Also recently &lt;a href=&quot;http://tath.am&quot;&gt;Tatham Oddie&lt;/a&gt; blogged some overall &lt;a href=&quot;http://blog.tatham.oddie.com.au/2011/02/28/making-internet-explorer-better-for-developers/&quot;&gt;thoughts on improving IE9 for developers&lt;/a&gt; and I decided to elaborate some thoughts I&amp;#39;ve got around the JavaScript developer tools.&lt;/p&gt;
&lt;p&gt;JavaScript developer tools are a very important part of my toolbox, I really am quite a JavaScript fan (as you may know if you read my blog), so when I find something that irks me it &lt;em&gt;really&lt;/em&gt; irks me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Object inspection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you want to inspect an object in dev tools my first thought is to dump it into the console. While the object will dump out it&amp;#39;s not great, if you have nested objects they&amp;#39;ll produce the nice &lt;code&gt;[object Object]&lt;/code&gt;, also you can&amp;#39;t expand/ collapse the object like with other browsers. If you want to do that you need to put it into the &lt;strong&gt;Watch&lt;/strong&gt; window. This multi-step process is a bit tedious, particularly if you&amp;#39;re prototyping something like jQuery selectors or defining objects on the fly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code completion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is something that I&amp;#39;ve noticed in recent versions of Firebug and the Chrome developer tools and it&amp;#39;s really handy, being able to use intellisence on a JavaScript object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Console clearing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There doesn&amp;#39;t seem to be a way to clear the console other than calling &lt;code&gt;console.clear()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locals &amp;amp; Call Stack outside of debugging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#39;m not quite sure when you&amp;#39;d use those tabs on the &lt;em&gt;Script&lt;/em&gt; window when you&amp;#39;re not in a debugging session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No cross-tab interaction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With Chrome and Firebug when you drop a DOM object in the console and you hover over it the element reacts on the browser. This is really useful, especially when working with something like jQuery.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jQuery inspection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A jQuery selector will return an array, but it&amp;#39;s also an object literal, meaning it&amp;#39;s been augmented with a number of non-array properties. That stuff isn&amp;#39;t what you&amp;#39;re interested in, you just want the selector results. I&amp;#39;d much prefer that it is treated as just an array and the extended properties are ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;Mostly what I&amp;#39;ve outlined here is nit-picking on the developer tools, they are better than the previous versions and here&amp;#39;s hoping they take some inspiration from the other browsers.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How to install a package into all projects of a solution</title>
            <link href="/posts/2011-02-26-global-install-package.html"/>
            <updated>2011-02-26T00:00:00.000Z</updated>
            <id>/posts/2011-02-26-global-install-package.html</id>
            <content type="html">&lt;p&gt;This is a script that I&amp;#39;ve been keeping in my toolbox since &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet&lt;/a&gt; was first released.&lt;/p&gt;
&lt;p&gt;Ever now and then I need to do an install of a package across all projects in a solution. &lt;a href=&quot;http://nuget.org/Packages/Packages/Details/log4net-1-2-10&quot;&gt;log4net&lt;/a&gt; is an example of the kind of thing you&amp;#39;d want to globally install, so is &lt;a href=&quot;http://nuget.org/Packages/Packages/Details/Autofac-2-4-4-705&quot;&gt;Autofac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well here&amp;#39;s a script to run from the &lt;strong&gt;Package Management Console&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cmake&quot;&gt;Get-&lt;span class=&quot;keyword&quot;&gt;Project&lt;/span&gt; -All | &lt;span class=&quot;keyword&quot;&gt;Install&lt;/span&gt;-Package packageName&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also available as a &lt;a href=&quot;https://gist.github.com/843288&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: replace &lt;code&gt;packageName&lt;/code&gt; with what you want to install ;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Challenge to the reader&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*Update: With a tip-off from &lt;a href=&quot;http://twitter.com/#!/davidfowl/&quot;&gt;David Fowler&lt;/a&gt; you can compress the script even more. If you want to see the original just check out the gist history.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Installing into a project subset&lt;/h1&gt;
&lt;p&gt;Since this is just a powershell script you can also apply filters, so if you have say multiple test projects you do run this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cmake&quot;&gt;Get-&lt;span class=&quot;keyword&quot;&gt;Project&lt;/span&gt; -All | where { $_.Name.EndsWith(&lt;span class=&quot;string&quot;&gt;&quot;.Test&quot;&lt;/span&gt;) } | &lt;span class=&quot;keyword&quot;&gt;Install&lt;/span&gt;-Package NSubstitute&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woot!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>A look at browser storage options</title>
            <link href="/posts/2011-02-25-in-browser-storage.html"/>
            <updated>2011-02-25T00:00:00.000Z</updated>
            <id>/posts/2011-02-25-in-browser-storage.html</id>
            <content type="html">&lt;p&gt;Recently I created a little website, &lt;a href=&quot;http://www.aaron-powell.com/doin-nothin&quot;&gt;Doin&amp;#39; Nothin&amp;#39;&lt;/a&gt; which has a mostly JavaScript application. This is all well and good, means you don&amp;#39;t have any worries about submitting server data (unless you are registered and you want to save sessions). But it has a problem, because it&amp;#39;s all JavaScript I kept having a problem, I&amp;#39;d forget to log in before starting my session, meaning that I couldn&amp;#39;t save it as navigating to the login page would mean that my session was lost, since it only lived in the memory of the page. Another feature that I was wanting to have was support for leaving the site and coming back to resume a session.&lt;/p&gt;
&lt;p&gt;But how do we deal with this, currently it&amp;#39;s just a JavaScript API, there&amp;#39;s no server logic for dealing with sessions, tracking time blocks, etc. I &lt;em&gt;could&lt;/em&gt; add that in, but then I need to track anonymous users coming and going and they may not like that. Alternatively I could look into browser storage.&lt;/p&gt;
&lt;h1&gt;Introducing browser storage&lt;/h1&gt;
&lt;p&gt;Something that&amp;#39;s part of the HTML5 specification (seriously, what &lt;strong&gt;isn&amp;#39;t&lt;/strong&gt; part of HTML5 these days :P) is &lt;a href=&quot;http://dev.w3.org/html5/webstorage/&quot;&gt;Web Storage&lt;/a&gt; (Note: this is different to the &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;Indexed Database&lt;/a&gt;) and Web Storage is like cookies, but on steroids.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s two types of Web Storage, &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; and these two ways which you can do browser-level storage.&lt;/p&gt;
&lt;p&gt;Both types of storage inherit from the same &lt;code&gt;storage&lt;/code&gt; sub type, meaning that their API is just the same and they also store data in the same manner. The way data is stored is as a basic key/ value storage, with the value really just being a string. The Web Storage options don&amp;#39;t support storing complex objects &lt;em&gt;as objects&lt;/em&gt; so keep that in mind ;).&lt;/p&gt;
&lt;h2&gt;localStorage&lt;/h2&gt;
&lt;p&gt;The idea of &lt;code&gt;localStorage&lt;/code&gt; is that of persistent data &lt;em&gt;across browser sessions&lt;/em&gt;. By this I mean that if you close your browser window and then come back data you persisted into &lt;code&gt;localStorage&lt;/code&gt; will still be there.&lt;/p&gt;
&lt;p&gt;Anything which is pushed into &lt;code&gt;localStorage&lt;/code&gt; will reside in &lt;code&gt;localStorage&lt;/code&gt; until it is removed explicitly, so keep that in mind if/ when you are pushing into &lt;code&gt;localStorage&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;sessionStorage&lt;/h2&gt;
&lt;p&gt;The idea of &lt;code&gt;sessionStorage&lt;/code&gt; is that of persistent data &lt;em&gt;during the browser session&lt;/em&gt;, and what I mean is that while you&amp;#39;re navigating your site data in there will stay but once your browser session ends the data will be cleared out.&lt;/p&gt;
&lt;h1&gt;Working with Storage&lt;/h1&gt;
&lt;p&gt;Now that we have a basic overview of the different storage types how do we go about using them?&lt;/p&gt;
&lt;p&gt;Well they are quite easy, both &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; reside off the &lt;code&gt;window&lt;/code&gt; object, so they are globally accessible. Each type of Storage has three main methods you need to know, &lt;code&gt;setItem&lt;/code&gt;, &lt;code&gt;getItem&lt;/code&gt; and &lt;code&gt;removeItem&lt;/code&gt;. These are the CRUD operations which are exposed from the Storage object.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: there are a few other methods and properties I haven&amp;#39;t covered, such as &lt;code&gt;clear&lt;/code&gt; if you want to remove everything.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a basic example of how to use &lt;code&gt;localStorage&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;localStorage.setItem(&lt;span class=&quot;comment&quot;&gt;'foo', 'bar');&lt;/span&gt;
console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(localStorage.getItem(&lt;span class=&quot;comment&quot;&gt;'foo')); //bar&lt;/span&gt;
localStorage.removeItem(&lt;span class=&quot;comment&quot;&gt;'foo');&lt;/span&gt;
console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(localStorage.getItem(&lt;span class=&quot;comment&quot;&gt;'foo')); //undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re doing in this demo is adding an item to &lt;code&gt;localStorage&lt;/code&gt;, reading it out and then removing it.&lt;/p&gt;
&lt;p&gt;The exact same operations can be done with &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Working with complex objects&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier in the article only strings are handled by the Web Storage API, so how do you deal with a complex object? What would this do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;localStorage.&lt;/span&gt;setItem(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;cell&quot;&gt;{ foo: &lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt; }&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well you&amp;#39;ll end up with &lt;code&gt;[object Object]&lt;/code&gt; stored (well, maybe a bit different depending on browsers, but that&amp;#39;s what you get in IE9), and that&amp;#39;s not very useful. But the lovely thing about JavaScript is JSON, meaning you can convert an object to a string. This means that you can convert &lt;code&gt;{foo: &amp;#39;bar&amp;#39;}&lt;/code&gt; to &lt;code&gt;&amp;quot;{&amp;quot;foo&amp;quot;:&amp;quot;bar&amp;quot;}&amp;quot;&lt;/code&gt;, and then we can push that into our Web Storage of choice.&lt;/p&gt;
&lt;p&gt;The easiest way to do this is using the &lt;code&gt;JSON&lt;/code&gt; object which current generation browsers have in them (if you&amp;#39;re using an older browser you can use &lt;a href=&quot;https://github.com/douglascrockford/JSON-js&quot;&gt;this Douglas Crockford library&lt;/a&gt;, but chances are Web Storage isn&amp;#39;t available anyway :P).&lt;/p&gt;
&lt;p&gt;Now we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;localStorage.setItem(&lt;span class=&quot;comment&quot;&gt;'foo', JSON.stringify({ foo: 'bar' }));&lt;/span&gt;
console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(JSON.parse(localStorage.getItem(&lt;span class=&quot;comment&quot;&gt;'foo'))); //{ foo: 'bar' }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this we&amp;#39;ve used the &lt;code&gt;JSON.stringify&lt;/code&gt; method, this will take a JavaScript object and produces a string. This isn&amp;#39;t limited to just objects, but can also take an Array and make a JSON string from it (but yes, I know arrays are really just objects anyway, but that&amp;#39;s semantics! :P).&lt;/p&gt;
&lt;p&gt;We can then use the &lt;code&gt;JSON.parse&lt;/code&gt; to convert the JSON string back to a JavaScript object, when we&amp;#39;re reading it back out of our Storage.&lt;/p&gt;
&lt;h1&gt;Browser Support&lt;/h1&gt;
&lt;p&gt;Now that you know all this cool stuff you hit an obvious question, &lt;strong&gt;what browsers can I use this with?&lt;/strong&gt; and it&amp;#39;s a very good question. Here&amp;#39;s a list of what browsers I know it works with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IE8 &amp;amp; IE9&lt;/li&gt;
&lt;li&gt;FireFox 3.5+&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;Safari&lt;/li&gt;
&lt;li&gt;Opera 10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically any browser from the last few years support Web Storage, so keep that in mind.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;To wrap up in this article we&amp;#39;ve looked at the idea of Web Storage and  that there is two different types, &lt;code&gt;localStorage&lt;/code&gt; if you want to persist across multiple browser sessions or &lt;code&gt;sessionStorage&lt;/code&gt; if you want to persist for just the current browser session.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve also looked at how to perform CRUD operations against it, using &lt;code&gt;getItem&lt;/code&gt; to read, &lt;code&gt;setItem&lt;/code&gt; to add and &lt;code&gt;removeItem&lt;/code&gt; to delete and the fact that they allow strings only.&lt;/p&gt;
&lt;p&gt;We finished up by looking at how to store complex objects into the Web Storage locations, using the JSON API. &lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Querying NuGet via LINQPad</title>
            <link href="/posts/2011-02-24-linqpad.html"/>
            <updated>2011-02-24T00:00:00.000Z</updated>
            <id>/posts/2011-02-24-linqpad.html</id>
            <content type="html">&lt;p&gt;I was reading a blog post by &lt;a href=&quot;http://haacked.com/&quot;&gt;Phil Haack&lt;/a&gt; today on &lt;a href=&quot;http://haacked.com/archive/2011/02/23/how-to-find-out-which-nuget-packages-depend-on-yours.aspx&quot;&gt;How to find out which NuGet packages depend on yours&lt;/a&gt; and I decided I wanted to do a bit more digging into what I can find out about a package using NuGet&amp;#39;s OData feed.&lt;/p&gt;
&lt;p&gt;A cool feature of &lt;a href=&quot;http://www.linqpad.net/&quot;&gt;LINQPad&lt;/a&gt; is that it supports OData feeds, so you can add any OData feed and query against it.&lt;/p&gt;
&lt;p&gt;Well, NuGet is providing all its data via OData, so can we query it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sure!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/nuget/nuget-odata-01.PNG&quot; alt=&quot;NuGet in LINQPad&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s revisit the idea that Phil was talking about, finding out what packages depend on another one. Well since it&amp;#39;s just LINQ it&amp;#39;s really easy:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/nuget/nuget-odata-02.PNG&quot; alt=&quot;Querying NuGet&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all very cool but I decided to dig a bit deeper, I decided to do a simple bit of reporting, basically I&amp;#39;m interested to know this: &lt;em&gt;What packages depend on &lt;code&gt;package X&lt;/code&gt; and what version?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I decided to use Autofac as a baseline since I know it&amp;#39;s got a number of versions released on NuGet.&lt;/p&gt;
&lt;p&gt;Well it&amp;#39;s &lt;em&gt;easy&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;string packageName = &lt;span class=&quot;string&quot;&gt;&quot;Autofac&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

var dependencies = Packages
    &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Dependencies&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Contains&lt;/span&gt;(packageName))
    &lt;span class=&quot;preprocessor&quot;&gt;.ToList&lt;/span&gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; new {
        Package = &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;,
        Dependencies = &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Dependencies&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'|'&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt; =&amp;gt; new {
            Name = &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;':'&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],
            Version = &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;':'&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]
        })
    })
    &lt;span class=&quot;preprocessor&quot;&gt;.GroupBy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Dependencies&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt; == packageName)&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Version&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.First&lt;/span&gt;())
    &lt;span class=&quot;preprocessor&quot;&gt;.OrderBy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Key&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

dependencies&lt;span class=&quot;preprocessor&quot;&gt;.Dump&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: This is an OData feed so you&amp;#39;re limited to what queries are able to be done on the server. I&amp;#39;m not an OData expert (or really an OData user) so I&amp;#39;m doing most of it in memory once it&amp;#39;s returned.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This will then generate you a report which you can browse to find out what packages depend on what version.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re interested, at time of writing here is the stats:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/nuget/nuget-odata-03.PNG&quot; alt=&quot;Autofac dependency stats&quot;&gt;&lt;/p&gt;
&lt;p&gt;Looks like there&amp;#39;s quite a spread of what packages are depending on the Autofac versions ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating a NuGet-based plugin engine</title>
            <link href="/posts/2011-02-20-creating-a-nuget-plugin-engine.html"/>
            <updated>2011-02-20T00:00:00.000Z</updated>
            <id>/posts/2011-02-20-creating-a-nuget-plugin-engine.html</id>
            <content type="html">&lt;p&gt;Two of the main Open Source projects I work on have extensibility aspects to them, &lt;a href=&quot;http://umbraco.codeplex.com&quot;&gt;Umbraco&lt;/a&gt; and &lt;a href=&quot;http://www.funnelweblog.com&quot;&gt;FunnelWeb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re a bit early in the development cycle for Umbraco 5 to be diving into the packaging, but FunnelWeb is more at a point where we can dive into this. So it got me thinking about how we&amp;#39;d go about creating a simple way that developers can share plugins or themes they&amp;#39;ve created?&lt;/p&gt;
&lt;p&gt;Umbraco 4.x runs a decent package engine, but it&amp;#39;s custom developed, running a custom server, and a bunch of other stuff. For a smallish Open Source project like FunnelWeb this is a large investment which we&amp;#39;re rather avoid. Also with Umbraco 5 we&amp;#39;re looking at whether the custom developed way is the best was to go or not, as again there is time and money that needs to be invested for it too.&lt;/p&gt;
&lt;p&gt;My next thought was &lt;a href=&quot;http://nuget.codeplex.com&quot;&gt;NuGet&lt;/a&gt;, it&amp;#39;s all the rage at the moment (rightly so), so I was wondering if we can&amp;#39;t just used it as our source?&lt;/p&gt;
&lt;p&gt;Unsurprisingly I&amp;#39;m not the first person to look at this, it&amp;#39;s powering Orchard&amp;#39;s gallery, but I couldn&amp;#39;t find any decent documentation on how to use it. So after cracking open the Orchard source, doing some investigation it seems to be working. In the rest of this article I&amp;#39;ll cover a very basic way to do it.&lt;/p&gt;
&lt;h1&gt;What you&amp;#39;ll need&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s two things you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A server&lt;/li&gt;
&lt;li&gt;A consumer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s a server available as part of the NuGet source code, or alternatively you can install the &lt;a href=&quot;http://nuget.org/Packages/Packages/Details/NuGet-Server-1-2-2210-35&quot;&gt;NuGet package for NuGet.Server&lt;/a&gt; ;).&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;ve installed the NuGet.Server package (I&amp;#39;m going to assume that you&amp;#39;ve done that) drop in your own NuGet packages into the &lt;code&gt;/Packages&lt;/code&gt; folder and you&amp;#39;re ready to go. If you want to test this add it to Visual Studio and you can test it via &lt;code&gt;http://&amp;lt;your url&amp;gt;/nuget/Packages&lt;/code&gt;. Woot, one part down, now for the tricky part.&lt;/p&gt;
&lt;h1&gt;Consuming a NuGet feed yourself&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s build a little console app which will view our packages, first off you need to add a reference to &lt;a href=&quot;http://nuget.org/Packages/Packages/Details/NuGet-Core-1-1-229-159&quot;&gt;NuGet.Core&lt;/a&gt; and then we can start coding. &lt;/p&gt;
&lt;p&gt;The first thing you need is a repository which you&amp;#39;re going to work against:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repo =
        PackageRepositoryFactory.&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt;.CreateRepository(
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PackageSource(&lt;span class=&quot;string&quot;&gt;&quot;http://nuget.local/nuget/Packages&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s easiest to just use the default repository, unless you&amp;#39;re doing something &lt;em&gt;truely&lt;/em&gt; scary, and for the &lt;code&gt;PackageSource&lt;/code&gt; we&amp;#39;re providing a source which is the URL of the OData feed which our packages sit behind (you can give a file system path if you&amp;#39;re using that and it still works).&lt;/p&gt;
&lt;p&gt;From the repository you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List the packages&lt;/li&gt;
&lt;li&gt;Add a new package&lt;/li&gt;
&lt;li&gt;Remove a package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The last two I&amp;#39;m assuming are for the feature that&amp;#39;s being toted for NuGet 1.2 which allows you to &lt;a href=&quot;http://www.youtube.com/user/davidebbo2#p/a/u/0/RxdUqw_PXII&quot;&gt;push new packages from the NuGet console&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a number of Extension Methods that are also available which make it easier find packages, so you can do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;package&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;repo&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FindPackage&lt;/span&gt;(&quot;&lt;span class=&quot;title&quot;&gt;My&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;Awesome&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;Package&lt;/span&gt;&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next thing we want to do is install a package, and for this you need a &lt;code&gt;PackageManager&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; packageManager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PackageManager(
    repo,
    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultPackagePathResolver(&lt;span class=&quot;string&quot;&gt;&quot;http://nuget.local/nuget/Packages&quot;&lt;/span&gt;),
    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhysicalFileSystem(Environment.CurrentDirectory + &lt;span class=&quot;string&quot;&gt;@&quot;\Packages&quot;&lt;/span&gt;)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this we need to provide the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The repository to install from&lt;/li&gt;
&lt;li&gt;A package path resolver&lt;ul&gt;
&lt;li&gt;This takes the same path as the repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A folder to install the packages into&lt;ul&gt;
&lt;li&gt;This could be your &lt;code&gt;/bin&lt;/code&gt; if it&amp;#39;s a web app, or anything else you want&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;PackageManager&lt;/code&gt; is what we use to integrate with our local application, and it&amp;#39;s responsible for the install and uninstall process:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lua&quot;&gt;packageManager.Install(&lt;span class=&quot;built_in&quot;&gt;package&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this we&amp;#39;re providing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The package to install (you can also provide the ID of the package)&lt;/li&gt;
&lt;li&gt;Whether or not you want dependencies resolved (&lt;code&gt;false&lt;/code&gt; tells it to ignore dependencies)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;#39;s just that simple. And to uninstall it&amp;#39;s equally as simple:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;packageManager&lt;span class=&quot;preprocessor&quot;&gt;.Uninstall&lt;/span&gt;(package)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again for this you just need to provide the package instance (or ID) of the package to uninstall.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As you can see from only a few lines of code you can create your own consumer of NuGet feeds:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Program&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Main(string[] args)
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repo =
            PackageRepositoryFactory.Default.CreateRepository(
                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PackageSource(&lt;span class=&quot;string&quot;&gt;&quot;http://nuget.local/nuget/Packages&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;));

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; packageManager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PackageManager(
            repo,
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultPackagePathResolver(&lt;span class=&quot;string&quot;&gt;&quot;http://nuget.local/nuget/Packages&quot;&lt;/span&gt;),
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PhysicalFileSystem(Environment.CurrentDirectory + @&lt;span class=&quot;string&quot;&gt;&quot;\Packages&quot;&lt;/span&gt;)
            );

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;package&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;repo&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FindPackage&lt;/span&gt;(&quot;&lt;span class=&quot;title&quot;&gt;My&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;Awesome&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;Package&lt;/span&gt;&quot;);

        &lt;span class=&quot;title&quot;&gt;packageManager&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;InstallPackage&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;package&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;false&lt;/span&gt;);

        &lt;span class=&quot;title&quot;&gt;Console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;WriteLine&lt;/span&gt;(&quot;&lt;span class=&quot;title&quot;&gt;Installed&lt;/span&gt;!&quot;);
        &lt;span class=&quot;title&quot;&gt;Console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Read&lt;/span&gt;();

        &lt;span class=&quot;title&quot;&gt;packageManager&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;UninstallPackage&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;package&lt;/span&gt;);

        &lt;span class=&quot;title&quot;&gt;Console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;WriteLine&lt;/span&gt;(&quot;&lt;span class=&quot;title&quot;&gt;Uninstalled&lt;/span&gt;!&quot;);
        &lt;span class=&quot;title&quot;&gt;Console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Read&lt;/span&gt;();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So keep an eye on FunnelWeb as we work on using this to produce a theme and plugin engine.&lt;/p&gt;
&lt;p&gt;And who knows, this may also be the way we do the packager which will ship in Umbraco 5.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Are you Doin' Nothin'?</title>
            <link href="/posts/2011-02-18-doin-nothin.html"/>
            <updated>2011-02-18T00:00:00.000Z</updated>
            <id>/posts/2011-02-18-doin-nothin.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve been interested in what the impact low performing computers have on the overall efficiency of my daily output.&lt;/p&gt;
&lt;p&gt;To this end I decided to put together a little website which you can monitor this with, and this site is &lt;strong&gt;&lt;a href=&quot;http://doinnoth.in&quot;&gt;Doin&amp;#39; Nothin&amp;#39;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This little site basically runs a JavaScript app on the front end which will then track each time you start and stop the timer.&lt;/p&gt;
&lt;p&gt;There is also a sign-up aspect to the site, if you are like me and want to see the long-term impact then you can register and save your sessions, and later review them. Hopefully in the future I&amp;#39;ll be able to add some features to this such as graphing the data and better session management. These are cool ideas, but I can&amp;#39;t be sure as to if I&amp;#39;ll get them done :P.&lt;/p&gt;
&lt;p&gt;So go on, check it out, have a play :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Issue with Geolocation in IE9 RC</title>
            <link href="/posts/2011-02-11-ie9-rc-geolocation-issue.html"/>
            <updated>2011-02-11T00:00:00.000Z</updated>
            <id>/posts/2011-02-11-ie9-rc-geolocation-issue.html</id>
            <content type="html">&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;Looks like the server-side fix has been implemented and it not works just fine. Feel free to read on if you&amp;#39;re interested to know why it didn&amp;#39;t work for a period of time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You&amp;#39;ve probably already heard that &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/02/10/acting-on-feedback-ie9-release-candidate-available-for-download.aspx&quot;&gt;IE9 RC is available&lt;/a&gt;, and one of the features that has been included is the &lt;a href=&quot;http://dev.w3.org/geo/api/spec-source.html&quot;&gt;HTML5 Geolocation API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to add that to a fun little website that &lt;a href=&quot;http://tath.am&quot;&gt;Tatham Oddie&lt;/a&gt; and I built, &lt;a href=&quot;http://isitbeerti.me&quot;&gt;isitbeerti.me&lt;/a&gt;, if you allow your location to be known you&amp;#39;ll be able to bring up a map for the route to where it is midday. Hardly useful but fun none the less.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s a problem, although geolocation is detected as being a browser feature it fails for me in the IR9 RC.&lt;/p&gt;
&lt;h1&gt;Quick Geolocation API primer&lt;/h1&gt;
&lt;p&gt;At least years REMIX conference Tatham gave a talk about Geolocation (&lt;a href=&quot;http://blog.tatham.oddie.com.au/2010/06/03/talk-resources-riding-the-geolocation-wave/&quot;&gt;link&lt;/a&gt;) and if you want to get a much more in depth look at this check out his talk. Instead I&amp;#39;ll give a quick look at how to work with it in the browser.&lt;/p&gt;
&lt;p&gt;The idea behind the new geolocation API to have a JavaScript interface to the browser API which will be able to work out just where you&amp;#39;re browsing from.&lt;/p&gt;
&lt;p&gt;This is pretty sweet, and very easy to use, with the basic implementation requiring just this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;navigator&lt;span class=&quot;preprocessor&quot;&gt;.geolocation&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.getCurrentPosition&lt;/span&gt;(function(position) { console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(position)&lt;span class=&quot;comment&quot;&gt;; });&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a few points to note about this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#39;m only passing in a callback for the &lt;em&gt;success&lt;/em&gt; event, I&amp;#39;m not passing in an &lt;em&gt;error&lt;/em&gt; callback, nor am I passing in any position options (argument #3)&lt;/li&gt;
&lt;li&gt;I&amp;#39;m not checking if &lt;code&gt;navigator.geolocation&lt;/code&gt; actually exists, so it&amp;#39;ll fail with a JavaScript error in older browsers&lt;/li&gt;
&lt;li&gt;Calling &lt;code&gt;getCurrentPosition&lt;/code&gt; will check if the user has allowed the browser to know where you are for the website, if it&amp;#39;s the first time you&amp;#39;ll receive a prompt which you can choose to block it anyway (resulting in the error callback being invoked)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The issue with IE9 RC&lt;/h1&gt;
&lt;p&gt;As I mentioned there&amp;#39;s an issue with the IE9 RC, if you go to a website that requests location information, such as &lt;a href=&quot;http://isitbeerti.me&quot;&gt;isitbeerti.me&lt;/a&gt;, even if I allow it the &lt;em&gt;error&lt;/em&gt; callback is invoked. If I do the same thing in Chrome or the latest Firefox it works as advertised.&lt;/p&gt;
&lt;p&gt;Well as it turns out this is a &lt;strong&gt;known issue of the RC&lt;/strong&gt;, and a little birdy has told me that the cause of this is because &lt;strong&gt;the service used by the browser has an issue with DateTime objects which aren&amp;#39;t US formatted&lt;/strong&gt;. Ironically though it does work just fine in the USA, so it seems like an odd issue to have cropped up, after all geolocation does imply something global ;).&lt;/p&gt;
&lt;p&gt;The same little birdy has said that a fix is in the works, and luckily this is a &lt;strong&gt;service level fix&lt;/strong&gt; so hopefully they can roll it out without any browser changes.&lt;/p&gt;
&lt;p&gt;Fingers crossed and we can make location-based websites for all major browser vendors soon.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How does Umbraco look in IE9 RC?</title>
            <link href="/posts/2011-02-11-umbraco-ie9rc.html"/>
            <updated>2011-02-11T00:00:00.000Z</updated>
            <id>/posts/2011-02-11-umbraco-ie9rc.html</id>
            <content type="html">&lt;p&gt;Sexy!&lt;/p&gt;
&lt;p&gt;Seriously, the IE9 font rendering is just beautiful, best of the current browser set.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/umbraco/umbraco-ie9rc.PNG&quot; alt=&quot;Umbraco on IE9&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compare that to Chrome, notice the lack of antialiasing on the header text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/upload/Render/umbraco/umbraco-chrome.PNG&quot; alt=&quot;Umbracon on Chrome&quot;&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Implementing the marquee tag using jQuery</title>
            <link href="/posts/2011-02-09-marquee.html"/>
            <updated>2011-02-09T00:00:00.000Z</updated>
            <id>/posts/2011-02-09-marquee.html</id>
            <content type="html">&lt;p&gt;It&amp;#39;s time for another foray into the good old days of HTML, and we&amp;#39;re going to look at how to build the &lt;a href=&quot;http://en.wikipedia.org/wiki/Marquee_element&quot;&gt;&lt;code&gt;&amp;lt;marquee&amp;gt;&lt;/code&gt; tag&lt;/a&gt;, which has also gone for quite some time.&lt;/p&gt;
&lt;p&gt;Again we&amp;#39;re going to use &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; to help us out, so let&amp;#39;s see what we&amp;#39;re building:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $.fn.textWidth = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;{
         var calc = '&amp;lt;span style=&lt;span class=&quot;string&quot;&gt;&quot;display:none&quot;&lt;/span&gt;&amp;gt;' + $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.text&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; + '&amp;lt;/span&amp;gt;'&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
         $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'body')&lt;/span&gt;&lt;/span&gt;.append&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
         var width = $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'body')&lt;/span&gt;&lt;/span&gt;.find&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'span&lt;span class=&quot;keyword&quot;&gt;:last&lt;/span&gt;')&lt;/span&gt;&lt;/span&gt;.width&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
         $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'body')&lt;/span&gt;&lt;/span&gt;.find&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'span&lt;span class=&quot;keyword&quot;&gt;:last&lt;/span&gt;')&lt;/span&gt;&lt;/span&gt;.remove&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        return width&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    $.fn.marquee = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
        var that = $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;,
            textWidth = that.textWidth&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;,
            offset = that.width&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;,
            width = offset,
            css = {
                'text-indent' : that.css&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'text-indent')&lt;/span&gt;&lt;/span&gt;,
                'overflow' : that.css&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'overflow')&lt;/span&gt;&lt;/span&gt;,
                'white-space' : that.css&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'white-space')&lt;/span&gt;&lt;/span&gt;
            },
            marqueeCss = {
                'text-indent' : width,
                'overflow' : 'hidden',
                'white-space' : 'nowrap'
            }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        function go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
            if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; == &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;textWidth*-1&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
                width = offset&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            }
            that.css&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;'text-indent', width + 'px')&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            width--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            setTimeout&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, &lt;span class=&quot;number&quot;&gt;1e1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        that.css&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;marqueeCss&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        width--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then use it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).marquee();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can probably see this is a bit more involved than when we &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blink&quot;&gt;implemented the &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Breaking it down&lt;/h1&gt;
&lt;p&gt;From what you can see here we&amp;#39;ve actually got 2 plugins that I&amp;#39;m creating, the first one is going called &lt;code&gt;textWidth&lt;/code&gt;, the other being the actual &lt;code&gt;marquee&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I&amp;#39;ve actually used some code I found on the web for the &lt;code&gt;textWidth&lt;/code&gt; plugin, which you can find &lt;a href=&quot;http://stackoverflow.com/questions/1582534/calculating-text-width-with-jquery/3925757#3925757&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Text Width&lt;/h2&gt;
&lt;p&gt;The first issue we have to overcome is working out just how wide the piece of text we&amp;#39;re going to be moving is, otherwise we don&amp;#39;t really know what we&amp;#39;re going to be moving.&lt;/p&gt;
&lt;p&gt;The piece of code we&amp;#39;re using for it is quite simple, all it does is creates a hidden tag that will contain only the text, and then get the size of that element. It&amp;#39;s not 100% fool-proof, I&amp;#39;m not taking into account padding/ margin/ border on the span tag, but it&amp;#39;ll &lt;em&gt;generally&lt;/em&gt; do the job.&lt;/p&gt;
&lt;h2&gt;Implementing Marquee&lt;/h2&gt;
&lt;p&gt;So now that we&amp;#39;re able to work out the width of the text we can start implementing the full &lt;code&gt;marquee&lt;/code&gt; plugin, first thing we need to do is setup a few variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;that&lt;/code&gt; will be a jQuery instance of the DOM elements we&amp;#39;ve selected&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textWidth&lt;/code&gt; is well, the text width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset&lt;/code&gt; is the full width of the element we want&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt; will contain the original values of the elements we&amp;#39;ve about to change for the marquee to work&lt;/li&gt;
&lt;li&gt;&lt;code&gt;marqueeCss&lt;/code&gt; is a set of CSS values we need to change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see we are changing some CSS values, what we are setting is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text-indent&lt;/code&gt;, we need to set this to the full width of the element, this means that the text wont start until it&amp;#39;s off the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow&lt;/code&gt;, so the text doesn&amp;#39;t show up when we push the indent out we will set the overflow to hidden&lt;/li&gt;
&lt;li&gt;&lt;code&gt;white-space&lt;/code&gt;, this is an interesting one, there&amp;#39;s probably a better way to do this, but what it does is prevents the content from breaking to a new line when the width isn&amp;#39;t enough for the content to reside within. This combined with the &lt;code&gt;overflow&lt;/code&gt; will mean that the content stays on the one line and isn&amp;#39;t shown until we want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again we&amp;#39;re going to use the recursive setTimeout pattern, &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blink&quot;&gt;which I talked about here&lt;/a&gt;, but before we get started we want to update the CSS for the element and then do our first move, decreasing the width by 1px for when we first call &lt;code&gt;go&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s have another look at the &lt;code&gt;go&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;delphi&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{
    if(width == (textWidth*-1)) {
        width = offset;
    }&lt;/span&gt;
    &lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;'text-indent'&lt;/span&gt;, width + &lt;span class=&quot;string&quot;&gt;'px'&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;
    width--;
    setTimeout(go, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;e1);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is why we need the &lt;code&gt;textWidth&lt;/code&gt;, as we move once we&amp;#39;ve moved the text off the screen we need to then move it back to the right hand side and it starts all over again.&lt;/p&gt;
&lt;p&gt;Woo it&amp;#39;s so pretty.&lt;/p&gt;
&lt;h1&gt;Time for sex appeal&lt;/h1&gt;
&lt;p&gt;Why don&amp;#39;t we add the ability to set the number of times to scroll, that&amp;#39;s an easy one to add:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;$.fn.marquee = function(args) {
    var &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; = $(this),
        textWidth = &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.textWidth(),
        &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.width(),
        width = &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt;,
        css = {
            '&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent'),
            'overflow' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('overflow'),
            'white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;')
        },
        marqueeCss = {
            '&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent' : width,
            'overflow' : 'hidden',
            'white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;' : 'nowrap'
        },
        args = $.extend(&lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;, { &lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; }, args),
        i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;

    function go() {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(width == (textWidth*-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) {
            i++;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == args.&lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css(css);
&lt;span class=&quot;command&quot;&gt;                return&lt;/span&gt;;
            }
            width = &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt;;
        }
        &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent', width + 'px');
        width&lt;span class=&quot;comment&quot;&gt;--;&lt;/span&gt;
        setTimeout(go, &lt;span class=&quot;number&quot;&gt;1e1&lt;/span&gt;);
    };
    &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css(marqueeCss);
    width&lt;span class=&quot;comment&quot;&gt;--;&lt;/span&gt;
    go();
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Really all we&amp;#39;ve done here is allow an argument to be passed in, and each time we hit the left edge we increment the count and check if we&amp;#39;ve done enough passes. When we have we&amp;#39;ll set it back to the original state.&lt;/p&gt;
&lt;p&gt;Now you can run this if you want only two passes:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).marquee({ &lt;span class=&quot;method&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up, we&amp;#39;ll add some speed, and that&amp;#39;s just a matter of adding &lt;code&gt;speed&lt;/code&gt; to the arguments, and default it to &lt;code&gt;1e1&lt;/code&gt; so that we have our standard. I wont bore you with the code (it&amp;#39;ll be visible in the next parts anyway), but with this you can just run:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).marquee({ &lt;span class=&quot;method&quot;&gt;speed:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it goes twice as fast!&lt;/p&gt;
&lt;h1&gt;Bringing sexy backwards&lt;/h1&gt;
&lt;p&gt;So the next thing that&amp;#39;d be cool, let&amp;#39;s go from left to right, rather than right to left.&lt;/p&gt;
&lt;p&gt;First off we&amp;#39;ll add a new argument property, meaning we can do args like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;rules&quot;&gt;{ 
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;leftToRight&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; true 
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s the updated plugin:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;$.fn.marquee = function(args) {
    var &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; = $(this);
    var textWidth = &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.textWidth(),
        &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.width(),
        width = &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt;,
        css = {
            '&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent'),
            'overflow' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('overflow'),
            'white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;' : &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;')
        },
        marqueeCss = {
            '&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent' : width,
            'overflow' : 'hidden',
            'white-&lt;span class=&quot;constant&quot;&gt;space&lt;/span&gt;' : 'nowrap'
        },
        args = $.extend(&lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;, { &lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, speed: &lt;span class=&quot;number&quot;&gt;1e1&lt;/span&gt;, leftToRight: &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt; }, args),
        i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
        stop = textWidth*-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;

    function go() {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(width == stop) {
            i++;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i == args.&lt;span class=&quot;command&quot;&gt;count&lt;/span&gt;) {
                &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css(css);
&lt;span class=&quot;command&quot;&gt;                return&lt;/span&gt;;
            }
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(args.leftToRight) {
                width = textWidth*-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
            } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
                width = &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt;;
            }
        }
        &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css('&lt;span class=&quot;type&quot;&gt;text&lt;/span&gt;-indent', width + 'px');
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(args.leftToRight) {
            width++;
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            width&lt;span class=&quot;comment&quot;&gt;--;&lt;/span&gt;
        }
        setTimeout(go, args.speed);
    };
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(args.leftToRight) {
        width = textWidth*-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
        width++;
        stop = &lt;span class=&quot;command&quot;&gt;offset&lt;/span&gt;;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        width&lt;span class=&quot;comment&quot;&gt;--;            &lt;/span&gt;
    }
    &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;.css(marqueeCss);
    go();
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what we need to do is change the start position, if we&amp;#39;re going left-to-right we&amp;#39;ll set the initial indent to be the negative width of the text. I&amp;#39;ve also done some refactoring which will have a preset value for the position we need to stop and reset from. By default this will be the negative width of the text when we&amp;#39;re going right to left. When we&amp;#39;re going left to right though we want it to be the full width of the content.&lt;/p&gt;
&lt;p&gt;Also the &lt;code&gt;width&lt;/code&gt; that we&amp;#39;re tracking either gets increased or decreased, depending what direction we&amp;#39;re going.&lt;/p&gt;
&lt;p&gt;So we can go backwards like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).marquee({ &lt;span class=&quot;method&quot;&gt;leftToRight:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Weeeeeeeeee!&lt;/p&gt;
&lt;h1&gt;Finishing it off with $.Deferred&lt;/h1&gt;
&lt;p&gt;We looked at &lt;code&gt;$.Deferred()&lt;/code&gt; as part of the &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tag implementation, so I wont cover it in great depth here, really all we have to do is quite simply, we create our &lt;code&gt;$.Deferred()&lt;/code&gt; at the start of the plugin, return the &lt;code&gt;promise&lt;/code&gt; at the end, and run &lt;code&gt;resolve&lt;/code&gt; when the count is up.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s also a &lt;code&gt;reject&lt;/code&gt; call to make sure that we can fail if the selector didn&amp;#39;t work.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This brings us to the conclusion of our fun into jQuery again and bringing back a good ol&amp;#39; friend in the form of &lt;code&gt;marquee&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve got a &lt;a href=&quot;https://gist.github.com/820404&quot;&gt;gist&lt;/a&gt; if you want the code and a &lt;a href=&quot;http://jsfiddle.net/slace/88YLG/&quot;&gt;jsfiddle&lt;/a&gt; if you want to play around with it.&lt;/p&gt;
&lt;p&gt;Go go gadget 1998 :D.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Blink and marquee!</title>
            <link href="/posts/2011-02-09-blinking-marquee.html"/>
            <updated>2011-02-09T00:00:00.000Z</updated>
            <id>/posts/2011-02-09-blinking-marquee.html</id>
            <content type="html">&lt;p&gt;Recently I&amp;#39;ve blogged about creating the a &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blink&quot;&gt;&lt;code&gt;blink&lt;/code&gt; tag&lt;/a&gt; with jQuery, I&amp;#39;ve also blogged about making a &lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/marquee&quot;&gt;&lt;code&gt;marquee&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well can we combine them? Sure we can! But with &lt;code&gt;$.Deferred()&lt;/code&gt; there&amp;#39;s some more cool things we can do, like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$.&lt;/span&gt;when(&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).blink({ &lt;span class=&quot;method&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; }), &lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).marquee({ &lt;span class=&quot;method&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; }))
    .done(function() {
        &lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'color'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#f00'&lt;/span&gt;);
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once both the plugins have completed the text will turn red.&lt;/p&gt;
&lt;p&gt;Without wanting to get too deep into how Deferred works (&lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;read the doco for that&lt;/a&gt;) the high-level view is that when all the methods that are passed into &lt;code&gt;$.when&lt;/code&gt; raise &lt;code&gt;deferred.resolve&lt;/code&gt; (it only works if they use promise and such properly), but yeah, that&amp;#39;s how you can have a function invoked when all the deferred method complete!&lt;/p&gt;
&lt;p&gt;Hey, you could even do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;.get(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;), &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).blink({ &lt;span class=&quot;symbol&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; }))
    .done(function() {
        &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'color'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#f00'&lt;/span&gt;);
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Blink &amp;amp; AJAX, how awesome!&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a &lt;a href=&quot;http://jsfiddle.net/slace/C85VH/&quot;&gt;jsfiddle&lt;/a&gt; if you want to play too.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Implementing the blink tag using jQuery</title>
            <link href="/posts/2011-02-08-blink.html"/>
            <updated>2011-02-08T00:00:00.000Z</updated>
            <id>/posts/2011-02-08-blink.html</id>
            <content type="html">&lt;p&gt;Do you miss the good old days of of the web where you had the &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tag, oh it was wonderful.&lt;/p&gt;
&lt;p&gt;Well today I decided that I wanted to bring it back, damnit I &lt;em&gt;want&lt;/em&gt; my text to blink!&lt;/p&gt;
&lt;p&gt;Thanks to the wonders of &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; this is a snap to build, in fact here it is:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $.fn.blinky = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
      var that = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        function go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
          $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeOut&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeIn&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
           setTimeout&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, &lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
        }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can use it just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).blinky();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woo, all your &lt;code&gt;h1&lt;/code&gt; elements are going to blink :D.&lt;/p&gt;
&lt;h1&gt;Breaking it down&lt;/h1&gt;
&lt;p&gt;To make this work you need to run the code periodically, in my case I&amp;#39;m running it every 1000 milliseconds (&lt;code&gt;1e3&lt;/code&gt; is just a lazy way of doing it, exponents are fun!). You could do this with the &lt;code&gt;setInterval&lt;/code&gt; method, but &lt;code&gt;setInterval&lt;/code&gt; isn&amp;#39;t great, if your code is going to take longer than the allocated time it&amp;#39;ll start again, &lt;strong&gt;before&lt;/strong&gt; the previous has finished!&lt;/p&gt;
&lt;p&gt;Instead I&amp;#39;m using the recursive setTimeout pattern, let&amp;#39;s look at that.&lt;/p&gt;
&lt;h2&gt;Recursive setTimeout pattern&lt;/h2&gt;
&lt;p&gt;This pattern is cropping up with some of the more popular frameworks, and the idea is that rather executing on a particular interval you execute when the code you want to run is completed.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a better example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(result) {
        &lt;span class=&quot;comment&quot;&gt;//do something with the result&lt;/span&gt;
        setTimeout(doStuff, &lt;span class=&quot;number&quot;&gt;1e4&lt;/span&gt;);
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see we&amp;#39;re doing an AJAX &lt;code&gt;get&lt;/code&gt; which may take a while to complete, and once it does complete we&amp;#39;ll do it again in 1000 milliseconds. If I&amp;#39;d been using a &lt;code&gt;setInterval&lt;/code&gt; then there is the possibility of having two running at the same time, since the first hadn&amp;#39;t finished before the second started.&lt;/p&gt;
&lt;h1&gt;Sexing blink up&lt;/h1&gt;
&lt;p&gt;So now that we have a working &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; simulator, let&amp;#39;s sex it up a bit. Why not make it so we can specify the speed at which it blinks at:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $.fn.blinky = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;frequency&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
      frequency = frequency || &lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      var that = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        function go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
          $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeOut&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeIn&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
           setTimeout&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, frequency)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
        }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can optionally pass in a frequency you want to blink at:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).blinky(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;e3);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Woo-hoo, delayed blink!&lt;/p&gt;
&lt;p&gt;How about we extend it so that you can specify the number of times you want to blink:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $.fn.blinky = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
      var opts = { frequency: &lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;, count: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      args = $.extend&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, opts, args)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;  &lt;/span&gt;
      var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      var that = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        function go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
          if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; == args.count)&lt;/span&gt;&lt;/span&gt; return&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
          i++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
          $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeOut&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeIn&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
          setTimeout&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, args.frequency)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
        }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve also refactored to use an object literal as the arguments, using &lt;a href=&quot;http://api.jquery.com/jQuery.extend/&quot;&gt;jQuery.extend&lt;/a&gt;, meaning you can do it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).blinky({ frequency : &lt;span class=&quot;number&quot;&gt;2e3&lt;/span&gt;, &lt;span class=&quot;method&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will cause the &lt;code&gt;h1&lt;/code&gt; to blink 3 times over the course of 6 seconds, how pretty.&lt;/p&gt;
&lt;h1&gt;Making it REALLY sexy!&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m sure you&amp;#39;ve heard by now that &lt;a href=&quot;http://blog.jquery.com/2011/01/31/jquery-15-released/&quot;&gt;jQuery 1.5 is out&lt;/a&gt;, and one of the new features of jQuery 1.5 is the &lt;code&gt;Deferred&lt;/code&gt; object. &lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;Full API doco is here&lt;/a&gt;, but the short of it is that &lt;code&gt;Deferred&lt;/code&gt; is how the new AJAX API works (I suggest you check out the jQuery doco for the best explanation of it), but one of the really cool things is that you can use &lt;code&gt;Deferred&lt;/code&gt; in your own API, so that when your operations finish it can raise a &lt;code&gt;done&lt;/code&gt; or &lt;code&gt;fail&lt;/code&gt; method, depending on what is happening.&lt;/p&gt;
&lt;p&gt;Since we have the ability to specify a number of times to execute our blink will occur why not use &lt;code&gt;Deferred&lt;/code&gt; to call a method when we&amp;#39;re done, seems like a good idea right.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s plenty of examples on the web of how to use &lt;code&gt;Deferred&lt;/code&gt;, but here&amp;#39;s a basic example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//create an instance of deferred&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dfd = $.Deferred();

    $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(result) {
        &lt;span class=&quot;comment&quot;&gt;//do stuff with result&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//success, so we tell the deferred object to resolve itself&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dfd.resolve();
    });
    &lt;span class=&quot;comment&quot;&gt;//return a promise to be deferred&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dfd.promise();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The high level workflow is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a deferred object&lt;/li&gt;
&lt;li&gt;return a promise, to indicate that the deferred will complete at some point&lt;/li&gt;
&lt;li&gt;in the &lt;code&gt;get&lt;/code&gt; method when it completes call the resolve method so anyone listening to the deferred will be run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;#39;s add it to our blink method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;$)&lt;/span&gt;&lt;/span&gt; {
    $.fn.blinky = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
      var opts = { frequency: &lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;, count: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      args = $.extend&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, opts, args)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;  &lt;/span&gt;
      var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      var that = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
      var dfd = $.Deferred&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        function go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
            if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
                return dfd.reject&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;    &lt;/span&gt;
            }
            if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; == args.count)&lt;/span&gt;&lt;/span&gt; {
                return dfd.resolve&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            }
          i++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
          $&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeOut&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.fadeIn&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
          setTimeout&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, args.frequency)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
        }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        go&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        return dfd.promise&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With deferred we can now do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;&lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;)
.blink({ &lt;span class=&quot;method&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; })
.done(function() {
    &lt;span class=&quot;char&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'h1'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'color'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#f00'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So once we&amp;#39;ve finished executing the two iterations the blink the &lt;code&gt;h1&lt;/code&gt; will turn red.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ve also got code in for a failure, if there was nothing found in our selector it&amp;#39;ll raise a failure method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;$(&lt;span class=&quot;comment&quot;&gt;'foo')&lt;/span&gt;
.blink({ count: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; })
.fail(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
    console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;comment&quot;&gt;'aww snap!');&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Just like this we&amp;#39;ve come to the end of our post. This isn&amp;#39;t really a useful jQuery plugin, in fact &lt;code&gt;&amp;lt;bink&amp;gt;&lt;/code&gt; was a terrible idea, it&amp;#39;s more a way that we can investigate a few interesting points, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recursive setTimeout pattern for better control over delayed execution&lt;/li&gt;
&lt;li&gt;using Deferred to execute code once we&amp;#39;re done without passing the callback as an argument&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If anyone is interested the &lt;a href=&quot;https://gist.github.com/818234&quot;&gt;full code is available as a gist&lt;/a&gt; and &lt;a href=&quot;http://jsfiddle.net/slace/saB4q/&quot;&gt;I&amp;#39;ve created a playground&lt;/a&gt; on &lt;a href=&quot;http://jsfiddle.net/&quot;&gt;jsfiddle&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>LINQ in JavaScript, now with more ES5</title>
            <link href="/posts/2011-02-06-html5.html"/>
            <updated>2011-02-06T00:00:00.000Z</updated>
            <id>/posts/2011-02-06-html5.html</id>
            <content type="html">&lt;p&gt;When I first wrote &lt;a href=&quot;/linq-in-javascript&quot;&gt;LINQ in JavaScript&lt;/a&gt; a few years ago it was just a thought experiment.&lt;/p&gt;
&lt;p&gt;Since then I&amp;#39;ve actually found that I want to use it, quite often in fact, and a lot of the reason I&amp;#39;ve been wanting this is because I&amp;#39;m lacking the ECMAScript 5 features which LINQ in JavaScript provides.&lt;/p&gt;
&lt;h1&gt;ECMAScript 5 quick primer&lt;/h1&gt;
&lt;p&gt;A lot of people mistake many of the ECMAScript 5 (ES5) features for being HTML5, but it isn&amp;#39;t really, what we&amp;#39;re looking at here are the next features of JavaScript, and these are the &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;These methods are similar to the kind of things you expect in functional programming languages, and how you can interact with arrays. The &lt;a href=&quot;http://ie.microsoft.com/testdrive/&quot;&gt;IE9 Test Drive&lt;/a&gt; actually has a good set of &lt;a href=&quot;http://ie.microsoft.com/testdrive/HTML5/ECMAScript5Array/Default.html&quot;&gt;examples of using these new features&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So now that browsers are starting to come with built in methods like &lt;code&gt;Array.prototype.map&lt;/code&gt;, which will transform the data into a new type or &lt;code&gt;Array.prototype.filter&lt;/code&gt;, allowing us to conditionally remove items from the array, it&amp;#39;d make sense to actually use them.&lt;/p&gt;
&lt;h1&gt;Improving LINQ in JavaScript&lt;/h1&gt;
&lt;p&gt;As I said browsers are starting to ship with the new features on Array they are going to be a lot faster than anything written purely in JavaScript and residing in-browser.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s for example look at improving the &lt;code&gt;Array.where&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt;.prototype.where = &lt;span class=&quot;keyword&quot;&gt;Array&lt;/span&gt;.prototype.filter || &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//implement a custom method&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here what we&amp;#39;re doing is executing the logic of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;Array.prototype.filter&lt;/code&gt; method exists assign it to &lt;code&gt;Array.prototype.where&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If it doesn&amp;#39;t we&amp;#39;ll provide a custom method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can do the same thing with &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;indexOf&lt;/code&gt;, using built-in methods from the &lt;code&gt;Array.prototype&lt;/code&gt; chain.&lt;/p&gt;
&lt;h1&gt;Other updates&lt;/h1&gt;
&lt;p&gt;While adding these updates I also decided to do some other performance tweaks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;skip&lt;/code&gt; will now use &lt;code&gt;Array.prototype.slice&lt;/code&gt; rather than iterating through the collection in JavaScript&lt;/li&gt;
&lt;li&gt;&lt;code&gt;take&lt;/code&gt; also uses &lt;code&gt;slice&lt;/code&gt;, but does a -1 multiplication so we go backwards through the collection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;groupBy&lt;/code&gt; has been cleaned up so there&amp;#39;s a few less lines of code in it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; will pass in all the ES5 arguments when running in browsers that don&amp;#39;t support ES5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to &lt;a href=&quot;http://hg.slace.biz/linq-in-javascript/overview&quot;&gt;check out the code from my bitbucket&lt;/a&gt;, and maybe some others than I will use it ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Tweaking console.assert in IE9</title>
            <link href="/posts/2011-01-30-ie-9-console-assert.html"/>
            <updated>2011-01-30T00:00:00.000Z</updated>
            <id>/posts/2011-01-30-ie-9-console-assert.html</id>
            <content type="html">&lt;p&gt;Today while writing some JavaScript I was using the &lt;code&gt;console.assert&lt;/code&gt; method to work out the state of things at different points in time.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not familiar with &lt;code&gt;console.assert&lt;/code&gt; here&amp;#39;s the method signature:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;assert(expression, message&lt;span class=&quot;matrix&quot;&gt;[, object]&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this allows you to do is pass in an expression to be evaluated, a message to display when the expression is &lt;code&gt;false&lt;/code&gt; and an optional object to dump.&lt;/p&gt;
&lt;p&gt;This is really useful if you&amp;#39;re writing large chunks of JavaScript and you can&amp;#39;t/ don&amp;#39;t want to attach the debugger (common if you&amp;#39;re working with timeouts and intervals), you can have the application assertion results to the console to be observed.&lt;/p&gt;
&lt;p&gt;I was using this in Chrome and FireFox (since the machine I have at work only has XP so no IE9 :() and found it really useful to be able to log out the optional object.&lt;/p&gt;
&lt;p&gt;When doing so you end up with something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/javascript/ie9-console-assert/chrome-console.png&quot; alt=&quot;Chrome console.assert&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see you can inspect into the object that you dumped out. Sweet!&lt;/p&gt;
&lt;p&gt;Something you may already be aware of is that IE9 also includes a &lt;code&gt;console&lt;/code&gt; object (yay, no more &lt;code&gt;alert&lt;/code&gt; debugging :P), and it also contains an implementation of &lt;code&gt;console.assert&lt;/code&gt;. So I decided to test and see how it goes in IE9, and here&amp;#39;s what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/javascript/ie9-console-assert/ie9-bad.png&quot; alt=&quot;IE9 sad face&quot;&gt;&lt;/p&gt;
&lt;p&gt;Oh dear, &lt;code&gt;[object Object]&lt;/code&gt;, where&amp;#39;s my object to inspect? This isn&amp;#39;t good now is it. The problem is that the IE9 &lt;code&gt;console.assert&lt;/code&gt; method calls &lt;code&gt;toString()&lt;/code&gt; on your object, resulting in the &lt;code&gt;[object Object]&lt;/code&gt; output. It&amp;#39;s also right up against message.&lt;/p&gt;
&lt;p&gt;Well let&amp;#39;s fix it, the best thing about JavaScript is that you can just change stuff if you don&amp;#39;t like it. So here&amp;#39;s a method you can run in JavaScript to replace the out-of-the-box &lt;code&gt;console.assert&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {

    console.assert = function&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, message, object)&lt;/span&gt;&lt;/span&gt; {
        if&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
            //we only want to do this if they did provide an object
            assert&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, message, ' &amp;gt;&amp;gt;&amp;gt; ' + JSON.stringify&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        } else {
            assert&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;, message)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }
    }&lt;span class=&quot;comment&quot;&gt;;    &lt;/span&gt;

})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;.assert)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re creating an anonymous function that we&amp;#39;ll immediately execute, pass in the standard &lt;code&gt;console.assert&lt;/code&gt; and then augment it with using &lt;code&gt;JSON.stringify&lt;/code&gt;. The beauty of this is that the native method is still being called, but if you&amp;#39;re passing in an object we&amp;#39;re converting it to a JSON string first.&lt;/p&gt;
&lt;p&gt;Now when you do a &lt;code&gt;console.assert&lt;/code&gt; and provide an object you get this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/javascript/ie9-console-assert/ie9-good.png&quot; alt=&quot;IE9 happy&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not perfect, you can&amp;#39;t inspect into the object since it&amp;#39;s just a string, but it does suite for a lot of purposes.&lt;/p&gt;
&lt;p&gt;Just don&amp;#39;t be silly and pass in &lt;code&gt;jQuery&lt;/code&gt; as the object, you&amp;#39;ll end up with something quite large :P.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer: This was done against the IE9 Beta (build 9.0.7930.16406) so it may change by the time of official release.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer 2: Tested against the RC and it still doesn&amp;#39;t produce an object inspection so this work around is still handy.&lt;/strong&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Orchard &amp; Umbraco - Managing Content</title>
            <link href="/posts/2011-01-27-managing-content.html"/>
            <updated>2011-01-27T00:00:00.000Z</updated>
            <id>/posts/2011-01-27-managing-content.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article we&amp;#39;re going to continue our series in looking at the differences between Orchard and Umbraco. Today we&amp;#39;re going to be looking at managing content.&lt;/p&gt;
&lt;p&gt;This is from a series in Orchard and Umbraco, &lt;a href=&quot;http://www.aaron-powell.com/orchard-umbraco&quot;&gt;the overview can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Finding Content in Orchard&lt;/h1&gt;
&lt;p&gt;With Orchard you need use the navigation and go to the &lt;code&gt;Content Items&lt;/code&gt; option:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/008.png&quot; alt=&quot;Content Items&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here you&amp;#39;ll be presented with a screen which has all the items which you&amp;#39;ve created in your site:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/009.png&quot;&gt;Content Item List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the source of all your needs, you can filter the list to the different content types, order them by different criteria or apply bulk actions.&lt;/p&gt;
&lt;p&gt;In my article about &lt;a href=&quot;http://www.aaron-powell.com/orchard-umbraco/creating-content&quot;&gt;Creating Content&lt;/a&gt; I pointed out that there wasn&amp;#39;t a way to open a page from the admin system, well I stand corrected, you can do it from the &lt;code&gt;Content Items&lt;/code&gt; page. So I stand corrected, there is a way, but still kind of expected it to be from the editing screen.&lt;/p&gt;
&lt;p&gt;I also do quite like the way you can do bulk actions, you can unpublish, publish or delete pages. Very handy when you want to clean up a site instance, or deploy live.&lt;/p&gt;
&lt;p&gt;You may also have noticed a green tick icon next to each content item, that indicates that it is published, alternately if you have unpublished content you get a nice red icon:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/010.png&quot; alt=&quot;Unpublished content&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Finding Content in Umbraco&lt;/h1&gt;
&lt;p&gt;Unlike Orchard Umbraco uses a tree based structure for its content, and when you&amp;#39;re going to edit the content:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/007.png&quot; alt=&quot;Content Tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;From here you navigate to the particular content item that you want to edit and click on it.&lt;/p&gt;
&lt;p&gt;Depending on where the content is located it can actually be a little bit more tedious having to navigate down to the appropriate content item, but Umbraco kind of meets this issue in Juno with the new Dashboard. The new Dashboard has a &lt;em&gt;Last Edited&lt;/em&gt; option which you can go to and then navigate to a content item:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/008.png&quot; alt=&quot;Last Edited&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not quite as powerful as the Orchard content item filtering but it&amp;#39;s pretty handy, particularly in a Edit -&amp;gt; Review style workflow.&lt;/p&gt;
&lt;p&gt;Some of the options for Umbraco are a little bit more hidden than they are with Orchard, options such as Unpublish are on the &lt;em&gt;Generic Properties&lt;/em&gt; tab, along with some of the meta data:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/009.png&quot; alt=&quot;Generic Properties&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is opposite to Orchard which had them up front when over viewing the content items.&lt;/p&gt;
&lt;p&gt;Like Orchard Umbraco does have a visual indicator as to whether a content item is published or unpublished. With Umbraco unpublished content has a dimmed out tree icon. Also Umbraco has the notion of saving content, meaning that you can make a change and save it into the CMS without publishing it. This is very handy if your working in the Edit -&amp;gt; Review workflow, or if you want to start editing a page and come back to it later to finish. These saved changes are indicated in the tree by an asterisk on the content item:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/010.png&quot; alt=&quot;Content icon states&quot;&gt;&lt;/p&gt;
&lt;p&gt;Also with Umbraco most of these options are available off the context menu in the content tree, and this is where you&amp;#39;ll find the Delete option, which is a little bit more hidden than with Orchard.&lt;/p&gt;
&lt;p&gt;A really nice feature about deleting content in Umbraco is that it has the idea of a recycling bin. So far I haven&amp;#39;t come across this feature in Orchard (although I may not have found it yet), but what it means is that when you delete a piece of content it isn&amp;#39;t actually removed; instead it is moved into the recycling bin and removed from the published site. This is a &lt;strong&gt;really&lt;/strong&gt; useful feature and I&amp;#39;ve had it save more than one of my clients asses as they &amp;quot;accidentally&amp;quot; remove a piece of content, like say their home page (yes, I&amp;#39;ve had client delete their home pages, even their entire sites, all by accident, although I&amp;#39;ve never worked out how you can do that accidentally...).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Again we&amp;#39;ve seen two different takes on how  to perform a task with the two CMSs, with Orchard staying with it&amp;#39;s minimalistic but direct approach to managing content, and Umbraco being a lot more visual about what you&amp;#39;re wanting to achieve.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating Controllers-as-plugins using MVC3</title>
            <link href="/posts/2011-01-25-controller-plugins-with-mvc3.html"/>
            <updated>2011-01-25T00:00:00.000Z</updated>
            <id>/posts/2011-01-25-controller-plugins-with-mvc3.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;While working on the plugin engine for &lt;a href=&quot;http://funnelweblog.com&quot;&gt;FunnelWeb&lt;/a&gt; we decided that we wanted to add the ability for people to create their own extnesions which are Controllers and routes. Seems like a pretty simple idea, and it makes it really easy to add external functionality into FunnelWeb at a Controller level without rolling your own instace.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s a catch...&lt;/p&gt;
&lt;h1&gt;Some background&lt;/h1&gt;
&lt;p&gt;We&amp;#39;re using MVC3 for FunnelWeb, and part of MVC3 is this lovely new way to do &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt;, the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.mvc.idependencyresolver.aspx&quot;&gt;IDependencyResolver&lt;/a&gt; interface. We&amp;#39;re using &lt;a href=&quot;http://code.google.com/p/autofac&quot;&gt;Autofac&lt;/a&gt; in FunnelWeb and it&amp;#39;s latest release (2.4) has MVC3 and IDependencyResolver support.&lt;/p&gt;
&lt;p&gt;The main role of the IDependencyResolver is so that you can do Dependency Injection without having to reimplement a lot of the MVC core. Previously you had to create custom Controller Factories, and a bunch of other stuff (depending what you wanted to DI), but not any more!&lt;/p&gt;
&lt;h1&gt;Implementing Dependency Resolver&lt;/h1&gt;
&lt;p&gt;So this is actually really simple to use, all you need to do to use your own custom resolver is this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var builder = new ContainerBulder()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
builder&lt;span class=&quot;preprocessor&quot;&gt;.RegisterControllers&lt;/span&gt;(Assembly&lt;span class=&quot;preprocessor&quot;&gt;.GetExecutingAssembly&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
// do other registrations
var container = builder&lt;span class=&quot;preprocessor&quot;&gt;.Build&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
DependencyResolver&lt;span class=&quot;preprocessor&quot;&gt;.SetResolver&lt;/span&gt;(new AutofacDependencyResolver(container))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s all you have to do, and now any Controller which you&amp;#39;ve registered will be resolved via Autofac, not &lt;code&gt;Activator.CreateInstance&lt;/code&gt;, meaning you don&amp;#39;t have to have a default constructor.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s a problem, how do you add the Controllers which are not in the current assembly, to Autofac and to be resolved?&lt;/p&gt;
&lt;h1&gt;Extending the plugin framework&lt;/h1&gt;
&lt;p&gt;Well to add the new Controller-based extension point I set about expanding how our plugins worked. Previously we had a &lt;code&gt;IFunnelWebExtension&lt;/code&gt; interface which you implemented, and it has a single method that initialized it.&lt;/p&gt;
&lt;p&gt;That was fine for what we originally wanted, but how were we going to register new routes?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter the RoutableFunnelWebExtension.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To do this I&amp;#39;ve created a new &lt;code&gt;abstract&lt;/code&gt; class, &lt;code&gt;RoutableFunnelWebExtension&lt;/code&gt; and it has some additional information on it, first off it has the &lt;code&gt;RouteCollection&lt;/code&gt; so you can register routes, but it also has a method which will resolve Controllers for you. But don&amp;#39;t worry, we&amp;#39;ve done the heavy lifting and you don&amp;#39;t need to register them yourself, we handle it for you :).&lt;/p&gt;
&lt;p&gt;So we have this method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RegisterControllers(ContainerBuilder builder)
{
    builder.RegisterControllers(GetType().Assembly)
        ;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool, that&amp;#39;ll handle our registrations, let&amp;#39;s assume we have a route setup up, our extension is in &lt;code&gt;/bin/Extensions&lt;/code&gt;, and we&amp;#39;re good to go right... right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the point I got to where I started pulling out my hair, when I&amp;#39;d hit the route I configured it resulted in a 404. This is quite strange, FunnelWeb has a &lt;em&gt;catch all&lt;/em&gt; route, so that you can create any page URL you want, so a 404 really isn&amp;#39;t possible.&lt;/p&gt;
&lt;p&gt;After some digging it turns out that the route &lt;strong&gt;was&lt;/strong&gt; being hit, and this was why the 404 was happening, the route was matching, but no Controller was being resolved. But hang on though, our plugin has registered the Controller right? If I inspect the container then yeah, I can see it, so why was it not found?&lt;/p&gt;
&lt;h2&gt;Understanding how Controllers are found&lt;/h2&gt;
&lt;p&gt;So as it turns out the &lt;code&gt;IDependencyResolver&lt;/code&gt; isn&amp;#39;t actually the silver bullet which I was expecting it to be, it turns out that the pesky &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.compilation.buildmanager.aspx&quot;&gt;BuildManager&lt;/a&gt; is back to spoil my fun.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note, &lt;a href=&quot;http://shazwazza.com&quot;&gt;Shannon Deminick&lt;/a&gt; has also &lt;a href=&quot;http://shazwazza.com/post/MVC-Controllers-as-plugins-with-MEF-and-Autofac.aspx&quot;&gt;blogged about&lt;/a&gt; &lt;a href=&quot;http://shazwazza.com/post/Developing-a-plugin-framework-in-ASPNET-with-medium-trust.aspx&quot;&gt;plugin engines&lt;/a&gt; and the problems which the BuildManager can produce.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a route is found MVC goes to the &lt;code&gt;IControllerFactory&lt;/code&gt; and asks it to create the Controller instance. Out of the box this heads over to the &lt;code&gt;DefaultControllerFactory&lt;/code&gt; class, and it eventually goes out to your &lt;code&gt;IDependencyResolver&lt;/code&gt; to find it. The catch is, MVC first finds the type of the Controller whihc matches the route. This is handled by the &lt;code&gt;GetControllerType&lt;/code&gt; method, and this is where we&amp;#39;re hitting a problem.&lt;/p&gt;
&lt;p&gt;In the default instance this will look into the &lt;code&gt;BuildManager&lt;/code&gt; and find out what the type is. Now that&amp;#39;s &lt;em&gt;generally&lt;/em&gt; fine, &lt;strong&gt;provided your Controller is in the &lt;code&gt;/bin&lt;/code&gt; folder&lt;/strong&gt;, but the Controller isn&amp;#39;t in there, our extensions are in &lt;code&gt;/bin/Extensions&lt;/code&gt;, and the &lt;code&gt;BuildManager&lt;/code&gt; isn&amp;#39;t smart enough to look there. This means that when the Controller type tries to be found it returns null, and in turn MVC assumes that &lt;em&gt;these are not the Controllers you are looking for&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crap.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As it turns out the default Controller Factory isn&amp;#39;t smart enough to look into the DI container (and well that&amp;#39;s expected, it&amp;#39;s kind of a rough requirement to force on the DI container), so it looks like we have to implement our own anyway.&lt;/p&gt;
&lt;p&gt;Luckily we don&amp;#39;t need to do a full Controller Factory, we can just extend the default one. What you want to do is extend the &lt;code&gt;GetControllerType&lt;/code&gt; method to also go to the DI container.&lt;/p&gt;
&lt;p&gt;To be able to efficiently locate our Controller type I first want to make it better described in Autofac, so I&amp;#39;ll augment our &lt;code&gt;RegisterControllers&lt;/code&gt; method in the plugin framework:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; internal virtual &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RegisterControllers(ContainerBuilder builder)
{
    builder&lt;span class=&quot;variable&quot;&gt;.RegisterControllers&lt;/span&gt;(GetType()&lt;span class=&quot;variable&quot;&gt;.Assembly&lt;/span&gt;)
        &lt;span class=&quot;variable&quot;&gt;.Named&lt;/span&gt;&amp;lt;IController&amp;gt;(t =&amp;gt; t&lt;span class=&quot;variable&quot;&gt;.Name&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Controller&quot;&lt;/span&gt;, string&lt;span class=&quot;variable&quot;&gt;.Empty&lt;/span&gt;))
        ;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our Controllers are &lt;a href=&quot;http://code.google.com/p/autofac/wiki/TypedNamedAndKeyedServices&quot;&gt;Named registrations&lt;/a&gt;, and we can find them by their Controller name:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; class FunnelWebControllerFactory : DefaultControllerFactory
{
    &lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; readonly IContainer _container;

    &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; FunnelWebControllerFactory(IContainer container)
    {
        &lt;span class=&quot;title&quot;&gt;_container&lt;/span&gt; = container;
    }
    &lt;span class=&quot;title&quot;&gt;protected&lt;/span&gt; override Type GetControllerType(RequestContext requestContext, string ControllerName)
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; Controller = base.GetControllerType(requestContext, ControllerName);
        &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (Controller == null)
        {
            &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt; x;
            &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (_container.TryResolveNamed(ControllerName, typeof(IController), out x))
                Controller = x.GetType();
        }

        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; Controller;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see here we&amp;#39;re overriding the &lt;code&gt;GetControllerType&lt;/code&gt; method. If the base implementation doesn&amp;#39;t return a Controller, which it wont if a) the Controller isn&amp;#39;t in the &lt;code&gt;BuildManager&lt;/code&gt; or b) if you&amp;#39;re not routing to a Controller, we&amp;#39;ll see if Autofac knows about it.&lt;/p&gt;
&lt;p&gt;If Autofac did know about it then we can return the type of it and we&amp;#39;re going to be right now... right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sigh.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So my Controller plugin has a constructor argument which I need to be injected, but I&amp;#39;m seeing a lovely YSOD saying that &lt;code&gt;Activator.CreateInstance&lt;/code&gt; is unable to create the Controller as there is no default constructor (a constructor with no arguments). Wait, what? Isn&amp;#39;t the &lt;code&gt;IDependencyResolver&lt;/code&gt; meant to be resolving it?&lt;/p&gt;
&lt;p&gt;Well yes, but there&amp;#39;s still a problem, once &lt;code&gt;GetControllerType&lt;/code&gt; is called the returned type is passed into our &lt;code&gt;IDependencyResolver.GetService&lt;/code&gt; method, and Autofac will resolve it, or return null if it can&amp;#39;t find it, and when &lt;code&gt;null&lt;/code&gt; is returned the Controller Factory will fall back to &lt;code&gt;Activator.CreateInstance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason that the type isn&amp;#39;t found is because the Controller isn&amp;#39;t registered using the type of the Controller, so it can&amp;#39;t be found in Autofac. Well that&amp;#39;s a very easy one to fix, we&amp;#39;ll just ensure that the registration is registered by it&amp;#39;s type too:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; internal virtual &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RegisterControllers(ContainerBuilder builder)
{
    builder&lt;span class=&quot;variable&quot;&gt;.RegisterControllers&lt;/span&gt;(GetType()&lt;span class=&quot;variable&quot;&gt;.Assembly&lt;/span&gt;)
        &lt;span class=&quot;variable&quot;&gt;.Named&lt;/span&gt;&amp;lt;IController&amp;gt;(t =&amp;gt; t&lt;span class=&quot;variable&quot;&gt;.Name&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Controller&quot;&lt;/span&gt;, string&lt;span class=&quot;variable&quot;&gt;.Empty&lt;/span&gt;))
        &lt;span class=&quot;variable&quot;&gt;.AsSelf&lt;/span&gt;()
        ;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;re registering the types as their actual type, and now we can resolve it from Autofac using that. And you know what, hitting the route now calls the Controller action correctly.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Which MVC3 is yet aother good step towards simple extensibility there&amp;#39;s a few pain points when you&amp;#39;re wanting to do stuff that is &lt;em&gt;edge case&lt;/em&gt;. And yet again the major pain point which we&amp;#39;re coming across is the BuildManager.&lt;/p&gt;
&lt;p&gt;But with a few code tweaks and a custom Controller Factory you too can load a Controller from a folder that isn&amp;#39;t &lt;code&gt;/bin/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I hope in future versions of ASP.Net the BuildManager can be made a bit smarter, and work better with types outside &lt;code&gt;/bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re looking for an alternate way to do plugins I suggest you check out Shannon&amp;#39;s posts.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco, Razor and MIX11</title>
            <link href="/posts/2011-01-24-mix11.html"/>
            <updated>2011-01-24T00:00:00.000Z</updated>
            <id>/posts/2011-01-24-mix11.html</id>
            <content type="html">&lt;p&gt;Just a quick heads up, today I got word that my session which I submitted to MIX, &lt;a href=&quot;http://live.visitmix.com/OpenCall/Vote/Session/139&quot;&gt;Razor and Umbraco&lt;/a&gt;, has got through to open call!&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve previously blogged about using &lt;a href=&quot;http://www.aaron-powell.com/umbraco-4-and-razor&quot;&gt;Razor with Umbraco&lt;/a&gt;, but if you&amp;#39;d like to see a more in-depth talk, and also a look at how you can use MVC3 with Umbraco today, be sure to vote.&lt;/p&gt;
&lt;p&gt;Regardless of whether I get accepted or not I&amp;#39;ll be at MIX11, so if you&amp;#39;re also there feel free to find me and say hi :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Unit Testing with Umbraco - Video</title>
            <link href="/posts/2011-01-20-video.html"/>
            <updated>2011-01-20T00:00:00.000Z</updated>
            <id>/posts/2011-01-20-video.html</id>
            <content type="html">&lt;p&gt;It&amp;#39;s possibly old news but I only just found out today, the recording of my &lt;a href=&quot;http://www.aaron-powell.com/unit-testing-with-umbraco&quot;&gt;Unit Testing with Umbraco&lt;/a&gt; session from &lt;a href=&quot;http://www.aaron-powell.com/codegarden-10&quot;&gt;CodeGarden 10&lt;/a&gt; is available online for viewing.&lt;/p&gt;
&lt;p&gt;Apparently the audio isn&amp;#39;t great, but I&amp;#39;m sure you can get the gist of it ;).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stream.umbraco.org/video/726639/aaron-powell-unit-testing&quot;&gt;The video is available here&lt;/a&gt;, and while you&amp;#39;re at it check out the other &lt;a href=&quot;http://stream.umbraco.org/channel/634925/codegarden-2010&quot;&gt;CodeGarden 10 session videos&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How to get the field name for a model property</title>
            <link href="/posts/2011-01-19-find-name-from-field.html"/>
            <updated>2011-01-19T00:00:00.000Z</updated>
            <id>/posts/2011-01-19-find-name-from-field.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m working on a custom EditorTemplate for a &lt;a href=&quot;http://www.funnelweblog.com&quot;&gt;FunnelWeb&lt;/a&gt; around the new tagging system that I&amp;#39;m working on.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s quite a complex editor that I&amp;#39;m doing, and it&amp;#39;s being bound against a collection, an &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; in fact. But I have a problem, I need to be able to find out the &lt;code&gt;Name&lt;/code&gt; that would be generated for the model property.&lt;/p&gt;
&lt;p&gt;If you do something like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;at_rule&quot;&gt;@Html.&lt;span class=&quot;function&quot;&gt;EditorFor(x =&amp;gt; x.StringProperty)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will get an input like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;StringProperty&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I need the &lt;code&gt;Name&lt;/code&gt;, how do you do it? &lt;/p&gt;
&lt;p&gt;The other week when I was browsing through the &lt;a href=&quot;http://orchardproject.net&quot;&gt;Orchard&lt;/a&gt; source I came across this gem, and I &lt;strong&gt;knew&lt;/strong&gt; one day I was going to need to do it, but you can get it from the &lt;code&gt;ViewData&lt;/code&gt; of the &lt;code&gt;HtmlHelper&lt;/code&gt; instance, just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;@Html&lt;span class=&quot;variable&quot;&gt;.ViewData&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.TemplateInfo&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.GetFullHtmlFieldName&lt;/span&gt;(string partialFieldName)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.mvc.templateinfo.getfullhtmlfieldname.aspx&quot;&gt;Here&amp;#39;s the MSDN doco&lt;/a&gt; if you&amp;#39;re interested in reading it. But that&amp;#39;s not &lt;em&gt;really&lt;/em&gt; useful, you need to pass a string in, that&amp;#39;s not really useful, I&amp;#39;ve got a &lt;code&gt;Model&lt;/code&gt; property to work with, well you can nicely convert a Lambda expression, using the &lt;code&gt;ExpressionHelper&lt;/code&gt; class (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee428394.aspx&quot;&gt;link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s an extension method which will do what I need:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;    public static string FieldNameFor&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/span&gt;(this HtmlHelper&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; html, Expression&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Func&amp;lt;T,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt; expression) {
        return html.ViewData.TemplateInfo.GetFullHtmlFieldName(ExpressionHelper.GetExpressionText(expression));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got the source from the Orchard project, you can &lt;a href=&quot;http://orchard.codeplex.com/SourceControl/changeset/view/2787c7365fa3#src%2fOrchard%2fMvc%2fHtml%2fHtmlHelperExtensions.cs&quot;&gt;find it here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now you can easily get the &lt;code&gt;Name&lt;/code&gt; for any property.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Orchard &amp; Umbraco - Creating Content</title>
            <link href="/posts/2011-01-16-creating-content.html"/>
            <updated>2011-01-16T00:00:00.000Z</updated>
            <id>/posts/2011-01-16-creating-content.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article we&amp;#39;re going to continue our series in looking at the differences between Orchard and Umbraco. Today we&amp;#39;re going to be looking at creating content.&lt;/p&gt;
&lt;p&gt;This is from a series in Orchard and Umbraco, &lt;a href=&quot;http://www.aaron-powell.com/orchard-umbraco&quot;&gt;the overview can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Creating content in Orchard&lt;/h1&gt;
&lt;p&gt;As I mentioned in my last post about &lt;a href=&quot;/orchard-umbraco/admin&quot;&gt;admin systema&lt;/a&gt; I pointed out that the first most option in the navigation is for creating content, and here we&amp;#39;re going to go through the workflow of creating content. First off we&amp;#39;ll create a new page&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/001.png&quot; alt=&quot;Orchard new link&quot;&gt;&lt;/p&gt;
&lt;p&gt;So this will create a new piece of content using the Content Type of Page, which then takes us to the following editing screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/002.png&quot; alt=&quot;Orchard new page&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a full list of all the properties which I can edit for this page, I can put in a title, I can set the URL (which is auto-generated from the page title by stripping spaces and other special characters). Theres then a nice big text editor which uses TinyMCE as the WYSIWYG editor. Lastly there&amp;#39;s an option to set the tags for the page, and finally some options regarding to publish.&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t really fault it, the only thing that confuses me is the Tags option, I&amp;#39;m not exactly sure why I would want this on just any page, but yes, you can remove.&lt;/p&gt;
&lt;p&gt;I&amp;#39;d say that it&amp;#39;s because I&amp;#39;ve spoiled by Umbraco as when you create links (or add media) using the Orchard version of TinyMCE you have to enter the URLs yourself. This is a bit of an annoyance when you don&amp;#39;t know the paths of what you want to link to directly. I also am not sure what impact this would have when you modify URLs, I haven&amp;#39;t dug into that, but I&amp;#39;d expect that it&amp;#39;d cause links to break.&lt;/p&gt;
&lt;p&gt;But that said I actually quite like the ability to full-screen the TinyMCE instance, this is really good if you&amp;#39;re working with large content blocks.&lt;/p&gt;
&lt;p&gt;Once finished I click save and unsurprisingly my new page 404&amp;#39;s:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/005.png&quot; alt=&quot;Orchard 404&quot;&gt;&lt;/p&gt;
&lt;p&gt;Something I noticed when trying to navigate to this page I noticed that there wasn&amp;#39;t any link on the create page, I&amp;#39;m not sure if I&amp;#39;m just blind or it&amp;#39;s actually not there. Personally I think this would be really useful, it makes it easy to get to your new page.&lt;/p&gt;
&lt;p&gt;Also, I can&amp;#39;t see to find any kind of preview function in Orchard pages.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s go back and publish a page, you can publish the page right now or set up a scheduled publish of the content. I&amp;#39;m going to publish it now as that&amp;#39;s what I want done, and now our page is live!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/orchard-content/007.png&quot; alt=&quot;Orchard new page&quot;&gt;&lt;/p&gt;
&lt;p&gt;So I chose to have this page added to the navigation, put some basic information in and that is how it looks. Obviously the Tags seems a bit silly, but if you remove them nothing around it will be displayed for it.&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s it, we&amp;#39;ve built a page in Orchard!&lt;/p&gt;
&lt;h1&gt;Creating content in Umbraco&lt;/h1&gt;
&lt;p&gt;With Umbraco there is two ways which you can create new content, there&amp;#39;s a link in the upper left, or you can do it from the context menu of the tree:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/001.png&quot; alt=&quot;Umbraco create&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll admit that I&amp;#39;ve never used the upper left create button, I&amp;#39;ve always found it makes a lot more sense to create it in place from the content tree, so what&amp;#39;s what I&amp;#39;m doing. Choosing create will then give you a new dialog, allowing you to enter the page title and select the page type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/002.png&quot; alt=&quot;Umbraco create part 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a bit more of an involved process than Orchard, but it does have a purpose. In my admin system post I mentioned that Umbraco seems to have more of a concept of hierarchy in the pages, and this dialog is used to place restrictions on what Document Types can be placed where in the site structure. I see this as a really useful feature, it allows you to create very special site layouts by putting restrictions around your content editors without their knowledge.&lt;/p&gt;
&lt;p&gt;Once you have a new page you&amp;#39;ll see that there&amp;#39;s a difference between Orchard and Umbraco again. Unlike Orchards full view of what is going able to be edited Umbraco uses a tabbed UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/003.png&quot; alt=&quot;Umbraco tabs&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/004.png&quot; alt=&quot;Umbraco tabs&quot;&gt;&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t decide what I prefer, the Umbraco or the Orchard UI, both have pros and cons, and both make sense in the context of their parent UI. It&amp;#39;s up to you to decide which is your preference.&lt;/p&gt;
&lt;p&gt;Umbraco also uses the TinyMCE editor, but it&amp;#39;s a slightly customized version of it. With Umbraco the media and link dialogs allow you to interact with the CMS and select existing pages or media items which have been uploaded in the system, you don&amp;#39;t have to remember the URLs.&lt;/p&gt;
&lt;p&gt;Once I&amp;#39;ve populated all my content I then save the page and then I want to view it, like I did in Orchard. Unlike Orchard Umbraco has a preview feature (and if you&amp;#39;ve worked with older version of Umbraco there is a limit with the preview engine and XSLT, but that&amp;#39;s fully resolved now):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/005.png&quot; alt=&quot;Preview link&quot;&gt;&lt;/p&gt;
&lt;p&gt;This gives a view of the page, with a not-so-friendly URL (it&amp;#39;s the ID of the page), and a nice banner to indicate that it&amp;#39;s in preview mode:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/get/orchard-umbraco/umbraco-content/006.png&quot; alt=&quot;Previewed page&quot;&gt;&lt;/p&gt;
&lt;p&gt;Sweet, I can view my content before going live, and this is a really useful feature, content editors like being able to see what their new page will look like without it going live.&lt;/p&gt;
&lt;p&gt;Once you save and publish you&amp;#39;ll be able to navigate to the full URL as well. The URL is on the General Properties tab as well, so you can click on it and navigate straight to the page. Again a small feature but it&amp;#39;s really handy.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;To wrap up we&amp;#39;ve looked at what it&amp;#39;s like to create a page in each system. Umbraco is a bit more involved a process, and it gives you a lot of flexibility-by-restrictions, where as Orchard is less restricted about what it allows you to do.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a few small things about Orchard I didn&amp;#39;t like, the lack of easy way to open a page from the edit screen, and the missing preview feature (or at least, I didn&amp;#39;t find it!). But keep in mind Orchard is only v1, I expect that preview would come in future versions, so keep an eye out for it.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Orchard &amp; Umbraco - The Admin</title>
            <link href="/posts/2011-01-15-admin.html"/>
            <updated>2011-01-15T00:00:00.000Z</updated>
            <id>/posts/2011-01-15-admin.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article I&amp;#39;m going to have a look at the admin systems for the two CMSs. You can consider this a &amp;#39;first look&amp;#39; although in reality this isn&amp;#39;t my first look at either admin systems I&amp;#39;ll do my best to pretend ;).&lt;/p&gt;
&lt;p&gt;First off let me say that there is a good overview of the &lt;a href=&quot;http://orchardproject.net/docs/Getting-around-the-dashboard.ashx&quot;&gt;Orchard admin on their website&lt;/a&gt;, and this post &lt;strong&gt;isn&amp;#39;t&lt;/strong&gt; to try and replace it or anything, it&amp;#39;s more my opinion of it. &lt;/p&gt;
&lt;p&gt;This is from a series in Orchard and Umbraco, &lt;a href=&quot;/orchard-umbraco&quot;&gt;the overview can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;The Orchard Admin&lt;/h1&gt;
&lt;p&gt;To get into the Orchard admin you log into &lt;code&gt;/admin&lt;/code&gt; and put in the details from your setup process, when logging in you see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-admin/001.png&quot; alt=&quot;Orchard admin&quot;&gt;&lt;/p&gt;
&lt;p&gt;To me this look pretty slick, I really like the look of it, it&amp;#39;s very current web, and I like it. Also there&amp;#39;s a nice friendly message welcoming you to Orchard, which I find to be a nice touch.&lt;/p&gt;
&lt;p&gt;Functionality wise your primary point of call is the navigation bar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-admin/002.png&quot; alt=&quot;Orchard navigation&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is quite different to the navigation system of Umbraco (which I&amp;#39;ll come to shortly), its a text-based navigation, which isn&amp;#39;t as unintuitive as you&amp;#39;re initially think. I say this because I&amp;#39;m a visual person so I find graphical navigations quick to pick up.&lt;/p&gt;
&lt;p&gt;But that said Orchard has some nice features that make it very intuitive. First off the top most item of the navigation is the point you&amp;#39;ll be looking for most of the time, a new page link.&lt;/p&gt;
&lt;p&gt;With a few clicks you can easily hide off pieces you don&amp;#39;t require at the current point in time (the arrow next to the section headings). This makes the Orchard admin something very simple and straight to the point of what you&amp;#39;re trying to do, manage a site.&lt;/p&gt;
&lt;h2&gt;What I Like&lt;/h2&gt;
&lt;p&gt;As I&amp;#39;ve said I quite like the UX experience of the Orchard admin, I find it quite ascetically pleasing.&lt;/p&gt;
&lt;p&gt;I like the way that Orchard has you create content, that underneath the &lt;code&gt;New&lt;/code&gt; option it lists out the types which you can create. &lt;/p&gt;
&lt;p&gt;Lastly I like the way Orchard provides a direct link back to your Orchard website. It may be a small feature, but it&amp;#39;s surprisingly useful a feature.&lt;/p&gt;
&lt;h1&gt;The Umbraco back-office&lt;/h1&gt;
&lt;p&gt;With Umbraco its administration system is most commonly referred to as the back-office, and is accessible via &lt;code&gt;/umbraco/&lt;/code&gt; (previously that would redirect to a page which launched a popup, but that was removed in v4.5). If you&amp;#39;ve seen the Umbraco in the past (say before Juno) then you&amp;#39;ll know that it can be a bit daunting, upon logging in you were often presented with a very play looking interface. Well luckily with Juno it&amp;#39;s been updated nicely and this is what the Juno default back office looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-admin/001.png&quot; alt=&quot;Umbraco back office&quot;&gt;&lt;/p&gt;
&lt;p&gt;Already you can see the primary difference between the two systems, Umbraco has much more of a direct focus on content management.&lt;/p&gt;
&lt;p&gt;Another major difference is the tree down the left hand side. This is to do with the fact that Umbraco has much more of a hierarchical content focus than Orchard.&lt;/p&gt;
&lt;p&gt;For navigating around the back office Umbraco has sections:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-admin/002.png&quot; alt=&quot;Umbraco sections&quot;&gt;&lt;/p&gt;
&lt;p&gt;The difference sections load up different contextual information, but in the same UX as posted above. Because the sections are hidden behind a full UI refresh, meaning that if you&amp;#39;re not exactly sure what you&amp;#39;re looking for you can perform a few wrong clicks (been there, done that :P).&lt;/p&gt;
&lt;h2&gt;What I like&lt;/h2&gt;
&lt;p&gt;Putting on my content editors hat I do like the fact that Umbraco defaults to loading me into the content editing section of the back office; it&amp;#39;s my primary focus at that time so saving me digging around is a benefit for sure.&lt;/p&gt;
&lt;p&gt;Another thing that I like about Umbraco, which I didn&amp;#39;t come across in Orchard, is the auto-locking feature. This is a new feature in Juno (and replaces the &lt;code&gt;keepalive.aspx&lt;/code&gt; file which caught me off guard more than once), and it works like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-admin/003.png&quot; alt=&quot;Umbaco locking&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this instance I haven&amp;#39;t interacted with Umbraco for a few minutes (a time period which is set in the web.config in &lt;code&gt;&amp;lt;add key=&amp;quot;umbracoTimeOutInMinutes&amp;quot; value=&amp;quot;20&amp;quot; /&amp;gt;&lt;/code&gt;). Umbraco will then count down to zero and once you get there you&amp;#39;ll get this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-admin/004.png&quot; alt=&quot;Umbraco locked&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now Umbraco can&amp;#39;t be interacted with until you log in again. From the point of view of a content editor I can see the auto-locking feature to be very handy, especially if you&amp;#39;re in an organisation which security is really a concern.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this article we&amp;#39;ve had a very quick look at the admin systems of both Orchard and Umbraco. This article wasn&amp;#39;t intended to be a deep look into the admin systems, nor was it to look into features which make up the system, it was more a first impressions article.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Orchard &amp; Umbraco - Introduction</title>
            <link href="/posts/2011-01-12-orchard-umbraco.html"/>
            <updated>2011-01-12T00:00:00.000Z</updated>
            <id>/posts/2011-01-12-orchard-umbraco.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Incase you haven&amp;#39;t heard [Orchard CMS][1] has hit [version 1.0][2], and at pretty much the same time [Umbraco Juno (4.6)][3] also has been released. I think this is a great chance to do a bit of a comparison between the two products and hopefully provide people with some insight into both products.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to only be looking into some very simple aspects of it, doing a 100% feature-by-feature comparison would be really time consuming and probably make for a boring blog post, but never the less, we&amp;#39;ll get cracking now.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is being written from the point of view of an Umbraco core team member, that means that this may seem bias towards Umbraco but believe me I will do my best to be objective on all points throughout this comparison.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Articles&lt;/h1&gt;
&lt;p&gt;Here is the list of articles in the series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Install experience][4]&lt;/li&gt;
&lt;li&gt;[Admin Systems][5]&lt;/li&gt;
&lt;li&gt;[Creating content][6]&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Managing Content][7]&lt;/p&gt;
&lt;p&gt;[1]: &lt;a href=&quot;http://orchardproject.net/&quot;&gt;http://orchardproject.net/&lt;/a&gt;
[2]: &lt;a href=&quot;http://orchard.codeplex.com/releases/view/50197&quot;&gt;http://orchard.codeplex.com/releases/view/50197&lt;/a&gt;
[3]: &lt;a href=&quot;http://umbraco.codeplex.com/releases/view/59025&quot;&gt;http://umbraco.codeplex.com/releases/view/59025&lt;/a&gt;
[4]: /orchard-umbraco/installing
[5]: &lt;a href=&quot;http://www.aaron-powell.com/orchard-umbraco/admin&quot;&gt;http://www.aaron-powell.com/orchard-umbraco/admin&lt;/a&gt;
[6]: /orchard-umbraco/creating-content
[7]: /orchard-umbraco/managing-content&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Orchard &amp; Umbraco - The install experience</title>
            <link href="/posts/2011-01-11-orchard-umbraco-installing.html"/>
            <updated>2011-01-11T00:00:00.000Z</updated>
            <id>/posts/2011-01-11-orchard-umbraco-installing.html</id>
            <content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this article I&amp;#39;m going to be looking at the install experience of Orchard and Umbraco and what are the differences between the two.&lt;/p&gt;
&lt;p&gt;This is from a series in Orchard and Umbraco, &lt;a href=&quot;/orchard-umbraco&quot;&gt;the overview can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;The Install Experience&lt;/h1&gt;
&lt;p&gt;For this article I&amp;#39;ve gone out and grabed the &lt;a href=&quot;http://orchard.codeplex.com/releases/view/50197#DownloadId=197216&quot;&gt;Orchard 1.0 release&lt;/a&gt; and &lt;a href=&quot;http://umbraco.codeplex.com/releases/view/59025#DownloadId=197061&quot;&gt;Umbraco 4.6.1 release&lt;/a&gt; (Web Deploy version), and the first thing I noticed is that they are basically the same in terms of download size, with Orchard being slightly smaller, it&amp;#39;s 7.08Mb where as Umbraco is 7.50Mb. This is nice, both are sub 10Mb (by a long way), and something I wouldn&amp;#39;t have a problem storing in a source control system.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to use IIS Web Deploy for both installs, this way we&amp;#39;re playing on a equal footing from the get go. I could have use the &lt;a href=&quot;http://www.microsoft.com/web/downloads/platform.aspx&quot;&gt;Microsoft Web Platform Installer (Web PI)&lt;/a&gt; for it, but at the time of writing the Umbraco instance in Web PI I found to be 4.5.2, which is not the latest stable (&lt;strong&gt;Note: Since writing this post Umbraco Juno 4.6.1 is now available in Web PI&lt;/strong&gt;). For both products if it&amp;#39;s your first install, or you&amp;#39;re not someone who&amp;#39;s familiar with IIS I&amp;#39;d &lt;strong&gt;strongly&lt;/strong&gt; recommend that you use Web PI, in fact it&amp;#39;s the recommended install process for both of them.&lt;/p&gt;
&lt;p&gt;With both releases downloaded it&amp;#39;s time to get started on actually installing.&lt;/p&gt;
&lt;h2&gt;Configuring IIS&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;For this I&amp;#39;m going to assume some basic IIS knowledge, and that you have &lt;a href=&quot;http://www.iis.net/download/webdeploy&quot;&gt;Web Deploy&lt;/a&gt; already installed on your machine.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing that you need to do is create an empty IIS web site for each project (Umbraco does run in virtual directory, and I&amp;#39;m sure Orchard does to, but I want to run them as stand alone applications, that&amp;#39;s how I would be using them in a production instance so it makes sense for me), I&amp;#39;ve created one called &lt;code&gt;orchard-v1&lt;/code&gt; and one called &lt;code&gt;umbraco-461&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/iis.png&quot; alt=&quot;IIS&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next you need to select one of the web sites (I&amp;#39;m starting with Orchard) and use Web Deploy to import the downloaded package.&lt;/p&gt;
&lt;h2&gt;Installing Orchard&lt;/h2&gt;
&lt;p&gt;Once we kick off the Web Deploy install we get an overview of what Orchard is going to install, a nice simple overview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-install/001.png&quot; alt=&quot;Orchard step 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cool, it&amp;#39;s nice and simple, just two folders that it needs to access, App_Data and Media, that&amp;#39;s quite nice but I&amp;#39;m not sure what that means for plug ins (but that&amp;#39;s an issue for another day :P). Click next and we&amp;#39;ll work with the database which I can choose if I want to use an existing database or if we want to create a new one, or not have a database at all. I&amp;#39;m wanting to have the full experience, so I&amp;#39;m going to create a new database, this takes us to the next step which has a nice large set of options:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-install/003.png&quot; alt=&quot;Orchard step 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now I can configure all my settings, Orchard wants to install into a virtual directory, so I&amp;#39;ve blanked out the first property as I want it to be in the root of the web site I created in IIS. I put in my database information and click next.&lt;/p&gt;
&lt;p&gt;This brings us to the end of the IIS install in which I receive a nice overview of what was just done.&lt;/p&gt;
&lt;p&gt;Sweet, Orchard is installed, now let&amp;#39;s go onto Umbraco.&lt;/p&gt;
&lt;h2&gt;Installing Umbraco&lt;/h2&gt;
&lt;p&gt;I start by selecting my Umbraco IIS web site, choosing to import from the downloaded package, and again we get an overview of what Umbraco is going to do:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/001.png&quot; alt=&quot;Umbraco step 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first thing I think is &lt;strong&gt;WOW&lt;/strong&gt;, that&amp;#39;s a LOT of folders which Umbraco needs to configure permissions for! As an experienced Umbraco user I tend not to think twice about it, but someone new Umbraco might find this strange. The majority of these folders are required for the plugin support of Umbraco, and a bit of a by-product of there not being a &amp;#39;simpler&amp;#39; plugin format (ie - a single folder where plugins would go). You can get away with changing many of those permissions later, but at the moment you have to accept it and move on :P.&lt;/p&gt;
&lt;p&gt;Like with the Orchard install Umbraco will ask if you want to do a database or not. Again I&amp;#39;m going to choose to install a new database just as I did with Orchard. And just like Orchard theres a set of fields to set the path (again I want it at the root so I clear that field), the database information, etc:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/003.png&quot; alt=&quot;Umbraco step 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Something that&amp;#39;s interesting about this form as opposed to Orchard I was only asked to enter the database passwords once each, where as Orchard asks you to confirm the database user password (and the admin password if you&amp;#39;re created a new database too). There&amp;#39;s benefits to both and there&amp;#39;s annoyances to both so I wouldn&amp;#39;t say that either is my preferred solution. I&amp;#39;ll admit I didn&amp;#39;t try putting in non-matching passwords so I don&amp;#39;t know how Web Deploy would handle it vs a wrong password, but that&amp;#39;s something for someone else to try out (this post is going to be long enough, I don&amp;#39;t want to add every conditional branch into it).&lt;/p&gt;
&lt;p&gt;Once I click next and Web Deploy finishes you get a similar summary as you get with Orchard (and which I wont bore you with the screen shot this time :P).&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s it, we&amp;#39;re done with installing our sites. Now we&amp;#39;re going to configure our two web applications.&lt;/p&gt;
&lt;h2&gt;Configuring Orchard&lt;/h2&gt;
&lt;p&gt;So I&amp;#39;ve fired up my browser and navigated to the Orchard site I just installed, first thing I&amp;#39;m given is an option to configure the site I just installed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-install/005.png&quot; alt=&quot;Orchard step 5&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hang on a sec, what&amp;#39;s the prompt about databases, I thought I did that as part of the Web Deploy process? I would have expected that to be setup, oh well let&amp;#39;s just select the settings again:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-install/006.png&quot; alt=&quot;Orchard step 6&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hmm... not even the connection string information was set in there so I now have to manually enter a connection string, this is rather annoying as I&amp;#39;ve already gone through this with the Web Deploy process. At least the Orchard team have put in the information about what a connection string would look like that you can use as a template, because after all who remembers the format of a connection string without Google, sorry Bing :P.&lt;/p&gt;
&lt;p&gt;Anyway I filled out all my settings, clicked Finish and bang, my website is ready for work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/orchard-install/007.png&quot; alt=&quot;Orchard step 7&quot;&gt;&lt;/p&gt;
&lt;p&gt;Fantastic! Let&amp;#39;s have a go at configuring our Umbraco install.&lt;/p&gt;
&lt;h2&gt;Configuring Umbraco&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve looked at Umbraco in the past you&amp;#39;ll probably know that it&amp;#39;s had a reputation as having an underwhelming install experience. It looked tired and wasn&amp;#39;t really representative of the product that Umbraco is today. Well good news this has been revamped in Umbraco Juno, and the installer is looking very sexy indeed.&lt;/p&gt;
&lt;p&gt;Umbraco first starts up with an overview of the installer steps that you&amp;#39;ll be going through:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/004.png&quot; alt=&quot;Umbraco step 4&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next we&amp;#39;re presented with the license which Umbraco ships with (&lt;a href=&quot;http://www.opensource.org/licenses/mit-license&quot;&gt;MIT&lt;/a&gt; if you&amp;#39;re not going to read the picture):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/005.png&quot; alt=&quot;Umbraco step 5&quot;&gt;&lt;/p&gt;
&lt;p&gt;I quite like this (from an open source standpoint), since it&amp;#39;s an open source project it&amp;#39;s good to know what the license is up front. Orchard too is open source, but you have concerns about using open source having the license thrust in your face gives you a final chance to bail out. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;On a side note I wasn&amp;#39;t actually aware of what the Orchard license was, I didn&amp;#39;t see a direct link from the home page (it&amp;#39;s on the &lt;a href=&quot;http://orchardproject.net/mission&quot;&gt;Mission Statement&lt;/a&gt; page though). It is quite prominent on the CodePlex site though, and it&amp;#39;s the &lt;a href=&quot;http://www.opensource.org/licenses/bsd-license.php&quot;&gt;New BSD license&lt;/a&gt; if you&amp;#39;re interested.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once you accept the license you move onto the screen where you configure your database. Like Orchard it doesn&amp;#39;t seem to realise I did database setup steps already too, but unlike Orchard when I clicked &amp;#39;Yes I have a database&amp;#39; the following form fields are already populated with my connection string information. Bit of a win on top of Orchard, I don&amp;#39;t have to put it in again (assuming you&amp;#39;re using MS SQL, I&amp;#39;m not sure what happens with the other database options). A nice side note on the database installer is that there are a few more options than with Orchard including MySQL, which I&amp;#39;m not sure if Orchard supports or not. This is obviously something to keep in mind for hosting provider choice too.&lt;/p&gt;
&lt;p&gt;Moving on I am asked to set my admin details:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/007.png&quot; alt=&quot;Umbraco step 7&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now that I&amp;#39;ve finished configuring my user I finally get to the point of choosing some defaults for my site. This is new in Umbraco Juno (well it&amp;#39;s a revamp from what was previously available as starter kits):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/008.png&quot; alt=&quot;Umbraco step 8&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to use a blog, since the default Orchard install is a blog as well, and next I get to choose one of the default skin options:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/009.png&quot; alt=&quot;Umbraco step 9&quot;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#39;re going with a basic theme which is similar to the one which is used by Orchard, again I&amp;#39;m trying to get the experience between the two as similar as I can.&lt;/p&gt;
&lt;p&gt;And now we&amp;#39;re finished, Umbraco gives us a finishing screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/010.png&quot; alt=&quot;Umbraco step 10&quot;&gt;&lt;/p&gt;
&lt;p&gt;From here you can launch into the back office or view the site that we&amp;#39;re just installed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/orchard-umbraco/umbraco-install/011.png&quot; alt=&quot;Umbraco step 11&quot;&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;#39;re done!&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Two CMS products, two different install experiences. I quite like the simple experience which Orchard provides you with, a lot of the time that I&amp;#39;m working with a CMS I&amp;#39;m not interested in starter kits or anything, I already have a set of requirements to work with and they don&amp;#39;t match what comes with the starter kits.&lt;/p&gt;
&lt;p&gt;That said though Orchard does install some basic content pages, and I don&amp;#39;t know how you install without them (there was no obvious option I came across) and this is a bit annoying as once it&amp;#39;s installed I have to go back and remove them anyway. It&amp;#39;d be nice if I could have a way in which you could install a completely blank Orchard instance (and if there is a way please let me know).&lt;/p&gt;
&lt;p&gt;Umbraco on the other hand has a rather involved configuration process, and it has a number of different starter kits which you can choose from, or you can choose to install a blank site (sorry my screenshot cut that option out). For me this is a much nicer option since often I&amp;#39;m wanting a blank CMS. That said the configuration experience is a bit more tedious as it&amp;#39;s quite verbose in the steps that you need to go through, which is both a pro and a con, it gives a lot of visibility, but if you&amp;#39;re an experienced user like myself you&amp;#39;ve seen it all a thousand times before.&lt;/p&gt;
&lt;p&gt;Both products have really polished looking install experiences, and in my opinion both have pros and cons. I like the simple, no-fuss experience of Orchard, but I am bothered by the fact that it didn&amp;#39;t detect my database settings from the Web Deploy steps. Umbraco on the other hand did pick up the database information (to a certain extent) and has a much wider variety of starter kits for getting going, but it&amp;#39;s a lot longer a process.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>NHaml Umbraco MacroEngine</title>
            <link href="/posts/2010-12-28-nhaml-umbraco-macroengine.html"/>
            <updated>2010-12-28T00:00:00.000Z</updated>
            <id>/posts/2010-12-28-nhaml-umbraco-macroengine.html</id>
            <content type="html">&lt;p&gt;In a &lt;a href=&quot;/custom-umbraco-macro-engines&quot;&gt;previous post&lt;/a&gt; I introduced the new &lt;code&gt;IMacroEngine&lt;/code&gt; interface coming as part of Umbraco Juno (4.6) which will make it possible to create your own Macro Engines. In this article I&amp;#39;ll look at what is required to create a custom Macro Engine which is actually useful.&lt;/p&gt;
&lt;h2&gt;Implementing a Haml-based macro engine&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m quite a fan of &lt;a href=&quot;http://haml-lang.com&quot;&gt;Haml&lt;/a&gt;, it&amp;#39;s a good abstraction on top of HTML (well, XML really) and it&amp;#39;s quite popular if you&amp;#39;re doing Ruby work (it&amp;#39;s really popular in the Ruby community). &lt;/p&gt;
&lt;p&gt;A Haml file would look something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;.content
    this &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;text&lt;/span&gt; content &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; a page
    a{:href =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;http://aaron-powell.com&quot;&lt;/span&gt;} My Website&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And generates a snippet like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    this is the text content of a page &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://aaron-powell.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;My Website&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a .NET port of Haml, &lt;a href=&quot;http://code.google.com/p/nhaml/&quot;&gt;NHaml&lt;/a&gt;, so let&amp;#39;s have a look at how we can implement a macro engine which allows us to use Haml as an Umbraco macro engine.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve started by grabbing the latest version of NHaml from their website, a copy of Umbraco Juno and fired up Visual Studio. I created a new .NET class library and added the following references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NHaml&lt;/li&gt;
&lt;li&gt;cms&lt;/li&gt;
&lt;li&gt;interfaces&lt;/li&gt;
&lt;li&gt;businesslogic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next I created my Macro Engine:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; NHamlMacroEngine : IMacroEngine
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; NHamlMacroEngine()
    {
        SupportedExtensions = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;
                                  {
                                      &lt;span class=&quot;string&quot;&gt;&quot;nhaml&quot;&lt;/span&gt;,
                                      &lt;span class=&quot;string&quot;&gt;&quot;haml&quot;&lt;/span&gt;
                                  };
    }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; Validate(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; code, INode currentPage, &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; errorMessage)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Execute(MacroModel macro, INode currentPage)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplemented Exception
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Haml Macro Engine&quot;&lt;/span&gt;; } }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; SupportedExtensions { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, IMacroGuiRendering&amp;gt; SupportedProperties
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
        {
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With my macro engine I&amp;#39;m going to support files with a &lt;strong&gt;haml&lt;/strong&gt; and &lt;strong&gt;nhaml&lt;/strong&gt; extension (so existing templates can be used) and it&amp;#39;s specified in the constructor (you can set this as the return of the property but I don&amp;#39;t see the need to create the List each time the property is accessed ;)).&lt;/p&gt;
&lt;h3&gt;Implementing macro execution&lt;/h3&gt;
&lt;p&gt;The crux of what we have to build for a Macro Engine is in the &lt;code&gt;Execute&lt;/code&gt; method. This method is nicely providing us with the macro itself and the current page (which all current macro engines provide to users), so how do we go about it?&lt;/p&gt;
&lt;p&gt;Now we&amp;#39;re going to delve into NHaml and what is actually required to execute our file.&lt;/p&gt;
&lt;p&gt;The heavy lifting for most of our work will be done via the &lt;code&gt;TemplateEngine&lt;/code&gt; class from NHaml, but I&amp;#39;m going to have a bit of a wrapper:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; NHamlTemplateEngine : ITemplateContentProvider
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IList&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; PathSources { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IViewSource GetViewSource(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; templateName)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IViewSource GetViewSource(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; templatePath, IList&amp;lt;IViewSource&amp;gt; parentViewSourceList)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; AddPathSource(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; pathSource)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m going to ignore a lot of what this class does (partially cuz I couldn&amp;#39;t be bothered working out what it does :P), instead I&amp;#39;ll just be implementing the &lt;code&gt;GetViewSource&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IViewSource GetViewSource(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; templateName)
{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileViewSource(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInfo(templateName));
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re doing here is returning the standard OOTB IViewSource implementation, it&amp;#39;ll read the Haml file in from the file system and perform its black magic.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s currently no way which we can get the single string result back from the template to be used with the macro, so let&amp;#39;s work on that.&lt;/p&gt;
&lt;p&gt;First I&amp;#39;m going to be adding a new method to the &lt;code&gt;NHamlTemplateEngine&lt;/code&gt; which will return a string from our template to give back to the macro engine:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public string Render(MacroModel macro, INode node)
{
    var templateEngine = new TemplateEngine()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateContentProvider&lt;/span&gt; = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    CompiledTemplate res = templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Compile&lt;/span&gt;(IOHelper&lt;span class=&quot;preprocessor&quot;&gt;.MapPath&lt;/span&gt;(SystemDirectories&lt;span class=&quot;preprocessor&quot;&gt;.Python&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + macro&lt;span class=&quot;preprocessor&quot;&gt;.ScriptName&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    using (var output = new StringWriter())
    {
        var instance = res&lt;span class=&quot;preprocessor&quot;&gt;.CreateInstance&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        instance&lt;span class=&quot;preprocessor&quot;&gt;.Render&lt;/span&gt;(output)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        return output&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll finish off our &lt;code&gt;IMacroEngine&lt;/code&gt; implementation by implementing the &lt;code&gt;Execute&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; string Execute(MacroModel macro, INode currentPage)
{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; engine = new NHamlTemplateEngine();
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; output = engine.Render(macro, currentPage);
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; output;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compile, drop the assembling into a Juno install and create a sample little Macro:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;variable&quot;&gt;%p&lt;/span&gt;
  some content here&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the macro to a page and booyeah, we are running our own template engine. You can now write Haml and output it within Umbraco.&lt;/p&gt;
&lt;h2&gt;Extending our implementation&lt;/h2&gt;
&lt;p&gt;Ok, so we&amp;#39;ve done our implementation, but it&amp;#39;s a bit limited, there&amp;#39;s two things which we aren&amp;#39;t really handling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I access the currentPage in the macro?&lt;/li&gt;
&lt;li&gt;Can I use the new inline macro feature?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Supporting inline macros&lt;/h3&gt;
&lt;p&gt;This is a rather easy feature to support, the &lt;code&gt;MacroModel&lt;/code&gt; which has been passed in has a property which we can access that, this comes through the &lt;code&gt;ScriptCode&lt;/code&gt; property of the macro.&lt;/p&gt;
&lt;p&gt;But wait, we&amp;#39;re passing in the phyisical template to NHaml, what are we going to do about that? Well I decided to do it a funky little way, we&amp;#39;ll actually generate the file(s) as needed for our inline macros:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public string Render(MacroModel macro, INode node)
{
    var templateEngine = new TemplateEngine()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateContentProvider&lt;/span&gt; = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    CompiledTemplate res&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    if (string&lt;span class=&quot;preprocessor&quot;&gt;.IsNullOrEmpty&lt;/span&gt;(macro&lt;span class=&quot;preprocessor&quot;&gt;.ScriptCode&lt;/span&gt;))
    {
        res = templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Compile&lt;/span&gt;(IOHelper&lt;span class=&quot;preprocessor&quot;&gt;.MapPath&lt;/span&gt;(SystemDirectories&lt;span class=&quot;preprocessor&quot;&gt;.Python&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + macro&lt;span class=&quot;preprocessor&quot;&gt;.ScriptName&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    else
    {
        var hash = GetMd5Hash(macro&lt;span class=&quot;preprocessor&quot;&gt;.ScriptCode&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        var path = IOHelper&lt;span class=&quot;preprocessor&quot;&gt;.MapPath&lt;/span&gt;(SystemDirectories&lt;span class=&quot;preprocessor&quot;&gt;.Data&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + hash + &lt;span class=&quot;string&quot;&gt;&quot;.haml&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        if (!File&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;(path))
        {
            using (var writer = new StreamWriter(path))
            {
                writer&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(macro&lt;span class=&quot;preprocessor&quot;&gt;.ScriptCode&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            }
        }
        res = templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Compile&lt;/span&gt;(path)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    using (var output = new StringWriter())
    {
        var instance = res&lt;span class=&quot;preprocessor&quot;&gt;.CreateInstance&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        instance&lt;span class=&quot;preprocessor&quot;&gt;.Render&lt;/span&gt;(output)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        return output&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is adding basic caching into the templates, so it generates a MD5 hash from the code to use as a filename, if it exists in the &amp;#39;data&amp;#39; folder (ie - App_Data) it&amp;#39;ll be used, otherwise a new file is created from it. Now we&amp;#39;ve got a real file which we can pass into the NHaml engine.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s it, now we&amp;#39;ve got support for:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;umbraco:Macro&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;runat&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;server&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Language&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;haml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
.class
  woo, content!
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;umbraco:Macro&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Supporting currentPage&lt;/h3&gt;
&lt;p&gt;Next on the check list of what our NHaml macro engine requires is the ability to access the &lt;code&gt;currentPage&lt;/code&gt; object, and this is a bit trickier. Because Haml is just a markup layer it doesn&amp;#39;t know anything about Umbraco, nor does it know anything about the data that exists. For this we&amp;#39;ve got to create our own &lt;code&gt;Template&lt;/code&gt; class which NHaml will use when executing the Haml file.&lt;/p&gt;
&lt;p&gt;First off I&amp;#39;m going to do some refactoring to move the NHaml template engine creation into the constructor of our engine:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;private readonly TemplateEngine _templateEngine&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

internal NHamlTemplateEngine()
{
    _templateEngine = new TemplateEngine()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    _templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateContentProvider&lt;/span&gt; = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    _templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateBaseType&lt;/span&gt; = typeof(NHamlTemplate)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is more of a .NET preference of mine to have stuff such as this to be done in the constructor of the object, what you&amp;#39;ll notice is the new line:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;_templateEngine&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Options&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;TemplateBaseType&lt;/span&gt; = &lt;span class=&quot;typedef&quot;&gt;typeof&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;NHamlTemplate&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is for our new template class which will have the currentPage object on it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NHamlTemplate&lt;/span&gt; :&lt;/span&gt; Template
{
    public INode currentPage { get; set; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s a pretty simple class which we&amp;#39;ve implemented, and we&amp;#39;ve got a single property on there which we have to set, easy, we just have to update the &lt;code&gt;Render&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var output = new &lt;span class=&quot;variable&quot;&gt;StringWriter&lt;/span&gt;()&lt;/span&gt;)
{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instance&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NHamlTemplate&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;res&lt;/span&gt;.C&lt;span class=&quot;title&quot;&gt;reateInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;
    &lt;span class=&quot;title&quot;&gt;instance&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;currentPage&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;;
    &lt;span class=&quot;title&quot;&gt;instance&lt;/span&gt;.R&lt;span class=&quot;title&quot;&gt;ender&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(output)&lt;/span&gt;;

    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;output&lt;/span&gt;.T&lt;span class=&quot;title&quot;&gt;oString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we create an instance of our template from the file we can cast it to the custom template class and then assign the property to the actual node for the current page.&lt;/p&gt;
&lt;p&gt;Now we can create a template like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;variable&quot;&gt;.content&lt;/span&gt;
  &lt;span class=&quot;preprocessor&quot;&gt;#{currentPage.GetProperty(&quot;bodyText&quot;).Value}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if you run this we&amp;#39;ve got an error, NHaml doesn&amp;#39;t know what the &lt;code&gt;INode&lt;/code&gt; object is! We need to pass in the assembly to the NHaml engine, so let&amp;#39;s update the constructor:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;internal NHamlTemplateEngine()
{
    _templateEngine = new TemplateEngine()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    _templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.AddReference&lt;/span&gt;(typeof(INode)&lt;span class=&quot;preprocessor&quot;&gt;.Assembly&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    _templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateContentProvider&lt;/span&gt; = this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    _templateEngine&lt;span class=&quot;preprocessor&quot;&gt;.Options&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.TemplateBaseType&lt;/span&gt; = typeof(NHamlTemplate)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So there we go, we&amp;#39;ve got a custom macro engine which runs NHaml and allow you to work against Umbraco data. &lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also &lt;a href=&quot;http://hg.slace.biz/nhaml-umbraco-macroengine&quot;&gt;pushed the code up to bitbucket&lt;/a&gt; too so you can grab a copy of it if you want to see it working.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Custom Umbraco Macro Engines</title>
            <link href="/posts/2010-12-27-custom-umbraco-macro-engines.html"/>
            <updated>2010-12-27T00:00:00.000Z</updated>
            <id>/posts/2010-12-27-custom-umbraco-macro-engines.html</id>
            <content type="html">&lt;p&gt;A new feature coming in Umbraco Juno (4.6) is something that is probably a bit surprising for most people that it has come in after so long, an abstracted macro engine.&lt;/p&gt;
&lt;p&gt;What this means is that no longer is there just XSLT, .NET controls, IronRuby, IronPython and Razor, but you&amp;#39;ll be able to write your own macro engine if you want.&lt;/p&gt;
&lt;p&gt;In this article we&amp;#39;ll look at how to create a new macro engine.&lt;/p&gt;
&lt;h2&gt;Where do you start?&lt;/h2&gt;
&lt;p&gt;Like with a lot of extensibility points in Umbraco it&amp;#39;s actually really quite simple to do what you need, and creating a custom macro engine is no exception, all you have to do is implement a single interface, &lt;code&gt;IMacroEngine&lt;/code&gt; from within the &lt;code&gt;cms&lt;/code&gt; assembly.&lt;/p&gt;
&lt;p&gt;On this interface there are only three sections that you need to implement for most operations, the name of it, the extensions it supports and its execution method.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a really basic macro engine:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; MyAwesomeMacroEngine : IMacroEngine
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; Validate(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; code, INode currentPage, &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; errorMessage)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Execute(MacroModel macro, INode currentPage)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Go go awesome macro engine!&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;This is my awesome Macro Engine&quot;&lt;/span&gt;; } }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; SupportedExtensions 
    { 
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; {
                &lt;span class=&quot;string&quot;&gt;&quot;awesome&quot;&lt;/span&gt;
            };
        }
    }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, IMacroGuiRendering&amp;gt; SupportedProperties
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
        {
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
        }
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you go to create a new &lt;em&gt;Script File&lt;/em&gt; in the Umbraco admin you&amp;#39;ll have a new option for your own macro engine.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve created a supplementary post to this one which looks at &lt;a href=&quot;/nhaml-umbraco-macroengine&quot;&gt;how to create a NHaml based&lt;/a&gt; macro engine.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Seriously, it&amp;#39;s &lt;em&gt;just that easy&lt;/em&gt; to create your own macro engine, obviously you&amp;#39;ll want to do more with the &lt;code&gt;Execute&lt;/code&gt; method so that it will interact with the script file that you&amp;#39;ve created, but this should give you a bit of a starting point :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2010, a year in review</title>
            <link href="/posts/2010-12-24-2010-a-year-in-review.html"/>
            <updated>2010-12-24T00:00:00.000Z</updated>
            <id>/posts/2010-12-24-2010-a-year-in-review.html</id>
            <content type="html">&lt;p&gt;Well it&amp;#39;s about that time of the year, the time when you look back at the year that was... and what a year 2010 has been.&lt;/p&gt;
&lt;p&gt;Last year I said that &lt;a href=&quot;/2009-a-year-in-review&quot;&gt;2009 was my biggest year professionally&lt;/a&gt;, but in reality 2010 trumped it well and truly.&lt;/p&gt;
&lt;h2&gt;2010, the year of the conference&lt;/h2&gt;
&lt;p&gt;In 2010 I set a new goal for myself and that was to become more of a figure in the Australian development community, and I started this off with a dive into the conference circuit.&lt;/p&gt;
&lt;p&gt;I...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kicked off with &lt;a href=&quot;/dddmelbourne-umbraco&quot;&gt;DDD Melbourne&lt;/a&gt; where I presented a Beginning Umbraco session&lt;/li&gt;
&lt;li&gt;I then headed back to Melbourne for Remix (which I just attended :P)&lt;/li&gt;
&lt;li&gt;Flew to Denmark for &lt;a href=&quot;/codegarden-10&quot;&gt;CodeGarden 10 to speak about unit testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Returned to Sydney to help organize (and speak at) the first DDD Sydney conference&lt;/li&gt;
&lt;li&gt;Spoke about &lt;a href=&quot;http://www.slideshare.net/CraigBailey/umbraco-in-10-minutes&quot;&gt;Umbraco in the CMS Smackdown&lt;/a&gt; for &lt;a href=&quot;http://www.sbtug.com/&quot;&gt;SBTUG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Won Amped and went to Tokyo for Web Directions East&lt;/li&gt;
&lt;li&gt;Spoke about open source content management at CodeCamp OZ &lt;/li&gt;
&lt;li&gt;Talked about &lt;a href=&quot;http://openconferenceprotocol.org&quot;&gt;Open Conference Protocol&lt;/a&gt; at the &lt;a href=&quot;http://thesaug.org/&quot;&gt;Sydney Architecture User Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And wrapped up the year with a lightning talk at &lt;a href=&quot;http://sydjs.com&quot;&gt;SydJs&lt;/a&gt; on &lt;a href=&quot;/sydjs-javascript-frameworks&quot;&gt;JavaScript frameworks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew, busy conference set, wonder if I can top that next year :P.&lt;/p&gt;
&lt;h2&gt;Another year, another job&lt;/h2&gt;
&lt;p&gt;Last year I was excited about taking a new job with TheFARM Digital and getting to work with &lt;a href=&quot;http://shazwazza.com&quot;&gt;Shannon&lt;/a&gt; so we could really go crazy with Umbraco development. Well there was some sadness when I &lt;a href=&quot;/all-good-things-come-to-an-end&quot;&gt;announced that I was to be leaving TheFARM&lt;/a&gt; to join &lt;a href=&quot;http://readify.net&quot;&gt;Readify&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Open Source work&lt;/h2&gt;
&lt;p&gt;I spent a lot of time this year working on Open Source projects. Obviously Umbraco has featured highly in this area, with version 5 underway (and helping with the team migrate to Mercurial) a lot of my time was devoted there.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;ve also worked on a few other smaller projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.funnelweblog.com/&quot;&gt;FunnelWeb&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A blogging engine targeted at real developers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-tools&quot;&gt;JavaScript tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/ole&quot;&gt;Ole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.slace.biz/slidee&quot;&gt;Slidee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/whatkey-net-for-your-javascript-keycode-glory&quot;&gt;WhatKey.Net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://examine.codeplex.com&quot;&gt;Examine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/linq-to-umbraco-extensions&quot;&gt;LINQ to Umbraco Extensions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I&amp;#39;ll update this soon :P&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/dynamics-library&quot;&gt;Dynamic extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openconferenceprotocol.org&quot;&gt;Open Conference Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nice little list I think ;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Well that pretty much concludes my 2010 wrap up, in 2011 be sure to look out for me at MIX 11, DDD Sydney and CodeGarden 11 :D&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using Razor in Umbraco 4</title>
            <link href="/posts/2010-12-24-umbraco-4-and-razor.html"/>
            <updated>2010-12-24T00:00:00.000Z</updated>
            <id>/posts/2010-12-24-umbraco-4-and-razor.html</id>
            <content type="html">&lt;p&gt;If you&amp;#39;ve been following the development of Umbraco Juno (4.6) you&amp;#39;ll have seen that &lt;a href=&quot;http://twitter.com/umbraco&quot;&gt;Niels&lt;/a&gt; &lt;a href=&quot;http://our.umbraco.org/projects/website-utilities/razorcontrol-for-juno&quot;&gt;released an add-in&lt;/a&gt; for early Juno builds to which was for working with &lt;a href=&quot;http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx&quot;&gt;Razor&lt;/a&gt;, the new syntax for ASP.Net development.&lt;/p&gt;
&lt;p&gt;Well here&amp;#39;s something even more exciting, Umbraco Juno no longer requires an add-in, instead it has a out-of-the-box support for working with Razor!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AWESOME!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Umbraco &amp;lt;3 Razor&lt;/h2&gt;
&lt;p&gt;So what does the Razor support for Umbraco include? Well basically it allows Razor to be used in the same way that you use the Iron* languages, XSLT or .NET controls... as a macro. This means that you can use Razor just as you would any other language option.&lt;/p&gt;
&lt;h2&gt;Working with Razor in Umbraco&lt;/h2&gt;
&lt;p&gt;So if you want to work with Razor what do you need to do? Well creating a Razor macro is just as nice as if you&amp;#39;re doing any other kind of macro, through the Umbraco UI.&lt;/p&gt;
&lt;p&gt;Razor files live along side the Iron* files in the &lt;code&gt;/python&lt;/code&gt; folder (yeah, that&amp;#39;s a hold over from the original DLR engine and changing it would be a breaking change so we have to live with it. Note - as Morten pointed out in the comments you can set &lt;code&gt;&amp;lt;add key=&amp;quot;umbracoPythonPath&amp;quot; value=&amp;quot;~/Razor&amp;quot; /&amp;gt;&lt;/code&gt; and use a different path for script files), and you create them like you create any other DLR script file in the Umbraco back office:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/umbraco/umbraco-4-razor/umbraco-4-razor-01.png&quot; alt=&quot;Create Razor macors&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Yes there&amp;#39;s a spelling error in the beta which I&amp;#39;ve fixed :P)&lt;/p&gt;
&lt;p&gt;Now you can start coding up your Razor macros.&lt;/p&gt;
&lt;h2&gt;My first Razor macro&lt;/h2&gt;
&lt;p&gt;With Razor macros there&amp;#39;s a slightly different way that you go about it, rather than using &lt;code&gt;currentPage&lt;/code&gt; as you would with XSLT or an Iron* script you have a &lt;code&gt;Model&lt;/code&gt; property which you work with.&lt;/p&gt;
&lt;p&gt;To make this a bit nicer as well the &lt;code&gt;Model&lt;/code&gt; property is a dynamic object, allowing you to access the properties as if they were actually properties of the model, meaning you can do this following:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@Model.bodyText&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s how easy it is to access the properties of the &lt;code&gt;Model&lt;/code&gt;, no more &lt;code&gt;getProperty(&amp;quot;bodyText&amp;quot;).Value&lt;/code&gt;. And there you have it, a basic Razor macro has been created.&lt;/p&gt;
&lt;h3&gt;Something a bit more advanced&lt;/h3&gt;
&lt;p&gt;Well lets take it up a notch and make a slightly more advanced macro, say a news listing:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;news-lissting&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    @foreach(var page in Model.Children) {
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;news-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;@page.Url&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;@page.Name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@page.Name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Published: @page.articleDate.ToString(&quot;dd MMM yyyy&quot;)&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;@page.description&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    }
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re doing here looping through each of the children of the current page (the &lt;code&gt;Model&lt;/code&gt;), and generating a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and then creating the HTML structure inside it.&lt;/p&gt;
&lt;h3&gt;Post-beta features&lt;/h3&gt;
&lt;p&gt;Just a little note I&amp;#39;ve added a change to the DynamicNode class which is used by the dynamic Model object that allows you to access specific types of children, so you can do this in your Razor file:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;news-lissting&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    @foreach(var page in Model.articles) {
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;news-item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;@page.Url&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;@page.Name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@page.Name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Published: @page.articleDate.ToString(&quot;dd MMM yyyy&quot;)&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;@page.description&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    }
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example my &lt;code&gt;Model&lt;/code&gt; has children of the type &lt;code&gt;article&lt;/code&gt; (that&amp;#39;s the alias of the DocType) and I&amp;#39;m requesting them all (hence the pluralization). Pretty sweet I think!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m sure that even the most seasoned XSLT &amp;quot;developer&amp;quot; (I&amp;#39;m looking at you &lt;a href=&quot;http://twitter.com/warrenbuckley&quot;&gt;Warren&lt;/a&gt;!) will have to admit the Razor syntax is highly readable for people who aren&amp;#39;t .NET developers. And because we&amp;#39;re working with a dynamic object it&amp;#39;s really simple to access the properties as needed.&lt;/p&gt;
&lt;p&gt;This brings us to the end of our quick look at the Razor support which is coming in Umbraco Juno, and how it&amp;#39;s going to be another great choice for developers.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>How I develop Umbraco</title>
            <link href="/posts/2010-12-22-how-i-developer-umbraco.html"/>
            <updated>2010-12-22T00:00:00.000Z</updated>
            <id>/posts/2010-12-22-how-i-developer-umbraco.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this article I&amp;#39;m going to cover the way that I setup my system for developing against Umbraco. I&amp;#39;m putting this together as everyone seems to have their own flavor to doing development so I thought I&amp;#39;d throw my hat into the arena with &lt;em&gt;yet another setup&lt;/em&gt; to give new (and experienced) developers another way to go about it.&lt;/p&gt;
&lt;p&gt;And hey, this has worked quite well for me for a while, maybe other can benefit from it ;).&lt;/p&gt;
&lt;h2&gt;Environment&lt;/h2&gt;
&lt;p&gt;So for this I&amp;#39;m going to be running the following software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2010&lt;ul&gt;
&lt;li&gt;I use Cassini as a development database, not IIS. I don&amp;#39;t use IIS as it requires (under Vista and 7) that you use an admin account to debug. Since my day-to-day Windows account isn&amp;#39;t an admin (seriously, you don&amp;#39;t need an admin for day-to-day work!) Cassini makes a lot more sense&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQL Server Express&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I&amp;#39;m running Windows 7 I&amp;#39;ve used this setup on Windows XP and Vista as well, so don&amp;#39;t fear if you&amp;#39;re running an archaic OS :P.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: I&amp;#39;m using the Umbraco Juno (4.6) beta release, but again this is a moot point, it works with any Umbraco 4.x instance&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Getting Umbraco running&lt;/h2&gt;
&lt;p&gt;So once you&amp;#39;ve &lt;a href=&quot;http://umbraco.codeplex.com&quot;&gt;downloaded Umbraco&lt;/a&gt; and extracted it fire up Visual Studio. First thing I do is create a blank Visual Studio project&lt;/p&gt;
&lt;p&gt;For development I use &lt;strong&gt;Web Application&lt;/strong&gt; projects, so create a new empty Web Application (ensuring you&amp;#39;ve got the right version of .NET selected too ;)) using the naming schema of &lt;code&gt;SolutionName.Web&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/umbraco/how-to-umbraco/how-to-umbraco-01.png&quot; alt=&quot;New WAP&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once I&amp;#39;ve added a Web Application I create the solutions required for &lt;a href=&quot;/webforms-mvp&quot;&gt;WebFormsMVP&lt;/a&gt; projects, a &lt;code&gt;Logic&lt;/code&gt; and &lt;code&gt;Services&lt;/code&gt; project (which I then remove the &lt;code&gt;Class1.cs&lt;/code&gt; file) and a Test project (omitted from here as it&amp;#39;s not important to the overall post). This will end you up with an empty Visual Studio solution (well, except for a web.config file):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/umbraco/how-to-umbraco/how-to-umbraco-02.png&quot; alt=&quot;Look ma&amp;#39;, no files&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we have to copy all the files, except for the /bin folder, into Visual Studio:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/umbraco/how-to-umbraco/how-to-umbraco-03.png&quot; alt=&quot;Files to copy&quot;&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#39;s already a web.config in the project, so we&amp;#39;ll just replace it with the one that Umbraco supplied us, otherwise we wont have any of the config settings for Umbraco wont work, and we don&amp;#39;t want that.&lt;/p&gt;
&lt;p&gt;Now that Visual Studio is looking nicely filled out I exclude the following folders from the solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;media&lt;/li&gt;
&lt;li&gt;umbraco&lt;/li&gt;
&lt;li&gt;umbraco_client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also delete the App_Code folder.&lt;/p&gt;
&lt;p&gt;There is method to this madness, I copy them across so I can ensure that they are in my project folder when I add it to source control. But the reason that I exclude it is so that Visual Studio wont include them in the JIT compilation when you fire up the debugger. This is most important with the /umbraco folder, as that contains ASP.Net files, the other folders (data, media, etc) don&amp;#39;t contain files that I want in source control, so that&amp;#39;s why I don&amp;#39;t need them in Visual Studio.&lt;/p&gt;
&lt;p&gt;Now the Solution Explorer looks a bit more useful:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/umbraco/how-to-umbraco/how-to-umbraco-04.png&quot; alt=&quot;Solution with Umbraco&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#39;s almost done, there&amp;#39;s just 1 more problem, we need to handle the Umbraco assemblies. As you&amp;#39;ll remember we excluded that from being copied into Visual Studio. This is because the assemblies are a dynamic feature, so including them into the project directly is a bad idea, also, the /bin folder should never be included in source control!&lt;/p&gt;
&lt;p&gt;So I close off Visual Studio so I can do some restructuring in Windows, basically I want the following structure in source control:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/src&lt;ul&gt;
&lt;li&gt;/UmbracoDemo3.* (where the projects resides)&lt;/li&gt;
&lt;li&gt;/UmbracoDemo3.sln&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/lib&lt;ul&gt;
&lt;li&gt;/umbraco-4.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now I copy across all the assemblies into the &lt;strong&gt;umbraco-4.6&lt;/strong&gt; folder, then upon reopening Visual Studio I add the assemblies as references into the Web project. Now when the project is compiled it will then copy all the assemblies into the local /bin for the web application. I recommend deleting the &lt;code&gt;App_Global.asax.dll&lt;/code&gt; (and the reference to it) as it just becomes a royal pain in the ass when working with WebFormsMVP.&lt;/p&gt;
&lt;p&gt;Any external assemblies which I need to include as a reference to a project that can&amp;#39;t be obtained via &lt;a href=&quot;http://nuget.codeplex.com/&quot;&gt;NuGet&lt;/a&gt; I&amp;#39;ll also put into there.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You don&amp;#39;t have to reference all of them, there is a subset of assemblies which you need to add and they will pull in the rest but I&amp;#39;ve never really sat down and worked out what ones they are.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Done&lt;/strong&gt;, now you can spin up Cassini and then you&amp;#39;re good to install Umbraco and start developing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that brings us to a finale of how I go about doing Umbraco setup with Visual Studio. Here&amp;#39;s a few notices of things which I didn&amp;#39;t cover in this article but can be useful to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I share databases, since the CI process of Umbraco isn&amp;#39;t exactly great it&amp;#39;s simpler to use a shared database for development&lt;/li&gt;
&lt;li&gt;I use Visual Studio for pretty much all file editing (css, masterpages, IronRuby, etc), but I create them through the Umbraco UI as it will set up the database records nicely&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>SydJs talk about JavaScript Frameworks</title>
            <link href="/posts/2010-12-20-sydjs-javascript-frameworks.html"/>
            <updated>2010-12-20T00:00:00.000Z</updated>
            <id>/posts/2010-12-20-sydjs-javascript-frameworks.html</id>
            <content type="html">&lt;p&gt;Recently I was invited by the lovely (? :P) people of &lt;a href=&quot;http://sydjs.com/&quot;&gt;SydJs&lt;/a&gt; to come down as participate in their lightning talks night. I presented on the topic of JavaScript frameworks (although to this day I&amp;#39;m not really sure what my session title was as &lt;a href=&quot;http://twitter.com/#!/twalve&quot;&gt;Craig Sharkie&lt;/a&gt; introduced it as something rather random).&lt;/p&gt;
&lt;p&gt;The basic point of my talk was just to give some pointers to people who are looking to create reusable JavaScript components, resulting in me converting some JavaScript which what running my slides into a small library which anyone can use (links below).&lt;/p&gt;
&lt;p&gt;All in all I really enjoyed being there, it was my first time down there (not only at SydJs but at a non-.NET user group, the enemy is a bit scary :P) and hopefully they will allow me back in the door in the future!&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the obligatory links set from the talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hg.slace.biz/sydjs-setting-up-javascript-frameworks&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hg.slace.biz/slidee&quot;&gt;Slidee (which was running the slides in the browser)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://whatkey.net&quot;&gt;WhatKey.net&lt;/a&gt; (&lt;a href=&quot;https://github.com/aaronpowell/whatkey&quot;&gt;source&lt;/a&gt;, &lt;a href=&quot;/whatkey-net-for-your-javascript-keycode-glory&quot;&gt;launch blog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-tools&quot;&gt;My JavaScript tools&lt;/a&gt; (contains the namespace method, mocking frameworks, etc)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/linq-in-javascript&quot;&gt;LINQ in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco &amp; Mercurial - How to contribute</title>
            <link href="/posts/2010-12-13-umbraco-and-mercurial-how-to-contribute.html"/>
            <updated>2010-12-13T00:00:00.000Z</updated>
            <id>/posts/2010-12-13-umbraco-and-mercurial-how-to-contribute.html</id>
            <content type="html">&lt;h1&gt;Umbraco &amp;amp; Mercurial - How to contribute&lt;/h1&gt;
&lt;p&gt;Now that Umbraco&amp;#39;s source code is being moved away from TFS and into Mercurial (&lt;a href=&quot;/mercurial-101-for-umbraco-developers&quot;&gt;and you&amp;#39;ve read the primer&lt;/a&gt;) it will be easier than ever for anyone to provide patches, bug fixes or even potential new features back to the Umbraco core team for review. Although you haven&amp;#39;t had to have TFS access in the past to get the code out and work with it the SVN bridge wasn&amp;#39;t a great way in which you could send patches back to the Umbraco core team, but with Mercurial we hope this will be even easier.&lt;/p&gt;
&lt;h2&gt;Get Forked!&lt;/h2&gt;
&lt;p&gt;Something that is very different in the world of DVCS is the idea of forks. Essentially a fork is a copy of the repository which someone has created for their own needs. A fork contains a full copy of the source repository but is completely isolated so what you do in your fork is your business, and a fork doesn&amp;#39;t have to be pushed back into the main repository, you may have a fork which you just want to have a small change for your own site needs.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s assume you found a bug in Umbraco and you want to fix it, here&amp;#39;s what to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need to create a fork, so navigate to &lt;a href=&quot;http://umbraco.codeplex.com/SourceControl/list/changesets&quot;&gt;&lt;a href=&quot;http://umbraco.codeplex.com/SourceControl/list/changesets&quot;&gt;http://umbraco.codeplex.com/SourceControl/list/changesets&lt;/a&gt;&lt;/a&gt; and click the Create Fork option&lt;/li&gt;
&lt;li&gt;Enter a name for the fork and a description and click Save&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you&amp;#39;re done, you have your own copy of the repository which you can clone and edit to your hearts content. Also, this repository is stored on the CodePlex servers, meaning that you&amp;#39;ve now got your own online repository, so your changes can be pushed to CodePlex and accessed anywhere, no more worrying about what&amp;#39;ll happen when your laptop blows up and your personalized version of the Umbraco source code is lost.&lt;/p&gt;
&lt;h2&gt;Working with your fork&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: The following will use the Mercurial command line tools, you can use &lt;a href=&quot;http://tortoisehg.bitbucket.org/&quot;&gt;TortoiseHg&lt;/a&gt; if you prefer though, refer to the TortoiseHg doco for the UI interactions :).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that you&amp;#39;ve created your fork, let&amp;#39;s set to work on fixing that bug. To do this we need to do the following steps, clone our fork, update to the right codebase and start working:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hg cl &amp;lt;url of your fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg up Release-4.5.2&lt;/code&gt; (or what ever revision you want to use)&lt;/li&gt;
&lt;li&gt;Launch Visual Studio&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;#39; it, you&amp;#39;re now working in your own personalized copy of the Umbraco repository.&lt;/p&gt;
&lt;h3&gt;Mercurial commands to know&lt;/h3&gt;
&lt;p&gt;Just to interrupt I&amp;#39;ll jump in and add a few more commands to your Mercurial toolbox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hg addremove&lt;/code&gt; (&lt;code&gt;addr&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;This will add any files to the repository which weren&amp;#39;t previously included and remove any that it can&amp;#39;t find (but thinks it should). You can also us &lt;code&gt;hg add&lt;/code&gt; and specify the file(s) explicitly too&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg commit&lt;/code&gt; (&lt;code&gt;com&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;This will commit any outstanding changes &lt;strong&gt;to your local repository&lt;/strong&gt; (There&amp;#39;s some useful links from the &lt;a href=&quot;http://umbraco.org/follow-us/blog-archive/2010/12/8/heads-up-umbraco-sourcecode-at-codeplex-to-switch-to-mercurial&quot;&gt;Umbraco blog&lt;/a&gt; for understanding DVCSs)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg push&lt;/code&gt; (&lt;code&gt;pus&lt;/code&gt;) &lt;ul&gt;
&lt;li&gt;This will send all change sets since you last pushed up to CodePlex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg status&lt;/code&gt; (&lt;code&gt;sta&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;This lists all the files which have some kind of change, either added, removed, modified or unknown (new files not listed for add) since the last commit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg outgoing&lt;/code&gt; (&lt;code&gt;o&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;Lists all the change sets which will be pushed to CodePlex the next time you do a push&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg incoming&lt;/code&gt; (&lt;code&gt;inc&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;Lists all the change sets which will be downloaded when you do a pull&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hg merge&lt;/code&gt; (&lt;code&gt;me&lt;/code&gt;)&lt;ul&gt;
&lt;li&gt;Merges the last change set committed into the local repository with the last change set from the remote repository (generally run after a &lt;code&gt;hg pul&lt;/code&gt;). You can merge to a specific change set by adding the &lt;code&gt;-r&lt;/code&gt; flag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Back to our original programming&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that you&amp;#39;ve fixed the bug, what do you do? Well we need to ensure that your code gets back to the core, for that we need to ensure that all files are included in the repository (if you added or removed any), the code is committed and you&amp;#39;ve sent it back to codeplex:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hg addr&lt;/li&gt;
&lt;li&gt;hg com -m &amp;quot;Fixing bug #1234. The problem was caused by XYZ so I did ABC and have tested it on my machine under the circumstances outlined in the bug&amp;quot;&lt;ol&gt;
&lt;li&gt;If you get an error here about your username see below&lt;/li&gt;
&lt;li&gt;Make sure that you&amp;#39;re providing a useful commit message, &lt;code&gt;fixed&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a useful commit message ;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;hg pus&lt;ol&gt;
&lt;li&gt;You&amp;#39;ll probably have to supply your password at this point&lt;/li&gt;
&lt;li&gt;You can configure Mercurial to remember your password, I&amp;#39;ll get to that shortly&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, you&amp;#39;ve just done a change and pushed it up to CodePlex! This change resides only in your fork at the moment though (this is what i meant by you can do forks which are just for your own needs that are never sent to the core), but you want to see this bug fixed in the core, so what&amp;#39;s next? Well you need to send the core team a &lt;strong&gt;pull request&lt;/strong&gt;. To do this you need to go back to CodePlex and view your forks. On this screen there is a &lt;strong&gt;Send Pull Request&lt;/strong&gt; link, click it, provide some information about why you&amp;#39;re sending the pull request and you&amp;#39;re done.&lt;/p&gt;
&lt;p&gt;Hopefully this process is a lot simpler for people to provide changed to Umbraco than the previous patching system :).&lt;/p&gt;
&lt;h2&gt;Troubleshoot and advanced tips&lt;/h2&gt;
&lt;p&gt;In an ideal world everything will go as smoothly as outlined, but we don&amp;#39;t live in an ideal world, so let&amp;#39;s have a look at some other things which you may need to know.&lt;/p&gt;
&lt;h3&gt;I get an error when committing about my username not being set&lt;/h3&gt;
&lt;p&gt;If this is your first time using Mercurial chances are you haven&amp;#39;t got the environment 100% configured to do changes. One thing that is required when you do a change is that you provide a username (remember, this isn&amp;#39;t integrated with Windows so it wont grab that one). But don&amp;#39;t worry, it&amp;#39;s a very easy problem to fix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Manually supplying usernames&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you execute a &lt;code&gt;hg com&lt;/code&gt; command you can specify the username there, like so: &lt;code&gt;hg com -m &amp;quot;some commit message&amp;quot; -u &amp;#39;Aaron Powell&amp;#39;&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting a default username for the clone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re doing a lot of commits you may want to set the username for this particular repository, to do so navigate into your &lt;code&gt;.hg&lt;/code&gt; folder (in the root of the clone) and open the &lt;code&gt;hgrc&lt;/code&gt; file (or create it if it doesn&amp;#39;t exist), and add the following section:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;title&quot;&gt;[ui]&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;username = &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Aaron Powell&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and now when you do &lt;code&gt;hg com -m &amp;quot;some commit message&amp;quot;&lt;/code&gt; the username will be pulled from that file automagically!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting a global username for Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using a lot of Mercurial clones you may not want to have to specify your username each time, instead you want something set globally for all of them. To do this you need to edit your global &lt;code&gt;hgrc&lt;/code&gt; file. You need to add the section listed above to the global file, which the locations of it listed here: &lt;a href=&quot;http://www.selenic.com/mercurial/hgrc.5.html&quot;&gt;http://www.selenic.com/mercurial/hgrc.5.html&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Storing your password&lt;/h3&gt;
&lt;p&gt;Each time you push you need to authenticate against the CodePlex servers, but if you&amp;#39;re doing a lot of pushes then it may get annoying to have to type in your password each time (or if you&amp;#39;re like me and don&amp;#39;t know your password it&amp;#39;s even more of a pain!). Luckily it&amp;#39;s easy to have your password automatically included. Navigate into you &lt;code&gt;.hg&lt;/code&gt; folder and open the &lt;code&gt;hgrc&lt;/code&gt; file. You should have a section like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;title&quot;&gt;[paths]&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;default = &lt;span class=&quot;value&quot;&gt;http://../&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the URL of your repository, and here you can configure it to automatically include your username &amp;amp; password, change the URL to be like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;&lt;span class=&quot;label&quot;&gt;https:&lt;/span&gt;//username:password@ur&lt;span class=&quot;preprocessor&quot;&gt;.of&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.my&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.repository&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save the file and now each time you commit your credentials are included :).&lt;/p&gt;
&lt;h3&gt;Staying in sync with the core&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;re a really awesome dude who fixes a lot of bugs for us you may find that your fork gets out of sync with the core, but don&amp;#39;t fear, you can keep your fork in sync by &lt;strong&gt;pulling from multiple sources&lt;/strong&gt;. What this allows you to do is define multiple repositories which you want to be able to get updates from (selectively).&lt;/p&gt;
&lt;p&gt;Open your trusty &lt;code&gt;hgrc&lt;/code&gt; file and navigate to the &lt;code&gt;[paths]&lt;/code&gt; section. In here you can add multiple paths, each with a different name. Most likely your fork will be labeled &lt;code&gt;default&lt;/code&gt;, so we&amp;#39;ll add a new one which is the core:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;title&quot;&gt;[paths]&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;default = &lt;span class=&quot;value&quot;&gt;https://hg01.codeplex.com/forks/slace/my-repository&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;core = &lt;span class=&quot;value&quot;&gt;https://hg01.codeplex.com/umbraco&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you do a pull you can specify where you want to pull from:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;hg&lt;/span&gt; pul core&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will get all the latest change sets form the Umbraco core repository. You can then merge (&lt;code&gt;hg me&lt;/code&gt;) them into your local fork and patch against it again!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here we&amp;#39;ve looked at how the move to Mercurial for Umbraco will make life easier for people outside of the Umbraco core team that want to contribute back. Hopefully this more streamlined process will mean that we see more fixes from the community so we can create even better a product :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Mercurial 101 as an Umbraco developer</title>
            <link href="/posts/2010-12-11-mercurial-101-for-umbraco-developers.html"/>
            <updated>2010-12-11T00:00:00.000Z</updated>
            <id>/posts/2010-12-11-mercurial-101-for-umbraco-developers.html</id>
            <content type="html">&lt;h1&gt;Mercurial 101 as an Umbraco developer&lt;/h1&gt;
&lt;p&gt;You may have read the post that the Umbraco codebase is being moved from a CodePlex TFS server to CodePlex Mercurial (&lt;a href=&quot;http://umbraco.org/follow-us/blog-archive/2010/12/8/heads-up-umbraco-sourcecode-at-codeplex-to-switch-to-mercurial&quot;&gt;link&lt;/a&gt;) but what does that mean as an Umbraco community member?&lt;/p&gt;
&lt;h2&gt;First up, a Mercurial primer&lt;/h2&gt;
&lt;p&gt;While there are fancy GUI tools for working with Mercurial (such as &lt;a href=&quot;http://tortoisehg.bitbucket.org/&quot;&gt;TortoiseHg&lt;/a&gt;) I&amp;#39;m going to do a quick run down on what you need to be able to use from the command line to work with Mercurial. Personally I find it easier (and quicker) to work on the command line, but if you&amp;#39;d prefer to learn about TortoiseHg jump over to their doco, or read &lt;a href=&quot;http://shazwazza.com/&quot;&gt;Shannon&amp;#39;s&lt;/a&gt; &lt;a href=&quot;http://shazwazza.com/post/A-UI-guide-to-using-Umbracoe28099s-new-repository-format-Mercurial.aspx&quot;&gt;guide to using TortoiseHg&lt;/a&gt; :).&lt;/p&gt;
&lt;h3&gt;Commands you need&lt;/h3&gt;
&lt;p&gt;There are three things you need to be able to do if you&amp;#39;re grabbing the code from Mercurial, clone, update and view history: (Note: This is not covering doing changes, just how to get the code and navigate around it)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hg clone &lt;a href=&quot;https://hg01.codeplex.com/umbraco&quot;&gt;&lt;a href=&quot;https://hg01.codeplex.com/umbraco&quot;&gt;https://hg01.codeplex.com/umbraco&lt;/a&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This how you get a copy of the codeplex repository onto your machine. This may take a little while, we&amp;#39;ve got a lot of history (sic) in there that you&amp;#39;ll be getting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hg update &lt;version you want&gt;&lt;ul&gt;
&lt;li&gt;This is how you&amp;#39;ll get to the release that you want to view the code for. Say you want to work with v4.5.2 then you want to do &lt;code&gt;hg update Release-4.5.2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hg serve&lt;ul&gt;
&lt;li&gt;This is an interesting command as it&amp;#39;ll spin up a webserver (&lt;a href=&quot;http://localhost:8000&quot;&gt;http://localhost:8000&lt;/a&gt; by default) which allows you to view the repository history. You can hit the url in your browser and browse change sets, commits, etc. This is a handy way to find out what you want to update to without having to go to CodePlex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A command line tip&lt;/h3&gt;
&lt;p&gt;One of the really nice things about the Mercurial command line tools is that you can use &lt;em&gt;shorthand&lt;/em&gt; to execute a command. Basically when you type a command in shorthand Mercurial will try and find the command that matches it, so for example if I was to type &lt;code&gt;hg up Release-4.5.2&lt;/code&gt; Mercurial will see that I&amp;#39;ve typed &lt;code&gt;up&lt;/code&gt; and that &lt;code&gt;up&lt;/code&gt; only matches the &lt;code&gt;update&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;If you don&amp;#39;t supply enough characters, ie: &lt;code&gt;hg c https://hg01.codeplex.com/umbraco&lt;/code&gt; then Mercurial will tell you that it doesn&amp;#39;t know what you were trying to execute.&lt;/p&gt;
&lt;h2&gt;Named branches as awesome&lt;/h2&gt;
&lt;p&gt;Anyone who&amp;#39;s tried to bugfix Umbraco or wanted to compile a version themselves will appreciate the pain which the TFS structure was causing (this isn&amp;#39;t a bash at TFS, it wasn&amp;#39;t entirely TFSs fault that it was hard, it was a combination of different factors, so don&amp;#39;t take this as a diss at TFS). Now with the migration it should be a whole lot easier.&lt;/p&gt;
&lt;p&gt;Say you find a bug in your 4.5.2 install and you want to try and debug it yourself. Here&amp;#39;s how you&amp;#39;d go about it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open up your favorite console (cmd.exe, powershell, etc) and navigate to a folder you want to put the Umbraco source&lt;/li&gt;
&lt;li&gt;Execute: &lt;code&gt;hg cl https://hg01.codeplex.com/umbraco; hg up Release-4.5.2;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open the .sln file in Visual Studio&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yes, it&amp;#39;s &lt;em&gt;just that easy&lt;/em&gt;! Now you can debug the code to your hearts content.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was just a quick walkt through of how the move to Mercurial with Umbraco is going to make it simpler for developers to interact with the Umbraco source code.&lt;/p&gt;
&lt;p&gt;Happy Hacking :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>WhatKey.net, a simple way to find JavaScript keycodes</title>
            <link href="/posts/2010-12-07-whatkey-net-for-your-javascript-keycode-glory.html"/>
            <updated>2010-12-07T00:00:00.000Z</updated>
            <id>/posts/2010-12-07-whatkey-net-for-your-javascript-keycode-glory.html</id>
            <content type="html">&lt;p&gt;Today while preparing a set of slides for an upcoming talk I decided that I wanted to do the slides as a series of web pages, the problem is that I still wanted to be able to use my &lt;a href=&quot;http://www.logitech.com/en-au/mice-pointers/presentation-remote/devices/5993&quot;&gt;Logitech clicker&lt;/a&gt;. Since it &amp;#39;just works&amp;#39; when I plug it in I figured it was firing some simple keyboard events, but the question is, what keyboard events is it firing?&lt;/p&gt;
&lt;p&gt;I fired up Chrome, opened the JavaScript console and added a body &lt;code&gt;keypress&lt;/code&gt; event to capture the keycode. Sweet, got what I needed, but it was a bit of a pain in the ass to do, I just wished there was a simpler way to find it, and what if I need to get them again, I&amp;#39;ve gotta write little handler again.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s just one of those things that you don&amp;#39;t need all that often, but it&amp;#39;s just a tedious task to get done.&lt;/p&gt;
&lt;p&gt;As they say, the necessity is the mother of all invention, so I decided to whip up a simple website which anyone can use, available at &lt;a href=&quot;http://whatkey.net&quot;&gt;&lt;a href=&quot;http://whatkey.net&quot;&gt;http://whatkey.net&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All you need to do is fire up &lt;a href=&quot;http://whatkey.net&quot;&gt;&lt;a href=&quot;http://whatkey.net&quot;&gt;http://whatkey.net&lt;/a&gt;&lt;/a&gt; and press the key that you want, this give you the keycode for the &lt;code&gt;keydown&lt;/code&gt; event in big letters. If you want to check different keyboard events, like &lt;code&gt;keypress&lt;/code&gt; or &lt;code&gt;keyup&lt;/code&gt; then you can access them by going to &lt;a href=&quot;http://whatkey.net/keypress&quot;&gt;&lt;a href=&quot;http://whatkey.net/keypress&quot;&gt;http://whatkey.net/keypress&lt;/a&gt;&lt;/a&gt; or &lt;a href=&quot;http://whatkey.net/keyup&quot;&gt;&lt;a href=&quot;http://whatkey.net/keyup&quot;&gt;http://whatkey.net/keyup&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Best of all this whole application is done in about 20 lines of code (&lt;a href=&quot;https://github.com/aaronpowell/whatkey&quot;&gt;source code is on GitHub&lt;/a&gt;), it runs Ruby, using &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt; and hosted on &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully this tool becomes useful to other web developers out there.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Ole Erling appears in NodeJS</title>
            <link href="/posts/2010-12-04-ole.html"/>
            <updated>2010-12-04T00:00:00.000Z</updated>
            <id>/posts/2010-12-04-ole.html</id>
            <content type="html">&lt;p&gt;People would probably agree that I&amp;#39;m not the most normal of people when it comes to developing software. Quite often something takes my fancy, and I have a crack at building with it, whether it is a good idea or not.&lt;/p&gt;
&lt;p&gt;Recently there&amp;#39;s been a lot of fuss on Twitter about a Ruby project which has recently gone into v1.0 called &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;. It&amp;#39;s got a rather nice syntax if you&amp;#39;re trying to build a quick-fire application, here&amp;#39;s the &lt;code&gt;Hello World&lt;/code&gt; example from the site:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; 'sinatra'&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; '/hi'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact in about 15 minutes I threw together a new site for some quick linking at &lt;a href=&quot;http://slace.biz&quot;&gt;slace.biz&lt;/a&gt;, from which you can jump to &lt;a href=&quot;http://slace.biz/umbraco&quot;&gt;/umbraco&lt;/a&gt; or get some basic contact info via &lt;a href=&quot;http://slace.biz/me&quot;&gt;/me&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Having fun with NodeJS&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s no secret that I&amp;#39;m a fan of JavaScript, especially if I want to do something that&amp;#39;s a little... strange.&lt;/p&gt;
&lt;p&gt;So after playing with Sinatra for a bit I decided &amp;quot;Why can&amp;#39;t I just built it in JavaScript?&amp;quot;. Oh sure, &lt;a href=&quot;http://expressjs.com/&quot;&gt;it&amp;#39;s been done before&lt;/a&gt;, but reinventing wheels are fun.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t really a serious attempt, it&amp;#39;s just a bit of fun and a bit of a learning experiment, so I decided that taking the piss would be the best way to go about it. To do this I decided to create my own framework, a framework inspired by a Danish &amp;#39;musician&amp;#39; called Ole Erling.&lt;/p&gt;
&lt;p&gt;The source code is available on my bitbucket, &lt;a href=&quot;http://hg.slace.biz/ole&quot;&gt;if you want to grab it it&amp;#39;s here&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Design of Ole&lt;/h1&gt;
&lt;p&gt;The design of Ole is to be a fun one (remember: piss-take!) and to work with it you have a fluent API which you can work with. The first thing that &lt;code&gt;Ole&lt;/code&gt; must do is enter the room (well, the file):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; ole = requires(&lt;span class=&quot;string&quot;&gt;'./src/ole'&lt;/span&gt;).enters();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that &lt;code&gt;Ole&lt;/code&gt; is in the room you can get him to do things, such as listen to HTTP events:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;ole.hears(&lt;span class=&quot;comment&quot;&gt;'GET', '/', function(req, res) {&lt;/span&gt;
  res.&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;(&lt;span class=&quot;comment&quot;&gt;'Hello World!');&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve said is that when &lt;code&gt;Ole&lt;/code&gt; hears a &lt;code&gt;GET&lt;/code&gt; HTTP request on the URL &lt;code&gt;/&lt;/code&gt; it will execute a particular function. &lt;code&gt;Ole&lt;/code&gt; can hear all four HTTP request modes, GET/ POST/ PUT and DELETE, it&amp;#39;s up to you how you want to implement them.&lt;/p&gt;
&lt;p&gt;Once you&amp;#39;re said what &lt;code&gt;Ole&lt;/code&gt; can hear you better get him to play it set:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;ole&lt;span class=&quot;preprocessor&quot;&gt;.play&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently &lt;code&gt;Ole&lt;/code&gt; will only play on port 2009 (spot the in-joke there :P) on localhost.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As I&amp;#39;ve said, this is a bit of a joke project that I&amp;#39;m working on, currently I&amp;#39;m hanging out to get a beta invite on &lt;a href=&quot;http://heroku.com&quot;&gt;heroku.com&lt;/a&gt;&amp;#39;s NodeJS support, or the &lt;a href=&quot;http://no.de&quot;&gt;no.be&lt;/a&gt; beta project, and when I do expect a site running &lt;code&gt;Ole&lt;/code&gt; to go live :D.&lt;/p&gt;
&lt;p&gt;Please feed free to get &lt;code&gt;Ole&lt;/code&gt; running a set for you too ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Some tips and tricks for working with IronRuby and Umbraco</title>
            <link href="/posts/2010-11-27-umbraco-ironruby-tips-and-tricks.html"/>
            <updated>2010-11-27T00:00:00.000Z</updated>
            <id>/posts/2010-11-27-umbraco-ironruby-tips-and-tricks.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Note: The following has been tested in Umbraco 4.5.2 on .NET 3.5, and it &lt;strong&gt;works on my machine&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Modularizing your IronRuby files&lt;/h1&gt;
&lt;p&gt;Having the ability to break a large file into a set of smaller files is quite an important aspect of any kind of programming, and it&amp;#39;s a concept that is in all the languages that Umbraco supports. XSTL has &lt;code&gt;&amp;lt;xsl:include&lt;/code&gt;, .NET has types, but what about DLR scripts?&lt;/p&gt;
&lt;p&gt;IronRuby (and IronPython) allow you to break files into smaller files, but how do you then include them?&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve seen examples with IronPython of peeople doing &lt;code&gt;Server.MapPath(&amp;quot;~/python&amp;quot;)&lt;/code&gt; and having it all included like that, but with IronRuby (and I&amp;#39;m assuming IronPython) it isn&amp;#39;t that complex.&lt;/p&gt;
&lt;h2&gt;Script settings file&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s a file called &lt;strong&gt;~/config/scripting.config&lt;/strong&gt; which is a little gem here. It&amp;#39;s the file that you modify if you want to do something like add an additional DLR language (like &lt;a href=&quot;http://iunknown.com/2007/11/lolcode-on-dlr.html&quot;&gt;LOLCode&lt;/a&gt;), but what&amp;#39;s more interesting is this section:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;options&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;options&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Full information about the DLR hosting specification can be found &lt;a href=&quot;http://www.codeplex.com/Project/Download/FileDownload.aspx?ProjectName=dlr&amp;amp;DownloadId=127516&quot;&gt;here&lt;/a&gt; (and it goes into more details about this config section) but in short you can use this to pass folders into the script.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a good sample (and what we&amp;#39;re using):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;options&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;language&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Ruby&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;options&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;LibraryPaths&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;python&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;options&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re configuring here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting the language to target as Ruby (you can use something from the names part of the language definition&lt;/li&gt;
&lt;li&gt;Specifying that we want to include the ~/python folder, using the &lt;strong&gt;LibraryPaths&lt;/strong&gt; option.&lt;ul&gt;
&lt;li&gt;This is the important one, the folders start from the root of your website (ie: /) so anything that&amp;#39;s inside your site can be added (ok, that&amp;#39;s not entirely true but it&amp;#39;s true enough :P)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now when each script is loaded it will include references to anything else in your ~/python folder, sweet :D.&lt;/p&gt;
&lt;h2&gt;Adding external files&lt;/h2&gt;
&lt;p&gt;Now that you know how to ensure that all external script files are available to each other how do you actually use them? Well with IronRuby it&amp;#39;s really simple:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;MyAwesomeRubyScript&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chuck that at the top of your file and then everything will be available to you from that script file. You can even create master includes so you can include specific scripts through 1 additional include:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SomeIncludes.rb&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;MyAwesomeScript&quot;&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;SomeOtherScript&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;MainScript.rb&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;SomeIncludes&quot;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;#work against what was defined in MyAwesomeScript.rb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Working with XML&lt;/h1&gt;
&lt;p&gt;In case you hadn&amp;#39;t already noticed Umbraco has a lot of integration with XML, and although there is a .NET API and DLR workings sometimes you&amp;#39;re just kind of stuck with XML. Take for example using the &lt;strong&gt;Related Links&lt;/strong&gt; data type, that stores XML into the property value, which is &lt;em&gt;great&lt;/em&gt; in XSLT, but how do you go with it in the DLR?&lt;/p&gt;
&lt;p&gt;Well I came across a neat little script today for working with IronRuby and XML, &lt;a href=&quot;http://code.msdn.microsoft.com/IronRubyXml&quot;&gt;which you can get too&lt;/a&gt;. And using the tip from above we can include it into any script file we need.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s make a basic IronRuby macro which will render a &lt;strong&gt;Related Links&lt;/strong&gt; data type as a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Assumptions: We have the XML helper I linked about in a file called &lt;code&gt;xml.rb&lt;/code&gt;. We have a property on the current node called &lt;strong&gt;QuickLinks&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;QuickLinks.rb&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s a simple little Ruby script to turn our property into some HTML:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;requires 'xml'

links = currentPage.get_property('quickLinks').value

xmlDoc = Document.new(links)

html = '&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;'
i = 0
xmlDoc.elements('links/link') do |e|
    html &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;&amp;lt;&lt;/span&gt; %&lt;span class=&quot;attribute&quot;&gt;Q&lt;/span&gt;{
        &amp;lt;&lt;span class=&quot;attribute&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'first ' if i == 0 }#{e.get('@type').value}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'_blank' if e.get('@newwindow').value == '1'}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{e.get('@link').value}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{e.get('@title').value}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#{e.get('@title'}.value&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    }
            i+=1
end

    html &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;&amp;lt;&lt;/span&gt; '&amp;lt;/&lt;span class=&quot;attribute&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;'
puts html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new XML object which we can using in the Ruby script, we then do a XPath statement to find the link items and then iterate through them.&lt;/p&gt;
&lt;p&gt;The XML library I used has a few shorthand method such as &lt;code&gt;get&lt;/code&gt; that allows us to grab a contextual XPath statement result (it translates to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/fb63z0tw.aspx&quot;&gt;XmlNode.SelectSingleNode&lt;/a&gt; internally) so we can quickly access the attributes and their values. I&amp;#39;ve also shown you how to use each attribute to build your list.&lt;/p&gt;
&lt;p&gt;And you go, a Ruby script which you can use to create your very own related links :).&lt;/p&gt;
&lt;h1&gt;Ruby-style naming&lt;/h1&gt;
&lt;p&gt;Although this tip isn&amp;#39;t specific to the Umbraco usage of IronRuby it&amp;#39;s a good tip to know if you&amp;#39;re doing IronRuby coding. The Ruby naming conventions are not like the .NET naming conventions, rather than using PascalCase they go with underscoring to break up words, so in .NET we&amp;#39;d write a method name like &lt;code&gt;HelloWorld(...)&lt;/code&gt; in Ruby we&amp;#39;d write &lt;code&gt;hello_world(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The smart folks behind IronRuby have taken this into account, and we can actually use Ruby-style naming even with .NET objects.&lt;/p&gt;
&lt;p&gt;Previously I&amp;#39;ve shown &lt;a href=&quot;/umbraco-menu-with-ironruby125&quot;&gt;how to build a menu with IronRuby&lt;/a&gt;, well if you wanted to make it more Ruby-esq you can actually do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;parent.children.find_all { |c| c.get_property(&lt;span class=&quot;string&quot;&gt;&quot;umbracoNaviHide&quot;&lt;/span&gt;).value != &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; }.each_with_index &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |child, i|
  puts %Q{
        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'first' if i == 0}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{Library.nice_url(child.id)}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'selected' if child.id == currentPage.id}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_self&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Go to #{child.name}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#{child.name}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  }
end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve done a few subtle changes, like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;c&lt;span class=&quot;variable&quot;&gt;.get_property&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;umbracoNaviHide&quot;&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;library&lt;span class=&quot;variable&quot;&gt;.nice_url&lt;/span&gt;(c&lt;span class=&quot;variable&quot;&gt;.id&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it looks truly like a Ruby script, and not a .NET developers wild attempt to be up with the hip kids playing with Ruby :P.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating a menu in Umbraco with IronRuby</title>
            <link href="/posts/2010-11-27-umbraco-menu-with-ironruby.html"/>
            <updated>2010-11-27T00:00:00.000Z</updated>
            <id>/posts/2010-11-27-umbraco-menu-with-ironruby.html</id>
            <content type="html">&lt;p&gt;Recently I&amp;#39;ve been help a client migrate a number of unmanaged microsites into an Umbraco instance, and since it&amp;#39;s well known that &lt;a href=&quot;/why-im-not-a-fan-of-xslt&quot;&gt;I&amp;#39;m not a fan of XSLT&lt;/a&gt; an alternative is in order. While working at &lt;a href=&quot;http://thefarmdigital.com.au&quot;&gt;TheFarm&lt;/a&gt; I wrote a blog about the different macro options and what &lt;a href=&quot;http://farmcode.org/post/2010/07/13/TheFARMe28099s-guide-to-Macros.aspx&quot;&gt;we were doing back then&lt;/a&gt;. Since moving on I&amp;#39;ve been wanting to avoid using XSLT at all.&lt;/p&gt;
&lt;p&gt;Umbraco has supported DLR languages like &lt;a href=&quot;http://ironpython.net&quot;&gt;IronPython&lt;/a&gt; and &lt;a href=&quot;http://ironruby.net&quot;&gt;IronRuby&lt;/a&gt; for quite some time, so I decided to look into it for this new project.&lt;/p&gt;
&lt;p&gt;So with the help of fellow Readifarian &lt;a href=&quot;http://twitter.com/#!/thomasjo&quot;&gt;Thomas Johansen&lt;/a&gt; we set about doing a migration of the microsites and running IronRuby where possible (Thomas is a Ruby fan so that&amp;#39;s why we&amp;#39;re choosing IronRuby here).&lt;/p&gt;
&lt;p&gt;One of the most common macros I was still writing in XSLT is a navigation, so lets look at how we can do this with IronRuby.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: With this I&amp;#39;m working on an Umbraco 4.5.2 version of Umbraco, using .NET 3.5&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Getting your script ready&lt;/h2&gt;
&lt;p&gt;One of the nice things about XSLT is that you can load in XSLT extensions, you know that section at the top of your XSLT file which you need specify &lt;code&gt;xmlns:umbraco.library=&amp;quot;urn:umbraco.library&amp;quot;&lt;/code&gt; and so on, well we need to do a similar thing in IronRuby so we have access to the &lt;code&gt;umbraco.library&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;But what&amp;#39;s different here is we just need to open the appropriate objects:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;Library = &lt;span class=&quot;value&quot;&gt;Object.const_get(&lt;span class=&quot;string&quot;&gt;&quot;umbraco&quot;&lt;/span&gt;).const_get(&lt;span class=&quot;string&quot;&gt;&quot;library&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this is doing is opening the &lt;code&gt;umbraco&lt;/code&gt; namespace and then getting the &lt;code&gt;library&lt;/code&gt; object from within it (you can chain as many namespaces together as you need to do this too).&lt;/p&gt;
&lt;h2&gt;Getting the starting node&lt;/h2&gt;
&lt;p&gt;At the moment our sites are only one level deep so we&amp;#39;re being a bit lazy with the loading of the root most node, but basically we want to find a parent some way. Like an XSLT DLR script are provided with the current page node in the form of a &lt;code&gt;currentPage&lt;/code&gt; object, so we&amp;#39;ll grab it from here:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; = currentPage.&lt;span class=&quot;keyword&quot;&gt;Parent&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Building our HTML&lt;/h2&gt;
&lt;p&gt;Now that we have our starting node we need to start constructing a navigation, that&amp;#39;s as easy as just writing HTML to the screen:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;'

parent.Children.find_all { |c| c.GetProperty(&quot;umbracoNaviHide&quot;).Value != &quot;1&quot; }.each_with_index do |child, i|
  puts %Q{
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'first' if i == 0}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{Library.NiceUrl(child.Id)}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'selected' if child.Id == currentPage.Id}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_self&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Go to #{child.Name}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#{child.Name}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  }
end

puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here what we&amp;#39;re doing is creating some HTML which is a HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element that then encloses a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. What&amp;#39;s primarily of interest in this script section is the loop.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re doing a few things here, first we&amp;#39;re using the &lt;a href=&quot;http://ruby-doc.org/core/classes/Enumerable.html#M003124&quot;&gt;&lt;code&gt;find_all&lt;/code&gt;&lt;/a&gt; method (you could use a &lt;code&gt;select&lt;/code&gt; instead if you want, Ruby has a dozen ways to do the same thing :P). This method we&amp;#39;re doing a filter on the children, ignoring the ones which we want to hide, but you can add what ever conditions you want in there (the &lt;code&gt;c&lt;/code&gt; variable is an instance of &lt;code&gt;Node&lt;/code&gt; from the Umbraco API). Once we&amp;#39;re got our filtered collection we are then looping through each one using the &lt;a href=&quot;http://ruby-doc.org/core/classes/Enumerable.html#M003137&quot;&gt;&lt;code&gt;each_with_index&lt;/code&gt;&lt;/a&gt; method which provides us again with the instance of a &lt;code&gt;Node&lt;/code&gt; and the position in the array (which is &lt;code&gt;i&lt;/code&gt; if you&amp;#39;re not following).&lt;/p&gt;
&lt;p&gt;A really cool thing about Ruby is how you can do string formatting, unlike .NET you can put complex logic in your string formatting, which is denoted by the &lt;code&gt;#{ ... }&lt;/code&gt; syntax, here we&amp;#39;re doing a few things such as:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#{'first' &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == 0}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this does is returns a value of &lt;code&gt;first&lt;/code&gt; when the &lt;code&gt;if&lt;/code&gt; condition is true, and this is how we can put a class on the first item in the navigation.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re also capable of doing other complex things like&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#{Library.NiceUrl(child.Id)}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And get the URL of the page in-place.&lt;/p&gt;
&lt;h2&gt;Wrapping it all up&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s the completed script:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;Library = Object.const_get(&quot;umbraco&quot;).const_get(&quot;libary&quot;)
parent = currentPage.Parent
puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;'

parent.Children.find_all { |c| c.GetProperty(&quot;umbracoNaviHide&quot;).Value != &quot;1&quot; }.each_with_index do |child, i|
  puts %Q{
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'first' if i == 0}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{Library.NiceUrl(child.Id)}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'selected' if child.Id == currentPage.Id}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_self&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Go to #{child.Name}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#{child.Name}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  }
end

puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s a total of 13 lines (including whitespace, which can be condensed to just 7 lines if you change whitespace and HTML formatting) of Ruby code which can build a navigation which will suite a lot of needs. Compare this to the template for &lt;code&gt;NavigationPrototype.xslt&lt;/code&gt; which ships within an Umbraco install that is 40 lines (ok, fine it &lt;strong&gt;does&lt;/strong&gt; have comments :P). Not bad me things, not bad...&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;IronRuby is a great alternative to writing small macros in Umbraco, it&amp;#39;s a great alternative to using XSLT. If you&amp;#39;re a developer I strongly recommend you look into the DLR support for your Umbraco projects.&lt;/p&gt;
&lt;h1&gt;Bonus - making a recursive menu system&lt;/h1&gt;
&lt;p&gt;In the above code we&amp;#39;ve make a simple menu system that has a known starting point, but as I pointed out it&amp;#39;s not great if you wanted to have a recursive one? Well let&amp;#39;s have a look at what is required to do that.&lt;/p&gt;
&lt;h2&gt;Recursively finding a parent&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is work out how to translate this XPath statement (that&amp;#39;s from the template shipped in Umbraco):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$currentPage&lt;/span&gt;/ancestor-&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;-&lt;span class=&quot;symbol&quot;&gt;self:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:node&lt;/span&gt; [&lt;span class=&quot;variable&quot;&gt;@level&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;$level&lt;/span&gt;]/node [string(data [&lt;span class=&quot;variable&quot;&gt;@alias&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;'umbracoNaviHide'&lt;/span&gt;]) != &lt;span class=&quot;string&quot;&gt;'1'&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into something in Ruby.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s a problem, we&amp;#39;re checking against the &lt;code&gt;@level&lt;/code&gt; attribute in XSLT, but the &lt;code&gt;Node&lt;/code&gt; object in the Umbraco API &lt;strong&gt;doesn&amp;#39;t have a Level property&lt;/strong&gt;! Damn that&amp;#39;s going to make my life harder isn&amp;#39;t it... Well good news is you can get around this with a bit of trickery. What we&amp;#39;re going to do is work against the &lt;code&gt;Id&lt;/code&gt; property... but hang on, we don&amp;#39;t &lt;em&gt;know&lt;/em&gt; what the Id is of the node at the level we want, and like hell do I want to hard code that anywhere. Well here&amp;#39;s where the trickery comes in.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; object has a property on it for the &lt;code&gt;Path&lt;/code&gt;, we can use that to &lt;em&gt;fake&lt;/em&gt; the level. Since a path is always in a known format, a comma-separated string, we can make that into an array, and then path-from-there ;).&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;level = &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;setting&quot;&gt;target_parent_id = &lt;span class=&quot;value&quot;&gt;currentPage.Path.split(',')[level].to_i rescue -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we&amp;#39;re working with microsites here I don&amp;#39;t want the upper-most navigation point for the site, I want the point from the current microsite, so I&amp;#39;m finding the ID of the node at level 2, if you were doing a full site specify the array index position (aka level) to be &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re also doing a &lt;code&gt;rescue&lt;/code&gt; here, and that will cause -1 to be returned if we for some reason don&amp;#39;t have an array that is at least 3 items long (it&amp;#39;s not required but it&amp;#39;s just safer and easier to recover from if you have an unexpected error).&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll also notice the &lt;code&gt;to_i&lt;/code&gt; on the end, this method will convert the string (ie: &amp;quot;1234&amp;quot;) into a number (ie: 1234).&lt;/p&gt;
&lt;p&gt;Next we to actually find the parent, so we want to simulate the &lt;code&gt;ancestor-or-self&lt;/code&gt; XPath select, which is really just a recursive function, and if there&amp;#39;s something that dynamic languages are great for that&amp;#39;s recursive functions.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; = currentPage
&lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;Parent&lt;/span&gt; until &lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt;.nil? || &lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt;.Id == target_parent_id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what we&amp;#39;re doing here is calling the &lt;code&gt;until&lt;/code&gt; loop method and assigning the value of &lt;code&gt;parent&lt;/code&gt; to &lt;code&gt;parent.Parent&lt;/code&gt; until one of the conditions returns true. This is similar to a &lt;code&gt;do {...} while(...)&lt;/code&gt; statement in .NET languages, just a bit funkier ;).&lt;/p&gt;
&lt;h2&gt;Bringing it all together&lt;/h2&gt;
&lt;p&gt;In addition to adding recursive parent lookups we&amp;#39;ve also decided to fix the script so that no navigation HTML is generated if there is no navigation to display. This can be done with a single-line &lt;code&gt;if&lt;/code&gt; statement, which looks kind of cool:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (parent &amp;amp;&amp;amp; (parent&lt;span class=&quot;variable&quot;&gt;.Children&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.empty&lt;/span&gt;? || parent&lt;span class=&quot;variable&quot;&gt;.Children&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.any&lt;/span&gt;? {|c| c&lt;span class=&quot;variable&quot;&gt;.GetProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;umbracoNaviHide&quot;&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.Value&lt;/span&gt; != &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; })) || parent&lt;span class=&quot;variable&quot;&gt;.nil&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;ll cause the script to exit if the parent wasn&amp;#39;t found or there aren&amp;#39;t any children to display.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what the whole script looks like now:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;Library = Object.const_get(&quot;umbraco&quot;).const_get(&quot;library&quot;)

target_parent_id = currentPage.Path.split(',')[2].to_i rescue -1
parent = currentPage
parent = parent.Parent until parent.nil? || parent.Id == target_parent_id

return if (parent &amp;amp;&amp;amp; (parent.Children.empty? || parent.Children.any? {|c| c.GetProperty(&quot;umbracoNaviHide&quot;).Value != &quot;1&quot; })) || parent.nil?

puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;'

parent.Children.find_all { |c| c.GetProperty(&quot;umbracoNaviHide&quot;).Value != &quot;1&quot; }.each_with_index do |child, i|
  puts %Q{
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'first' if i == 0}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{Library.NiceUrl(child.Id)}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#{'selected' if child.Id == currentPage.Id}&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;_self&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Go to #{child.Name}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#{child.Name}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  }

end

puts '&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy Ruby-ing :)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Internet Explorer bug with assigning CSS classes</title>
            <link href="/posts/2010-11-10-ie-bug-with-assigning-css-classes.html"/>
            <updated>2010-11-10T00:00:00.000Z</updated>
            <id>/posts/2010-11-10-ie-bug-with-assigning-css-classes.html</id>
            <content type="html">&lt;p&gt;Today I was fixing a problem on a site in which some background images weren&amp;#39;t showing up on certain elements in Internet Explorer but they were showing up under Firefox and Chrome.&lt;/p&gt;
&lt;p&gt;The page is quite a complex one which does a lot of client-side building of DOM elements so I started digging around in there, finding the section which was creating the element.&lt;/p&gt;
&lt;p&gt;The code was very simple, all it did was create a &lt;code&gt;&amp;lt;span /&amp;gt;&lt;/code&gt; tag, assign some CSS classes to it and eventually add it to the DOM. Nothing overly complex about it but it was breaking none-the-less.&lt;/p&gt;
&lt;p&gt;So I fired up the (lovely...) IE7 (yes, I&amp;#39;m on a SOE with IE7) and inspected the DOM. Sure enough the element was in the DOM, but when I looked at the applied styles in the inspector I noticed that the styles from the CSS class &lt;strong&gt;did not exist&lt;/strong&gt;. According to the DOM inspector the CSS class &lt;em&gt;was&lt;/em&gt; applied, just none of the rules were. I started to be confused, I tried manipulating the stylesheet, adding some more sizing to the element, but nothing caused the rules to be applied. But if I started playing in the DOM inspector I could influence it but only with what I was custom adding.&lt;/p&gt;
&lt;p&gt;After scratching my head for a while I took another look at the element creation process, and then I noticed something very strange...&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;.setAttribute('&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;', 'someClass');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The developer who wrote the JavaScript was using &lt;code&gt;setAttribute&lt;/code&gt; method on the DOM element to set the CSS class, not the &lt;code&gt;className&lt;/code&gt; property. I&amp;#39;ve never done it via the method, so I changed it to use the property and vola the CSS class was applied!&lt;/p&gt;
&lt;p&gt;I then created a very simple little piece of HTML to test with to ensure it wasn&amp;#39;t something more of a problem from the overall page, but &lt;strong&gt;it always fails in IE&lt;/strong&gt;, here&amp;#39;s my sample code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;IE CSS assignment testing&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;
            &lt;span class=&quot;class&quot;&gt;.c&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;hexcolor&quot;&gt;#ff0000&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;class&quot;&gt;.s&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{ &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding-top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;px;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;hexcolor&quot;&gt;#00ff00&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;rule&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;s&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; txt = document.createElement(&lt;span class=&quot;string&quot;&gt;'span'&lt;/span&gt;);
            txt.innerHTML = &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;;
            txt.setAttribute(&lt;span class=&quot;string&quot;&gt;'class'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;);

            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = document.getElementById(&lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;);            
            s.appendChild(txt);
            s.setAttribute(&lt;span class=&quot;string&quot;&gt;'class'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;);
        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save that as a HTML file and open it in IE7, IE9 Beta (I don&amp;#39;t have 8 or 6 on a machine), Firefox 3.6.11 and Chrome 8. In both the IEs I tested the background colour &amp;amp; padding is not applied, despite the inspector saying that the element has the classes applied to it.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll be reporting this as a bug in IE shortly, but of future note to developers &lt;strong&gt;use &lt;code&gt;element.className&lt;/code&gt; not &lt;code&gt;elemnet.setAttribute&lt;/code&gt; for CSS class assignment!&lt;/strong&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Base64 Encoding of Images via Powershell</title>
            <link href="/posts/2010-11-07-base64-encoding-images-with-powershell.html"/>
            <updated>2010-11-07T00:00:00.000Z</updated>
            <id>/posts/2010-11-07-base64-encoding-images-with-powershell.html</id>
            <content type="html">&lt;p&gt;Recently I was doing some CSS for a client but there was a bit of a problem with putting stuff into source control, basically there was a release coming up from one section of the source tree that I needed to put some images into for the CSS, but because they weren&amp;#39;t approved for this release I couldn&amp;#39;t commit them.&lt;/p&gt;
&lt;p&gt;The new CSS wasn&amp;#39;t going to be included in this release either, but I wanted to get at least some stuff source controlled (it&amp;#39;s in a different part of the tree so I could commit it) and to achieve this with the images I decided to use base64 encoding.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not aware something that modern browsers (like IE8+, FF, Chrome, etc) are starting to support is &lt;a href=&quot;http://tools.ietf.org/html/rfc2397&quot;&gt;RFC 2397&lt;/a&gt; which is also known as the &amp;quot;data&amp;quot; URI scheme. The basic premise behind this (if you&amp;#39;re not interested in reading the whole spec yourself :P) is to allow you to embed an encoded version of a URI response in place of the URI itself. This allows you to do funky stuff like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IMG
SRC=&quot;data:image&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;gif&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;base64&lt;/span&gt;,&lt;span class=&quot;attribute&quot;&gt;R0lGODdhMAAwAPAAAAAAAP&lt;/span&gt;///&lt;span class=&quot;attribute&quot;&gt;ywAAAAAMAAw&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;AAC8IyPqcvt3wCcDkiLc7C0qwyGHhSWpjQu5yqmCYsapyuvUUlvONmOZtfzgFz&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;ByTB10QgxOR0TqBQejhRNzOfkVJ&lt;/span&gt;+&lt;span class=&quot;attribute&quot;&gt;5YiUqrXF5Y5lKh&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;DeuNcP5yLWGsEbtLiOSp&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;a&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;TPg7JpJHxyendzWTBfX0cxOnKPjgBzi4diinWGdkF8kjdfnycQZXZeYGejmJl&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;ZeGl9i2icVqaNVailT6F5iJ90m6mvuTS4OK05M0vDk0Q4XUtwvKOzrcd3iq9uis&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;F81M1OIcR7lEewwcLp7tuNNkM3uNna3F2JQFo97Vriy&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;Xl4&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;f1cf5VWzXyym7PH&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;hhx4dbgYKAAA7&lt;/span&gt;&quot;
&lt;span class=&quot;attribute&quot;&gt;ALT&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Larry&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This technique can also be used with CSS, in background images, and it&amp;#39;s what I decided to go with. But how do you convert an image to a base64 string? There&amp;#39;s plenty of helper sites on the web, or maybe you can write a C# console application to do it.&lt;/p&gt;
&lt;p&gt;I decided to go a bit different with it, since it was something I&amp;#39;d be doing a few times I wanted it to be quite to write and easy to run, so Powershell was what I decided to go with.&lt;/p&gt;
&lt;p&gt;So I hit up &lt;a href=&quot;http://blog.codeassassin.com/&quot;&gt;Jason Stangroome&lt;/a&gt; for some Powershell wizardry (read: he told me what to code) and came up with a nifty 2-line Powershell file:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;tag&quot;&gt;Param&lt;/span&gt;(&lt;span class=&quot;attr_selector&quot;&gt;[String]&lt;/span&gt;$&lt;span class=&quot;tag&quot;&gt;path&lt;/span&gt;)
&lt;span class=&quot;attr_selector&quot;&gt;[convert]&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;::ToBase64String((get-content&lt;/span&gt; $&lt;span class=&quot;tag&quot;&gt;path&lt;/span&gt; -&lt;span class=&quot;tag&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;byte&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You then use it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;tex&quot;&gt;PS&amp;gt; .&lt;span class=&quot;command&quot;&gt;\ImageToBase&lt;/span&gt;64.ps1 C:&lt;span class=&quot;command&quot;&gt;\Path&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\To&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\Image&lt;/span&gt;.png &amp;gt;&amp;gt; base64.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jason thinks you can do it with only a single line script by putting the &lt;code&gt;Param&lt;/code&gt; declaration on the same line of &lt;code&gt;convert&lt;/code&gt; statement, but I think that having it on 2 lines should be fine :P.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>JavaScript functions are objects</title>
            <link href="/posts/2010-10-23-javascript-functions-are-objects.html"/>
            <updated>2010-10-23T00:00:00.000Z</updated>
            <id>/posts/2010-10-23-javascript-functions-are-objects.html</id>
            <content type="html">&lt;p&gt;I think it&amp;#39;s well known just how much I enjoy JavaScript, especially since there&amp;#39;s a few &lt;a href=&quot;/recursive-anonymous-functions&quot;&gt;really&lt;/a&gt; &lt;a href=&quot;/linq-in-javascript&quot;&gt;funky&lt;/a&gt; &lt;a href=&quot;/javascript-singleton&quot;&gt;things&lt;/a&gt; I&amp;#39;ve written about in the past.&lt;/p&gt;
&lt;p&gt;But in this article I&amp;#39;m going to look at something else that&amp;#39;s not commonly realised about JavaScript, that a function is actually just an object.&lt;/p&gt;
&lt;h2&gt;Functions 101&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s a couple of ways which you can write a function in JavaScript, you can write them anonymously:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;$(&lt;span class=&quot;reserved&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; stuff
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can name them:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can assign them to a variable:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(x, y) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each type of function declaration type has a different ideal usage, anonymous functions are best if you&amp;#39;re wanting to pass around single use functions, where as if you&amp;#39;re naming them it&amp;#39;s best if you want to reuse the function and assigning it to a variable (which you can name it at the same time) works in the a very similar fashion (I&amp;#39;m sure there&amp;#39;s differences but I haven&amp;#39;t read the full ECMA 262 spec so I&amp;#39;m not sure the differences :P).&lt;/p&gt;
&lt;p&gt;JavaScript functions always return a value, even if you don&amp;#39;t have a return statement (in which case they return &lt;code&gt;undefined&lt;/code&gt;) so you can return objects, built-in types (like boolean, number, etc) or even return functions.&lt;/p&gt;
&lt;p&gt;So as you can see functions are really quite powerful.&lt;/p&gt;
&lt;h2&gt;Beyond function basics&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s have a look at how we can work with functions beyond the basics of them, let&amp;#39;s take a function that we&amp;#39;re assigning to a variable:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(x, y) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By doing this we&amp;#39;ve got a variable named &lt;code&gt;add&lt;/code&gt; which we can use like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//x === 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well there&amp;#39;s a though, could you add a property to the variable &lt;code&gt;add&lt;/code&gt;? Maybe we could use this to add a description for the function that we&amp;#39;re working with...&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.desc&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Adds two numbers together&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
alert(&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.desc&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s perfectly valid because... &lt;strong&gt;functions are objects&lt;/strong&gt;. That&amp;#39;s right, anything you could do to a &amp;quot;standard object&amp;quot; you can do to a function. In fact, you can even have a function property on a function, like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; = function(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;) {
    return &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.add&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
alert(&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;; //alerts 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so this isn&amp;#39;t &lt;em&gt;really&lt;/em&gt; that useful an example, but it does kind of prove a point.&lt;/p&gt;
&lt;p&gt;This whole concept of functions-are-objects is core in a lot of JavaScript frameworks. Take &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; for example, you can do this which will invoke a function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('div')&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can do this which will work against jQuery as an object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;jQuery.ajax(&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And as you can see it&amp;#39;s all through a single entry point of the &lt;code&gt;jQuery&lt;/code&gt; object that we&amp;#39;re either working with it as a function or as an object.&lt;/p&gt;
&lt;h2&gt;Taking it another step&lt;/h2&gt;
&lt;p&gt;So if our function is an object, what can we do with it, can we do anything really trippy? How about having a function that describes itself after it runs? How can we do that?&lt;/p&gt;
&lt;p&gt;When a function runs there is a special variable which you get passed in called &lt;code&gt;arguments&lt;/code&gt;. This variable knows a few things about what&amp;#39;s happening such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the function&lt;/li&gt;
&lt;li&gt;The arguments passed into it&lt;/li&gt;
&lt;li&gt;The object that called the function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using the &lt;code&gt;arguments&lt;/code&gt; object we could start describing the function, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; = function(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;) {
    arguments&lt;span class=&quot;preprocessor&quot;&gt;.callee&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.lastCall&lt;/span&gt; = {
        &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;'y'&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    return &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
alert(&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.lastCall&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.x&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; //alerts 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, we can now find out about the last invocation of the function!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article we&amp;#39;ve looked into some of the fun things you can do with JavaScript functions, and how you can use a function as more than just a way to perform operations, but get them to describe themselves while they are running.&lt;/p&gt;
&lt;p&gt;Whether or not this is overly ideal in what you&amp;#39;re doing it&amp;#39;s up to you, but it&amp;#39;s definitely something that could be handy if you&amp;#39;re writing your own &lt;a href=&quot;http://hg.slace.biz/javascript-tools/src/tip/JavaScriptTools/Scripts/tester/slace.tester.mocker.js&quot;&gt;JavaScript mocking framework&lt;/a&gt; :P.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>DocumentDataProvider - Creating a custom LINQ to Umbraco Tree</title>
            <link href="/posts/2010-10-01-documentdataprovider-tree.html"/>
            <updated>2010-10-01T00:00:00.000Z</updated>
            <id>/posts/2010-10-01-documentdataprovider-tree.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;This article covers part of the &lt;code&gt;DocumentDataProvider&lt;/code&gt; from the &lt;a href=&quot;/linq-to-umbraco-extensions&quot;&gt;LINQ to Umbraco Extensions&lt;/a&gt; project.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;When you create a custom LINQ to Umbraco data provider there are a number of classes which you need to implement, this article will look at how to implement the &lt;code&gt;Tree&amp;lt;T&amp;gt;&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;But what is the point of the &lt;code&gt;Tree&amp;lt;T&amp;gt;&lt;/code&gt; class for? The class is responsible for most of the heavy lifting for a particular type. The &lt;code&gt;Tree&amp;lt;T&amp;gt;&lt;/code&gt; object is actually what is returned when you access a collection from the &lt;code&gt;UmbracoDataContext&lt;/code&gt; that you generate from the code generator. It is also what you push new objects into (assuming that the implementation supports CRUD), in fact it&amp;#39;s comparable to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb358844.aspx&quot;&gt;&lt;code&gt;Table&amp;lt;TEntity&amp;gt;&lt;/code&gt;&lt;/a&gt; class which is used by LINQ to SQL (&lt;a href=&quot;/understanding-linq-to-umbraco&quot;&gt;since LINQ to Umbraco is modeled after LINQ to SQL&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;Implementing Tree&amp;lt;T&amp;gt;&lt;/h1&gt;
&lt;p&gt;To implement the class you need to inherit from the abstract class, &lt;code&gt;umbraco.Linq.Core.Tree&amp;lt;TDocType&amp;gt;&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DocumentType&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TDocType&lt;/span&gt;&amp;gt; :&lt;/span&gt; Tree&amp;lt;TDocType&amp;gt;
{

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next this you have to do is implement the abstract class, of which there are 6 abstract methods and 1 abstract property, so the basic implementation will look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DocumentType&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TDocType&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TDocType&lt;/span&gt;&amp;gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; UmbracoDataProvider Provider { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; DeleteAllOnSubmit(IEnumerable&amp;lt;TDocType&amp;gt; items)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; DeleteOnSubmit(TDocType itemm)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; IEnumerator&amp;lt;TDocType&amp;gt; GetEnumerator()
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; InsertAllOnSubmit(IEnumerable&amp;lt;TDocType&amp;gt; items)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; InsertOnSubmit(TDocType item)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; ReloadCache()
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here nothing is implemented, and it&amp;#39;s up to you to work out exactly what you want to implement, the most important one to implement is &lt;code&gt;GetEnumerator()&lt;/code&gt;. Since LINQ to Umbraco implements &lt;code&gt;IEnumerable&lt;/code&gt; under the hood (&lt;a href=&quot;/iqueryable-linq-to-umbraco&quot;&gt;not IQueryable&lt;/a&gt;) this is the primary method that will be needed, so we&amp;#39;ll focus on that.&lt;/p&gt;
&lt;h1&gt;Implementing the constructor&lt;/h1&gt;
&lt;p&gt;The first step that we need to do is implement a constructor. It&amp;#39;s not really useful if we can&amp;#39;t create the tree that we&amp;#39;re going to be working with then it&amp;#39;s not really useful then is it :P. &lt;/p&gt;
&lt;p&gt;Since I don&amp;#39;t want to have people creating this type themselves, I only want it to be created as part of the overall data provider I&amp;#39;m going to create this as an &lt;code&gt;internal&lt;/code&gt; constructor:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; IEnumerable&amp;lt;Document&amp;gt; docs;
&lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; DocumentType docType;
&lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; UmbracoInfoAttribute umbracoInfoAttribute = ReflectionAssistance.GetUmbracoInfoAttribute(typeof(TDocType));
&lt;span class=&quot;title&quot;&gt;internal&lt;/span&gt; DocumentTree(UmbracoDataProvider dataProvider)
{
    &lt;span class=&quot;title&quot;&gt;Provider&lt;/span&gt; = dataProvider;
    &lt;span class=&quot;title&quot;&gt;cache&lt;/span&gt; = new Dictionary&amp;lt;int, TDocType&amp;gt;();
    &lt;span class=&quot;title&quot;&gt;docType&lt;/span&gt; = DocumentType.GetByAlias(umbracoInfoAttribute.Alias);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I&amp;#39;m setting the provider that this instance knows about is actually passed in. Ultimately it is being passed in as a base type, but you can make tighter type if you want. Next I&amp;#39;m setting up a cache for the items that we&amp;#39;re going to be finding in this provider (more on that shortly) and we&amp;#39;re storing the Document Type from Umbraco that maps to the LINQ to Umbraco type that we know about.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll notice that I&amp;#39;ve got a field called &lt;code&gt;umbracoInfoAttribute&lt;/code&gt;, this is a local reference to the attribute information which LINQ to Umbraco generates. We&amp;#39;ll need this a bit so it&amp;#39;s probably a good idea to keep it handy. The &lt;code&gt;ReflectionAssistance&lt;/code&gt; class ships as part of LINQ to Umbraco for your convenience.&lt;/p&gt;
&lt;p&gt;Onward ho!&lt;/p&gt;
&lt;h1&gt;Implementing GetEnumerator&lt;/h1&gt;
&lt;p&gt;Now that we can create out &lt;code&gt;Tree&amp;lt;T&amp;gt;&lt;/code&gt; instance lets look at how to implement the &lt;code&gt;GetEnumerator&lt;/code&gt; method so we can start retrieving our data.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; IEnumerator&amp;lt;TDocType&amp;gt; GetEnumerator()
{
    &lt;span class=&quot;comment&quot;&gt;//we'll cache the documents from Umbraco&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(docs == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
        docs = Document.GetDocumentsOfDocumentType(docType.Id);

    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuz we&amp;#39;re going to get all the Document objects from the Umbraco store we&amp;#39;ll actually cache it so we don&amp;#39;t completely hammer the database!&lt;/p&gt;
&lt;p&gt;Next we&amp;#39;ll loop through each of these documents and start creating a LINQ object which maps from it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;public override IEnumerator&amp;lt;TDocType&amp;gt; GetEnumerator()
{
    //&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; prevent &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; performance problems &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; hitting &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; DB we'll expect &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; this may be loaded already
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(docs == null)
        docs = Document.GetDocumentsOfDocumentType(docType.Id);

    //go &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; each document
    foreach (var doc &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; docs)
    {
        int &lt;span class=&quot;property&quot;&gt;id&lt;/span&gt; = doc.Id;
        //check &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; we've got a cached &lt;span class=&quot;property&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; doc, &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; so we'll just use &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt;, otherwise we need &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; do &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; setup
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cache.ContainsKey(&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;))
        {

        }
        //use yield &lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt; so we can &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; squeeze performance out. This way &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;say&lt;/span&gt; you're using a Take you can break early &lt;span class=&quot;keyword&quot;&gt;without&lt;/span&gt; fully loading &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; stuff &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; DB
        yield &lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt; cache[&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;];
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here&amp;#39;s the skeleton for what we&amp;#39;re going to do, we&amp;#39;ll iterate through all the documents and then look at our LINQ cache, and once it&amp;#39;s in our cache we&amp;#39;ll use &lt;code&gt;yield return&lt;/code&gt; so that we can lazy run them (if you&amp;#39;re not familiar with the &lt;code&gt;yield&lt;/code&gt; keyword &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx&quot;&gt;check it out on MSDN&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s look at how to create our LINQ object.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cache&lt;span class=&quot;variable&quot;&gt;.ContainsKey&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;))
{
    &lt;span class=&quot;comment&quot;&gt;//create our LINQ doc and setup the 'standard' properties&lt;/span&gt;
    var linqDoc = new TDocType();
    SetupStandardProperties(doc, linqDoc);

    &lt;span class=&quot;comment&quot;&gt;//find all the user-defined properties, LINQ to Umbraco decorates them with the PropertyAttribute&lt;/span&gt;
    var properties = linqDoc
        &lt;span class=&quot;variable&quot;&gt;.GetType&lt;/span&gt;()
        &lt;span class=&quot;variable&quot;&gt;.GetProperties&lt;/span&gt;(BindingFlags&lt;span class=&quot;variable&quot;&gt;.Public&lt;/span&gt; | BindingFlags&lt;span class=&quot;variable&quot;&gt;.Instance&lt;/span&gt;)
        &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(p =&amp;gt; p&lt;span class=&quot;variable&quot;&gt;.GetCustomAttributes&lt;/span&gt;(typeof(PropertyAttribute), &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.Count&lt;/span&gt;() &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
        ;

    foreach (var p in properties)
    {
        &lt;span class=&quot;comment&quot;&gt;//get the UmbracoInfo attribute (it'll have the alias)&lt;/span&gt;
        var attr = ReflectionAssistance&lt;span class=&quot;variable&quot;&gt;.GetUmbracoInfoAttribute&lt;/span&gt;(p);
        &lt;span class=&quot;comment&quot;&gt;//do some case-normalization of the attribute and then we'll grab the value from the document&lt;/span&gt;
        var data = doc&lt;span class=&quot;variable&quot;&gt;.getProperty&lt;/span&gt;(Casing&lt;span class=&quot;variable&quot;&gt;.SafeAlias&lt;/span&gt;(attr&lt;span class=&quot;variable&quot;&gt;.Alias&lt;/span&gt;))&lt;span class=&quot;variable&quot;&gt;.Value&lt;/span&gt;;
        p&lt;span class=&quot;variable&quot;&gt;.SetValue&lt;/span&gt;(linqDoc, Convert&lt;span class=&quot;variable&quot;&gt;.ChangeType&lt;/span&gt;(data, p&lt;span class=&quot;variable&quot;&gt;.PropertyType&lt;/span&gt;), null);
    }

    &lt;span class=&quot;comment&quot;&gt;//add the doc to our cache&lt;/span&gt;
    cache&lt;span class=&quot;variable&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, linqDoc); 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we&amp;#39;re doing quite a bit of stuff here, first we&amp;#39;re creating a new instance of the object we&amp;#39;re needing, and then we&amp;#39;ll set up the &amp;quot;standard&amp;quot; properties (properties such as ID, NodeName, etc, we&amp;#39;ll look at that implementation shortly).&lt;/p&gt;
&lt;p&gt;Next we want to find all the Umbraco properties, we&amp;#39;ll use reflection to find all the &lt;strong&gt;public instance&lt;/strong&gt; properties (using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.bindingflags.aspx&quot;&gt;&lt;code&gt;BindingFlags&lt;/code&gt;&lt;/a&gt; enum) that have the attribute of &lt;code&gt;PropertyAttribute&lt;/code&gt; which comes from LINQ to Umbraco&amp;#39;s code generator. We do this check because we&amp;#39;re generating partial classes you can add your own properties if you want, properties outside of Umbraco.&lt;/p&gt;
&lt;p&gt;Then we&amp;#39;ll iteration through them all, find the alias from Umbraco and then request the property data from the Umbraco API and lastly set it onto the LINQ object using refelction!&lt;/p&gt;
&lt;p&gt;Lastly we put this LINQ object into cache so we don&amp;#39;t have to create it next time.&lt;/p&gt;
&lt;p&gt;Phew, that was a tricky bit!&lt;/p&gt;
&lt;p&gt;As I mentioned we have a class for setting up the standard Umbraco properties:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;private static void SetupStandardProperties(Document doc, TDocType linqDoc)
{
    //&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; some of the private properties on the object
    var type = linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.GetType&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    {
        var prop = type&lt;span class=&quot;preprocessor&quot;&gt;.GetProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Id&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        prop&lt;span class=&quot;preprocessor&quot;&gt;.SetValue&lt;/span&gt;(linqDoc, doc&lt;span class=&quot;preprocessor&quot;&gt;.Id&lt;/span&gt;, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    {
        var prop = type&lt;span class=&quot;preprocessor&quot;&gt;.GetProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;CreatorID&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        prop&lt;span class=&quot;preprocessor&quot;&gt;.SetValue&lt;/span&gt;(linqDoc, doc&lt;span class=&quot;preprocessor&quot;&gt;.Creator&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Id&lt;/span&gt;, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    {
        var prop = type&lt;span class=&quot;preprocessor&quot;&gt;.GetProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;CreatorName&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        prop&lt;span class=&quot;preprocessor&quot;&gt;.SetValue&lt;/span&gt;(linqDoc, doc&lt;span class=&quot;preprocessor&quot;&gt;.Creator&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt;, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }
    {
        var prop = type&lt;span class=&quot;preprocessor&quot;&gt;.GetProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Version&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        prop&lt;span class=&quot;preprocessor&quot;&gt;.SetValue&lt;/span&gt;(linqDoc, doc&lt;span class=&quot;preprocessor&quot;&gt;.Version&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(), null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.NodeName&lt;/span&gt; = doc&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.CreateDate&lt;/span&gt; = doc&lt;span class=&quot;preprocessor&quot;&gt;.CreateDateTime&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.UpdateDate&lt;/span&gt; = doc&lt;span class=&quot;preprocessor&quot;&gt;.UpdateDate&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.SortOrder&lt;/span&gt; = doc&lt;span class=&quot;preprocessor&quot;&gt;.sortOrder&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    linqDoc&lt;span class=&quot;preprocessor&quot;&gt;.TemplateId&lt;/span&gt; = doc&lt;span class=&quot;preprocessor&quot;&gt;.Template&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll notice four funky things at the top of this method, this is because some of the LINQ to Umbraco properties have &lt;strong&gt;private&lt;/strong&gt; setters, but we can do it with reflection (ahh reflection, is there anything it can&amp;#39;t do :P). There is a good reason that these properties don&amp;#39;t have a public setter, it&amp;#39;s means that some of the stuff can&amp;#39;t be &amp;quot;screwed with&amp;quot; unless you want it to be. Yes this is a design decision that you&amp;#39;ll have to live with :P.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So we&amp;#39;re done with our basic implementation of the &lt;code&gt;DocumentTree&amp;lt;T&amp;gt;&lt;/code&gt; class. There&amp;#39;s plenty more things to do if you want to support CRUD operations, and that&amp;#39;ll be covered in a dedicated article.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Overview of the DocumentDataProvider</title>
            <link href="/posts/2010-09-30-documentdataprovider-overview.html"/>
            <updated>2010-09-30T00:00:00.000Z</updated>
            <id>/posts/2010-09-30-documentdataprovider-overview.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve read my article on &lt;a href=&quot;/understanding-linq-to-umbraco&quot;&gt;Understanding LINQ to Umbraco&lt;/a&gt; (and if you haven&amp;#39;t you really should go do that) you&amp;#39;ll know that LINQ to Umbraco does have the scaffolding for doing full CRUD operations. But with CRUD it is up to the underlying &lt;code&gt;UmbracoDataProvider&lt;/code&gt; implementation to support.&lt;/p&gt;
&lt;p&gt;Because the OOTB &lt;code&gt;UmbracoDataProvider&lt;/code&gt; instance, the &lt;code&gt;NodeDataProvider&lt;/code&gt; is only concerned with how to access the in-memory cache so having full CRUD doesn&amp;#39;t make sense.&lt;/p&gt;
&lt;p&gt;This is where the &lt;code&gt;DocumentDataProvider&lt;/code&gt; fits in; like its name suggests it is designed to work with the Umbraco Document API, which is responsible for performing CRUD operations. So the ultimate goal of the &lt;code&gt;DocumentDataProvider&lt;/code&gt; will be to provide full CRUD operations against the Umbraco database.&lt;/p&gt;
&lt;h2&gt;DocumentDataProvider vs NodeDataProvider&lt;/h2&gt;
&lt;p&gt;So if the goal of the &lt;code&gt;DocumentDataProvider&lt;/code&gt; is to provide full CRUD where will that leave &lt;code&gt;NodeDataProvider&lt;/code&gt;? Well they should still sit side-by-side. For your common usage you should still use the &lt;code&gt;NodeDataProvider&lt;/code&gt;, this will only be interacting with published content, and the in-memory cache. The &lt;code&gt;DocumentDataProvider&lt;/code&gt; on the other hand will be interacting with the Document API, this means that it&amp;#39;ll be tied to the SQL instance, and doing read operations will suffer from the same performance limitations that you can find from the Document API. There will be caching built into the &lt;code&gt;DocumentDataProvider&lt;/code&gt;, but by-and-large there will be limits to how that can help.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>JavaScript functions that rewrite themselves for a Singleton pattern</title>
            <link href="/posts/2010-09-30-javascript-singleton.html"/>
            <updated>2010-09-30T00:00:00.000Z</updated>
            <id>/posts/2010-09-30-javascript-singleton.html</id>
            <content type="html">&lt;p&gt;Recently I was building a JavaScript application which was quite complex and involved a bit of server interaction with some AJAX requests. The AJAX was just doing some one-time data loading, and the reason I was using AJAX was to lazy-load some of the information on the page.&lt;/p&gt;
&lt;p&gt;Since the methods going back to the server were to be called multiple times and I wanted caching of the server response I needed to have the method a bit aware that the server call had responded and not to do it again. Essentially what I was wanting to do was have a &lt;a href=&quot;http://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Singleton&lt;/a&gt; implemented, but this is really just a method call, so we need to Singleton a method... hmm...&lt;/p&gt;
&lt;p&gt;Well let&amp;#39;s have a look at how to do that.&lt;/p&gt;
&lt;h1&gt;Functions writing functions&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s think about what we&amp;#39;re trying to do here, we&amp;#39;re trying to make a function run and then run again but perform a bit differently the next time around, and there&amp;#39;s a few different ways to do this. One of the ways you can do this is with logic branches, &lt;code&gt;if something then ... else ... endif&lt;/code&gt;, sure that&amp;#39;s easy, but it&amp;#39;s totally not crazy enough for me, could we do &lt;code&gt;if something then replace function else call original endif&lt;/code&gt;? Well the answer is yes, and that&amp;#39;s what we&amp;#39;re going to do, the function is going to &lt;strong&gt;rewrite itself during its execution!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;It&amp;#39;s exploitation I tell you!&lt;/h1&gt;
&lt;p&gt;So what we&amp;#39;re wanting to do is take advantage of the way that JavaScript closure works. I&amp;#39;m not going to go into detail about explaining closure, &lt;a href=&quot;http://stackoverflow.com/questions/111102/how-does-a-javascript-closure-work&quot;&gt;if you&amp;#39;re interested check this post out&lt;/a&gt;, but what we&amp;#39;re going to use is the fact that a variable defined outside a function can be assigned within that function.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s look at a very basic example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;/span&gt;) {
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;/span&gt;) {
        console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I've been replaced!&quot;&lt;/span&gt;);
    };
    console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Thanks for the call&quot;&lt;/span&gt;);
};
&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//Thanks for the call&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//I've been replaced!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run this in a browser (that supports &lt;code&gt;console.log&lt;/code&gt;, eg: Firefox, Chrome and IE9)  the first time the function is called you&amp;#39;ll get the output &lt;strong&gt;Thanks for the call&lt;/strong&gt; and then every subsequent call will output &lt;strong&gt;I&amp;#39;ve been replaced!&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;p&gt;The reason this works is because we&amp;#39;re creating a variable called &lt;code&gt;fn&lt;/code&gt; which we can access within the scope of then &lt;code&gt;fn&lt;/code&gt; function body, and because we can access the variable we can reassign it! So when &lt;code&gt;fn&lt;/code&gt; runs it rewrites itself, but it has its own function body that it executes.&lt;/p&gt;
&lt;p&gt;This allows you to do some crazy things, like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;/span&gt;) {
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;();
    };
    console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Thanks for the call&quot;&lt;/span&gt;);
};
&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//Thanks for the call&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;//results in a stack overflow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wouldn&amp;#39;t advise this, it&amp;#39;s a good way to make a mess of some code :P. This was more just to illustrate a point.&lt;/p&gt;
&lt;h1&gt;Real world scenario&lt;/h1&gt;
&lt;p&gt;The example we&amp;#39;ve seen above is fairly sandboxed, it doesn&amp;#39;t really take into account the method being a method of a JavaScript object, doesn&amp;#39;t take into account the AJAX or anything like that. It illustrates the point nicely, but let&amp;#39;s expand on it.&lt;/p&gt;
&lt;p&gt;First off let&amp;#39;s create a little JavaScript object to play with:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;myObject = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
    _&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; = {
        getData: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(callback) {

        }
    };    
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m creating an object called &lt;code&gt;myObject&lt;/code&gt; (imaginative I know) that will be sitting at the &lt;code&gt;window&lt;/code&gt; level, and had a single public method &lt;code&gt;getData(callback)&lt;/code&gt;. The method will take a function as an argument which we&amp;#39;ll invoke when the server response is completed. Doing a callback for an AJAX request is an easy way to expose the successful response method without having to expose the AJAX API.&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s go about implementing the body of the function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;myObject&lt;/span&gt; = (function() {
    var _this;
    _this = {
        getData: function(callback) {
            $.ajax({
                &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: &quot;&lt;span class=&quot;type&quot;&gt;POST&lt;/span&gt;&quot;,&lt;/span&gt;
                contentType: &lt;span class=&quot;string&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;,
                url:&lt;span class=&quot;string&quot;&gt; '/MyService.asmx/SomeMethod'&lt;/span&gt;,
                success: function (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
                    &lt;span class=&quot;title&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;getData&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;) {
                        &lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;_this&lt;/span&gt;, [&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;]);
                    }&lt;/span&gt;;&lt;/span&gt;

                    callback.apply(_this, [&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;]);&lt;/span&gt;
                }
            });
        }
    };    
    return _this;
})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re using jQuery (it&amp;#39;ll just make it a bit less verbose for the demo) and then we&amp;#39;re calling a web service method, that is all fairly standard, the interesting stuff is within the body of the &lt;em&gt;success&lt;/em&gt; property:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;: function (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
    &lt;span class=&quot;title&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;getData&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;) {
        &lt;span class=&quot;title&quot;&gt;callback&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;_this&lt;/span&gt;, [&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;]);
    }&lt;/span&gt;;&lt;/span&gt;

    callback.apply(_this, [&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;]);&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the function which jQuery will invoke when the server successfully returns (and we&amp;#39;re assuming that it returns some data). When the method is called we&amp;#39;ll execute the callback (and by using &lt;code&gt;callback.apply&lt;/code&gt; we can specify the internal scope of the object, so the &lt;code&gt;this&lt;/code&gt; scope will be the &lt;code&gt;myObject&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;And like we did in our early example here we&amp;#39;re running a piece of code to rewrite the function when it executes. The thing is that we now have an object, so we can&amp;#39;t use the trick we were using before, instead this time what we&amp;#39;re doing is &lt;strong&gt;assigning the method on the object which was created&lt;/strong&gt;. This is the key point here, if we don&amp;#39;t have a reference back to the object then we can&amp;#39;t reassign it. It is true that this demo could use &lt;code&gt;myObject.getData&lt;/code&gt;, since it&amp;#39;s a static method on the object, but I wanted the demo to cover if you are using a class implementation.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That wraps it all up, we&amp;#39;ve see how we can create functions in JavaScript which will rewrite themselves to simulate a Singleton. The ultimate usefulness of this code is up for debate, but it is a good example of how you can do some really funky stuff with JavaScript.&lt;/p&gt;
&lt;p&gt;Just be careful you don&amp;#39;t make your rewriting functions too smart or they may become sentient!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>A set of extensions for LINQ to Umbraco</title>
            <link href="/posts/2010-09-30-linq-to-umbraco-extensions.html"/>
            <updated>2010-09-30T00:00:00.000Z</updated>
            <id>/posts/2010-09-30-linq-to-umbraco-extensions.html</id>
            <content type="html">&lt;p&gt;LINQ to Umbraco is awesome, let&amp;#39;s not deny it, but I had a thought of how could I make it even more awesome...&lt;/p&gt;
&lt;p&gt;There was a lot of things that I wanted to achieve with LINQ to Umbraco that couldn&amp;#39;t be done in the time frame of the Umbraco 4.5 release, and some things which aren&amp;#39;t really applicable in the context of the Umbraco core.&lt;/p&gt;
&lt;p&gt;So this project will aim to fill in the gaps that LINQ to Umbraco leaves out of the core of Umbraco.&lt;/p&gt;
&lt;h2&gt;Source and releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bitbucket.org/slace/linq-to-umbraco-extensions&quot;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Current Release (coming soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DocumentDataProvider&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/documentdataprovider-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/documentdataprovider-tree&quot;&gt;Creating a DocumentTree class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Using Lazy&lt;T&gt; with KeyedCollection</title>
            <link href="/posts/2010-09-22-lazy-keyedcollections.html"/>
            <updated>2010-09-22T00:00:00.000Z</updated>
            <id>/posts/2010-09-22-lazy-keyedcollections.html</id>
            <content type="html">&lt;p&gt;For a project which I&amp;#39;m currently working on I&amp;#39;ve got a few custom collections which I need to return from various methods on a data repository. There&amp;#39;s a bit of heavy lifting that is done in each of the repository methods so I wanted to have a way which each of them could be lazy loading the items into the collection. This would also mean that if you&amp;#39;re only wanting a subset of the collection you don&amp;#39;t create all the objects.&lt;/p&gt;
&lt;p&gt;Since the collections are representing a data model I decided that I&amp;#39;d go with the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms132438.aspx&quot;&gt;KeyedCollection&lt;/a&gt;, as it&amp;#39;s a well designed collection for what I need, similar to a List but had a key for each item. And since we&amp;#39;re representing a data model having a key is important.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a handy class in the .NET 4.0 framework which I wanted to use, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd642331.aspx&quot;&gt;Lazy&amp;lt;T&amp;gt;&lt;/a&gt; which is handy as it takes a lambda statement into the constructor so that I defer the object creation.&lt;/p&gt;
&lt;h2&gt;Introducing KeyedCollection&lt;/h2&gt;
&lt;p&gt;If you haven&amp;#39;t worked with KeyedCollection before it&amp;#39;s quite a handy class. It&amp;#39;s an abstract class so you have to implement it when ever you want to use it. The reason for this is that you have to implement a method called &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms132454.aspx&quot;&gt;&lt;code&gt;GetKeyForItem&lt;/code&gt;&lt;/a&gt; which tells the collection how to resolve the key for each item. This is where KeyedCollection differs from the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/xfhwa508.aspxBlockquote&quot;&gt;Dictionary&lt;/a&gt; class; for a Dictionary you need to pass in the key value each time.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m sure you can see the advantage of the KeyedCollection now for what I&amp;#39;m doing, it can reduce code smell quite nicely.&lt;/p&gt;
&lt;h2&gt;Getting Lazy&lt;/h2&gt;
&lt;p&gt;So let&amp;#39;s get started with making a collection which is lazy and we&amp;#39;ll have a look at something which tripped me up when implementing it.&lt;/p&gt;
&lt;p&gt;For the purpose of this blog I&amp;#39;ve got some stubbed out classes that could represent a data entity, one called &lt;code&gt;Id&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Id&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Alias { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will be the key in our collection, and an &lt;code&gt;Entity&lt;/code&gt; class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entity&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Id Id { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DateTime CreatedDate { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;#39;ll be creating an implementation of &lt;code&gt;KeyedCollection&lt;/code&gt; and lets start with our basic class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LazyKeyedCollection&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;KeyedCollection&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Lazy&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;
        &lt;span class=&quot;title&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Entity&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; Id GetKeyForItem(Lazy&amp;lt;T&amp;gt; item)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this implementation I&amp;#39;ve made the collection a generic so that you can sub-class out the &lt;code&gt;Entity&lt;/code&gt; object (which is likely if we were implementing this into a full-scale application, as I&amp;#39;m doing). You&amp;#39;ll notice that &lt;code&gt;KeyedCollection&lt;/code&gt; actually is &lt;code&gt;KeyedCollection&amp;lt;Id, Lazy&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, which is wrapping our generic argument into the &lt;code&gt;Lazy&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;As I mentioned above we need to implement a method which tells it how we&amp;#39;re going to get the key from the object (our &lt;code&gt;Entity&lt;/code&gt;), so let&amp;#39;s implement that:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;protected override Id GetKeyForItem(Lazy&amp;lt;T&amp;gt; &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;)
{
    //access &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; lazy object
&lt;span class=&quot;command&quot;&gt;    return&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Value.Id;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here&amp;#39;s how the collection object will determine what is the key is for each item. But we&amp;#39;re after something that&amp;#39;s happening in a lazy fashion, so let&amp;#39;s write a little application to use it and we&amp;#39;ll make sure that it is lazy like we expect:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;class Program
{
    static void Main(string[] args)
    {
        var range = Enumerable&lt;span class=&quot;preprocessor&quot;&gt;.Range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var lkc = new LazyKeyedCollection&amp;lt;Entity&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range)
        {
            var i = item&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Adding item &quot;&lt;/span&gt; + i + &lt;span class=&quot;string&quot;&gt;&quot; to LazyKeyedCollection&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            lkc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Lazy&amp;lt;Entity&amp;gt;(() =&amp;gt;
            {
                var e = new Entity()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

                e&lt;span class=&quot;preprocessor&quot;&gt;.Id&lt;/span&gt; = new Id
                {
                    Alias = i&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(),
                    Name = &lt;span class=&quot;string&quot;&gt;&quot;LazyKeyedCollection item &quot;&lt;/span&gt; + i
                }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
                e&lt;span class=&quot;preprocessor&quot;&gt;.CreatedDate&lt;/span&gt; = DateTime&lt;span class=&quot;preprocessor&quot;&gt;.Now&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

                Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Created entity '&quot;&lt;/span&gt; + e&lt;span class=&quot;preprocessor&quot;&gt;.Id&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;'&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
                return e&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
            }))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Adding item 0 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 0&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 1 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 1&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 2 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 2&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 3 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 3&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 4 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 4&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 5 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 5&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 6 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 6&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 7 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 7&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 8 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 8&amp;#39;&lt;/p&gt;
&lt;p&gt;Adding item 9 to LazyKeyedCollection&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollection item 9&amp;#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh crap, look at that, we&amp;#39;re evaluating the lambda expression way to early, in fact it&amp;#39;s happening as soon as we add the item into the collection. That doesn&amp;#39;t sound very lazy now does it?&lt;/p&gt;
&lt;p&gt;So why did this happen? Well the problem is the &lt;code&gt;GetKeyForItem&lt;/code&gt; method. Because we have to tell the collection how to find the key it has to &lt;em&gt;create the object&lt;/em&gt; before it can resolve the key! Well shit, that&amp;#39;s not good, we&amp;#39;re completely missing the point of creating a lazy collection.&lt;/p&gt;
&lt;p&gt;This is where I got tripped up in my implementation, so I needed to find another way around what I was doing...&lt;/p&gt;
&lt;h2&gt;Getting Lazier&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve got a problem, we need to know the ID of the object, but we don&amp;#39;t want to create the object. So how to do this... We&amp;#39;ll do a different implementation of our lazy collection:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LazyKeyedCollectionMark2&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;KeyedCollection&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;KeyValuePair&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Lazy&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;
    &lt;span class=&quot;title&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Entity&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; Id GetKeyForItem(KeyValuePair&amp;lt;Id, Lazy&amp;lt;T&amp;gt;&amp;gt; item)
    {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a very subtle change in this implementation, now the &lt;em&gt;value&lt;/em&gt; type argument of the &lt;code&gt;KeyedCollection&lt;/code&gt; is no longer just &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; but instead it is &lt;code&gt;KeyValuePair&amp;lt;Id, Lazy&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and this means that our implementation of &lt;code&gt;GetKeyForItem&lt;/code&gt; is refactored to look like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;protected&lt;/span&gt; override Id GetKeyForItem(KeyValuePair&amp;lt;Id, Lazy&amp;lt;T&amp;gt;&amp;gt; item)
{
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; item.Key;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well now our &lt;code&gt;item&lt;/code&gt; object already knows about the key without having to request it from our lazy object, so this should be nice and easy to work with, let&amp;#39;s add test it to make sure that we&amp;#39;re really lazy with this new code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var lkcm2 = new &lt;span class=&quot;variable&quot;&gt;LazyKeyedCollectionMark2&lt;/span&gt;&amp;lt;&lt;span class=&quot;variable&quot;&gt;Entity&lt;/span&gt;&amp;gt;();
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var item in range)&lt;/span&gt;
{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;;
    C&lt;span class=&quot;title&quot;&gt;onsole&lt;/span&gt;.W&lt;span class=&quot;title&quot;&gt;riteLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Adding item &quot;&lt;/span&gt; + i + &lt;span class=&quot;string&quot;&gt;&quot; to LazyKeyedCollectionMark2&quot;&lt;/span&gt;)&lt;/span&gt;;
    I&lt;span class=&quot;title&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; I&lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;
    {
        A&lt;span class=&quot;title&quot;&gt;lias&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;.T&lt;span class=&quot;title&quot;&gt;oString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;,
        N&lt;span class=&quot;title&quot;&gt;ame&lt;/span&gt; = &quot;L&lt;span class=&quot;title&quot;&gt;azyKeyedCollectionMark2&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;item&lt;/span&gt; &quot; + &lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;
    }; 

    &lt;span class=&quot;title&quot;&gt;lkcm2&lt;/span&gt;.A&lt;span class=&quot;title&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(new &lt;span class=&quot;variable&quot;&gt;KeyValuePair&lt;/span&gt;&amp;lt;&lt;span class=&quot;variable&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;Lazy&lt;/span&gt;&amp;lt;&lt;span class=&quot;variable&quot;&gt;Entity&lt;/span&gt;&amp;gt;&amp;gt;(id, new &lt;span class=&quot;variable&quot;&gt;Lazy&lt;/span&gt;&amp;lt;&lt;span class=&quot;variable&quot;&gt;Entity&lt;/span&gt;&amp;gt;(()&lt;/span&gt; =&amp;gt;
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; E&lt;span class=&quot;title&quot;&gt;ntity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;

        &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;d&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;id&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;.C&lt;span class=&quot;title&quot;&gt;reatedDate&lt;/span&gt; = D&lt;span class=&quot;title&quot;&gt;ateTime&lt;/span&gt;.N&lt;span class=&quot;title&quot;&gt;ow&lt;/span&gt;;

        C&lt;span class=&quot;title&quot;&gt;onsole&lt;/span&gt;.W&lt;span class=&quot;title&quot;&gt;riteLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Created entity '&quot;&lt;/span&gt; + e.&lt;span class=&quot;variable&quot;&gt;Id&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;Name&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;'&quot;&lt;/span&gt;)&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;;
    })));
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And what does it output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Adding item 0 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 1 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 2 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 3 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 4 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 5 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 6 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 7 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 8 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;p&gt;Adding item 9 to LazyKeyedCollectionMark2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fantastic! We&amp;#39;re not creating the object when we&amp;#39;re adding it to the collection, and that&amp;#39;s what we wanted to see. Now let&amp;#39;s test iterating through the collection, and just output the &lt;code&gt;CreatedDate&lt;/code&gt; property:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; lkcm2)
{
    Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(item&lt;span class=&quot;preprocessor&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.CreatedDate&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hh:mm:ss.ffffzzz&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eww, that&amp;#39;s ugly, cuz we&amp;#39;re getting back a &lt;code&gt;KeyValuePair&lt;/code&gt; object we have to grab out the through the &lt;code&gt;Value&lt;/code&gt; property, and then cuz we&amp;#39;ve still got our &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; object we have access its &lt;code&gt;Value&lt;/code&gt; property. This has really added some code-smell back in so let&amp;#39;s see if we can clean it up a bit. We&amp;#39;ll override the &lt;code&gt;GetEnumerator&lt;/code&gt; of our collection:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IEnumerator&amp;lt;T&amp;gt; GetEnumerator()
{
    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Dictionary.Values)
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item.Value.Value;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll be getting back the actual instance of &lt;code&gt;T&lt;/code&gt; rather than our double-wrapped version of it. Now our foreach looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var item in lkcm2)&lt;/span&gt;
{
    C&lt;span class=&quot;title&quot;&gt;onsole&lt;/span&gt;.W&lt;span class=&quot;title&quot;&gt;riteLine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(item.&lt;span class=&quot;variable&quot;&gt;CreatedDate&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;ToString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hh:mm:ss.ffffzzz&quot;&lt;/span&gt;)&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 0&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1277+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 1&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1807+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 2&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1827+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 3&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1847+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 4&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1857+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 5&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1877+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 6&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1887+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 7&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1907+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 8&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1907+10:00&lt;/p&gt;
&lt;p&gt;Created entity &amp;#39;LazyKeyedCollectionMark2 item 9&amp;#39;&lt;/p&gt;
&lt;p&gt;09:23:59.1927+10:00&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can see from the time stamp we&amp;#39;re not creating each object until it&amp;#39;s requested from the collection. This means that if we were to grab a subset we&amp;#39;d not have some of the created at all!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here we&amp;#39;ve looked at how to use the &lt;code&gt;KeyedCollection&lt;/code&gt; and &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; to create a lazy loaded collection which we can work with, and how we can ensure that the collection items are lazy loaded at time of enumeration.&lt;/p&gt;
&lt;p&gt;You can grab the source from this blog post off &lt;a href=&quot;http://bitbucket.org/slace/lazy-collections/&quot;&gt;my bitbucket&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Footnote&lt;/h3&gt;
&lt;p&gt;Although this implementation &lt;em&gt;works&lt;/em&gt; it&amp;#39;s not without drawbacks. If you&amp;#39;re wanting to use LINQ you&amp;#39;ll find that it works a little bit differently, you need to have an &lt;em&gt;*explicit implementation&lt;/em&gt; of &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, so you can replace the one which is defined by the superclass. This is all the committed code.&lt;/p&gt;
&lt;p&gt;You&amp;#39;d be much better off doing an implementation of &lt;code&gt;IDictionary&lt;/code&gt; and &lt;code&gt;IList&lt;/code&gt; on the same object, rather than trying to work with &lt;code&gt;KeyedCollection&lt;/code&gt;. Because of the way the .NET framework classes implements the &lt;code&gt;IEnumerable&lt;/code&gt; interface it&amp;#39;s a lot harder to get access to the methods (they aren&amp;#39;t virtual) so to override them you have to do your own explicit implementations of the interface and use the &lt;code&gt;new&lt;/code&gt; keyword when you can.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>JavaScript Tools</title>
            <link href="/posts/2010-09-12-javascript-tools.html"/>
            <updated>2010-09-12T00:00:00.000Z</updated>
            <id>/posts/2010-09-12-javascript-tools.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve been doing a lot of JavaScript development of recent, and I&amp;#39;ve always had a soft spot of JavaScript so it was only natural that I keep doing the same things over and over again. As I found that I was doing similar tasks continuously I decided to start working on my own little JavaScript toolbox.&lt;/p&gt;
&lt;p&gt;And since I&amp;#39;m doing these things again and again I thought it would be likely that there is one person out there who is doing it as well so I decided that I would release the toolkit I&amp;#39;ve been building for free.&lt;/p&gt;
&lt;p&gt;So this is the landing page for the different articles around the different libraries in my JavaScript Tools.&lt;/p&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/slace-core-javascript-library&quot;&gt;Core library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-eventmanager&quot;&gt;EventManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unit Testing (Coming soon!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Source Code&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve decided to release the source code for this as open source. It&amp;#39;s hosted using Mercurial on my BitBucket account. You can grab it here &lt;a href=&quot;http://hg.slace.biz/javascript-tools&quot;&gt;&lt;a href=&quot;http://hg.slace.biz/javascript-tools&quot;&gt;http://hg.slace.biz/javascript-tools&lt;/a&gt;&lt;/a&gt; and feel free to use it, fork it or contribute to it :).&lt;/p&gt;
&lt;h3&gt;Licence&lt;/h3&gt;
&lt;p&gt;I&amp;#39;ve decided to license the JavaScript tools under the MIT license: &lt;a href=&quot;http://hg.slace.biz/javascript-tools/src/tip/JavaScriptTools/LICENSE.txt&quot;&gt;&lt;a href=&quot;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/LICENSE.txt&quot;&gt;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/LICENSE.txt&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>An EventManager in JavaScript</title>
            <link href="/posts/2010-09-12-javascript-eventmanager.html"/>
            <updated>2010-09-12T00:00:00.000Z</updated>
            <id>/posts/2010-09-12-javascript-eventmanager.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Previously I&amp;#39;ve blogged about &lt;a href=&quot;/client-event-pool&quot;&gt;Client Event Pool&amp;#39;s&lt;/a&gt; (yes I know the images are broken), but that example was intrinsically tied to Microsoft AJAX and I wanted to have one which was separate from it.&lt;/p&gt;
&lt;p&gt;So I decided to create an object that resides at &lt;code&gt;slace.core.eventManager&lt;/code&gt; which will achieve this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This library has a dependency on the &lt;code&gt;slace.core&lt;/code&gt; library.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This API allows you to bind events, trigger events, unbind events (and event handlers) and event check if an event handler is registered.&lt;/p&gt;
&lt;p&gt;This is all possible without having to explicitly tie each object to the objects which need to know about the events it&amp;#39;s firing. To fully understand the idea behind the Client Event Pool concept I suggest you read my previous article and its references.&lt;/p&gt;
&lt;h2&gt;Binding events&lt;/h2&gt;
&lt;p&gt;The concept of binding to an event is handy if you&amp;#39;ve got code on a page that you want to run when a certain event will be completed (although the code may also be run by other means), and to do this there is a simple method which works like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;slace.core.eventManager.bind(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will put that handler there so that if any code that triggers (raises) the &amp;#39;some event&amp;#39; event the handler you specify will be executed.&lt;/p&gt;
&lt;p&gt;You can call &lt;code&gt;bind&lt;/code&gt; as many times as you like, adding as many handlers as you want.&lt;/p&gt;
&lt;p&gt;One thing that can be handy (if you need to add/ remove events programmatically) is the ability to provide a unique ID to an event handler, to do that it&amp;#39;s a third argument to the &lt;code&gt;bind&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;slace.core.eventManager.bind(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; }, &lt;span class=&quot;string&quot;&gt;'awesome-event'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give the identifier of &amp;#39;awesome-event&amp;#39; to the function you provided (we&amp;#39;ll look at how this is handy shortly)&lt;/p&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s the code that makes up &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    bind: function (name, fn, eventHandlerId) {
        var e = getEvent(name)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        if (!eventHandlerId) {
            eventHandlerId = name + &lt;span class=&quot;string&quot;&gt;'-'&lt;/span&gt; + (e&lt;span class=&quot;preprocessor&quot;&gt;.length&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        }
        fn&lt;span class=&quot;preprocessor&quot;&gt;.id&lt;/span&gt; = eventHandlerId&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        e&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;(fn)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;I&amp;#39;ve omitted the getEvent method as it&amp;#39;s not important, look into the real source for it&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What it does is check if you gave a unique ID, and if you didn&amp;#39;t then I&amp;#39;ll create one based off of the name of the event and the position in array of handlers and then it&amp;#39;s assigned to the &lt;code&gt;id&lt;/code&gt; property of the function object and adds it to the array of handlers.&lt;/p&gt;
&lt;h2&gt;Triggering events&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re binding to events you&amp;#39;re probably going to want to be raising them as well, and this is what the &lt;code&gt;trigger&lt;/code&gt; method is for and it works similarly to .NET events, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;eventManager.&lt;/span&gt;trigger(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When triggering an event you need to provide it the name of the event to trigger (eg: &amp;#39;some event&amp;#39;). Additionally there are two more arguments, with the full method call looking like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;eventManager.&lt;/span&gt;trigger(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, source, args);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;#39;ve been doing much JavaScript work you&amp;#39;ll be familiar with just how much fun scope can be in JavaScript, well with the &lt;code&gt;trigger&lt;/code&gt; method, you&amp;#39;re able to specify what object you want to be scoped as the &lt;code&gt;this&lt;/code&gt; object in the method when it runs. This is the 2nd argument to the &lt;code&gt;trigger&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Lastly you can pass in arguments you want for the event handlers. If your handlers are to accept multiple arguments then you need to pass in an array, but I&amp;#39;d suggest just passing in an object literal each time, it&amp;#39;s a lot more flexible than multiple arguments :P.&lt;/p&gt;
&lt;p&gt;The most common reason I&amp;#39;ve needed to use this is to work nicely with AJAX requests, rather than having to pass in call-back methods ;).&lt;/p&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;Here&amp;#39;s the code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;    trigger: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, source, args)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!source) &lt;span class=&quot;cell&quot;&gt;{
            source = {}&lt;/span&gt;;
        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!args) &lt;span class=&quot;cell&quot;&gt;{
            args = [];
        }&lt;/span&gt;
        var evt = getEvent(name);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!evt || (&lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;cell&quot;&gt;{
            return;
        }&lt;/span&gt;
        evt = &lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;matrix&quot;&gt;[evt[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;] : &lt;span class=&quot;transposed_variable&quot;&gt;Array.&lt;/span&gt;apply(null, evt);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;transposed_variable&quot;&gt;args.&lt;/span&gt;constructor !== Array) &lt;span class=&quot;cell&quot;&gt;{
            args = [args];
        }&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, l = &lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; l; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
            evt[i].apply(source, args);
        }&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off I do a few things like making sure you&amp;#39;re passing in an object for the sender (or I&amp;#39;ll default it to an empty one) and some arguments (which will become an empty array if it&amp;#39;s not there).&lt;/p&gt;
&lt;p&gt;Next I get the event by name and make sure there are some handlers to run.&lt;/p&gt;
&lt;p&gt;If there are some handlers it&amp;#39;ll just do a check to make sure that it&amp;#39;s an array that we&amp;#39;ll be working with for the handlers, ensure that the arguments are an array (if it&amp;#39;s not the code will break during the &lt;code&gt;apply&lt;/code&gt; method, since you &lt;strong&gt;have&lt;/strong&gt; to pass an array as the 2nd argument to it) and then we iterate through all the handlers in the order they were added, setting the scope to what was specified.&lt;/p&gt;
&lt;h2&gt;Programmatically playing with events&lt;/h2&gt;
&lt;p&gt;In addition to &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;trigger&lt;/code&gt; there are two methods which are handy if you&amp;#39;re trying to work with events easily.&lt;/p&gt;
&lt;p&gt;As I mentioned for the &lt;code&gt;bind&lt;/code&gt; method you can pass in an ID for the event handler, well the ID can be used to remove the event:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;eventManager.&lt;/span&gt;unbind(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'my-event'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this will do is iterate through all the registered handlers and if one matches with the ID you&amp;#39;ve provided then it&amp;#39;ll remove it from the handler collection.&lt;/p&gt;
&lt;p&gt;If you want to get rid of all the event handlers you can just omit the handler ID and it&amp;#39;ll clear all the handlers for that event.&lt;/p&gt;
&lt;p&gt;Another useful feature of the &lt;code&gt;eventManager&lt;/code&gt; is that it allows you to check if an event is already registered. If you had a named function that you want to bind to an event you should check to make sure it hasn&amp;#39;t already been registered, eg:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;eventManager.&lt;/span&gt;isRegistered(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'my-event'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will return true or false depending on whether the ID you&amp;#39;re providing matches a handler registered in that event.&lt;/p&gt;
&lt;p&gt;You could use it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; myMethod() { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; }

/* &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; */

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!slace.core.eventManager.isRegistered(&lt;span class=&quot;string&quot;&gt;'some event'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'myMethod'&lt;/span&gt;)) {
    slace.core.eventManager.bind(&lt;span class=&quot;string&quot;&gt;'somme event'&lt;/span&gt;, myMethod);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure it&amp;#39;s a sandboxed example but it should give you an idea.&lt;/p&gt;
&lt;h2&gt;Source Code&lt;/h2&gt;
&lt;p&gt;You can grab the full source code for the &lt;code&gt;eventManager&lt;/code&gt; from the project on bitbucket, which is here: &lt;a href=&quot;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/Scripts/slace.core.eventManager.js&quot;&gt;&lt;a href=&quot;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/Scripts/slace.core.eventManager.js&quot;&gt;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/Scripts/slace.core.eventManager.js&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Core JavaScript library</title>
            <link href="/posts/2010-09-12-slace-core-javascript-library.html"/>
            <updated>2010-09-12T00:00:00.000Z</updated>
            <id>/posts/2010-09-12-slace-core-javascript-library.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This library is really just a core set of features which don&amp;#39;t really belong to any particularly category, and I find a handy for common use in all JavaScript I write.&lt;/p&gt;
&lt;h2&gt;Registering Namespaces&lt;/h2&gt;
&lt;p&gt;Something that I do a lot of in JavaScript is create namespaces. I always like to keep all code in a single namespace in the same manner which I would do with .NET. But there is a problem, JavaScript doesn&amp;#39;t have namespaces!&lt;/p&gt;
&lt;p&gt;I&amp;#39;m sure everyone has written their own code to register namespaces. The code that I use is actually someone I worked with adapted from some code that I&amp;#39;d written as I thought you had to be able to use recursive functions to do it and he was just quicker to getting it written than I was :P.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;The method resides within my core API namespace, &lt;code&gt;slace.core&lt;/code&gt; as a method named &lt;code&gt;registerNamespace&lt;/code&gt;, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;registerNamespace(&lt;span class=&quot;string&quot;&gt;'some.namespace'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new namespace starting at the &lt;code&gt;window&lt;/code&gt; object, but it also has the capabilities to add the namespace from any existing namespace, eg:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;registerNamespace(&lt;span class=&quot;string&quot;&gt;'web'&lt;/span&gt;, slace);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;slace&lt;/code&gt; object will also have &lt;code&gt;web&lt;/code&gt; to go with &lt;code&gt;core&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Understanding Namespaces in JavaScript&lt;/h3&gt;
&lt;p&gt;As I mentioned above JavaScript doesn&amp;#39;t have the concept of namespaces, so how do you create a namespace in a language which doesn&amp;#39;t do namespaces?&lt;/p&gt;
&lt;p&gt;Well namespaces in JavaScript are actually a bit of a trick, and they aren&amp;#39;t namespaces which are familiar to .NET developers, they are actually just a series of empty objects.&lt;/p&gt;
&lt;p&gt;Take this piece of code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;registerNamespace(&lt;span class=&quot;string&quot;&gt;'slace.web.controls'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will produce the following object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;slace&lt;/span&gt; = {
    web = {
        controls = {            
        }
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Well technically the &lt;code&gt;window&lt;/code&gt; object should be before &lt;code&gt;slace&lt;/code&gt; but it&amp;#39;s skipped for brevity, as is the &lt;code&gt;slace.core&lt;/code&gt; object&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So this is really just a set of empty objects!&lt;/p&gt;
&lt;h3&gt;Looking into the code&lt;/h3&gt;
&lt;p&gt;So you can &lt;a href=&quot;http://bitbucket.org/slace/javascript-tools/src/tip/JavaScriptTools/Scripts/slace.core.js&quot;&gt;find the code here&lt;/a&gt;, and let&amp;#39;s have a look at what it does. The crux of it is a recursive function which the namespace is passed into:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slace.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;core.&lt;/span&gt;registerNamespace = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(namespace, global)&lt;/span&gt; {&lt;/span&gt;
    var go;
    go = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(object, properties)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;transposed_variable&quot;&gt;properties.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;cell&quot;&gt;{
            var propertyToDefine = properties.shift();

            if (typeof object[propertyToDefine] === &lt;span class=&quot;string&quot;&gt;'undefined'&lt;/span&gt;) {
                object[propertyToDefine] = {}&lt;/span&gt;;
            }

            go(object&lt;span class=&quot;matrix&quot;&gt;[propertyToDefine]&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;properties&lt;/span&gt;);
        }
    };
    go(&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; || (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; { &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;this&lt;/span&gt;; })&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;namespace&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('.')&lt;/span&gt;);&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this function the argument &lt;code&gt;object&lt;/code&gt; is what we&amp;#39;re putting the namespace onto, with &lt;code&gt;properties&lt;/code&gt; is an array of the namespace to define (having been split on the .).&lt;/p&gt;
&lt;p&gt;The last line initiates the function and either passes in the object you want to augment, or the object which is scoped as &lt;code&gt;this&lt;/code&gt; for the method (which will be &lt;code&gt;window&lt;/code&gt; unless you&amp;#39;re really going to get nasty with JavaScript, but that&amp;#39;s a topic for another time :P).&lt;/p&gt;
&lt;h3&gt;Fun fact&lt;/h3&gt;
&lt;p&gt;This code can actually be reduced by a few lines by making it a self-executing named function (or a &lt;a href=&quot;/recursive-anonymous-functions&quot;&gt;self-executing anonymous function&lt;/a&gt; if you want ;)), but due to limitations in the Visual Studio 2010 JavaScript intellisense engine it doesn&amp;#39;t work recursively it seems. Odd bug, but easy to get around (and it makes your code a bit more readable!).&lt;/p&gt;
&lt;h2&gt;Base Extensions&lt;/h2&gt;
&lt;p&gt;The library also includes some handy extensions for detecting if a method already registered on an object, in the form of &lt;code&gt;Function.method&lt;/code&gt; (which is from Douglas Crockford&amp;#39;s article on &lt;a href=&quot;http://www.crockford.com/javascript/inheritance.html&quot;&gt;JavaScript Inheritance&lt;/a&gt;), and the &lt;code&gt;Array.prototype&lt;/code&gt; is also augmented to have &lt;code&gt;Array.contains&lt;/code&gt;, &lt;code&gt;Array.remove&lt;/code&gt; and &lt;code&gt;Array.indexOf&lt;/code&gt; (unless it&amp;#39;s already there).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why no IQueryable in LINQ to Umbraco?</title>
            <link href="/posts/2010-09-06-iqueryable-linq-to-umbraco.html"/>
            <updated>2010-09-06T00:00:00.000Z</updated>
            <id>/posts/2010-09-06-iqueryable-linq-to-umbraco.html</id>
            <content type="html">&lt;p&gt;In the theme of blogs answering questions which aren&amp;#39;t being asked I though I would have a bit of a look at why LINQ to Umbraco isn&amp;#39;t an IQueryable-based LINQ implementation. &lt;/p&gt;
&lt;p&gt;With a previous article I covered &lt;a href=&quot;/understanding-linq-to-umbraco&quot;&gt;Understanding LINQ to Umbraco&lt;/a&gt;, but the topic of IQueryable wasn&amp;#39;t in it, partially because it&amp;#39;s an involved topic.&lt;/p&gt;
&lt;p&gt;So let&amp;#39;s have a look at why LINQ to Umbraco isn&amp;#39;t using IQueryable.&lt;/p&gt;
&lt;h2&gt;Understanding IQueryable&lt;/h2&gt;
&lt;p&gt;To understand why we&amp;#39;re not using IQueryable we need to have a bit of an understanding of IQueryable. IQueryable is a super-set of IEnumerable, allowing you to inspect what query is being and transform it into your underlying query language.&lt;/p&gt;
&lt;p&gt;This is why it is good for something like LINQ to SQL or Entity Framework. You can take the strongly typed version of the query (expression tree), generated in C# or VB.Net, and then pull it apart and turn it into SQL.&lt;/p&gt;
&lt;p&gt;So this is quite a handy feature if you have an underlying query language which you want to work against.&lt;/p&gt;
&lt;p&gt;But this can also cause some problems, if you&amp;#39;re not careful, one of the biggest hurdles is performance.&lt;/p&gt;
&lt;p&gt;Since IQueryable requires transforming your expression tree into the &amp;quot;real&amp;quot; language, executing it and then turning the resulting dataset back into the .Net types required you can loose a bit in performance. You can&amp;#39;t not have performance drawbacks from this.&lt;/p&gt;
&lt;h2&gt;The decision in Umbraco&lt;/h2&gt;
&lt;p&gt;So while building LINQ to Umbraco we did analysis of what the most common use for it would be, and that would be as an alternative to the NodeFactory API. This meant working with the XML cache, and the question is would there be a benefit to IQueryable. Ultimately it turned out that the answer to that is no. With .NET 3.5 it was apparent that the LINQ to XML API was the way which Microsoft was going to go with for working with XML, but that had an inherit problem. LINQ to XML is actually an implementation of IEnumerable, &lt;em&gt;not&lt;/em&gt; IQueryable. This means that implementing IQueryable in LINQ to Umbraco would be having to translate the IQueryable queries into IEnumerable queries.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t &lt;em&gt;that&lt;/em&gt; hard a task (it just requires compiling the expression tree), but you&amp;#39;d be loosing quite a bit of performance. It was a lot quicker to work with in-memory collections, rather than trying to &amp;quot;lazy load&amp;quot; the XML into LINQ to Umbraco objects.&lt;/p&gt;
&lt;p&gt;It is true though that this can have memory issues, and still have performance problems especially if you&amp;#39;re working a really large website. But analysis shows that the majority of sites are of a size that the performance loss of IQueryable would be less than the in-memory implementation.&lt;/p&gt;
&lt;h2&gt;The other problem...&lt;/h2&gt;
&lt;p&gt;There&amp;#39;s one other problem with using IQueryable, it&amp;#39;s a &lt;strong&gt;huge&lt;/strong&gt; thing to implement. We wanted LINQ to Umbraco to be fully featured, but to achieve that you have to think about what expression tree branches are going to be covered. Take this query for example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pages = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; page &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ctx.TextPages
            &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; page.BodyText.Contains(&lt;span class=&quot;string&quot;&gt;&quot;Umbraco&quot;&lt;/span&gt;)
            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; page;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So to implement this you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look at the type you require&lt;/li&gt;
&lt;li&gt;Find the &lt;code&gt;BodyText&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Look at the method invocation to &lt;code&gt;string.Contains&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the argument being passed to &lt;code&gt;string.Contains&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the items back into LINQ to Umbraco types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;#39;s just a basic query, imagine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Join statements&lt;/li&gt;
&lt;li&gt;GroupBy&lt;/li&gt;
&lt;li&gt;Ordering&lt;/li&gt;
&lt;li&gt;Multi-conditional Where clauses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s a lot of things which can be done with LINQ, and that&amp;#39;s not to mention handling CLR methods, simple arithmetic operators, etc. Writing a fully-fledged IQueryable provider is a big task!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So this was just a bit of a look as to why we didn&amp;#39;t go the route of IQueryable for LINQ to Umbraco.&lt;/p&gt;
&lt;p&gt;But if you&amp;#39;re really keep, you can implement IQueryable yourself when you&amp;#39;re writing your own custom LINQ provider, who knows, I might even look at that at some point ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Using HttpCompression libraries and ASP.NET MVC FileResult</title>
            <link href="/posts/2010-08-30-http-compression-mvc-fileresult.html"/>
            <updated>2010-08-30T00:00:00.000Z</updated>
            <id>/posts/2010-08-30-http-compression-mvc-fileresult.html</id>
            <content type="html">&lt;p&gt;While working on some improvements around the way the styles are handled on my blog (and so they don&amp;#39;t get trashed whenever I update the code with that of the main repository) I decided that I would use &lt;a href=&quot;http://clientdependency.codeplex.com&quot;&gt;ClientDependency&lt;/a&gt; to handle this.&lt;/p&gt;
&lt;p&gt;It was quite easy, I added ClientDependency in, re-configured the Views to use it and refactored the CSS so that it was possible to have my CSS along side the other CSS.&lt;/p&gt;
&lt;p&gt;All was well and good until I noticed a problem, all the images on my blog were no longer working, they were coming up as broken images. That&amp;#39;s not good, I kind of need them... So I did a bit more investigation, all the download links were also broken. Ok, that&amp;#39;s &lt;em&gt;really&lt;/em&gt; not good...&lt;/p&gt;
&lt;p&gt;I rolled back source control and it seemed that everything was working just fine before I added ClientDependency, but ClientDependency shouldn&amp;#39;t have any effect on downloads... Should it?&lt;/p&gt;
&lt;p&gt;So I did some digging, I was doing everything that should have been done to return a file, hell, it was even more basic than you&amp;#39;d expect:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; virtual ActionResult Render(string path)
{
    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (_fileRepository.IsFile(path))
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; fullPath = _fileRepository.MapPath(path);
        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; File(fullPath, _mimeHelper.GetMimeType(fullPath));
    }
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; Redirect(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks fine right... right?! &lt;em&gt;Yes, that is fine :P&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Hunting for bugs&lt;/h2&gt;
&lt;p&gt;Well it was time to start finding the problem, and I had a feeling this was going to be a doosy. I started by disabling ClientDependency and then the images did start working (although my CSS fell apart...), so I was 100% convinced that the problem was with it, but what could it be, I&amp;#39;m working with binary files here, not CSS.&lt;/p&gt;
&lt;p&gt;So I crack out my debugger and start stepping through the ClientDependency source and what I first notice is that I don&amp;#39;t know anywhere near as much about it as I would have like to! Eventually I find something a little bit off. Because ClientDependency runs as a HttpModule it fires for the request of the image, well that&amp;#39;s my first red-flag. And I start worrying, if it&amp;#39;s having the image through its pipeline maybe it&amp;#39;s doing something it shouldn&amp;#39;t be.&lt;/p&gt;
&lt;p&gt;The next thing I start looking for is a check of the content type, hoping that it&amp;#39;s ignoring the image request... but no joy.&lt;/p&gt;
&lt;p&gt;In fact, that&amp;#39;s exactly the problem! The way ClientDependency works is that it adds a filter to the HttpRequest which processes the contents of the page and then in-turn transforms it in the manner of which we require. The problem is, it didn&amp;#39;t ignore the image content type, in fact it turned it into a string, processed it and returned the original string, but now it was no longer a binary object.&lt;/p&gt;
&lt;p&gt;Cock...&lt;/p&gt;
&lt;h2&gt;He&amp;#39;ll be making a ContentType and checking it twice&lt;/h2&gt;
&lt;p&gt;So this is a very obvious problem, we&amp;#39;re not ignoring the images, we&amp;#39;re treating their request as though it is any text/plain request, so I put in a conditional check to ignore the image requests, drop it into my blog and hit refresh. But still no joy... I check again that I did put the line of code in, attach the debugger and spin it off.&lt;/p&gt;
&lt;p&gt;To my surprise though the content type property of my response is not &lt;code&gt;image/png&lt;/code&gt; as I expected it expected it to be, but instead it&amp;#39;s &lt;code&gt;text/plain&lt;/code&gt;. Err, WTF? I spin up Charles and check, nope, Charles is saying that it&amp;#39;s &lt;code&gt;image/png&lt;/code&gt; in the browser. I spin up PowerShell and write a simple web request script, again it&amp;#39;s telling my &lt;code&gt;image/png&lt;/code&gt;. Well why the hell is the HttpModule telling me otherwise?&lt;/p&gt;
&lt;h3&gt;An event by any other name...&lt;/h3&gt;
&lt;p&gt;So I start doing some research and realise that we&amp;#39;re using the event &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.httpapplication.prerequesthandlerexecute.aspx&quot;&gt;HttpApplication.PreRequestHandlerExecute&lt;/a&gt; to do the transform, but fun fact is that this is too early in the request life cycle. At this point the Request object is populated, but it&amp;#39;s not been handled, so the object doesn&amp;#39;t have the appropriate ContentType set.&lt;/p&gt;
&lt;p&gt;After a bit more research I fine a better event to suite my needs, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.httpapplication.PostRequestHandlerExecute.aspx&quot;&gt;HttpApplication.PostRequestHandlerExecute&lt;/a&gt;, and this is the one recommended when doing filters against the HttpResponse.&lt;/p&gt;
&lt;p&gt;Now my ContentType property is set up and I can do checking against it, and the fix now works nicely (there currently isn&amp;#39;t a ClientDependency release available with this fix yet, so if you need it you&amp;#39;ll have to grab it from the source).&lt;/p&gt;
&lt;h2&gt;A word of caution&lt;/h2&gt;
&lt;p&gt;The reason I&amp;#39;ve made this post is to bring this oversight to peoples attention. While doing the research to fix this problem I looked at a few different libraries which add custom filters (either to remove whitespace, or to gzip responses, etc) and I didn&amp;#39;t find any of them &lt;em&gt;doing content type checking of the response&lt;/em&gt;. Generally speaking you shouldn&amp;#39;t need to do this, and in the past it&amp;#39;s not really been needed as it wasn&amp;#39;t as common place to have ASP.NET web applications actually return a file. But with the advent of MVC and the easy in which you can use &lt;code&gt;FileResult&lt;/code&gt; it&amp;#39;s something to watch out for.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s nothing wrong with using HttpModule&amp;#39;s to compress your response, clean up your HTML or run what ever other filter you may desire, but make sure you&amp;#39;re using one that understands that not everything running through the ASP.NET life cycle can be handled as a string ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>A LINQ observation</title>
            <link href="/posts/2010-08-28-a-linq-observation.html"/>
            <updated>2010-08-28T00:00:00.000Z</updated>
            <id>/posts/2010-08-28-a-linq-observation.html</id>
            <content type="html">&lt;p&gt;Well I&amp;#39;m making good headway with LINQ to Umbraco, in the next few days I&amp;#39;ll be doing a very interesting check in (which I&amp;#39;ll also blog here about). My tweet-peeps already have an idea of what it entails, but there&amp;#39;s a bit of a problem with it still which I want to address before the commit.&lt;/p&gt;
&lt;p&gt;And that problem has lead to an observation I made about LINQ, well, about Expression-based LINQ (ie - something implementing IQueryable, so LINQ to SQL, or LINQ to Umbraco, etc).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll use LINQ to SQL for the examples as it&amp;#39;s more accessible to everyone.&lt;/p&gt;
&lt;p&gt;Take this LINQ statement (where ctx is an instance of my DataContext):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items = ctx&lt;span class=&quot;preprocessor&quot;&gt;.Items&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That statement returns an object of &lt;code&gt;Table&amp;lt;Item&amp;gt;&lt;/code&gt;, which implements &lt;code&gt;IQueryable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; (and a bunch of others that are not important for this instructional). So it&amp;#39;s not executed yet, no DB query has occurred, etc. Now lets take this LINQ statement:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items2 = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ctx.Items &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; item;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time I get a result of &lt;code&gt;IQueryable&amp;lt;Item&amp;gt;&lt;/code&gt;, which implements &lt;code&gt;IQueryable&amp;lt;T&amp;gt;&lt;/code&gt; (duh!) and &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; (and again, a bunch of others).&lt;/p&gt;
&lt;p&gt;Both of these results have a non-public property called Expression. This reperesents the expression tree which is being used to produce our collection. But here&amp;#39;s the interesting part, they are not the same. That&amp;#39;s right, although you&amp;#39;re getting back basically the same result, the expression used to produce that result is really quite different.&lt;/p&gt;
&lt;p&gt;This is due to the way the compiler translates the query syntax of LINQ into a lambda syntax. In reality the 2nd example is equal to this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items2 = ctx&lt;span class=&quot;preprocessor&quot;&gt;.Items&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(item =&amp;gt; item)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But is this really a problem, what difference does it make? In the original examples you actually get back the same data every time. You&amp;#39;ll have slightly less overhead by using the access of &lt;code&gt;Table&amp;lt;T&amp;gt;&lt;/code&gt; rather than &lt;code&gt;IQueryable&amp;lt;T&amp;gt;&lt;/code&gt;, due to the fact that you&amp;#39;re not doing a redundant call to Select. But in reality you would not notice the call.&lt;/p&gt;
&lt;p&gt;This has caused a problem for me as my direct-access lambda syntax fails my current unit test, where as the query syntax passes. Now to solve that problem! ;)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Not getting DropDownList value when setting it via JavaScript</title>
            <link href="/posts/2010-08-28-no-value-when-settings-dropdown-with-javascript.html"/>
            <updated>2010-08-28T00:00:00.000Z</updated>
            <id>/posts/2010-08-28-no-value-when-settings-dropdown-with-javascript.html</id>
            <content type="html">&lt;p&gt;So today I had a problem which was doing my head in. I had a form which has a bunch of DropDownLists on it, some of which are disabled (depending on the radio button selection). Regardless of whether the DropDownList was available I needed to read the value (which was often set via JavaScript) back on the server.&lt;/p&gt;
&lt;p&gt;But I noticed that the value I was setting via JavaScript wasn&amp;#39;t making it way back to the server if I read the dropDownList.SelectedValue property.
Hmm I said to myself, I looked at the form, it&amp;#39;s setting the value right. The &amp;quot;selected&amp;quot; attribute was on the right option tag, but the value still isn&amp;#39;t on the server.&lt;/p&gt;
&lt;p&gt;If I had set the value by clicking on it and selecting a value it was making it back.&lt;/p&gt;
&lt;p&gt;Hmm...&lt;/p&gt;
&lt;p&gt;Then I realised, the difference between the two actions was the DropDownList wasn&amp;#39;t enabled in one of them, and when it wasn&amp;#39;t it was enabled the value wasn&amp;#39;t making it back.&lt;/p&gt;
&lt;p&gt;Shit, that&amp;#39;s it! When a DropDownList isn&amp;#39;t enabled .NET seems to disregard the submitted value when loading the ViewState!&lt;/p&gt;
&lt;p&gt;But the solution is simple:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;document).ready(function() {
  &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'#submitButton'&lt;/span&gt;).click(function() {
    &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'select'&lt;/span&gt;).removeAttr(&lt;span class=&quot;string&quot;&gt;'disabled'&lt;/span&gt;);
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jQuery makes it super easy to find all the drop down lists and then make them enabled before the form submits.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s another example of how to do it if you&amp;#39;re using client-side validation and you want to make sure it&amp;#39;s passed:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;document).ready(function() {
  &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'#submitButton'&lt;/span&gt;).click(function() {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;constant&quot;&gt;Page_IsValid&lt;/span&gt; ) &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;'select'&lt;/span&gt;).removeAttr(&lt;span class=&quot;string&quot;&gt;'disabled'&lt;/span&gt;);
  });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Page_IsValid&lt;/code&gt; is the client variable updated with the result of the client side validation.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>SharePoint feature corrupts page layout</title>
            <link href="/posts/2010-08-28-sharepoint-feature-corrupts-page-layout.html"/>
            <updated>2010-08-28T00:00:00.000Z</updated>
            <id>/posts/2010-08-28-sharepoint-feature-corrupts-page-layout.html</id>
            <content type="html">&lt;p&gt;Something that I&amp;#39;ve come across a few times when working on SharePoint/ MOSS 2007 features. When importing a Page Layout the ASPX some times becomes corrupt. You end up with additional HTML inserts once it&amp;#39;s been imported into SharePoint.&lt;/p&gt;
&lt;p&gt;The corruption is in the form of HTML tags, outside the last &amp;lt;/asp:Content&amp;gt; tag.&lt;/p&gt;
&lt;p&gt;Well it turns out that the problem is caused when you import an ASPX that has a &amp;lt;/asp:content&amp;gt; tag it&amp;#39;ll happen.
Did you notice the problem?&lt;/p&gt;
&lt;p&gt;That&amp;#39;s right, if you have a lowercase c then it&amp;#39;ll import corrupt. Let me show the problem again, highlighted this time:
&amp;lt;/asp:&lt;strong&gt;c&lt;/strong&gt;ontent&amp;gt;&lt;/p&gt;
&lt;p&gt;All you need to do is ensure that that has a capital letter, so the tag is &amp;lt;/asp:Content&amp;gt; and it&amp;#39;s all good again.&lt;/p&gt;
&lt;p&gt;The most common cause of this happening is doing a format-document within Visual Studio on the ASPX when it is in the features class-library project. Visual Studio doesn&amp;#39;t handle the ASPX file correctly, and formats it as a raw XHTML file, which dictates that the XHTML tags need to be in all lowercase.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Testable email sending</title>
            <link href="/posts/2010-08-28-testable-email-sending.html"/>
            <updated>2010-08-28T00:00:00.000Z</updated>
            <id>/posts/2010-08-28-testable-email-sending.html</id>
            <content type="html">&lt;p&gt;Yesterday &lt;a href=&quot;http://twitter.com/shazwazza&quot;&gt;Shannon&lt;/a&gt; finally got with the times and learnt about the &lt;code&gt;System.Net&lt;/code&gt; and how it can be used to &lt;a href=&quot;http://farmcode.org/post/2009/07/16/Testing-Outgoing-SMTP-Emails-So-Simple!.aspx&quot;&gt;dump emails to your file system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something I then mentioned to him on Twitter was that you can also use this method to test the email that was sent.&lt;/p&gt;
&lt;p&gt;First off lets write ourselves a very basic email sending test:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public void EmailSender() {
    var mail = new MailMessage()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.To&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;example@somewhere.com&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.From&lt;/span&gt; = new MailAddress(&lt;span class=&quot;string&quot;&gt;&quot;example2@somewhere.com&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.Subject&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Testing Email&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.Body&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Sending Email. Woo!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var smtp = new SmtpClient()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    smtp&lt;span class=&quot;preprocessor&quot;&gt;.Send&lt;/span&gt;(mail)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we&amp;#39;re assuming that we&amp;#39;ve set our config up so that we&amp;#39;re dumping the email to the file system. This is all well and good but how do we assert that the email was sent to the right person, and that the body/ subject was what we wanted? Well that can easily be done, if you know the structure of the .eml file which is generated when dumping the mail to the file system.&lt;/p&gt;
&lt;p&gt;I wrote a handy little class which can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; sealed &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; EmlHelper
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Path { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; From { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;To&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Subject { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; Urls { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; EmlHelper(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; path)
    {
        Path = path;
        &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; fc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StreamReader(path).ReadToEnd();
        From = Regex.Matches(fc, &lt;span class=&quot;string&quot;&gt;&quot;From: (.+)&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].ToString().&lt;span class=&quot;built_in&quot;&gt;Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;From: &quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;Empty&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;Trim&lt;/span&gt;();
        &lt;span class=&quot;keyword&quot;&gt;To&lt;/span&gt; = Regex.Matches(fc, &lt;span class=&quot;string&quot;&gt;&quot;To: (.+)&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].ToString().&lt;span class=&quot;built_in&quot;&gt;Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;To: &quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;Empty&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;Trim&lt;/span&gt;();
        Subject = Regex.Matches(fc, &lt;span class=&quot;string&quot;&gt;&quot;Subject: (.+)&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].ToString().&lt;span class=&quot;built_in&quot;&gt;Replace&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Subject: &quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;Empty&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;Trim&lt;/span&gt;();
        Urls = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;Empty&lt;/span&gt;;
        foreach (Match m &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Regex.Matches(fc, @&lt;span class=&quot;string&quot;&gt;&quot;https?://([a-zA-Z\.]+)/&quot;&lt;/span&gt;))
        {
            Urls += m.ToString() + &lt;span class=&quot;comment&quot;&gt;' ';&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s a fairly basic class which you just need to understand the structure of the eml file, I used some regexes to break it apart. They may be a bit brittle (my regex skills aren&amp;#39;t crash hot) and I don&amp;#39;t support reading the body (as you really need to customise that for plain text vs HTML, and yeah, good luck there :P).&lt;/p&gt;
&lt;p&gt;Now all that we need to do is pass in the file name of the email which was generated. &lt;/p&gt;
&lt;p&gt;The problem is that there isn&amp;#39;t really a good way to determine the email (someone know a way?), so you can just use LINQ to locate the file ordered by created date or something, but for this example I&amp;#39;m going to assume that there aren&amp;#39;t any other files in there anyway. So lets update our test method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public void EmailSender() {
    var mail = new MailMessage()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.To&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;example@somewhere.com&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.From&lt;/span&gt; = new MailAddress(&lt;span class=&quot;string&quot;&gt;&quot;example2@somewhere.com&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.Subject&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Testing Email&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    mail&lt;span class=&quot;preprocessor&quot;&gt;.Body&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Sending Email. Woo!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var smtp = new SmtpClient()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    smtp&lt;span class=&quot;preprocessor&quot;&gt;.Send&lt;/span&gt;(mail)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var emailSettings = (MailSettingsSectionGroup)ConfigurationManager
                 &lt;span class=&quot;preprocessor&quot;&gt;.OpenExecConfiguration&lt;/span&gt;(ConfigurationUserLevel&lt;span class=&quot;preprocessor&quot;&gt;.Now&lt;/span&gt;)
                 &lt;span class=&quot;preprocessor&quot;&gt;.GetSectionGroup&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;system.net/mailSettings&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var folder = emailSettings&lt;span class=&quot;preprocessor&quot;&gt;.MailSettings&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Smtp&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.SpecifiedPickupDirectory&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.PickupDirectoryLocation&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var eml = new EmlHelper(new DirectoryInfo(folder)&lt;span class=&quot;preprocessor&quot;&gt;.GetFiles&lt;/span&gt;()&lt;span class=&quot;preprocessor&quot;&gt;.First&lt;/span&gt;()&lt;span class=&quot;preprocessor&quot;&gt;.FullName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Assert
    Assert&lt;span class=&quot;preprocessor&quot;&gt;.AreEqual&lt;/span&gt;(mail&lt;span class=&quot;preprocessor&quot;&gt;.ToAddresses&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;preprocessor&quot;&gt;.Address&lt;/span&gt;, eml&lt;span class=&quot;preprocessor&quot;&gt;.To&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    Assert&lt;span class=&quot;preprocessor&quot;&gt;.AreEqual&lt;/span&gt;(mail&lt;span class=&quot;preprocessor&quot;&gt;.Subject&lt;/span&gt;, eml&lt;span class=&quot;preprocessor&quot;&gt;.Subject&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    //&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; so on
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So there you have it, it&amp;#39;s very basic to use and make testable email sending.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating a RssDataProvider for LINQ to Umbraco</title>
            <link href="/posts/2010-08-27-rssdataprovider-for-linq-to-umbraco.html"/>
            <updated>2010-08-27T00:00:00.000Z</updated>
            <id>/posts/2010-08-27-rssdataprovider-for-linq-to-umbraco.html</id>
            <content type="html">&lt;p&gt;Sorry to all the people who were kind enough to come to my &lt;a href=&quot;http://our.umbraco.org/wiki/codegarden-2009/open-space-minutes/linq&quot;&gt;LINQ to Umbraco session at CodeGarden 09&lt;/a&gt;, I said I would do this post soon after the session. Sadly I started enjoying Copenhagen too much without the need to be sitting at my laptop and now it&amp;#39;s a week later, I&amp;#39;m home and it&amp;#39;s time I come good on my promise.&lt;/p&gt;
&lt;h2&gt;The LINQ to Umbraco DataProvider model&lt;/h2&gt;
&lt;p&gt;Something that I have implemented with LINQ to Umbraco, and something which will be taking a stronger focus in Umbraco going forward, is a Provider model for the Umbraco data.
What this means with LINQ to Umbraco? Well the classes generated for LINQ to Umbraco act as proxies to a data model, they don&amp;#39;t expect the data to come from anyway in particular.&lt;/p&gt;
&lt;p&gt;This has a really neat advantage of the fact that you can write your own DataProvider which exposes the data from how ever you want. LINQ to Umbraco will ship as part of 4.1 with a single DataProvider, the NodeDataProvider. This enables the use of LINQ to Umbraco against the XML cache, which was the inital design of it.&lt;/p&gt;
&lt;h2&gt;Anatomy from a DataProvider&lt;/h2&gt;
&lt;p&gt;The DataProvider itself is an abstract class which has a number of methods which are implemented do different operations, the primary method you need to be implementing is the LoadTree&lt;TDocType&gt; method, this is responsible for the initial population of the collection from your data source.&lt;/p&gt;
&lt;p&gt;There are other methods which have different uses, I wont be covering them in this post, but they will be going up on the new Umbraco wiki (which the LINQ to Umbraco section is starting to come up).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LoadTree&amp;lt;TDocType&amp;gt;&lt;/code&gt; method needs to then return an instance of a &lt;code&gt;Tree&amp;lt;TDocType&amp;gt;&lt;/code&gt;, which is another abstract class that needs to be implemented to handle the data mapping for your data provider.&lt;/p&gt;
&lt;h2&gt;Creating an RssDataProvider&lt;/h2&gt;
&lt;p&gt;While we were hacking at the Umbraco Retreat prior to CodeGarden 09 I decided to try a proof-of-concept about how you could use the generated classes in a proxy manner. I may have written LINQ to Umbraco for this purpose, but it wasn&amp;#39;t something that I had actually tried to do.
So I decided to create a basic little DataProvider which would read an RSS feed and turn the returned data from there into LINQ to Umbraco objects which could then be used in the Umbraco content tree.&lt;/p&gt;
&lt;p&gt;The first step is you need to generate the LINQ to Umbraco classes, with Umbraco 4.1 you will be able to do this directly from the Settings -&amp;gt; Document Types node. I created a basic little Document Type named RSS Item and then generated the class for it.&lt;/p&gt;
&lt;p&gt;Next came the task of implementing my custom UmbracoDataProvider, I created my class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RssDataProvider&lt;/span&gt; :&lt;/span&gt; UmbracoDataProvider { }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then set about implementing a constructor which takes the RSS feed URL (in this demo I used the Yahoo! Pipes which are on the homepage of our.umbraco) and then implemented the LoadTree&lt;TDocType&gt; method:&lt;/p&gt;
&lt;p&gt;public override Tree LoadTree() 
{
    //supporting loading a full Tree
    //throw an exception if the type of the tree is an unsupported one
    if (typeof(TDocType) != typeof(RssItem))
    {
        throw new NotSupportedException(typeof(TDocType).Name);
    }&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//create a request to the URL supplied&lt;/span&gt;
WebRequest request = WebRequest&lt;span class=&quot;variable&quot;&gt;.Create&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;._feedUrl&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;//do a GET and string buffer the response&lt;/span&gt;
HttpWebResponse response = (HttpWebResponse)request&lt;span class=&quot;variable&quot;&gt;.GetResponse&lt;/span&gt;();
Stream dataStream = response&lt;span class=&quot;variable&quot;&gt;.GetResponseStream&lt;/span&gt;();
StreamReader reader = new StreamReader(dataStream);
string responseFromServer = reader&lt;span class=&quot;variable&quot;&gt;.ReadToEnd&lt;/span&gt;();

&lt;span class=&quot;comment&quot;&gt;//make a LINQ to XML representation of the RSS&lt;/span&gt;
XDocument xdoc = XDocument&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(responseFromServer);

&lt;span class=&quot;comment&quot;&gt;//select the posts&lt;/span&gt;
var items = xdoc&lt;span class=&quot;variable&quot;&gt;.Descendants&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;//make an RssTree from the items returned by the feed&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new RssTree(items, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
So now I have a load method which reads my RSS feed (and I&amp;#39;ve restricted it to only support my RssItem Document Type), now it&amp;#39;s time to create the RssTree&lt;TDocType&gt; from the provided data.&lt;/p&gt;
&lt;h2&gt;Tree&amp;lt;TDocType&amp;gt;&lt;/h2&gt;
&lt;p&gt;This class is really just a wrapper for the IEnumerable&lt;T&gt; class. The way in which I have implemented the RssTree (and how I implemented the NodeTree) is by using delayed loading. What I mean is that the data isn&amp;#39;t converted from the source to the result until the GetEnumerator() method is called.
This means that unless I do something with the collection there is no performance hit.&lt;/p&gt;
&lt;p&gt;The following code is a bit of a hack (for the return type anyway) but that is because I wanted to show it being done without the use of reflection. If you want to see how to achieve it with a complete generic type check out the source for the NodeTree which is on Codeplex.&lt;/p&gt;
&lt;p&gt;Anyway here&amp;#39;s how the GetEnumerator() method looks:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;public override IEnumerator GetEnumerator()
{
    //this &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a bit hacky &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; i only support &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; doc type
    //normally &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; load can be done via reflection (which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; how &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; NodeTree works)
    foreach (var &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _items)
    {
        var rssItem = new TDocType() &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; RssItem;
        rssItem.Name = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;);
        rssItem.Link = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
        rssItem.Description = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;);
        rssItem.PublishDate = (DateTime)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;pubDate&quot;&lt;/span&gt;);
        rssItem.Content = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;);
        rssItem.CreateDate = (DateTime)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;pubDate&quot;&lt;/span&gt;);

        //Because RssItem may &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; be &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; type &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; TDocType (although &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; this example we'll assume &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; always &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;)
        //we have &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; downcast &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; DocTypeBase &lt;span class=&quot;keyword&quot;&gt;before&lt;/span&gt; casting &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; generic.
        yield &lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt; (TDocType)(DocTypeBase)rssItem;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what&amp;#39;s going on, well first off we&amp;#39;re itterating through the collection of XML items returned from the initial load (_items) and then creating a new instance of the RssItem class and assigning the properties from the XML.
You can see the comment mentioning the hack, having to do some crazy casting, that is because I&amp;#39;m not really doing the Generics properly.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also implemented it via yield return, not building the entire collection into say a List&lt;T&gt; and then returning its Enumerator. The reason for this is you&amp;#39;ll pick up a bit of performance if you are doing methods like Take(int) or breaking from a loop early.
You should probably push the items into an internal collection to support caching (which is what the Node implementation does), but this is just a quick demo.&lt;/p&gt;
&lt;p&gt;Any that is as simple as it gets to write your own custom DataProvider for LINQ to Umbraco! Sure I&amp;#39;ve skipped a few sections (such as how to do child associations, but in this demo it&amp;#39;s not really viable) but hopefully this should give you a heads up on how to do it.
And how does it work? Well just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var ctx = new &lt;span class=&quot;variable&quot;&gt;RssDataContext&lt;/span&gt;(new &lt;span class=&quot;variable&quot;&gt;RssDataProvider&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http://pipes.yahoo.com/pipes/pipe.run?_id=8llM7pvk3RGFfPy4pgt1Yg&amp;amp;_render=rss&quot;&lt;/span&gt;)&lt;/span&gt;))
{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;feedItems&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;ctx&lt;/span&gt;.R&lt;span class=&quot;title&quot;&gt;ssItems&lt;/span&gt;.T&lt;span class=&quot;title&quot;&gt;ake&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;;

    A&lt;span class=&quot;title&quot;&gt;ssert&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;sNotNull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(feed&lt;span class=&quot;variable&quot;&gt;Items&lt;/span&gt;)&lt;/span&gt;;
    A&lt;span class=&quot;title&quot;&gt;ssert&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;sTrue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(feed&lt;span class=&quot;variable&quot;&gt;Items&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;GetEnumerator&lt;/span&gt;()&lt;/span&gt; != &lt;span class=&quot;title&quot;&gt;null&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s right, the above code is from a unit test, remember LINQ to Umbraco is capable of running outside of a web context so it is very easy to unit test!&lt;/p&gt;
&lt;h2&gt;Making this into an Umbraco Content Tree&lt;/h2&gt;
&lt;p&gt;Now here is where the fun part comes in, you can easily turn the above data provider into a custom Umbraco tree. This means you can either make it into your own custom Umbraco module (/ application, what ever you call it!), or append it to the standard Content Tree! Isn&amp;#39;t THAT a funky idea hey!&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not going to get too in-depth into this, Shannon Deminik has done some good documentation about that (again, see the &lt;a href=&quot;http://our.umbraco.org/wiki/reference/api-cheatsheet/tree-api---to-create-custom-treesapplications&quot;&gt;wiki&lt;/a&gt;). So rather than going over the code I&amp;#39;m going to show it off in a short screencast and you can look into the provided source package with this post.&lt;/p&gt;
&lt;p&gt;The screenscast is available &lt;a href=&quot;http://screencast.com/t/NS24jMo6xkp&quot;&gt;here&lt;/a&gt; and the source code is &lt;a href=&quot;/media/2640/umbracodataproviderdemo.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Understanding LINQ to Umbraco</title>
            <link href="/posts/2010-08-27-understanding-linq-to-umbraco.html"/>
            <updated>2010-08-27T00:00:00.000Z</updated>
            <id>/posts/2010-08-27-understanding-linq-to-umbraco.html</id>
            <content type="html">&lt;p&gt;When LINQ to Umbraco dropped with Umbraco 4.5.0 there was a lot of excitement around it and everyone started using it. Personally I was thrilled about this, LINQ to Umbraco was the culmination of 6 months of really solid development effort and I was glad to see that it was paying off.&lt;/p&gt;
&lt;p&gt;But like all new technologies there can be miss-conceptions about what it is and what it isn&amp;#39;t and hopefully I&amp;#39;ll shed a bit of light on what the goal of LINQ to Umbraco is, what it is and what it isn&amp;#39;t.&lt;/p&gt;
&lt;h2&gt;Project Goals&lt;/h2&gt;
&lt;p&gt;When I set about writing LINQ to Umbraco it was because I was frustrated at the lack of type safety coming from the NodeFactory API. This combined with the proliferation of magic strings to represent the properties made me think that there had to be a better way to go about it. Initial I achieved this with a project I dubbed the &lt;strong&gt;Umbraco Interaction Layer&lt;/strong&gt; which was basically a wrapper for the Document API as I was doing a lot of creating and editing of nodes at the time using the API and I wanted it strongly typed.&lt;/p&gt;
&lt;p&gt;Once I did the initial version of that I realised that people were wanting to do &lt;em&gt;reads&lt;/em&gt; with it too, but this was &lt;strong&gt;not&lt;/strong&gt; what the UIL was designed for, in fact reading was a REALLY bad idea with it as it relied on the Document API and did a hell of a lot of database calls.&lt;/p&gt;
&lt;p&gt;So I set about doing a new version, a &lt;em&gt;real&lt;/em&gt; version of LINQ to Umbraco, and something that looked a lot like LINQ to SQL.&lt;/p&gt;
&lt;p&gt;While doing the initial design for LINQ to Umbraco I decided on a few core ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No reliance on any underlying API&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Testability&lt;/li&gt;
&lt;li&gt;Close resemblance LINQ to SQL (which I was heavily working with at the time, and this was before it was killed :P)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for the most part LINQ to Umbraco that we see today does match with what I set out to achieve.&lt;/p&gt;
&lt;h2&gt;Removing the reliance on underlying API&amp;#39;s&lt;/h2&gt;
&lt;p&gt;This was really a core goal of mine with LINQ to Umbraco, I didn&amp;#39;t want to be tied to the Umbraco XML, nor did I want to be tied to the Document API, I&amp;#39;d made that mistake before and it cost me with the extensibility of the UIL, so I wanted to work out a way around this.&lt;/p&gt;
&lt;p&gt;While doing research into how LINQ to SQL works I came across something interesting, LINQ to SQL does &lt;em&gt;kind of&lt;/em&gt; have the ability to swap out the data source. Seriously, if you check out the DataContext class in Reflector you&amp;#39;ll see that there&amp;#39;s a private field called &lt;code&gt;provider&lt;/code&gt; which is the way it connects to the database. So LINQ to SQL could have been a more extensible framework (&lt;a href=&quot;http://blogs.msdn.com/b/mattwar/archive/2008/05/04/mocks-nix-an-extensible-linq-to-sql-datacontext.aspx&quot;&gt;well, you can make it so via reflection&lt;/a&gt;) why not follow the same idea and make LINQ to Umbraco provider based?&lt;/p&gt;
&lt;p&gt;And that&amp;#39;s essentially what I did, in the form of the &lt;code&gt;UmbracoDataProvider&lt;/code&gt; class. Since I figured that 99% of the time people are going to want to work with LINQ to Umbraco and not have to think about it I decided that I should create a default one that would work with the XML, as that&amp;#39;s what most people would be doing with it, replacing NodeFactory. This goal was achieved by creating the &lt;code&gt;NodeDataProvider&lt;/code&gt;, which the default constructor for the &lt;code&gt;UmbracoDataContext&lt;/code&gt; will use. Note that it&amp;#39;s called the &lt;code&gt;**Node**DataProvider&lt;/code&gt;, implying that it works with the idea of &lt;code&gt;Node&lt;/code&gt; in Umbraco, which is read-only (we&amp;#39;ll come to this shortly).&lt;/p&gt;
&lt;p&gt;So ultimately what we&amp;#39;ve ended up with is a read-only way of accessing data in a strongly typed fashion in Umbraco.&lt;/p&gt;
&lt;h2&gt;Extensibility and LINQ to SQL&lt;/h2&gt;
&lt;p&gt;As I mentioned about LINQ to SQL had the initial design to be extensible (but since it&amp;#39;s being killed off at the moment in favor of Entity Framework I can understand the lacking desire to maintain to provider-based ORM&amp;#39;s :P) I wanted to have something similar with LINQ to Umbraco. By having the &lt;code&gt;UmbracoDataProvider&lt;/code&gt; a class which you pass into the &lt;code&gt;UmbracoDataContext&lt;/code&gt; you could easily swap this out for something else that you&amp;#39;ve written (at &lt;a href=&quot;/rssdataprovider-for-linq-to-umbraco&quot;&gt;CodeGarden 09 I did a PoC of this&lt;/a&gt; with a &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; early version of LINQ to Umbraco and reading an RSS feed, this code &lt;strong&gt;will not work with 4.5&lt;/strong&gt; but is designed to get your brain working).&lt;/p&gt;
&lt;p&gt;And because I was going for LINQ to SQL as the original model for what I wanted I decided that I should try and maintain as much of the LINQ to SQL features as I wanted, one of the features that I ported is the &lt;code&gt;SubmitChanges&lt;/code&gt; method.&lt;/p&gt;
&lt;h2&gt;CRUD with LINQ to Umbraco&lt;/h2&gt;
&lt;p&gt;This has caused a bit of confusion and it&amp;#39;s a lot to do with me not having written this section of my blog post already.&lt;/p&gt;
&lt;p&gt;On the question of &amp;quot;Does LINQ to Umbraco support CRUD?&amp;quot; the short answer is Yes, with the long answer being &amp;quot;Yes, but only if your UmbracoDataProvider supports it&amp;quot;.&lt;/p&gt;
&lt;p&gt;If you try doing &lt;code&gt;SubmitChanges&lt;/code&gt; in LINQ to Umbraco with the &lt;code&gt;NodeDataProvider&lt;/code&gt; you&amp;#39;ll wind up with a &lt;code&gt;System.NotSupportedException&lt;/code&gt; being thrown. The reason for this is, as I mentioned earlier, the &lt;code&gt;NodeDataProvider&lt;/code&gt; is &lt;strong&gt;read-only&lt;/strong&gt;. Remember it maps to the concept of &lt;code&gt;Node&lt;/code&gt; in Umbraco.&lt;/p&gt;
&lt;p&gt;At the moment there is no released &lt;code&gt;UmbracoDataProvider&lt;/code&gt; that I&amp;#39;m aware of which supports writing to the Umbraco database (or any database for that matter) but it is something that I hope to one day write about, it&amp;#39;s on my ever-increasing TODO list :P.&lt;/p&gt;
&lt;p&gt;So basically out of the box LINQ to Umbraco will throw errors (and hopefully relevant errors) indicating that you&amp;#39;re not allowed to do CRUD.&lt;/p&gt;
&lt;h2&gt;Testability&lt;/h2&gt;
&lt;p&gt;Another equally high priority feature of LINQ to Umbraco that I wanted was the ability to test it. Umbraco is notoriously hard to test, &lt;a href=&quot;/unit-testing-with-umbraco&quot;&gt;I&amp;#39;ve written about it in the past&lt;/a&gt;, so I didn&amp;#39;t want to introduce anything with LINQ to Umbroco which would make it harder to do testing, in fact I wanted to introduce something that would make it easier to test.&lt;/p&gt;
&lt;p&gt;To this end everything that you (should) need to be able to override in a unit testing scenario can be overridden in a unit testing scenario.&lt;/p&gt;
&lt;p&gt;I wont go into how to do that here, it&amp;#39;s something that deserves an entire set of articles but if you&amp;#39;re interested in unit testing with Umbraco I recommend you check out the article linked above.&lt;/p&gt;
&lt;h2&gt;Right tool for the right job&lt;/h2&gt;
&lt;p&gt;LINQ to Umbraco was never designed to be a full replacement for everything Umbraco does, in fact it&amp;#39;s really designed as an alternative to XSLT&amp;#39;s.&lt;/p&gt;
&lt;p&gt;You wouldn&amp;#39;t (well at least you shouldn&amp;#39;t) use XSLT to output a property from the current node in a page, and additionally you shouldn&amp;#39;t use LINQ to Umbraco for that. That is the role of &amp;lt;umbraco:Item /&amp;gt; and don&amp;#39;t take that away from it!&lt;/p&gt;
&lt;p&gt;Something that people are starting to notice with LINQ to Umbraco is there is no built-in way to get the current page as a LINQ to Umbraco object. The reason for this is that LINQ to Umbraco is flat, it doesn&amp;#39;t &lt;em&gt;really&lt;/em&gt; understand hierarchies, because hierarchies is something that is really a concept of the published Umbraco data (and to a lesser extent the database).&lt;/p&gt;
&lt;p&gt;With LINQ to Umbraco you can easily access data from anywhere in the site, the &lt;code&gt;UmbracoDataContext&lt;/code&gt; gives you list of all your types and you can grab all your data there, it&amp;#39;s not until you have an object can you start understanding hierarchies. From a single object you can go down and up it&amp;#39;s object graph, because now you have a contextual point to work with.&lt;/p&gt;
&lt;p&gt;So when you&amp;#39;re thinking &amp;quot;Is LINQ to Umbraco right for me?&amp;quot; think about what you&amp;#39;re trying to achieve, if you want to work with just the current node then it&amp;#39;s probably not the right tool for you, in fact you&amp;#39;re probably even better off with just the standard Umbraco displaying of a node.&lt;/p&gt;
&lt;h2&gt;To dispose or not to dispose?&lt;/h2&gt;
&lt;p&gt;Something that you may notice with LINQ to Umbraco is that the &lt;code&gt;UmbracoDataContext&lt;/code&gt; and the &lt;code&gt;UmbracoDataProvider&lt;/code&gt; are both disposable objects, this was also ported from the LINQ to Umbraco idea, but generally it&amp;#39;s a bit less-than-desirable to achieve full disposal constantly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;NodeDataProvider&lt;/code&gt; itself has quite a bit of caching built into it. Every time you request an object it will be looked up in its internal cache before it&amp;#39;s created, just in case it has previously been found. So deciding if you should be disposing of your object at the end of the unit of work really depends on how big your site is. A lot of the implementations which I&amp;#39;ve worked on we&amp;#39;ve actually chosen to run a singleton instance of the objects, and the reason for this is that we&amp;#39;ve got large sites.&lt;/p&gt;
&lt;p&gt;There is nothing &lt;em&gt;wrong&lt;/em&gt; with running a singleton for the &lt;code&gt;UmbracoDataContext&lt;/code&gt; and &lt;code&gt;UmbracoDataProvider&lt;/code&gt; objects, just keep in mind that you may get stale data. On the &lt;code&gt;NodeDataProvider&lt;/code&gt; there is a &lt;code&gt;Flush&lt;/code&gt; method, this will essentially force the cache to be cleared within it so that next time you&amp;#39;ll get new objects from the XML. The reason that the &lt;code&gt;Flush&lt;/code&gt; method doesn&amp;#39;t reside on the &lt;code&gt;UmbracoDataProvider&lt;/code&gt; is because it should be up to the implementor of the &lt;code&gt;UmbracoDataProvider&lt;/code&gt; to decide if/ how they are caching objects.&lt;/p&gt;
&lt;h2&gt;IQueryable&lt;/h2&gt;
&lt;p&gt;LINQ to Umbraco doesn&amp;#39;t implement IQueryable, instead it implements IEnumerable. If you&amp;#39;re interested in understanding why IEnumeraable was used rather than IQueryable I have &lt;a href=&quot;/iqueryable-linq-to-umbraco&quot;&gt;covered that in its own article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this article has given you a bit of an insight into how LINQ to Umbraco was designed, what it was designed for and how you should be use it.&lt;/p&gt;
&lt;p&gt;Everyone who&amp;#39;s using it keep your feedback coming so that we can look to expand and evolve LINQ to Umbraco in Umbraco 4.5 and Umbraco 5.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating custom DataProviders for LINQ to Umbraco</title>
            <link href="/posts/2010-08-27-creating-custom-dataprovider-for-linq-to-umbraco.html"/>
            <updated>2010-08-27T00:00:00.000Z</updated>
            <id>/posts/2010-08-27-creating-custom-dataprovider-for-linq-to-umbraco.html</id>
            <content type="html">&lt;p&gt;Sorry to all the people who were kind enough to come to my &lt;a href=&quot;http://our.umbraco.org/wiki/codegarden-2009/open-space-minutes/linq&quot;&gt;LINQ to Umbraco session at CodeGarden 09&lt;/a&gt;, I said I would do this post soon after the session. Sadly I started enjoying Copenhagen too much without the need to be sitting at my laptop and now it&amp;#39;s a week later, I&amp;#39;m home and it&amp;#39;s time I come good on my promise.&lt;/p&gt;
&lt;h2&gt;The LINQ to Umbraco DataProvider model&lt;/h2&gt;
&lt;p&gt;Something that I have implemented with LINQ to Umbraco, and something which will be taking a stronger focus in Umbraco going forward, is a Provider model for the Umbraco data.
What this means with LINQ to Umbraco? Well the classes generated for LINQ to Umbraco act as proxies to a data model, they don&amp;#39;t expect the data to come from anyway in particular.&lt;/p&gt;
&lt;p&gt;This has a really neat advantage of the fact that you can write your own DataProvider which exposes the data from how ever you want. LINQ to Umbraco will ship as part of 4.1 with a single DataProvider, the NodeDataProvider. This enables the use of LINQ to Umbraco against the XML cache, which was the inital design of it.&lt;/p&gt;
&lt;h2&gt;Anatomy from a DataProvider&lt;/h2&gt;
&lt;p&gt;The DataProvider itself is an abstract class which has a number of methods which are implemented do different operations, the primary method you need to be implementing is the LoadTree&lt;TDocType&gt; method, this is responsible for the initial population of the collection from your data source.&lt;/p&gt;
&lt;p&gt;There are other methods which have different uses, I wont be covering them in this post, but they will be going up on the new Umbraco wiki (which the LINQ to Umbraco section is starting to come up).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LoadTree&amp;lt;TDocType&amp;gt;&lt;/code&gt; method needs to then return an instance of a &lt;code&gt;Tree&amp;lt;TDocType&amp;gt;&lt;/code&gt;, which is another abstract class that needs to be implemented to handle the data mapping for your data provider.&lt;/p&gt;
&lt;h2&gt;Creating an RssDataProvider&lt;/h2&gt;
&lt;p&gt;While we were hacking at the Umbraco Retreat prior to CodeGarden 09 I decided to try a proof-of-concept about how you could use the generated classes in a proxy manner. I may have written LINQ to Umbraco for this purpose, but it wasn&amp;#39;t something that I had actually tried to do.
So I decided to create a basic little DataProvider which would read an RSS feed and turn the returned data from there into LINQ to Umbraco objects which could then be used in the Umbraco content tree.&lt;/p&gt;
&lt;p&gt;The first step is you need to generate the LINQ to Umbraco classes, with Umbraco 4.1 you will be able to do this directly from the Settings -&amp;gt; Document Types node. I created a basic little Document Type named RSS Item and then generated the class for it.&lt;/p&gt;
&lt;p&gt;Next came the task of implementing my custom UmbracoDataProvider, I created my class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RssDataProvider&lt;/span&gt; :&lt;/span&gt; UmbracoDataProvider { }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then set about implementing a constructor which takes the RSS feed URL (in this demo I used the Yahoo! Pipes which are on the homepage of our.umbraco) and then implemented the LoadTree&lt;TDocType&gt; method:&lt;/p&gt;
&lt;p&gt;public override Tree LoadTree() 
{
    //supporting loading a full Tree
    //throw an exception if the type of the tree is an unsupported one
    if (typeof(TDocType) != typeof(RssItem))
    {
        throw new NotSupportedException(typeof(TDocType).Name);
    }&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//create a request to the URL supplied&lt;/span&gt;
WebRequest request = WebRequest&lt;span class=&quot;variable&quot;&gt;.Create&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;._feedUrl&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;//do a GET and string buffer the response&lt;/span&gt;
HttpWebResponse response = (HttpWebResponse)request&lt;span class=&quot;variable&quot;&gt;.GetResponse&lt;/span&gt;();
Stream dataStream = response&lt;span class=&quot;variable&quot;&gt;.GetResponseStream&lt;/span&gt;();
StreamReader reader = new StreamReader(dataStream);
string responseFromServer = reader&lt;span class=&quot;variable&quot;&gt;.ReadToEnd&lt;/span&gt;();

&lt;span class=&quot;comment&quot;&gt;//make a LINQ to XML representation of the RSS&lt;/span&gt;
XDocument xdoc = XDocument&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(responseFromServer);

&lt;span class=&quot;comment&quot;&gt;//select the posts&lt;/span&gt;
var items = xdoc&lt;span class=&quot;variable&quot;&gt;.Descendants&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;//make an RssTree from the items returned by the feed&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; new RssTree(items, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
So now I have a load method which reads my RSS feed (and I&amp;#39;ve restricted it to only support my RssItem Document Type), now it&amp;#39;s time to create the RssTree&lt;TDocType&gt; from the provided data.&lt;/p&gt;
&lt;h2&gt;Tree&amp;lt;TDocType&amp;gt;&lt;/h2&gt;
&lt;p&gt;This class is really just a wrapper for the IEnumerable&lt;T&gt; class. The way in which I have implemented the RssTree (and how I implemented the NodeTree) is by using delayed loading. What I mean is that the data isn&amp;#39;t converted from the source to the result until the GetEnumerator() method is called.
This means that unless I do something with the collection there is no performance hit.&lt;/p&gt;
&lt;p&gt;The following code is a bit of a hack (for the return type anyway) but that is because I wanted to show it being done without the use of reflection. If you want to see how to achieve it with a complete generic type check out the source for the NodeTree which is on Codeplex.&lt;/p&gt;
&lt;p&gt;Anyway here&amp;#39;s how the GetEnumerator() method looks:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;public override IEnumerator GetEnumerator()
{
    //this &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a bit hacky &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; i only support &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; doc type
    //normally &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; load can be done via reflection (which &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; how &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; NodeTree works)
    foreach (var &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _items)
    {
        var rssItem = new TDocType() &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; RssItem;
        rssItem.Name = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;);
        rssItem.Link = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
        rssItem.Description = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;);
        rssItem.PublishDate = (DateTime)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;pubDate&quot;&lt;/span&gt;);
        rssItem.Content = (&lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;);
        rssItem.CreateDate = (DateTime)&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.Element(&lt;span class=&quot;string&quot;&gt;&quot;pubDate&quot;&lt;/span&gt;);

        //Because RssItem may &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; be &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; type &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; TDocType (although &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; this example we'll assume &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; always &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;)
        //we have &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; downcast &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; DocTypeBase &lt;span class=&quot;keyword&quot;&gt;before&lt;/span&gt; casting &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; generic.
        yield &lt;span class=&quot;constant&quot;&gt;return&lt;/span&gt; (TDocType)(DocTypeBase)rssItem;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what&amp;#39;s going on, well first off we&amp;#39;re itterating through the collection of XML items returned from the initial load (_items) and then creating a new instance of the RssItem class and assigning the properties from the XML.
You can see the comment mentioning the hack, having to do some crazy casting, that is because I&amp;#39;m not really doing the Generics properly.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve also implemented it via yield return, not building the entire collection into say a List&lt;T&gt; and then returning its Enumerator. The reason for this is you&amp;#39;ll pick up a bit of performance if you are doing methods like Take(int) or breaking from a loop early.
You should probably push the items into an internal collection to support caching (which is what the Node implementation does), but this is just a quick demo.&lt;/p&gt;
&lt;p&gt;Any that is as simple as it gets to write your own custom DataProvider for LINQ to Umbraco! Sure I&amp;#39;ve skipped a few sections (such as how to do child associations, but in this demo it&amp;#39;s not really viable) but hopefully this should give you a heads up on how to do it.
And how does it work? Well just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var ctx = new &lt;span class=&quot;variable&quot;&gt;RssDataContext&lt;/span&gt;(new &lt;span class=&quot;variable&quot;&gt;RssDataProvider&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http://pipes.yahoo.com/pipes/pipe.run?_id=8llM7pvk3RGFfPy4pgt1Yg&amp;amp;_render=rss&quot;&lt;/span&gt;)&lt;/span&gt;))
{
    &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;feedItems&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;ctx&lt;/span&gt;.R&lt;span class=&quot;title&quot;&gt;ssItems&lt;/span&gt;.T&lt;span class=&quot;title&quot;&gt;ake&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;;

    A&lt;span class=&quot;title&quot;&gt;ssert&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;sNotNull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(feed&lt;span class=&quot;variable&quot;&gt;Items&lt;/span&gt;)&lt;/span&gt;;
    A&lt;span class=&quot;title&quot;&gt;ssert&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;sTrue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(feed&lt;span class=&quot;variable&quot;&gt;Items&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;GetEnumerator&lt;/span&gt;()&lt;/span&gt; != &lt;span class=&quot;title&quot;&gt;null&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s right, the above code is from a unit test, remember LINQ to Umbraco is capable of running outside of a web context so it is very easy to unit test!&lt;/p&gt;
&lt;h2&gt;Making this into an Umbraco Content Tree&lt;/h2&gt;
&lt;p&gt;Now here is where the fun part comes in, you can easily turn the above data provider into a custom Umbraco tree. This means you can either make it into your own custom Umbraco module (/ application, what ever you call it!), or append it to the standard Content Tree! Isn&amp;#39;t THAT a funky idea hey!&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not going to get too in-depth into this, Shannon Deminik has done some good documentation about that (again, see the &lt;a href=&quot;http://our.umbraco.org/wiki/reference/api-cheatsheet/tree-api---to-create-custom-treesapplications&quot;&gt;wiki&lt;/a&gt;). So rather than going over the code I&amp;#39;m going to show it off in a short screencast and you can look into the provided source package with this post.&lt;/p&gt;
&lt;p&gt;The screenscast is available &lt;a href=&quot;http://screencast.com/t/NS24jMo6xkp&quot;&gt;here&lt;/a&gt; and the source code is &lt;a href=&quot;/media/2640/umbracodataproviderdemo.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>All good things come to an end</title>
            <link href="/posts/2010-08-08-all-good-things-come-to-an-end.html"/>
            <updated>2010-08-08T00:00:00.000Z</updated>
            <id>/posts/2010-08-08-all-good-things-come-to-an-end.html</id>
            <content type="html">&lt;p&gt;As you have probably seen we at &lt;a href=&quot;http://farmcode.org/post/2010/08/05/TheFARM-needs-senior-Net-developer!.aspx&quot;&gt;TheFarm require a senior .NET developer&lt;/a&gt;, and there is a some-what sad reason for this... I&amp;#39;ve decided to move on from TheFarm.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve taken a job with one of Australia&amp;#39;s top .NET consulting agencies, &lt;a href=&quot;http://readify.com.au/&quot;&gt;Readify&lt;/a&gt;. I&amp;#39;m really excited about having the opportunity to work with some of Australia&amp;#39;s best .NET developers, and I&amp;#39;m really quite excited about this chance.&lt;/p&gt;
&lt;p&gt;I do feel sad about leaving TheFarm though, I&amp;#39;ve had an awesome 12 months working with Shannon, I&amp;#39;ve learnt a shit load and made a great set of friends. And if you&amp;#39;re looking for a new job (or you&amp;#39;re thinking of moving to Australia) I&amp;#39;d recommend talking to the guys at TheFarm.&lt;/p&gt;
&lt;h2&gt;What about Umbraco?&lt;/h2&gt;
&lt;p&gt;When I took the job with TheFarm last year one of the main drives was to have the chance to work closer with Shannon on Umbraco (and producing the AUSPAC Mafia!) and moving on does not mean that I&amp;#39;m becoming less involved with Umbraco.&lt;/p&gt;
&lt;p&gt;In fact, it&amp;#39;s the opposite really. Something that I&amp;#39;ve found being a core team member and an Umbraco user was that I often had to make a choice between the two. Anyone looking at codeplex will have seen my check-in&amp;#39;s drop off, and that was a lot to do with working every day with Umbraco, I was finding it hard to then come how and work on the core product as well. My new role is less Umbraco focused which is going to free up my desire to work on Umbraco more.&lt;/p&gt;
&lt;p&gt;And with v5 kicking along I&amp;#39;m really excited to get back into hard-core Umbraco core development.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;#39;s to the next chapter!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Yes, I LIKE WebForms!</title>
            <link href="/posts/2010-08-07-yes-i-like-webforms.html"/>
            <updated>2010-08-07T00:00:00.000Z</updated>
            <id>/posts/2010-08-07-yes-i-like-webforms.html</id>
            <content type="html">&lt;p&gt;At some of my speaking engagements recently I&amp;#39;ve made the &lt;em&gt;astonishing&lt;/em&gt; claim that I quite like ASP.Net WebForms. Why do I say this is an astonishing claim? Quite often when I&amp;#39;m talking to other ASP.Net developers and we end up on the topic of WebForms you can see a look of distaste in their eyes, or there&amp;#39;ll be a statement like &amp;quot;I&amp;#39;m stuck working with WebForms&amp;quot;.&lt;/p&gt;
&lt;p&gt;But when you ask someone why they don&amp;#39;t like WebForms they generally don&amp;#39;t have a really good reason, they come up with a few points like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewState is bloated&lt;/li&gt;
&lt;li&gt;Controls are heavy&lt;/li&gt;
&lt;li&gt;It&amp;#39;s not testable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I thought I&amp;#39;d share a few of my thoughts on the topic because well, everyone wants to hear my opinion :P.&lt;/p&gt;
&lt;h2&gt;ViewState&lt;/h2&gt;
&lt;p&gt;ViewState is a double-edged sward and if you&amp;#39;re not familiar with it and what it&amp;#39;s goals are then you&amp;#39;re probably going to end up doing it wrong.&lt;/p&gt;
&lt;p&gt;First thing everyone should do when starting ASP.Net development is &lt;a href=&quot;http://weblogs.asp.net/infinitiesloop/archive/2006/08/03/Truly-Understanding-Viewstate.aspx&quot;&gt;read this article&lt;/a&gt; by &lt;a href=&quot;http://weblogs.asp.net/infinitiesloop/&quot;&gt;David Reed&lt;/a&gt;. The article may be 4 years old but everything still holds true today.&lt;/p&gt;
&lt;p&gt;And once you understand ViewState you can understand how to use it to your advantage. Keep in mind that ViewState can be turned on or off for any particular control (with .NET 4.0 the control is even better), and you really should be setting it properly.&lt;/p&gt;
&lt;h3&gt;To enable or to disable?&lt;/h3&gt;
&lt;p&gt;When you turn ViewState on you&amp;#39;re adding weight to the response back to the client (well unless you use a different provider), and this is something that you need to be aware of. Take a look at the controls you&amp;#39;re using, what&amp;#39;s the data they have in them and what&amp;#39;s the cost of that data?&lt;/p&gt;
&lt;p&gt;Say you have a literal, or a label and you&amp;#39;re setting some text on it from a resource file. It&amp;#39;s not that expensive to do the text setting, so why have the framework do it for you at the cost to the end user?&lt;/p&gt;
&lt;p&gt;This principle can be applied to any kind of control, and once you start looking at what you&amp;#39;re putting into your page you&amp;#39;ll realise just how often you don&amp;#39;t need to have ViewState enabled.&lt;/p&gt;
&lt;p&gt;A little bit of planning and you&amp;#39;ll not have to look at the giant ViewState slab.&lt;/p&gt;
&lt;h2&gt;Controls&lt;/h2&gt;
&lt;p&gt;Controls are great, they package up some functionality and make it easy to redistribute. But people often say that this is one of the big downsides of WebForms and MVC gives you much better flexibility. But think about some of the trivial (read: boring) tasks which we have to do as developers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a login form&lt;/li&gt;
&lt;li&gt;Output a collection of data using a template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So with MVC this is something that you end up having to write yourself, sure there are some helpers like &lt;code&gt;Html.EditorFor&lt;/code&gt; and stuff so you can quickly display something. And it&amp;#39;s true there&amp;#39;s plenty of good extensions to do things like Repeaters, so this is just taking WebForms concept into MVC right?&lt;/p&gt;
&lt;p&gt;One of the other main criticisms of controls is that they generate HTML for you that is hard to style, and often unchangable. But think about what they are trying to generate, a standard design cross-browser. Try having a floating layout which can be dropped anywhere and look the same?&lt;/p&gt;
&lt;p&gt;True it makes them less flexible, but it depends what you&amp;#39;re trying to achieve.&lt;/p&gt;
&lt;h2&gt;Testability&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve done plenty of articles in the past about testibility so I&amp;#39;m not going to dwell too much. All I&amp;#39;m going to say is that you need &lt;a href=&quot;/webforms-mvp&quot;&gt;WebForms MVP&lt;/a&gt;, it&amp;#39;s fantastic!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think that WebForms is a great framework and one that we&amp;#39;ll have with us for a long time still. If you understand what you&amp;#39;re working with, that it&amp;#39;s not MVC and there is a lot of power which it has to give you&amp;#39;ll learn that it isn&amp;#39;t really that bad :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Building an application with Lucene.Net</title>
            <link href="/posts/2010-07-10-building-an-application-with-lucene-net.html"/>
            <updated>2010-07-10T00:00:00.000Z</updated>
            <id>/posts/2010-07-10-building-an-application-with-lucene-net.html</id>
            <content type="html">&lt;p&gt;For this article we&amp;#39;re going to go through building a small application with uses Lucene.Net as a storage model. I read a lot of blogs so I&amp;#39;m often find that when I&amp;#39;m working I want to refer back to a blog that I read in the past. The problem is that finding that particular blog can be tricky, navigating through a few thousand posts can be fairly tedious. So let&amp;#39;s build an application which we can quickly search and find the posts that I&amp;#39;m interested in.&lt;/p&gt;
&lt;h2&gt;Designing for Lucene&lt;/h2&gt;
&lt;p&gt;Although Lucene is a Document Database it&amp;#39;s also a search engine. This means that Lucene can actually be used as a mid-point in the application you&amp;#39;re designing. This can be used to turn our data for the UI without having to go to your underlying data store. This &lt;em&gt;can&lt;/em&gt; provide speed boosts (and generally does) if you&amp;#39;re using Lucene well.&lt;/p&gt;
&lt;h2&gt;To Store or not to Store...&lt;/h2&gt;
&lt;p&gt;So I&amp;#39;m wanting a way which I can quickly find blogs which are matching particular search terms, but I want it to be fast and I want it to be small. The blog posts are available on the web, so I can access them if/ when I need, but do I really need to have my application showing all the data too? I don&amp;#39;t think so, it would mean that my application needs to act a bit like a web browser, and this seems to be a bit silly. It also adds a dependency which I don&amp;#39;t really want in my application.&lt;/p&gt;
&lt;p&gt;Well this means that I don&amp;#39;t really need to store much data at all, I just need to store the indexes! Now all I need to work out is what I want to show on my UI.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve decided that I want only a very basic little UI, I just want to have a link to the article and the name of it. This means that I can save some space by not storing the content of the blog post in my index, after all, if you want to read the content you&amp;#39;re going out to the web.&lt;/p&gt;
&lt;p&gt;This kind of split approach with Lucene is a common way to use Lucene. When working with Lucene the most performance intensive part of the process is actually getting the data back out of the index. Searching against Lucene is really fast, it&amp;#39;s what Lucene is designed for. So we have Lucene to mainly just store our analyzed version of our data, and then we have our underlying data store to retrieve all of the data.&lt;/p&gt;
&lt;h2&gt;Building the BlogManager&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m going to be making this little application using WPF (yep, the web developer is trying WPF, and it&amp;#39;s going... ok :P). First off I want a way to add RSS feeds to be able to search against:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/csharp/blogmanager/blogmanager001.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;So there we go, we&amp;#39;re able to provide the URL for a blog and we&amp;#39;re going to push some data into our index. I&amp;#39;m actually using Lucene to store the URL&amp;#39;s as well as the actual blogs to search against. Remember that a Document Database doesn&amp;#39;t have a schema, so you can stick anything in there that you want. Let&amp;#39;s see some code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;public MainWindow()
{
    InitializeComponent()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var path = new DirectoryInfo(Path&lt;span class=&quot;preprocessor&quot;&gt;.Combine&lt;/span&gt;(new FileInfo(Assembly&lt;span class=&quot;preprocessor&quot;&gt;.GetExecutingAssembly&lt;/span&gt;()&lt;span class=&quot;preprocessor&quot;&gt;.Location&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Directory&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.FullName&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;LuceneIndex&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    if (!path&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;)
    {
        path&lt;span class=&quot;preprocessor&quot;&gt;.Create&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        path&lt;span class=&quot;preprocessor&quot;&gt;.Refresh&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    this&lt;span class=&quot;preprocessor&quot;&gt;.directory&lt;/span&gt; = new SimpleFSDirectory(path)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    this&lt;span class=&quot;preprocessor&quot;&gt;.analyzer&lt;/span&gt; = new StandardAnalyzer(Lucene&lt;span class=&quot;preprocessor&quot;&gt;.Net&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Util&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Version&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.LUCENE&lt;/span&gt;_29)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    this&lt;span class=&quot;preprocessor&quot;&gt;.writer&lt;/span&gt; = new IndexWriter(directory, analyzer, IndexWriter&lt;span class=&quot;preprocessor&quot;&gt;.MaxFieldLength&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.UNLIMITED&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    this&lt;span class=&quot;preprocessor&quot;&gt;.searcher&lt;/span&gt; = new IndexSearcher(directory, true)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just my setup method, and I&amp;#39;m setting up a few default objects which I want to persist within my application. I&amp;#39;m using the &lt;a href=&quot;http://lucene.apache.org/java/2_9_2/api/all/org/apache/lucene/analysis/standard/StandardAnalyzer.html&quot;&gt;StandardAnalyzer&lt;/a&gt; (&lt;a href=&quot;/lucene-analyzer&quot;&gt;here&amp;#39;s more info on analyzers&lt;/a&gt;) and the &lt;a href=&quot;http://lucene.apache.org/java/2_9_2/api/all/index.html?org/apache/lucene/store/SimpleFSDirectory.html&quot;&gt;SimpleFSDirectory&lt;/a&gt; as my storage model. It&amp;#39;s all just setup, not very interesting code, but it can&amp;#39;t hurt to show you this stuff :P.&lt;/p&gt;
&lt;p&gt;To get the data from the feed I&amp;#39;m using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed.aspx&quot;&gt;SyndicationFeed&lt;/a&gt; from the .NET framework, but you could parse the XML yourself, or use any other library if you really wanted, but this done a good enough job for what I need. You just use it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;sql&quot;&gt;XmlReader xmlReader = XmlReader.&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt;(url);&lt;/span&gt;
var feed = SyndicationFeed.&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Load&lt;/span&gt;(xmlReader);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets put our data into the index:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var doc = new Document()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, feed&lt;span class=&quot;preprocessor&quot;&gt;.Title&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.YES&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;, url, Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.YES&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;BlogUrl&quot;&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ANALYZED&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

writer&lt;span class=&quot;preprocessor&quot;&gt;.AddDocument&lt;/span&gt;(doc)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this I&amp;#39;m storing the title of the feed and the URL of it, this is because I&amp;#39;m wanting to show them in a data grid (so I can get an overview of what feeds I&amp;#39;m indexing). And since I don&amp;#39;t want to be searching this data I&amp;#39;m leaving it unindexed. But so I can easily find this data I&amp;#39;m adding a meta-data property, in the form of the &lt;code&gt;type&lt;/code&gt; field. This is something that is just meta data, so I don&amp;#39;t want to display it, but I do need to be able to search on it. That&amp;#39;s why I&amp;#39;m leaving it unstored and analyzed. Lastly I add this to my &lt;code&gt;IndexWriter&lt;/code&gt; instance and we&amp;#39;re nearly done.&lt;/p&gt;
&lt;p&gt;Next we need to push in the blogs which we&amp;#39;ve found from here:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; feed&lt;span class=&quot;preprocessor&quot;&gt;.Items&lt;/span&gt;)
{
    doc = new Document()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Title&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.YES&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ANALYZED&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;, StripHtml(item&lt;span class=&quot;preprocessor&quot;&gt;.Summary&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;), Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ANALYZED&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;categories&quot;&lt;/span&gt;, string&lt;span class=&quot;preprocessor&quot;&gt;.Join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Categories&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt;)), Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ANALYZED&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Links&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.First&lt;/span&gt;()&lt;span class=&quot;preprocessor&quot;&gt;.Uri&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(), Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.YES&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    doc&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(new Field(&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;BlogPost&quot;&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Store&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.NO&lt;/span&gt;, Field&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ANALYZED&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    writer&lt;span class=&quot;preprocessor&quot;&gt;.AddDocument&lt;/span&gt;(doc)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is pretty much the same as what we had previously, we&amp;#39;re just grabbing some properties and then putting them into the Document which is then written to the index. I&amp;#39;m setting a no-store on the content of the post and it&amp;#39;s categories since these are just things that I&amp;#39;m going to be searching against, but not ever showing it on the UI.&lt;/p&gt;
&lt;p&gt;Now we just do a commit to our index:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;sql&quot;&gt;writer.&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Commit&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our blog has been added into our index, woo! Now it&amp;#39;ll be listed below in the data grid:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/csharp/blogmanager/blogmanager002.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Searching the blogs&lt;/h2&gt;
&lt;p&gt;Now that we&amp;#39;ve got some stuff in our index let&amp;#39;s try and get at it. I&amp;#39;ve got another awesome example of UI design for that:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/csharp/blogmanager/blogmanager003.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here I&amp;#39;ve got a big text box which I can enter a Lucene query using the &lt;a href=&quot;http://lucene.apache.org/java/2_3_2/queryparsersyntax.html&quot;&gt;Lucene Query Parser Syntax&lt;/a&gt; so I can just get at the data. Lets say that I want all the posts which had Umbraco in the title:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/csharp/blogmanager/blogmanager004.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Or maybe I&amp;#39;ll get all the ones which contain Umbraco or Lucene.Net:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/csharp/blogmanager/blogmanager005.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;#39;s the underlying code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var queryParser = new MultiFieldQueryParser(Version&lt;span class=&quot;preprocessor&quot;&gt;.LUCENE&lt;/span&gt;_29, new[] { &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;categories&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt; }, analyzer)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
var query = new BooleanQuery()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
query&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(queryParser&lt;span class=&quot;preprocessor&quot;&gt;.Parse&lt;/span&gt;(this&lt;span class=&quot;preprocessor&quot;&gt;.QueryText&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Text&lt;/span&gt;), BooleanClause&lt;span class=&quot;preprocessor&quot;&gt;.Occur&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.MUST&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
query&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(queryParser&lt;span class=&quot;preprocessor&quot;&gt;.GetFieldQuery&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;blogpost&quot;&lt;/span&gt;), BooleanClause&lt;span class=&quot;preprocessor&quot;&gt;.Occur&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.MUST&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

var results = searcher&lt;span class=&quot;preprocessor&quot;&gt;.Search&lt;/span&gt;(query, null, searcher&lt;span class=&quot;preprocessor&quot;&gt;.MaxDoc&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s quite simple actually, I&amp;#39;m creating a &lt;code&gt;[MultiFieldQueryParser][11]&lt;/code&gt; since the user may be searching across multiple different fields in the index. I&amp;#39;m specifying the fields which I defined earlier then taking the text which the user entered and parsing that into a &lt;code&gt;Query&lt;/code&gt; object. I&amp;#39;m also doing a addition of the &lt;em&gt;type&lt;/em&gt; field, so the actual query that you&amp;#39;ll end up with actually looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;literal&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(title:umbraco)&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;type:blogpost&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m actually wrapping any query the user puts in so that I can postfix the type query but not override anything that they are supplying (ie - any OR conditionals will be cancelled out if the AND for the type is used).&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not supporting paging in the datagrid so I&amp;#39;m just getting back all the results. &lt;strong&gt;This is not recommended&lt;/strong&gt; as it will put a lot more strain on the Lucene index than is really needed. You should only request the number of documents you actually require.&lt;/p&gt;
&lt;p&gt;And all that&amp;#39;s left is to hydrate the entities:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;results&lt;span class=&quot;preprocessor&quot;&gt;.scoreDocs&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt;
{
    var doc = searcher&lt;span class=&quot;preprocessor&quot;&gt;.Doc&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.doc&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    return new
    {
        Title = doc&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;),
        Url = doc&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;),
        Score = &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.score&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
})&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can push that onto your UI to get the lovely results we saw earlier.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a very quick look at how you can use Lucene.Net to make an application that actually works across multiple data stores. Here I&amp;#39;m using a Lucene index for nothing but searching. I&amp;#39;m pushing data into it but really the &lt;em&gt;end result&lt;/em&gt; display is all handled by my other data store, web servers.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll publish the source code in a little while, along with a downloadable version of this application, but at the moment there&amp;#39;s a few things I need to do, like updating the index as new posts are added and properly binding the data to the UI :P.&lt;/p&gt;
&lt;p&gt;But hopefully this gives you a view at how you can use Lucene in your own applications.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Dynamics Library</title>
            <link href="/posts/2010-07-05-dynamics-library.html"/>
            <updated>2010-07-05T00:00:00.000Z</updated>
            <id>/posts/2010-07-05-dynamics-library.html</id>
            <content type="html">&lt;p&gt;When playing with the &lt;code&gt;dynamic&lt;/code&gt; keyword and the DLR at CodeGarden 10 I realised that I wanted to do more with it so I started to dig deeper into it. This is where I came up with the idea which I covered in &lt;a href=&quot;/dynamic-dictionaries-with-csharp-4&quot;&gt;Dynamic Dictionaries with C# 4.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As some people I&amp;#39;ve talked to since then pointed out what I did was lacking a few things. I told them to be quiet as the blog was only meant to be a quick introduction into the &lt;code&gt;DynamicObject&lt;/code&gt; and some of the power which it brings to the table. But really, I was keeping some stuff in reserve, I was working on a more complete API for working with dynamic dictionaries.&lt;/p&gt;
&lt;h2&gt;Introducing AaronPowell.Dynamics&lt;/h2&gt;
&lt;p&gt;I decided to put together a set of handy extensions for working with the DLR, a more complete version of the dynamic dictionary which I talked about, and a fluent dynamic XML API.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve checked the code up on &lt;a href=&quot;http://bitbucket.org&quot;&gt;bitbucket&lt;/a&gt; so you can grab a copy yourself and get playing with it (or provide me with feedback :P). &lt;a href=&quot;http://bitbucket.org/slace/aaronpowell.dynamics&quot;&gt;You can grab it here&lt;/a&gt;. And if you want to just get started with the API &lt;a href=&quot;/get/csharp/AaronPowell.Dynamics.zip&quot;&gt;grab it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Working with the API&lt;/h2&gt;
&lt;p&gt;So obviously if you&amp;#39;re going to grab a copy you probably want to know what it is. The API contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AaronPowell.Dynamics.Collections.DynamicDictionary&lt;/li&gt;
&lt;li&gt;AaronPowell.Dynamics.Collections.DynamicKeyValuePair&lt;/li&gt;
&lt;li&gt;AaronPowell.Dynamics.Xml.XmlNode&lt;/li&gt;
&lt;li&gt;AaronPowell.Dynamics.Xml.XmlNodeList&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally each namespace contains &lt;a href=&quot;/are-extension-methods-really-evil&quot;&gt;extension methods&lt;/a&gt; to allow you to convert your static objects into dynamic objects.&lt;/p&gt;
&lt;h3&gt;DynamicDictionary&lt;/h3&gt;
&lt;p&gt;This is what the API is really all about, and it&amp;#39;s using some of the code which I started with in my other article, but I&amp;#39;ve added more to it, like the ability to write to it, and perform standard dictionary operations. I&amp;#39;ve got a series of tests which show what it can do, such as:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    [TestMethod]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; DynamicDictionaryTests_Key_Maps_To_Property()
    {
        &lt;span class=&quot;comment&quot;&gt;//Arrange&lt;/span&gt;
        Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; items = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;();
        items.Add(&lt;span class=&quot;string&quot;&gt;&quot;someKey&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;someValue&quot;&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;//Act&lt;/span&gt;
        dynamic d = items.AsDynamic();

        &lt;span class=&quot;comment&quot;&gt;//Assert&lt;/span&gt;
        Assert.AreEqual(items[&lt;span class=&quot;string&quot;&gt;&quot;someKey&quot;&lt;/span&gt;], d.someKey);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you can access via a key in the dictionary. Or maybe you want to add new keys:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    [TestMethod]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; DynamicDictionaryTests_New_Key_Added_Via_Property()
    {
        &lt;span class=&quot;comment&quot;&gt;//Arrange&lt;/span&gt;
        Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; items = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;();

        &lt;span class=&quot;comment&quot;&gt;//Act&lt;/span&gt;
        dynamic d = items.AsDynamic();
        d.hello = &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;;

        &lt;span class=&quot;comment&quot;&gt;//Assert&lt;/span&gt;
        Assert.AreEqual(&lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;, d.hello);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s right, it&amp;#39;s mutable (assuming the source dictionary was mutable, the AsDynamic extension method is on IDictionary&lt;string, TValue&gt; so you can use custom dictionaries).&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;DynamicDictionary&lt;/code&gt; inherits from IDictionary&lt;string, TValue&gt; so all other standard dictionary object modifiers can be used, it&amp;#39;s an Enumerable object, it&amp;#39;s got count, etc.&lt;/p&gt;
&lt;h4&gt;Performance&lt;/h4&gt;
&lt;p&gt;Just a bit of a footnote &lt;strong&gt;don&amp;#39;t turn all dictionaries into dynamic ones!&lt;/strong&gt; Unsurprisingly performance does take a hit when working with the &lt;code&gt;DynamicDictionary&lt;/code&gt; object, it&amp;#39;s ~4 times slower than the static one when doing 1 million iterations (you can check out the demo app).&lt;/p&gt;
&lt;h3&gt;Dynamic XML&lt;/h3&gt;
&lt;p&gt;This I can&amp;#39;t actually take credit for, it&amp;#39;s actually modeled off a piece of code by &lt;a href=&quot;http://www.nikhilk.net/&quot;&gt;Nikhil Kothari&lt;/a&gt; which he wrote for &lt;a href=&quot;http://www.nikhilk.net/CSharp-Dynamic-Programming-REST-Services.aspx&quot;&gt;working with RESTful API&amp;#39;s&lt;/a&gt;. The problem was that his code doesn&amp;#39;t work with the RTM of C# 4.0, so I&amp;#39;ve made that happen, and I&amp;#39;ve added a few more features, like better handling of children node sets.&lt;/p&gt;
&lt;p&gt;Again I have a few tests which cover this, and it makes working with XML a much nicer experience, like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    [TestMethod]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; XmlNodeTests_Attribute_Exposed_As_Member()
    {
        &lt;span class=&quot;comment&quot;&gt;//Arrange&lt;/span&gt;
        var xdoc = XDocument&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;node attr='something'&amp;gt;&amp;lt;/node&amp;gt;&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;dynamic&lt;/span&gt; node = xdoc&lt;span class=&quot;variable&quot;&gt;.Root&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.AsDynamic&lt;/span&gt;();

        &lt;span class=&quot;comment&quot;&gt;//Act&lt;/span&gt;

        &lt;span class=&quot;comment&quot;&gt;//Assert&lt;/span&gt;
        Assert&lt;span class=&quot;variable&quot;&gt;.AreEqual&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;something&quot;&lt;/span&gt;, node&lt;span class=&quot;variable&quot;&gt;.attr&lt;/span&gt;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fluent attribute access, or how about fluent element access?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;    [TestMethod]
    public void XmlNodeTests_Elements_Exposed_As_Members()
    {
        //Arrange
        var xdoc = XDocument.Parse(&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;child&lt;/span&gt;&amp;gt;&lt;/span&gt;value of child&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;child&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;);
        dynamic node = xdoc.Root.AsDynamic();

        //Act

        //Assert
        Assert.AreEqual(&quot;value of child&quot;, node.child);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I&amp;#39;ve decided to knock it up a notch (BAM!) and added a cooler way to interact with collections. I mean, if you have many children called &lt;em&gt;other&lt;/em&gt;, you just want the &lt;em&gt;other&lt;strong&gt;s&lt;/strong&gt;&lt;/em&gt; right?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;    [TestMethod]
    public void XmlNodeTests_Pluralized_Children_Via_Pluralized_Word()
    {
        //Arrange
        var xdoc = XDocument.Parse(&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;other&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;other&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;other&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;);
        dynamic node = xdoc.Root.AsDynamic();

        //Act
        var others = node.others;

        //Assert
        Assert.IsNotNull(others);
        Assert.IsInstanceOfType(others, typeof(XmlNodeList));
        Assert.AreEqual(3, others.Length);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pluralization isn&amp;#39;t an exact science (I&amp;#39;ve used the same logic which is used the same logic which is used by SqlMetal) so something like Child doesn&amp;#39;t become Children.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that raps it up for the introduction to my new API. It&amp;#39;s just a bit of fun, something to be used carefully (like all of the DLR :P) and hopefully someone finds it a bit of fun.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Documents in Lucene.Net</title>
            <link href="/posts/2010-07-03-documents-in-lucene-net.html"/>
            <updated>2010-07-03T00:00:00.000Z</updated>
            <id>/posts/2010-07-03-documents-in-lucene-net.html</id>
            <content type="html">&lt;p&gt;As you&amp;#39;re most likely already aware Lucene.Net is a Document Database, which means that it&amp;#39;s essentially a key/ value store, with the crux of the interaction through &lt;em&gt;Documents&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;But what is a Document?&lt;/h2&gt;
&lt;p&gt;What needs to be understood about the Document concept in Lucene.Net is that is doesn&amp;#39;t have anything to do with a file, it&amp;#39;s not a PDF, a DOCX, or a XLSX. It&amp;#39;s just a key/ value store. As I pointed out in my &lt;a href=&quot;/lucene-net-overview&quot;&gt;overview of Lucene.Net&lt;/a&gt; this framework is agnostic of anything like that.&lt;/p&gt;
&lt;p&gt;But unlike other Document Databases, such as &lt;a href=&quot;http://ravendb.net/&quot;&gt;RavenDB&lt;/a&gt;, Lucene.Net doesn&amp;#39;t allow you to put just an object into itself, you need to do it via a Document. Once a Document is inserted into the Lucene index it is then given a unique identifier (a numerical ID) and the data on the Document is stored.&lt;/p&gt;
&lt;h2&gt;Data on a Document&lt;/h2&gt;
&lt;p&gt;When pushing the data into a Lucene index it is done via Fields. A Field is &lt;em&gt;a key/ value pair&lt;/em&gt; if you want to get a very high view of it, but it&amp;#39;s really a bit more powerful that that. It&amp;#39;s true that it&amp;#39;s primary responsibility is to push data into Lucene with a string key and a string value, and providing information to Lucene about how to store that data in the index.&lt;/p&gt;
&lt;p&gt;When you&amp;#39;re adding a Field to Lucene.Net you need to work out which of the available constructors to use, as there are 9 (yes, 9!) different choices. Personally I like this particular constructor:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Field(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; name, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, Store store, Index index)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I find that it gives the most flexibility and is the most obvious as to what it&amp;#39;s doing (it&amp;#39;s not the one which we use internal of &lt;a href=&quot;http://examine.codeplex.com&quot;&gt;Examine&lt;/a&gt; we actually use a different one as we want to work with TermVectors).&lt;/p&gt;
&lt;p&gt;On top of the name (key) and value parameters there are also three others, Store, Index and TermVector. Each of these are used to define how the data is handled within the Lucene index.&lt;/p&gt;
&lt;p&gt;Also, this is where we start getting in to the part of Lucene.Net that I &lt;strong&gt;really&lt;/strong&gt; don&amp;#39;t like, static fields (I miss enums...).&lt;/p&gt;
&lt;h3&gt;Store&lt;/h3&gt;
&lt;p&gt;When first coming across Lucene the point of &lt;code&gt;Field.Store&lt;/code&gt; is a bit confusion, it has two options, YES and NO (ok, it does have a third, COMPRESS, but it&amp;#39;s been deprecated in the Java version of Lucene and replaced by a separate API which is available in Lucene.Net - &lt;code&gt;Lucene.Net.Documents.CompressionTools&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Initially looking at these two options is confusion, why would you be putting the data Field if you don&amp;#39;t want it stored? Seems a bit strange... But it comes down to what you&amp;#39;re using Lucene.Net for, and having an understanding of that will give you an understanding of what you need to set as your Field.Store value.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using Lucene.Net as a full storage model, a completely replacement of another storage model (such as a relational database) then you want to set it to Store.YES. This tells Lucene to store the value of the field, not just the tokenized version of it.&lt;/p&gt;
&lt;p&gt;If you are using Lucene.Net as just a search engine, and maintaining the actual data in a separate data store then you can get away with setting Store.NO. This means that when you are &amp;#39;hydrating&amp;#39; your entity from search you&amp;#39;ll be going elsewhere to get the actual data that is required. Essentially doing a two-phase hydration, first finding your entities using Lucene, and then their data from your data store.&lt;/p&gt;
&lt;h3&gt;Index&lt;/h3&gt;
&lt;p&gt;The Index parameter allows you to specify how the data is treated when it&amp;#39;s added to your Lucene index, and this will also effect the searching against it. Also selecting the right Index type will impact on the size of your index.&lt;/p&gt;
&lt;p&gt;There are 5 types of indexing, let&amp;#39;s start with the basic on, NO. This one is fairly obvious, and it does what you&amp;#39;re expecting. If you set your field with an Index.NO value it&amp;#39;s not going to be accessible via the Lucene searcher. If you&amp;#39;re working directly with the Document object then you can get the data (provided it&amp;#39;s Store.YES :P) it&amp;#39;s accessible via the name of the Field.&lt;/p&gt;
&lt;p&gt;There other options are about the analysis of the Field data in the index. I&amp;#39;ve looked at &lt;a href=&quot;/lucene-analyzer&quot;&gt;Analyzers in the past&lt;/a&gt; so hopefully it&amp;#39;s a concept your familiar with. Again, choosing the right option here will impact on the size of the index.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a few good rules on whether to use analysis or not with your Field:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyze if:&lt;ul&gt;
&lt;li&gt;The value contains multiple keywords&lt;/li&gt;
&lt;li&gt;The data is to be searched using multiple different ways (such as fuzzy, boosting, etc)&lt;/li&gt;
&lt;li&gt;The data does not need to be sorted against&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t analyze if:&lt;ul&gt;
&lt;li&gt;The value will only be a single word (and not a fuzzy word)&lt;/li&gt;
&lt;li&gt;The value contains multiple words but requires sorting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NORMS/ NO_NORMS really comes down to what you need to do with the value when you&amp;#39;re searching. If you use NO_NORMS then the value isn&amp;#39;t normalized and features such as boost and string-length wont be enabled.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/building-an-application-with-lucene-net&quot;&gt;In this article I&amp;#39;ve had a look at how the &lt;code&gt;Field.Store&lt;/code&gt; and &lt;code&gt;Field.Index&lt;/code&gt; can be used to make a simple application using Lucene.Net&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;TermVector&lt;/h3&gt;
&lt;p&gt;I thought I&amp;#39;d cover this even through I tend to let the default (&lt;code&gt;TermVector.NO&lt;/code&gt;) get used. TermVector is used to indicate if you want to have metadata about the &lt;em&gt;terms&lt;/em&gt; which you&amp;#39;re putting into your index. A term is the value (or values if it&amp;#39;s an analyzed Field).&lt;/p&gt;
&lt;p&gt;This can be handy if you want to know whether what&amp;#39;s being put into the index contains the same term multiple times, and potentially getting false-positives in your search. It allows you to see how many times a term exists in a Document (&lt;code&gt;TermVector.YES&lt;/code&gt;), or you can go one step further and have to stored the position in the Field value which the term appears (&lt;code&gt;TermVector.WITH_POSITIONS&lt;/code&gt;) or an offset for where the term appears in the value (&lt;code&gt;TermVector.WITH_OFFSET&lt;/code&gt;) and lastly you can go all out with &lt;code&gt;TermVector.WITH_POSITIONS_OFFSETS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use this sparingly, as it can blow out the size of your index if you store everything about everything!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So to finish off this time we&amp;#39;ve looked at the Document side of a Document Database. Understanding Documents and Fields will allow you to start getting the full power out of the Lucene.Net API.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Unit Testing with Umbraco</title>
            <link href="/posts/2010-06-29-unit-testing-with-umbraco.html"/>
            <updated>2010-06-29T00:00:00.000Z</updated>
            <id>/posts/2010-06-29-unit-testing-with-umbraco.html</id>
            <content type="html">&lt;p&gt;At &lt;a href=&quot;/codegarden-10&quot;&gt;CodeGarden 10&lt;/a&gt; I did a presentation on Unit Testing with Umbraco which was primarily looking at doing Unit Testing with ASP.NET and then have you can take those principles into doing development with Umbraco.&lt;/p&gt;
&lt;p&gt;Unfortunately the session ran way over time, but we have a good open space the following morning to look deeper into the stuff I didn&amp;#39;t have a chance to cover.&lt;/p&gt;
&lt;p&gt;The crux of my session was around using &lt;a href=&quot;http://webformsmvp.com&quot;&gt;ASP.NET WebForms MVP&lt;/a&gt; which I&amp;#39;ve doing &lt;a href=&quot;/webforms-mvp&quot;&gt;articles on in the past&lt;/a&gt;, including how to do presenters in F# :P.&lt;/p&gt;
&lt;h2&gt;Unit Testing with Umbraco&lt;/h2&gt;
&lt;p&gt;When doing unit testing with Umbraco there&amp;#39;s a few things you need to take into account:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reliance on the HttpContext&lt;/li&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of these things it&amp;#39;s quite hard to stub out a type which is reliant on static methods it&amp;#39;s quite a tricky thing, you really need to use some kind of an isolation framework like &lt;a href=&quot;http://www.typemock.com&quot;&gt;Typemock&lt;/a&gt;. And if you&amp;#39;re relying on the HttpContext then you need to either spin up Cassini/ IIS, or try and mock it out.&lt;/p&gt;
&lt;p&gt;NodeFactory is a tricky beast, it expects the XML cache, so if you don&amp;#39;t have it where it thinks it should be, then it&amp;#39;s not going to make your life easy.&lt;/p&gt;
&lt;h3&gt;Looking into Snapshot&lt;/h3&gt;
&lt;p&gt;In the past I&amp;#39;ve blogged via my work blog, &lt;a href=&quot;http://farmcode.org&quot;&gt;FarmCode.org&lt;/a&gt;, we&amp;#39;re working on a new product called &lt;a href=&quot;http://farmcode.org/page/Snapshot.aspx&quot;&gt;Snapshot&lt;/a&gt; which is designed to push out a plain ASP.NET website with no Umbraco reliances at all. During CodeGarden 10 we decided to release part of Snapshot for free, the CMS API, which is designed to abstract away the Umbraco aspect and gives you the ability to do unit testing.&lt;/p&gt;
&lt;p&gt;Snapshot exposes most of what can be done with NodeFactory, Media and &lt;code&gt;umbraco.library&lt;/code&gt;, but does so via interfaces. This means that they can be stubbed out and used for testing.&lt;/p&gt;
&lt;h2&gt;Working with ASP.NET WebForms MVP&lt;/h2&gt;
&lt;p&gt;So I wasn&amp;#39;t just using the standard ASP.NET WebForms MVP install, I was also using the Contrib project which I contribute on. I was using this for the &lt;a href=&quot;http://code.google.com/p/autofac&quot;&gt;Autofac&lt;/a&gt; integration, as I wanted to be able to dependency inject more than just the view.&lt;/p&gt;
&lt;h2&gt;Resources from the presentation&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s what you&amp;#39;ll need from my presentation to be able to dig into it yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/get/umbraco/cg10/UnitTestableUmbraco-Slides.zip&quot;&gt;Slide Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/get/umbraco/cg10/CodeGarden10.zip&quot;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/unit-testing-with-umbraco/video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully this gives you a good start for doing unit testing your own Umbraco development.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Dynamic Dictionaries with C# 4.0</title>
            <link href="/posts/2010-06-28-dynamic-dictionaries-with-csharp-4.html"/>
            <updated>2010-06-28T00:00:00.000Z</updated>
            <id>/posts/2010-06-28-dynamic-dictionaries-with-csharp-4.html</id>
            <content type="html">&lt;p&gt;Have you ever been working with the &lt;code&gt;Dictionary&amp;lt;TKey, TValue&amp;gt;&lt;/code&gt; object in .NET and just wanted to find some way in which you can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var dictionary = new Dictionary&amp;lt;string, string&amp;gt; { { &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world!&quot;&lt;/span&gt; } };
&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
var something = dictionary.hello;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;d be sweet, but it&amp;#39;s not possible. The dictionary is just a bucket and there isn&amp;#39;t a way it can know at compile type about the objects which are within it. Damn, so you just have to go via the indexer of the dictionary.&lt;/p&gt;
&lt;p&gt;But really, using dot-notation could be really cool!&lt;/p&gt;
&lt;p&gt;Well with the .NET 4.0 framework we now have a built in DLR so can we use the dynamic features of the C# 4 to this?&lt;/p&gt;
&lt;h2&gt;Introducing the DynamicObject&lt;/h2&gt;
&lt;p&gt;Well the answer is yes, yes you can do this, and it&amp;#39;s really bloody easy, in fact you can do it in about 10 lines of code (if you leave out error checking and don&amp;#39;t count curly braces :P).&lt;/p&gt;
&lt;p&gt;First off you need to have a look at the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx&quot;&gt;&lt;code&gt;DynamicObject&lt;/code&gt; which is in System.Runtime&lt;/a&gt;. There&amp;#39;s a lot of different things you can do with the &lt;code&gt;DynamicObject&lt;/code&gt; class, and things which you can change. For this we are going to work with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.trygetmember.aspx&quot;&gt;&lt;code&gt;TryGetMember&lt;/code&gt;&lt;/a&gt;, with this we just need to override the base implementation so we can add our own dot-notation handler!&lt;/p&gt;
&lt;p&gt;So lets start with a class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Dynamic;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AaronPowell&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Dynamics&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Collections&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DynamicDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TValue&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;DynamicObject&lt;/span&gt;
    {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IDictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, TValue&amp;gt; dictionary;

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DynamicDictionary(IDictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, TValue&amp;gt; dictionary)
        {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dictionary = dictionary;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially this is just going to be a wrapper for our dynamic implementation of a dictionary. So we&amp;#39;re actually making a class which has a private property which takes a dictionary instance into the constructor.&lt;/p&gt;
&lt;p&gt;Now we&amp;#39;ve got our object we need do some work to get it handle our dot-notation interaction. First we&amp;#39;ll override the base implementation:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;    &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; override bool TryGetMember(GetMemberBinder binder, out object result)
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; key = binder.Name;
        &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (dictionary.ContainsKey(key))
        {
            &lt;span class=&quot;title&quot;&gt;result&lt;/span&gt; = dictionary[key];
            &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; new KeyNotFoundException(string.Format(&lt;span class=&quot;string&quot;&gt;&quot;Key \&quot;{0}\&quot; was not found in the given dictionary&quot;&lt;/span&gt;, key));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you know what, we&amp;#39;re actually done! Now all you have to do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionary = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; {
    { &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world!&quot;&lt;/span&gt; }
};

dynamic dynamicDictionary = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DyanmicDictionary(dictionary);

Console.WriteLine(dynamicDictionary.hello); &lt;span class=&quot;comment&quot;&gt;//prints 'world'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m going to be releasing the source for this shortly (well, an improved version), along with a few other nifty uses for &lt;code&gt;dynamic&lt;/code&gt;. So keep watching this space for that ;).&lt;/p&gt;
&lt;h2&gt;Umbraco&lt;/h2&gt;
&lt;p&gt;While we were working on some sexy features for Umbraco 5 over the CodeGarden 10 retreat we kept saying that we should look at using as many of the cool new .NET framework features which we can possibly get away with. To this extent we kept saying we need to work out how to implement the &lt;code&gt;dynamic&lt;/code&gt; keyword in some way.&lt;/p&gt;
&lt;p&gt;Well that&amp;#39;s where the idea for the above code came from, in fact we&amp;#39;ve got a similar piece of code which will be usable within the framework of Umbraco 5 and entity design. But the full info on that will belong to another post ;).&lt;/p&gt;
&lt;h2&gt;Released!&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve rolled the above code (with some improvements mind you) into a new project that I&amp;#39;ve been working on for making working with dynamics in .NET a whole lot easier. You can check out my &lt;a href=&quot;/dynamics-library&quot;&gt;Dynamics Library&lt;/a&gt; and get dynamacising.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>CodeGarden 10</title>
            <link href="/posts/2010-06-27-codegarden-10.html"/>
            <updated>2010-06-27T00:00:00.000Z</updated>
            <id>/posts/2010-06-27-codegarden-10.html</id>
            <content type="html">&lt;p&gt;Well &lt;a href=&quot;http://codegarden10.com&quot;&gt;CodeGarden&lt;/a&gt;, the yearly &lt;a href=&quot;http://umbraco.org&quot;&gt;Umbraco&lt;/a&gt; festival, has come and gone for another year and it&amp;#39;s getting bigger and better each year.&lt;/p&gt;
&lt;p&gt;This was the first time there&amp;#39;s been a three-day event which was CodeGarden, with the first day being an ASP.NET MVC bootcamp day which had &lt;a href=&quot;http://codeclimber.net.nz/&quot;&gt;Simone Chiaretta&lt;/a&gt;, &lt;a href=&quot;http://weblogs.asp.net/jgalloway/&quot;&gt;Jon Galloway&lt;/a&gt; and Steven Sanderson ran two tracks, one for the beginners of MVC and one for the advanced MVC users. I must admit I missed a fair bit as I was frantically going over my code for the keynote, unit testing talk, linq vs xslt battle and Umbraco v5.&lt;/p&gt;
&lt;p&gt;But there was some really awesome stuff covered which has given us so really good ideas for v5.&lt;/p&gt;
&lt;p&gt;One other excitement this year was that day 1 and day 2 were completely recorded and Umbraco HQ will be releasing the videos soon for everyone to enjoy, and this does include the MVC stuff!&lt;/p&gt;
&lt;p&gt;There was also a &lt;a href=&quot;http://www.flickr.com/photos/tags/cg10&quot;&gt;Flickr&lt;/a&gt; stream set up so you can view the photographic history of the three days!&lt;/p&gt;
&lt;h2&gt;A day of sessions&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;main&lt;/em&gt; day of CodeGarden 10 was opened by &lt;a href=&quot;http://positivesharing.com/&quot;&gt;Alexander Kjerulf who is the Chief Happiness Officer&lt;/a&gt; of Positive Sharing. It was an awesome start to the day and really got the vibe of the rest of the day running. Alex had some great points, about putting the employees happiness first and their happiness will translate into customer happiness just makes sense. I really recommend that you check out the session.&lt;/p&gt;
&lt;p&gt;Next on stage was the man of the hour, Niels Hartvig who had some awesome stats about Umbraco, which is averaging 1000 downloads per day. Wow, really wow... He was then joined by Per who gave a great demo of the &lt;em&gt;released while we watched&lt;/em&gt; &lt;a href=&quot;http://our.umbraco.org&quot;&gt;our.umbraco.org v2&lt;/a&gt;. Some of the new features like a new skin (made of sex), better notification and posting solutions (I think I saw some inspirations from &lt;a href=&quot;http://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt; there too :P) and the move of the package repo from being an Umbraco HQ managed feature to a community managed feature. Now any package which achieves a vote of 15 or more will be downloadable from within Umbraco itself!&lt;/p&gt;
&lt;p&gt;After a round of applause for this years Umbraco MVP&amp;#39;s (well done Dirk, Lee, Warren, Richard and Doug!) it was time for yours-truely to jump on-stage for my first-of-three presentations of the day. I gave a quick run down of how to do LINQ to Umbraco to make a simple photo gallery using CWS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://farm2.static.flickr.com/1015/4731315528_8314b94ba3.jpg&quot; alt=&quot;Keynote!&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once I was done it was time for Shannon Deminick to take his turn and show off &lt;a href=&quot;http://examine.codeplex.com&quot;&gt;Examine&lt;/a&gt; and then he was awarded the honor of Umbraco Core Member of the Year. Considering all the hard work he&amp;#39;s done (Client Dependency, Examine, the new tree, unit tested data layer, and quite a few more things) it&amp;#39;s completely deserved and I&amp;#39;m sure he&amp;#39;s not going to be bringing that coffee machine to work to share (luckily I don&amp;#39;t drink coffee :P).&lt;/p&gt;
&lt;p&gt;The keynote was then wrapped up with the announcement that Umbraco 4.1 was &lt;strong&gt;not&lt;/strong&gt; being released, but instead we&amp;#39;ve bumped the version number up to &lt;a href=&quot;http://umbraco.codeplex.com/releases/view/47241&quot;&gt;4.5, which is now available&lt;/a&gt;. It&amp;#39;s so damn sweet and you really should check it out. If you&amp;#39;re not using this on every new Umbraco project then I think you&amp;#39;re just mad!&lt;/p&gt;
&lt;p&gt;Once the Keynote wrapped up Shannon was back on stage to give his Examine talk. On the main stage, to a really large audience he went well, and there was some great feedback at the end of the talk. I may be biased but Examine is a day sexy piece of software.&lt;/p&gt;
&lt;p&gt;After lunch it was my turn, I gave my talk on &lt;a href=&quot;/unit-testing-with-umbraco&quot;&gt;Unit Testing with Umbraco&lt;/a&gt;, which was to a standing-room-only crowd! I was psyched at the number of people who turned out for it and to keep with my standard tradition of talks I was epicly over time (I blame the fact that we were running late anyway :P). Because of this we took the discussion into an Open Space for the following day.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll be posting up the code and a more in-depth look at the topics shortly.&lt;/p&gt;
&lt;p&gt;I was bouncing through the other sessions for that afternoon and frantically preping for the LINQ vs XSLT battle which was during dinner (and also trying to get a sneak peak at what Warren was going to do :P).&lt;/p&gt;
&lt;p&gt;During dinner the battle was on, LINQ was showing off intellisense and compile-time validation, while XSLT was showing off quick turn around time of editing and near immediate change results. The first round was taken out narrowly by Warren because it is just quicker to hit and Umbraco UI and edit rather than spin up Visual Studio and Cassini. I took out testing as to get a really rich experience it&amp;#39;s gotta be Visual Studio and well, that&amp;#39;s .NET&amp;#39;s domain ;). The last round was a tie, although I debate the validity of an XSLT interacting with a database :P.&lt;/p&gt;
&lt;p&gt;The conclusion of the battle was that you really need to find the right tool for the job, parsing XML to do UI is just perfect in XSLT, but for interacting with an external system .NET really can&amp;#39;t be beat.&lt;/p&gt;
&lt;h2&gt;The day of community events&lt;/h2&gt;
&lt;p&gt;The final day of CodeGarden 10 was the traditional day of open space sessions. And again I was spending the day with my speakers hat on!&lt;/p&gt;
&lt;p&gt;First up I was doing a Q &amp;amp; A from my Unit Testing with Umbraco talk, looking at how to use &lt;a href=&quot;http://webformsmvp.com&quot;&gt;WebForms MVP&lt;/a&gt;, debating MVC vs MVP (which I think is a mute point) and avoiding questions about Umbraaco v5.&lt;/p&gt;
&lt;p&gt;This was followed up by the session on Why You Shouldn&amp;#39;t Use Umbraco. It was a great topic and at lot of good discussion of why Umbraco isn&amp;#39;t the always the right tool.&lt;/p&gt;
&lt;p&gt;Then &lt;a href=&quot;http://boxbinary.com&quot;&gt;Alex Norcliffe&lt;/a&gt; and I (well, mostly Alex :P) frantically worked to get the Umbraco v5 talk ready and he just fell short of getting a good code demo working (he did later that day :P). And yet again to packed out room we talked Umbraco v5. We looked at the architecture which we&amp;#39;re going with and then doing a long Q &amp;amp; A session to get community feedback on what people want to get from v5. We were really excited with the feedback and we&amp;#39;re working really hard to get more stuff sorted for it.&lt;/p&gt;
&lt;p&gt;Lastly we finished off the day with the traditional Umbraco package competition and (new this year) the Umbraco skin competition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cultiv.nl/&quot;&gt;Sebastiaan Janssen&lt;/a&gt; took out third place with his Image Meta Data package (great for photographers), I took out 2nd place with a package I created for &lt;a href=&quot;http://thefarmdigital.com.au&quot;&gt;TheFARM&lt;/a&gt;, &lt;a href=&quot;http://our.umbraco.org/projects/backoffice-extensions/thefarm-media-link-checker&quot;&gt;TheFARM Media Link Checker&lt;/a&gt;, and Shannon took it out with a multi-tree picker which he wrote that morning for an open-space session, no wonder he&amp;#39;s core developer of the year! Big thanks to all who clapped loudly and Microsoft for the XBox 360 prize!&lt;/p&gt;
&lt;p&gt;For the skin contest the UI master &lt;a href=&quot;http://www.creativewebspecialist.co.uk/&quot;&gt;Warren Buckley&lt;/a&gt; took it out with his awesome retro theme of skinning Umbraco to look like a 1990&amp;#39;s GeoCities website built by some 12 year old kid. Let&amp;#39;s hope he releases it to download :P!&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;CodeGarden 10 is by far the most fun festival I&amp;#39;ve been to recently. Notice how I keep referring to it as as a festival not a conference. This is because it is more about celebrating Umbraco, celebrating the evangelists, celebrating the MVP&amp;#39;s and celebrating the community.&lt;/p&gt;
&lt;p&gt;Well done to Umbraco HQ for getting it organised and well done to everyone who presented. It sucks that we&amp;#39;ve got to wait 12 months before we get to do it all again!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating a location service with F# and Twitter</title>
            <link href="/posts/2010-06-16-location-service-with-fsharp-and-twitter.html"/>
            <updated>2010-06-16T00:00:00.000Z</updated>
            <id>/posts/2010-06-16-location-service-with-fsharp-and-twitter.html</id>
            <content type="html">&lt;p&gt;A while ago &lt;a href=&quot;http://tath.am&quot;&gt;Tatham Oddie&lt;/a&gt; sent me a small app he&amp;#39;d built which allowed you to find recent locations which he had been at, data which is scraped via twitter (you can see it &lt;a href=&quot;http://tath.am/where&quot;&gt;here&lt;/a&gt;). It&amp;#39;s rather a nifty little thing and it&amp;#39;s done with approximately 50 lines of ruby (although I must point out that he is using some external libraries which do mean that he&amp;#39;s got a lot more code, just not all his :P).&lt;/p&gt;
&lt;p&gt;I&amp;#39;d always contemplated having a crack at doing something like this as it&amp;#39;s a good way to investigate some functional programming.&lt;/p&gt;
&lt;p&gt;Well while sitting in the Qantas club lounge waiting for my flight back from Remix earlier this month I decided to write it, using F#. Hey, why the hell not!&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;So today I finally got around to finishing the code and deploying it onto my website, in fact you can see it in action via &lt;a href=&quot;/findme&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/findme&quot;&gt;http://www.aaron-powell.com/findme&lt;/a&gt;&lt;/a&gt;. I&amp;#39;ve also made this in a way which you can test with any username, say, Tatham&amp;#39;s - &lt;a href=&quot;/findme/tathamoddie&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/findme/tathamoddie&quot;&gt;http://www.aaron-powell.com/findme/tathamoddie&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also added support for Twitter lists, so say, readify - &lt;a href=&quot;/findme/digory/readify&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/findme/digory/readify&quot;&gt;http://www.aaron-powell.com/findme/digory/readify&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What you&amp;#39;ll see is that this is actually just a redirect to Google Maps, passing in a URL like &lt;a href=&quot;/findme/kml/slace&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/findme/kml/slace&quot;&gt;http://www.aaron-powell.com/findme/kml/slace&lt;/a&gt;&lt;/a&gt;. If you hit this URL you&amp;#39;ll get back an XML file, well actually you&amp;#39;ll get back a &lt;em&gt;KML&lt;/em&gt; file, which stands for Keyhole Markup Language.&lt;/p&gt;
&lt;h3&gt;KML&lt;/h3&gt;
&lt;p&gt;KML is the markup language for geo-location which Google is backing (in fact Keyhole is the original name of the company which Google Earth came from), and all it does is defines a series of points and a series of styles.&lt;/p&gt;
&lt;p&gt;This is what a basic KML file looks like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;parser3&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&amp;lt;?xml version=&quot;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot; encoding=&quot;utf-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot; standalone=&quot;yes&quot;?&amp;gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;kml&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Document&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;@slace tracking&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;icon-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;&amp;gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IconStyle&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;color&lt;/span&gt;&amp;gt;&lt;/span&gt;ffffffff&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;color&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;colorMode&lt;/span&gt;&amp;gt;&lt;/span&gt;normal&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;colorMode&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Icon&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;href&lt;/span&gt;&amp;gt;&lt;/span&gt;http://aaron-powell.com/get/map-pins/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0010.&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;png&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;href&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Icon&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;IconStyle&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Style&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Placemark&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;001.&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; Wed &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; Jun &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;styleUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;#icon-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;styleUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;coordinates&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;151.25144901&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;, -&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;33.91480491&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;coordinates&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Placemark&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Document&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;kml&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see I define a style element (which has an image) and a point (which has the longitude and latitude). &lt;/p&gt;
&lt;p&gt;If you want to learn more about KML I suggest you look &lt;a href=&quot;http://code.google.com/apis/kml/documentation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Getting our data&lt;/h3&gt;
&lt;p&gt;As I mentioned this app is scrapping via twitter, and if you&amp;#39;re using twitter you&amp;#39;re probably aware that you can choose to geotag your tweets, most twitter clients support this.&lt;/p&gt;
&lt;p&gt;All I&amp;#39;m doing is using some of the public REST API&amp;#39;s which twitter has to pull down the data I require, and then filtering it for what I want.&lt;/p&gt;
&lt;h2&gt;Looking at some code&lt;/h2&gt;
&lt;p&gt;So we need to scrape some data from twitter. To do this you can use an existing .NET API such as &lt;a href=&quot;http://tweetsharp.codeplex.com/&quot;&gt;TweetSharp&lt;/a&gt;, but at the moment I&amp;#39;ve rolled my own very basic twitter API in F# (also, as part of my learning experience). &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer - I don&amp;#39;t suggest writing a full API in F#, it&amp;#39;s definitely not the best language for class libraries :P&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve made a simple little method which you can invoke from my API which takes a URL and gives you back the various statuses:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;let TwitterStatusGet (url:string) = 
    let webRequest = HttpWebRequest&lt;span class=&quot;variable&quot;&gt;.Create&lt;/span&gt; url

    &lt;span class=&quot;comment&quot;&gt;// set the method to GET&lt;/span&gt;
    webRequest&lt;span class=&quot;variable&quot;&gt;.Method&lt;/span&gt;  &amp;lt;- &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// set up the stream&lt;/span&gt;
    let reqStream = webRequest&lt;span class=&quot;variable&quot;&gt;.GetResponse&lt;/span&gt;()
    reqStream&lt;span class=&quot;variable&quot;&gt;.Headers&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Add&lt;/span&gt;(HttpResponseHeader&lt;span class=&quot;variable&quot;&gt;.CacheControl&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;public, max-age=300&quot;&lt;/span&gt;)
    let streamReader = new StreamReader(reqStream&lt;span class=&quot;variable&quot;&gt;.GetResponseStream&lt;/span&gt;())
    let response = streamReader&lt;span class=&quot;variable&quot;&gt;.ReadToEnd&lt;/span&gt;()

    &lt;span class=&quot;comment&quot;&gt;// close the stream&lt;/span&gt;
    reqStream&lt;span class=&quot;variable&quot;&gt;.Close&lt;/span&gt;()
    streamReader&lt;span class=&quot;variable&quot;&gt;.Close&lt;/span&gt;()

    let xml = XDocument&lt;span class=&quot;variable&quot;&gt;.Parse&lt;/span&gt;(response)
    xml&lt;span class=&quot;variable&quot;&gt;.Descendants&lt;/span&gt;(!!&lt;span class=&quot;string&quot;&gt;&quot;status&quot;&lt;/span&gt;)
        |&amp;gt; Seq&lt;span class=&quot;variable&quot;&gt;.map&lt;/span&gt;(fun e -&amp;gt; new Status(e))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is defining a method named &lt;code&gt;TwitterStatusGet&lt;/code&gt; which has a &lt;code&gt;String&lt;/code&gt; input value. This is passed to the &lt;code&gt;HttpWebRequest.Create&lt;/code&gt; method, and then we invoke the request and turn the response into XML. We then take the tranformed XML, find all the descendants with the name status and then turn them into a .NET type which I&amp;#39;ve created (the internals of it are irrelevant here), and then returns them.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;Seq.map&lt;/code&gt; is essentially an F# version of the &lt;code&gt;IEnumerable.Select&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we need to filter them for ones which haven&amp;#39;t been geotagged:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;statuses&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;TwitterStatusGet&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(&quot;http://api&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;twitter&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;com/1/statuses/user_timeline&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;xml?screen_name=&quot;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;&amp;amp;count=&quot;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;count&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;ToString())&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;taggedStatuses&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;statuses&lt;/span&gt;
                &lt;span class=&quot;comment&quot;&gt;|&lt;/span&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;Seq&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;filter(fun&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;Geo&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;Lat&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I just add a bit of code to get rid of statuses which are next to each other (saying to had several tweets from the same place isn&amp;#39;t very interesting):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;let points = new List&amp;lt;Status&amp;gt;()
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; in &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; .. &lt;span class=&quot;transposed_variable&quot;&gt;taggedStatuses.&lt;/span&gt;Count()-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; do
    let curr = &lt;span class=&quot;transposed_variable&quot;&gt;taggedStatuses.&lt;/span&gt;ElementAt(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;transposed_variable&quot;&gt;points.&lt;/span&gt;Count &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; then
        let prev = &lt;span class=&quot;transposed_variable&quot;&gt;points.&lt;/span&gt;ElementAt(&lt;span class=&quot;transposed_variable&quot;&gt;points.&lt;/span&gt;Count-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; calculate_displacement &lt;span class=&quot;transposed_variable&quot;&gt;prev.&lt;/span&gt;Geo &lt;span class=&quot;transposed_variable&quot;&gt;curr.&lt;/span&gt;Geo &amp;gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; then
            &lt;span class=&quot;transposed_variable&quot;&gt;points.&lt;/span&gt;Add(curr)
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;points.&lt;/span&gt;Add(curr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this I&amp;#39;ve got a funky little method for calculating the distance between two points:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;let rad deg = 
    deg*(Math&lt;span class=&quot;variable&quot;&gt;.PI&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;180.0&lt;/span&gt;)

let calculate_displacement (point1: LatLon) (point2: LatLon) : &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; =
    let radius = &lt;span class=&quot;number&quot;&gt;6371.0&lt;/span&gt;
    let dLat = rad(point2&lt;span class=&quot;variable&quot;&gt;.Lat&lt;/span&gt;-point1&lt;span class=&quot;variable&quot;&gt;.Lat&lt;/span&gt;)
    let dLon = rad(point2&lt;span class=&quot;variable&quot;&gt;.Lon&lt;/span&gt;-point1&lt;span class=&quot;variable&quot;&gt;.Lon&lt;/span&gt;)
    let a = Math&lt;span class=&quot;variable&quot;&gt;.Sin&lt;/span&gt;(dLat/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) * Math&lt;span class=&quot;variable&quot;&gt;.Sin&lt;/span&gt;(dLat/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) +
            Math&lt;span class=&quot;variable&quot;&gt;.Cos&lt;/span&gt;(rad(point1&lt;span class=&quot;variable&quot;&gt;.Lat&lt;/span&gt;)) * Math&lt;span class=&quot;variable&quot;&gt;.Cos&lt;/span&gt;(rad(point2&lt;span class=&quot;variable&quot;&gt;.Lat&lt;/span&gt;)) *
            Math&lt;span class=&quot;variable&quot;&gt;.Sin&lt;/span&gt;(dLon/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;) * Math&lt;span class=&quot;variable&quot;&gt;.Sin&lt;/span&gt;(dLon/&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)
    radius * (&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt; * Math&lt;span class=&quot;variable&quot;&gt;.Atan2&lt;/span&gt;(Math&lt;span class=&quot;variable&quot;&gt;.Sqrt&lt;/span&gt;(a), Math&lt;span class=&quot;variable&quot;&gt;.Sqrt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;-a)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m sure I could write this is a much &lt;em&gt;F#-y&lt;/em&gt; way, and if someone wants to do that please show me how, but we&amp;#39;re just doing some simple calculations based on the points and then returning the distance between them.&lt;/p&gt;
&lt;p&gt;The last piece of the puzzle is tranforming the unique points which we now have into KML. I&amp;#39;m going to spare that bit of code for the moment, I&amp;#39;m using LINQ to XML to do this, and working with LINQ to XML in F# requires a whole blog post of its own.&lt;/p&gt;
&lt;h2&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;So now that I&amp;#39;ve got all this data I can now just add a reference into my blog project which then return the data. I&amp;#39;ve noticed that Google Maps has a very quick timeout which means that sometimes you&amp;#39;ll get an error for your requests, but hit it again after a minute or two and it generally comes back. Also, I&amp;#39;ve added a 1 hour output cache on each request so if you do new tweets they wont appear immediately.&lt;/p&gt;
&lt;p&gt;I just set up a few simple routes which support both username and list name passing.&lt;/p&gt;
&lt;p&gt;And there you go, that&amp;#39;s how you can use twitter to scrape the data about where someone has been tweeting from. Feel free to use my service, I&amp;#39;m thinking of setting up a CG10 list which you can then track people who are coming to CodeGarden this year ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>ASP.NET MVC XML Action Result</title>
            <link href="/posts/2010-06-16-aspnet-mvc-xml-action-result.html"/>
            <updated>2010-06-16T00:00:00.000Z</updated>
            <id>/posts/2010-06-16-aspnet-mvc-xml-action-result.html</id>
            <content type="html">&lt;p&gt;For my &lt;a href=&quot;/location-service-with-fsharp-and-twitter&quot;&gt;Location Service in F#&lt;/a&gt; I needed a way to be able to return XML from MVC (which powers my site), but I couldn&amp;#39;t find a way to do this out of the box with XML.&lt;/p&gt;
&lt;p&gt;Luckily creating your very own &lt;code&gt;ActionResult&lt;/code&gt; is really quite easy in MVC.&lt;/p&gt;
&lt;p&gt;First you need to implement the &lt;code&gt;ActionResult&lt;/code&gt; class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlActionResult&lt;/span&gt; :&lt;/span&gt; ActionResult
{
    public override void ExecuteResult(ControllerContext context)
    {

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m going to add a couple of public properties:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; XDocument Xml { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; ContentType { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Encoding Encoding { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve put the &lt;code&gt;ContentType&lt;/code&gt; publicly settable so you can customize the content type which will be set on the response. And I&amp;#39;ll have a constructor which takes the &lt;code&gt;XDocument&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; XmlActionResult(XDocument xml)
    {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Xml&lt;/span&gt; = xml;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;text/xml&quot;&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Encoding&lt;/span&gt; = Encoding&lt;span class=&quot;variable&quot;&gt;.UTF8&lt;/span&gt;;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I&amp;#39;ve set the default &lt;code&gt;ContentType&lt;/code&gt; as text/xml so that&amp;#39;s what&amp;#39;ll generally be returned from the ActionResult.&lt;/p&gt;
&lt;p&gt;And implementing &lt;code&gt;ExecuteResult&lt;/code&gt; is really quite simple:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    public override void ExecuteResult(ControllerContext context)
    {
        context&lt;span class=&quot;preprocessor&quot;&gt;.HttpContext&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Response&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt; = this&lt;span class=&quot;preprocessor&quot;&gt;.ContentType&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        context&lt;span class=&quot;preprocessor&quot;&gt;.HttpContext&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Response&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.HeaderEncoding&lt;/span&gt; = this&lt;span class=&quot;preprocessor&quot;&gt;.Encoding&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        XmlTextWriter writer = new XmlTextWriter(context&lt;span class=&quot;preprocessor&quot;&gt;.HttpContext&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Response&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.OutputStream&lt;/span&gt;, Encoding&lt;span class=&quot;preprocessor&quot;&gt;.UTF&lt;/span&gt;8)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        Xml&lt;span class=&quot;preprocessor&quot;&gt;.WriteTo&lt;/span&gt;(writer)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        writer&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you have to do is to write the XML into the Response stream (you can&amp;#39;t just return the XML, if you do you&amp;#39;ll strip out the XML declaration).&lt;/p&gt;
&lt;p&gt;To then use it in your &lt;code&gt;View&lt;/code&gt; it&amp;#39;s just like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; kml = AaronPowell.FindMe.KmlGenerator.TwitterToKml(&lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt; + twitterUser + &lt;span class=&quot;string&quot;&gt;&quot; tracking&quot;&lt;/span&gt;, statuses);

        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; new XmlActionResult(kml)
        {
            &lt;span class=&quot;title&quot;&gt;ContentType&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;application/vnd.google-earth.kml+xml&quot;&lt;/span&gt;
        };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;#39;s why I left the &lt;code&gt;ContentType&lt;/code&gt; as modifiable, it means I can say that I&amp;#39;m sending out KML instead of standard XML. You can easily use this for RSS, Atom, etc. In fact I should probably port the RSS feed within this site :P.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>ASP.NET MVC Model binding with implicit operators</title>
            <link href="/posts/2010-06-14-aspnet-mvc-model-binding-with-implicit-operators.html"/>
            <updated>2010-06-14T00:00:00.000Z</updated>
            <id>/posts/2010-06-14-aspnet-mvc-model-binding-with-implicit-operators.html</id>
            <content type="html">&lt;p&gt;In the past I&amp;#39;ve had a bit of a play around with operators, I looked at &lt;a href=&quot;/why-does-this-code-work&quot;&gt;explicit and implicit operators&lt;/a&gt; and it&amp;#39;s really quite powerful.&lt;/p&gt;
&lt;p&gt;When I upgraded my website to be powered by PaulPad, and upgraded PaulPad to ASP.NET MVC2 I ran into a problem, Paul uses implicit model binding to handle the URLs. The problem was that the &lt;code&gt;ModelBindingContext&lt;/code&gt; changed between MVC1 and MVC2, resulting in the implicit operator binding implementation failing to compile!&lt;/p&gt;
&lt;h2&gt;A quick look at Model Binding&lt;/h2&gt;
&lt;p&gt;Without going too in-depth into what Model Binding is all about, essentially it&amp;#39;s how to map the posted data from a form to a .NET object. It&amp;#39;s great if you want to handle custom objects from UI to back-end. It&amp;#39;s not as required in MVC2 as it was in MVC1, but if you want to do something like implicit operators, well that&amp;#39;s where we&amp;#39;re going to need it.&lt;/p&gt;
&lt;p&gt;If you want to learn more on Model Binding you can just &lt;a href=&quot;http://google.com&quot;&gt;Google&lt;/a&gt; it with &lt;a href=&quot;http://bing.com&quot;&gt;Bing&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Implementing implicit Model Binding&lt;/h2&gt;
&lt;p&gt;To get started we need to make a class that inherits from &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.mvc.imodelbinder.aspx&quot;&gt;&lt;code&gt;IModelBinder&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImplicitAssignmentBinder&lt;/span&gt; :&lt;/span&gt; IModelBinder
{
    public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
    {
        throw new NotImplementedException();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now that we&amp;#39;ve got our stub type we need to start implementing it. The first thing we need to do is see if we&amp;#39;ve got an implicit operator between our CLR types. We can do this with a few simple LINQ statements:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var implicitAssignment = bindingContext&lt;span class=&quot;preprocessor&quot;&gt;.ModelType&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.GetMethods&lt;/span&gt;(BindingFlags&lt;span class=&quot;preprocessor&quot;&gt;.Public&lt;/span&gt; | BindingFlags&lt;span class=&quot;preprocessor&quot;&gt;.DeclaredOnly&lt;/span&gt; | BindingFlags&lt;span class=&quot;preprocessor&quot;&gt;.Static&lt;/span&gt;)
    &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Name&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;op_Implicit&quot;&lt;/span&gt;)
    &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; bindingContext&lt;span class=&quot;preprocessor&quot;&gt;.ModelType&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.IsAssignableFrom&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ReturnType&lt;/span&gt;))
    &lt;span class=&quot;preprocessor&quot;&gt;.FirstOrDefault&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re using reflection to look for an implicit operator. If you&amp;#39;re using reflection to locate an operator they are always prefixed with &lt;strong&gt;op_&lt;/strong&gt;, and if you&amp;#39;re looking for an implicit operator, then it&amp;#39;s named &lt;strong&gt;Implicit&lt;/strong&gt; (explicit operators are op_Explicit).&lt;/p&gt;
&lt;p&gt;Next we need to find one which is an implicit cast to the type we actually wanting to return. This is provided to us from the &lt;code&gt;bindingContext&lt;/code&gt; information which we are provided with.&lt;/p&gt;
&lt;p&gt;Then we just grab the first (or default), as there will only ever be zero or one match (we could use SingleOrDefault, but FirstOrDefault is slightly faster).&lt;/p&gt;
&lt;p&gt;All that&amp;#39;s left is to get the data into the right type to be returned:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var value = bindingContext&lt;span class=&quot;preprocessor&quot;&gt;.ValueProvider&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.GetValue&lt;/span&gt;(bindingContext&lt;span class=&quot;preprocessor&quot;&gt;.ModelName&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.RawValue&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
result = implicitAssignment&lt;span class=&quot;preprocessor&quot;&gt;.Invoke&lt;/span&gt;(null, new object[] { value })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we&amp;#39;re just dynamically invoking the implicit operator we found before, pass in the data we were provided and then return.&lt;/p&gt;
&lt;p&gt;And here&amp;#39;s the completed class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;ImplicitAssignmentBinder&lt;/span&gt; : &lt;span class=&quot;id&quot;&gt;IModelBinder&lt;/span&gt;&lt;/span&gt;
{
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
    {
        var implicitAssignment = bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelType&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.GetMethods&lt;/span&gt;(BindingFlags&lt;span class=&quot;variable&quot;&gt;.Public&lt;/span&gt; | BindingFlags&lt;span class=&quot;variable&quot;&gt;.DeclaredOnly&lt;/span&gt; | BindingFlags&lt;span class=&quot;variable&quot;&gt;.Static&lt;/span&gt;)
            &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(x =&amp;gt; x&lt;span class=&quot;variable&quot;&gt;.Name&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;op_Implicit&quot;&lt;/span&gt;)
            &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(x =&amp;gt; bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelType&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.IsAssignableFrom&lt;/span&gt;(x&lt;span class=&quot;variable&quot;&gt;.ReturnType&lt;/span&gt;))
            &lt;span class=&quot;variable&quot;&gt;.FirstOrDefault&lt;/span&gt;();

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (implicitAssignment == null)
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new ArgumentException(string&lt;span class=&quot;variable&quot;&gt;.Format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The Implicit Assignment Binder was being applied to this request, but the target type was '{0}', which does not provide an implicit assignment operator.&quot;&lt;/span&gt;, bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelType&lt;/span&gt;));

        var result = null as object;

        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
        {
            var value = bindingContext&lt;span class=&quot;variable&quot;&gt;.ValueProvider&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.GetValue&lt;/span&gt;(bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelName&lt;/span&gt;)&lt;span class=&quot;variable&quot;&gt;.RawValue&lt;/span&gt;;
            result = implicitAssignment&lt;span class=&quot;variable&quot;&gt;.Invoke&lt;/span&gt;(null, new object[] { value });
        }
        &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)
        {
            var message = string&lt;span class=&quot;variable&quot;&gt;.Format&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;An exception occurred when trying to convert the paramater named '{0}' to type '{1}'. {2}&quot;&lt;/span&gt;, 
                bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelName&lt;/span&gt;, 
                bindingContext&lt;span class=&quot;variable&quot;&gt;.ModelType&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Name&lt;/span&gt;,
                ex&lt;span class=&quot;variable&quot;&gt;.Message&lt;/span&gt;
                );
            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; new ArgumentException(message, ex);
        }

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see here I&amp;#39;ve got the error handling also included ;).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Supporting ValueTypes in Autofac</title>
            <link href="/posts/2010-06-09-supporting-valuetypes-in-autofac.html"/>
            <updated>2010-06-09T00:00:00.000Z</updated>
            <id>/posts/2010-06-09-supporting-valuetypes-in-autofac.html</id>
            <content type="html">&lt;p&gt;Today I had an interesting problem with Autofac in which I was registering an &lt;code&gt;Enum&lt;/code&gt; that I wanted to inject into my different objects. Some of the injection was being done on the properties, as this is an ASP.NET project and I wanted to inject into are UserControls.&lt;/p&gt;
&lt;p&gt;But when ever I was doing it, I wasn&amp;#39;t getting the registered value. My component registry was working file, if I manually tried to get it out it worked fine, but the property was not set!&lt;/p&gt;
&lt;p&gt;This was getting really frustrating, so after a bit of debugging into the Autofac source I found that the problem was that during the wiring up there is a check of each property of the object to see if it is able to be injected. One of the conditions to ignore the property is whether it&amp;#39;s a ValueType.&lt;/p&gt;
&lt;p&gt;Now I&amp;#39;m not going to speculate about why it&amp;#39;s this way, I have a hunch but that&amp;#39;s beyond the scope of what I want to answer here, what I want to answer is the &lt;em&gt;how&lt;/em&gt; to do it.&lt;/p&gt;
&lt;h2&gt;Working with Autofac events&lt;/h2&gt;
&lt;p&gt;Autofac has a very nice feature of firing events during the component life cycle, for this we&amp;#39;ll use the &lt;code&gt;OnActivating&lt;/code&gt; event which takes a delegate. The argument that gets passed into the method has all the data you could need to perform your changes to the object.&lt;/p&gt;
&lt;p&gt;Well here&amp;#39;s the delegate that you can use to inject ValueType properties:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;variable&quot;&gt;.OnActivating&lt;/span&gt;(x =&amp;gt;
{
    var instance = x&lt;span class=&quot;variable&quot;&gt;.Instance&lt;/span&gt;;
    var instanceType = x&lt;span class=&quot;variable&quot;&gt;.Instance&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.GetType&lt;/span&gt;();
    var context = x&lt;span class=&quot;variable&quot;&gt;.Context&lt;/span&gt;;
    foreach (Reflection&lt;span class=&quot;variable&quot;&gt;.PropertyInfo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; in instanceType&lt;span class=&quot;variable&quot;&gt;.GetProperties&lt;/span&gt;(Reflection&lt;span class=&quot;variable&quot;&gt;.BindingFlags&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Public&lt;/span&gt; | Reflection&lt;span class=&quot;variable&quot;&gt;.BindingFlags&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Instance&lt;/span&gt; | Reflection&lt;span class=&quot;variable&quot;&gt;.BindingFlags&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.SetProperty&lt;/span&gt;))
    {
        var propertyType = &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.PropertyType&lt;/span&gt;;
        &lt;span class=&quot;comment&quot;&gt;//only look for ValueType's which are actually registered!&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyType&lt;span class=&quot;variable&quot;&gt;.IsValueType&lt;/span&gt; &amp;amp;&amp;amp; context&lt;span class=&quot;variable&quot;&gt;.IsRegistered&lt;/span&gt;(propertyType))
        {
            object propertyValue = context&lt;span class=&quot;variable&quot;&gt;.Resolve&lt;/span&gt;(propertyType);
            &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.SetValue&lt;/span&gt;(instance, propertyValue, null);
        }
    }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully this will solve a problem if you come across it yourself.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Writing Presenters with F#</title>
            <link href="/posts/2010-05-30-writing-presenters-with-fsharp.html"/>
            <updated>2010-05-30T00:00:00.000Z</updated>
            <id>/posts/2010-05-30-writing-presenters-with-fsharp.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Disclaimer: I&amp;#39;m not an F# developer, I&amp;#39;m really only just learning and having a bit of a play around.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;What&lt;/h1&gt;
&lt;p&gt;After a few beers the other day I had a great idea, why not write a demo of using WebForms MVP and F#. Sure, seems fun, seems crazy, seems like a silly idea! :P&lt;/p&gt;
&lt;p&gt;But there was method in my (alcohol induced) madness, looking in F# as an option for development isn&amp;#39;t a bad idea. F# as a functional languages offers some advantages which can&amp;#39;t be achieved with a static language like C# or VB.NET, and since it does have some OO principles we can define types, use inheritance, all the stuff we can do with the other languages, so why can&amp;#39;t we use it in a web scope?&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not the first people who&amp;#39;s tried using &lt;a href=&quot;http://tomasp.net/articles/aspnet-fsharp-intro.aspx&quot;&gt;F# with ASP.NET&lt;/a&gt;, it&amp;#39;s more about applying it in a different manner, in the scope of the WebForms MVP.&lt;/p&gt;
&lt;p&gt;Hey, if this really works why couldn&amp;#39;t you work with F# and Umbraco ;).&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;First step is the need to create a F# Class library (I&amp;#39;m going to separate my UI into a standard C# web project for this):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/web-dev/fsharp-01.PNG&quot; alt=&quot;New Project&quot;&gt;&lt;/p&gt;
&lt;p&gt;So for this I&amp;#39;m going to create a very simple little &lt;code&gt;Hello World&lt;/code&gt; demo, so for this I&amp;#39;m going to require 2 classes, I need a Presenter and a Model. Clear out the default files and next I make one called &lt;code&gt;HelloWorldPresenter&lt;/code&gt;, it&amp;#39;s just a standard F# Script file. Then I create a separate one called &lt;code&gt;HelloWorldModel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Keep in mind that the order of types does matter in F#, so since (as I&amp;#39;ve stated) the Model file is created 2nd it&amp;#39;ll appear in the project 2nd. You&amp;#39;ll need to move it up to above the other file so that the type does get created by the time we actually need it.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s define our types:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;namespace WebFormsMvp.FSharp.Views.Models

type HelloWorldModel = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;title&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;msg&lt;/span&gt; :&lt;/span&gt; string

    new() = {
        msg = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;
    }

    member self.Message
        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; get() = self.msg
        &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; set (value) = self.msg &amp;lt;- value
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here I&amp;#39;m just defining a simple class with a string property which can be modified (hence the &lt;code&gt;mutable&lt;/code&gt; keyword). It&amp;#39;s a very basic Model, it&amp;#39;s not really complex but it&amp;#39;ll give you the idea of what can be done.&lt;/p&gt;
&lt;p&gt;Next let&amp;#39;s make a Presenter:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebFormsMvp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FSharp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Presenters&lt;/span&gt;

&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebFormsMvp&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebFormsMvp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FSharp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Views&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Models&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebFormsMvp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FSharp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Wrapper&lt;/span&gt;

&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorldPresenter&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;title&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PresenterBase&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IView&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;HelloWorldModel&lt;/span&gt;&amp;gt;&amp;gt;

    &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;view&lt;/span&gt;) &lt;span class=&quot;title&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt; = {&lt;/span&gt;
        inherit PresenterBase&amp;lt;IView&amp;lt;HelloWorldModel&amp;gt;&amp;gt;(view)
    }

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; self.OnLoad(sender, e) = 
        self.View.Model.Message &amp;lt;- &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; self.ReleaseView() = ()    
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we need to import and few namespaces, we need the WebFormsMvp namespace, the namespace for my Model class, and I&amp;#39;ve also imported the namespace of a base class which I&amp;#39;ve made to help. For some reason (most likely my lack of knowledge around F#) I was getting a compile error when creating the event handler, you should be able to do this in the constructor:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Load&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Add&lt;/span&gt;(fun (sender:obj) (args:EventArgs) -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Message&lt;/span&gt; &amp;lt;- &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But as I said, that was creating a compile error so I created a base class (in C#) which assigned the event handler for me which I can then override.&lt;/p&gt;
&lt;p&gt;That aside we can use the base class method to write to the Model.Message property, which ultimately, is what we want to do.&lt;/p&gt;
&lt;p&gt;All that&amp;#39;s left is that we need to create a C# Web Application Project and start the final implementation. Let&amp;#39;s see how that looks:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; WebFormsMvp;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; WebFormsMvp.FSharp.Presenters;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; WebFormsMvp.FSharp.Views.Models;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; WebFormsMvp.Web;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebformsMvp&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;FShap&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Web&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;UserControls&lt;/span&gt;
{&lt;/span&gt;
    [PresenterBinding(typeof(HelloWorldPresenter))]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; partial &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;MvpUserControl&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;HelloWorldModel&lt;/span&gt;&amp;gt;, &lt;span class=&quot;title&quot;&gt;IView&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;HelloWorldModel&lt;/span&gt;&amp;gt;
    {&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks exactly like the &lt;code&gt;HelloWorldPresenter&lt;/code&gt; came from any other language class library!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/web-dev/fsharp-02.PNG&quot; alt=&quot;It works!&quot;&gt;&lt;/p&gt;
&lt;p&gt;It just works like you&amp;#39;d expect it to.&lt;/p&gt;
&lt;h2&gt;Now What?&lt;/h2&gt;
&lt;p&gt;Well this was really just a thought experiment, looking at how we could be a bit unconventional in your development approach. Whether or not this is viable in a real-world scenario is a matter of perspective. Currently for me it&amp;#39;s not viable, but that&amp;#39;s really because I don&amp;#39;t have much in the way of F# skills.&lt;/p&gt;
&lt;p&gt;If you were an F# developer this is an easy way to go about integrating F# into an ASP.NET Web Forms application, and in a unit-testable manner.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Analyzers in Lucene.Net</title>
            <link href="/posts/2010-05-27-lucene-analyzer.html"/>
            <updated>2010-05-27T00:00:00.000Z</updated>
            <id>/posts/2010-05-27-lucene-analyzer.html</id>
            <content type="html">&lt;h2&gt;What is an Analyzer?&lt;/h2&gt;
&lt;p&gt;When you want to insert data into a Lucene index, or when you want to get the data back out of the index you will need to use an Analyzer to do this.&lt;/p&gt;
&lt;p&gt;Lucene ships with many different Analyzers and picking the right one really comes down to the needs of your implementation. There are ones for working with different languages, ones which determine how words are treated (and which words to be ignored) or how whitespace is handled.&lt;/p&gt;
&lt;p&gt;Because Analyzers are used for both indexing and searching you can use different ones for each operation if you want. It&amp;#39;s not generally best practice to use different Analyzers, if you do you may have terms handled differently. If you used a WhitespaceAnalyzer when you do your indexing but a StopAnalyzer for retrieval although the word &amp;quot;and&amp;quot; is fine for indexing it wont be found when searching.&lt;/p&gt;
&lt;h2&gt;Common Analyzers&lt;/h2&gt;
&lt;p&gt;Not all of the Analyzers are useful in common scenarios, hopefully this will help you work out which one to use for your scenarios.&lt;/p&gt;
&lt;h3&gt;Keyword Analyzer&lt;/h3&gt;
&lt;p&gt;This Analyzer will treat the string as a single search term, so if you needed to handle say a product name (which has spaces in it) as a single search term then this is likely the one you want. It doesn&amp;#39;t concern itself with stop words or anything of the like, but it&amp;#39;s not really that good if you&amp;#39;ve got a large block of text that you want to insert into the index.&lt;/p&gt;
&lt;h3&gt;Stop Analyzer &amp;amp; Standard Analyzer&lt;/h3&gt;
&lt;p&gt;These are the most common Analyzers you&amp;#39;ll come across when working with Lucene, in fact the StandardAnalyzer is the default one which is used within Examine (you can specify in the config the Analyzer for both indexing and searching though).&lt;/p&gt;
&lt;p&gt;The StandardAnalyzer actually combines parts of the StopAnalyzer, StadnardFilter &amp;amp; LowerCaseFilter. The StandardAnalyzer understands English punctuation for breaking down words (hyphens, etc), words to ignore (via the StopAnalyzer) and &lt;strong&gt;technically&lt;/strong&gt; case insensitive searching (by doing lowercase comparisons).&lt;/p&gt;
&lt;p&gt;The StopAnalyzer (which is &lt;strong&gt;kind of&lt;/strong&gt; a lesser version of the StandardAnalyzer) understands standard English words to ignore. This actually got me unstuck at one point, I was trying to search on the letter A in a field (which only contained a single letter) and any match with the letter A was being ignored. This is because the following list of words are skipped over by the Analyzer:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;dos&quot;&gt;&quot;a&quot;, &quot;an&quot;, &quot;and&quot;, &quot;are&quot;, &quot;as&quot;, &quot;at&quot;, &quot;be&quot;, &quot;but&quot;, &quot;by&quot;, &quot;&lt;span class=&quot;flow&quot;&gt;for&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;flow&quot;&gt;if&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;flow&quot;&gt;in&lt;/span&gt;&quot;, &quot;into&quot;, &quot;is&quot;, &quot;it&quot;, &quot;no&quot;, 
&quot;&lt;span class=&quot;flow&quot;&gt;not&lt;/span&gt;&quot;, &quot;of&quot;, &quot;on&quot;, &quot;or&quot;, &quot;such&quot;, &quot;that&quot;, &quot;the&quot;, &quot;their&quot;, &quot;then&quot;, &quot;there&quot;, &quot;these&quot;, &quot;they&quot;, &quot;this&quot;, 
&quot;to&quot;, &quot;was&quot;, &quot;will&quot;, &quot;with&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if I was to search on &lt;code&gt;this world rocks&lt;/code&gt; then I&amp;#39;d only have matches on &lt;code&gt;world&lt;/code&gt; or &lt;code&gt;rocks&lt;/code&gt;, the word &lt;code&gt;this&lt;/code&gt; is ignored.&lt;/p&gt;
&lt;h3&gt;Whitespace Analyzer&lt;/h3&gt;
&lt;p&gt;The WhitespaceAnalyzer is also a bit of a sub-set of the StandardAnalyzer, where it understands word breaks in English text, based on spaces and line breaks.&lt;/p&gt;
&lt;p&gt;This Analyzer is great if  you want to search on any English word, it doesn&amp;#39;t ignore stop words so you can search on &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;the&lt;/code&gt; if required. This was how I got around the problem I described above.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Understanding Analyzers can be a tricky aspect of Lucene, and it can be the cause of some grief if they are not properly handled.&lt;/p&gt;
&lt;p&gt;The general rule of the thumb is that the StandardAnalyzer will do what you require, giving you well structured results and filter out irrelevant English language words, but the other main Analyzers will help filter down results based in your requirements.&lt;/p&gt;
&lt;p&gt;And if you feel like getting really crazy (or you&amp;#39;re dealing with non-English content) there are plenty of other Analyzers within Lucene you can look int.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Client Event Pool</title>
            <link href="/posts/2010-05-23-client-event-pool.html"/>
            <updated>2010-05-23T00:00:00.000Z</updated>
            <id>/posts/2010-05-23-client-event-pool.html</id>
            <content type="html">&lt;p&gt;I read an article last year about implementing a &lt;a href=&quot;http://seejoelprogram.wordpress.com/2008/07/31/a-client-event-pool-in-javascript/&quot;&gt;Client Event Pool&lt;/a&gt; and I really liked the concept. Joel shows a very good way to use it but I&amp;#39;ve been doing my best to find a logical use for it myself.&lt;/p&gt;
&lt;p&gt;Anyone not familiar with the concept of a Client Event Pool it&amp;#39;s covered in Joel&amp;#39;s post, but the short version is that a Client Event Pool is a browser-level event handler which is designed to allow events to be easily passed between unlinked components.
One component can raise an event which can be chosen to be handled by any other. Inversly events can be listened for even if the component isn&amp;#39;t on the page or the event isn&amp;#39;t used.&lt;/p&gt;
&lt;p&gt;This isn&amp;#39;t really a new concept, you can achieve it (to a certain extent) with standard ASP.NET, with the OnClient&lt;EventName&gt; which is on a lot of the standard ASP.NET controls.&lt;/p&gt;
&lt;p&gt;And in this article I&amp;#39;m going to look at how to integrate a Client Event Pool with the ASP.NET AJAX Control Toolkit&amp;#39;s Modal Popup.
Now, don&amp;#39;t get me wrong, this isn&amp;#39;t the only way to add the events to a modal popup control, there are a lot of event handlers which can be added without a Client Event Pool.&lt;/p&gt;
&lt;p&gt;This all came about when I was tasked with integrating a login, forgotten password and change password component. Each were their own modal popups and each were separate .NET UserControls. I wasn&amp;#39;t involved with developing any of them, and I didn&amp;#39;t want to really do much to modify any of them too much and introduce more bugs in the system by screwing around with stuff I&amp;#39;m not familiar with.
Because they are all separate I didn&amp;#39;t have a real way to pass the ID of the control that was to make the popup appear. Oh, and to make thing more complicated there were 2 links for each popup, sadly the Modal Popup doesn&amp;#39;t support multiple controls to do the poping-up (or as far as I&amp;#39;m aware...)&lt;/p&gt;
&lt;p&gt;I also didn&amp;#39;t want each of the popups to overlay each other, it doesn&amp;#39;t really look that good (as I&amp;#39;ll show shortly), so I needed a way to hide the master popup when the child was shown, and then when the child was hidden I want the master to reappear.&lt;/p&gt;
&lt;p&gt;So I&amp;#39;m doing 3 basic controls for my example, a Login control:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1944/picture%201_398x285.jpg&quot; alt=&quot;&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/media/1944/picture%201.png&quot;&gt;Full size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a Forgotten Password control:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1949/picture%202_499x164.jpg&quot; alt=&quot;&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/media/1949/picture%202.png&quot;&gt;Full size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a Registration control:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1954/picture%203_497x245.jpg&quot; alt=&quot;&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/media/1954/picture%203.png&quot;&gt;Full size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And add a dash of CSS and you get a lovely little popup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1959/picture%204.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(Ok, so my design skills aren&amp;#39;t great!)&lt;/p&gt;
&lt;p&gt;So now it&amp;#39;s time to tie up the master control with the child controls. To do this I&amp;#39;m going to have 2 events raised from the child controls, one for when the popup is shown and one for when it is hidden.
I&amp;#39;m also going to have an event which can be raised elsewhere on each child control which will initiate the showing of the popup (you could add one for the hiding, but I&amp;#39;m using the inbuilt hiding from the CancelControlID property of the modal popup).&lt;/p&gt;
&lt;p&gt;For each they will look as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1969/picture%206_499x69.jpg&quot; alt=&quot;&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/media/1964/picture%205.png&quot;&gt;Full size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets have a look at how they work, first off I locate the the &lt;code&gt;Sys.Component&lt;/code&gt; instance of the ModalPopup control.
There are &lt;code&gt;showing&lt;/code&gt; and &lt;code&gt;hiding&lt;/code&gt; events fired off from the ModalPopup, so I&amp;#39;m going to add a handler, the handler though will just be a stub which in-turn raises an event within our Client Event Pool. I&amp;#39;ve given them names which will indicate what they are used for.
Lastly I&amp;#39;m going to add an event handler so anyone can raise an event which will show the popup.&lt;/p&gt;
&lt;p&gt;Now lets have a look in the Login control:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1979/picture%207_498x245.jpg&quot; alt=&quot;&quot;&gt;&lt;a href=&quot;http://www.aaron-powell.com/media/1979/picture%207.png&quot;&gt;Full size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first 2 lines of this is adding event handlers to the links on the control. All they do is tell the Client Event Pool to raise an event, an event which I previously set up to be consumed by the child controls.&lt;/p&gt;
&lt;p&gt;Next we set up the Client Event Pool to listen for the hide and show events from our child controls.
It listens for the events to be raised and when they are it&amp;#39;ll either hide or show the modal on the current page.
Admittedly I&amp;#39;ve gone a little bit overboard with my events between the two child controls. Each could just raise events like &lt;code&gt;hideParent&lt;/code&gt; and &lt;code&gt;showParent&lt;/code&gt;, and then I would only need 2 handlers against the Client Event Pool, but to illistrate my point I&amp;#39;ve gone the verbos method.&lt;/p&gt;
&lt;p&gt;Now I&amp;#39;ve gone for having the popups showing like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1974/picture%208.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1984/picture%209.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Admittedly static images can&amp;#39;t really show how it works, but it&amp;#39;s much nicer to not overlay popups, and ability to having popups automatically hiding and showing the loss-of-focus ones is a really sweet idea.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll admit that it&amp;#39;s possible to do this without the need for a Client Event Pool, you can expose all the appropriate properties on the child controls which then can be set appropriately within it&amp;#39;s parent, but think of it a step further, if you wanted a link on the Forgot Password to the Registration page. Because they aren&amp;#39;t really aware of each other it is very difficult to achieve (but not impossible). Your UserControl can also expose wrappers to the Showing and Hiding client events on the modal popup, but it still has the same problem as mentioned previously.&lt;/p&gt;
&lt;p&gt;And there we have it, a nice little example of how to use a Client Event Pool to make it easier to link previously unlinked components in a soft way.&lt;/p&gt;
&lt;p&gt;The source code for this article can be found &lt;a href=&quot;/get/web-dev/clienteventpooldemo.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Framework agnostic&lt;/h2&gt;
&lt;p&gt;So in the above demo I&amp;#39;ve shown how to play around with it if you&amp;#39;re using MS Ajax, but not every site we build will have MS Ajax as part of it.&lt;/p&gt;
&lt;p&gt;I was recently doing a build where I wanted to use the event pool concept, but didn&amp;#39;t want to use MS Ajax. So I set about simulating the concept in a framework agnostic way. &lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;EventManager = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    var &lt;span class=&quot;keyword&quot;&gt;events&lt;/span&gt; = &lt;span class=&quot;cell&quot;&gt;{}&lt;/span&gt;;

    var getEvent = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[id]&lt;/span&gt;) &lt;span class=&quot;cell&quot;&gt;{
            events[id] = [];
        }&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[id]&lt;/span&gt;;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cell&quot;&gt;{
        bind: function (name, fn) {
            var e = getEvent(name);
            e.push(fn);
        }&lt;/span&gt;,
        trigger: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(name, source, args)&lt;/span&gt; {&lt;/span&gt;
            var evt = getEvent(name);
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!evt || (&lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; null;
            evt = &lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;matrix&quot;&gt;[evt[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;] : &lt;span class=&quot;transposed_variable&quot;&gt;Array.&lt;/span&gt;apply(null, evt);
            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, l = &lt;span class=&quot;transposed_variable&quot;&gt;evt.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; l; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
                if (args.constructor !== Array) args = [args];
                evt[i].apply(source, args);
            }&lt;/span&gt;
        }
    };

})();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a global &lt;code&gt;EventManager&lt;/code&gt; object (which sits at the window level) which has a &lt;code&gt;bind&lt;/code&gt; and &lt;code&gt;trigger&lt;/code&gt; event (which is the naming convention used by jQuery).&lt;/p&gt;
&lt;p&gt;You &lt;code&gt;bind&lt;/code&gt; to &lt;code&gt;EventManager&lt;/code&gt; an event name you want to listen for, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;EventManager.&lt;/span&gt;bind(&lt;span class=&quot;string&quot;&gt;'hideParent'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(args) &lt;span class=&quot;cell&quot;&gt;{ /* do stuff */ }&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; property is actually an array of all the arguments passed into the method by the &lt;code&gt;trigger&lt;/code&gt; method, which is used like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;EventManager.&lt;/span&gt;trigger(&lt;span class=&quot;string&quot;&gt;'hideParent'&lt;/span&gt;, this, &lt;span class=&quot;cell&quot;&gt;{ Hello: &lt;span class=&quot;string&quot;&gt;'World'&lt;/span&gt; }&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;args&lt;/code&gt; can really be anything, from an object to an array, but I like to use single objects when passing around. You also need to pass in an object into the 2nd parameter which defines what will be used for the &lt;code&gt;this&lt;/code&gt; scope of the event handlers which are triggered.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this has been a bit of fun looking at how you can use MS Ajax or a generic implementation of a client event pool to have disconnected AJAX functionality.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>ASP.NET WebForms Model-Video-Presenter</title>
            <link href="/posts/2010-05-18-webforms-mvp.html"/>
            <updated>2010-05-18T00:00:00.000Z</updated>
            <id>/posts/2010-05-18-webforms-mvp.html</id>
            <content type="html">&lt;p&gt;ASP.NET WebForms MVP is a really handy project which aims to bring testability to WebForms development.&lt;/p&gt;
&lt;h2&gt;WebForms MVP Contrib&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/webforms-mvp-contrib&quot;&gt;A look at the ASP.NET WebForms MVP Contrib project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Hits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/testing-messaging-within-a-presenter&quot;&gt;Testing messaging within a presenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/unit-testing-with-umbraco&quot;&gt;Unit Testing with Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fun Stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/writing-presenters-with-fsharp&quot;&gt;Writing Presenters with F#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Testing Messaging Within a Presenter</title>
            <link href="/posts/2010-05-18-testing-messaging-within-a-presenter.html"/>
            <updated>2010-05-18T00:00:00.000Z</updated>
            <id>/posts/2010-05-18-testing-messaging-within-a-presenter.html</id>
            <content type="html">&lt;p&gt;Cross-Presenter messaging is a great way which you can have two presenters which don&amp;#39;t know about each other, but may have a reliance on data from the other.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s a &lt;a href=&quot;http://wiki.webformsmvp.com/index.php?title=SC009&quot;&gt;good demo&lt;/a&gt; up on the WebForms MVP wiki which shows how it can be implemented.&lt;/p&gt;
&lt;p&gt;One really handy feature of this is that you can have something happen when the message never arrives. Lets say for example we have a presenter which shows a set of promotions pulled from a global store. But I also want the ability to set the promotions on a per-page basis. So if there&amp;#39;s no promo&amp;#39;s for this page I want to see the global ones.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ll have my promotions presenter like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;PromoPresenter&lt;/span&gt; : &lt;span class=&quot;id&quot;&gt;Presenter&lt;/span&gt;&amp;lt;&lt;span class=&quot;id&quot;&gt;IView&lt;/span&gt;&amp;lt;&lt;span class=&quot;id&quot;&gt;PromoModel&lt;/span&gt;&amp;gt;&amp;gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IPromoService service;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; PromoPresenter(IView&amp;lt;PromoModel&amp;gt; view, IPromoService service) : base(view) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.service&lt;/span&gt; = service;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Load&lt;/span&gt; += View_Load;
    }

    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View_Load(object sender, EventArgs e) {
        &lt;span class=&quot;comment&quot;&gt;//TODO&lt;/span&gt;
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; ReleaseView() {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Load&lt;/span&gt; -= View_Load;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I need to add some functionality to the &lt;code&gt;View_Load&lt;/code&gt; method so that it loads in from either the messages or not (ignore the implementation of IPromoService, it&amp;#39;s not important for this demo).&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View_Load(object sender, EventArgs e) {
        Messages&lt;span class=&quot;variable&quot;&gt;.Subscribe&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;IPromo&amp;gt;&amp;gt;(promos =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Promos&lt;/span&gt; = promos, () =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Promos&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.GetGlobalPromos&lt;/span&gt;());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we also need a &lt;code&gt;PagePresenter&lt;/code&gt; which may have promo boxes that are in-context to display.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;id&quot;&gt;PagePresenter&lt;/span&gt; : &lt;span class=&quot;id&quot;&gt;Presenter&lt;/span&gt;&amp;lt;&lt;span class=&quot;id&quot;&gt;IView&lt;/span&gt;&amp;lt;&lt;span class=&quot;id&quot;&gt;PageModel&lt;/span&gt;&amp;gt;&amp;gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; IContentService service;

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; PagePresenter(IView&amp;lt;PageModel&amp;gt; view, IContentService service) : base(view) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.service&lt;/span&gt; = service;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Load&lt;/span&gt; += View_Load;
    }

    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View_Load(object sender, EventArgs e) {
        var page = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.CurrentPage&lt;/span&gt;();
        &lt;span class=&quot;comment&quot;&gt;//set some model stuff about the page&lt;/span&gt;
        Messages&lt;span class=&quot;variable&quot;&gt;.Publish&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;IPromo&amp;gt;&amp;gt;(page&lt;span class=&quot;variable&quot;&gt;.Promotions&lt;/span&gt;);
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; ReleaseView() {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.View&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Load&lt;/span&gt; -= View_Load;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;This is pretty simple, and it &lt;em&gt;should just work&lt;/em&gt;, but I&amp;#39;m a good developer, so how do I setup the unit tests to ensure that the right methods are called?&lt;/p&gt;
&lt;p&gt;We need to simulate the underlying MessageBus of WebForms MVP, but that&amp;#39;s nothing you need to worry about when working with WebForms MVP, it does that on our behalf.&lt;/p&gt;
&lt;p&gt;And this is a situation I found myself in, I wanted to test both the message received and message not received functionality. So I started off looking into the source for WebForms MVP, they have tests kind of doing what I wanted, but not the full end-to-end which I required.&lt;/p&gt;
&lt;p&gt;So let&amp;#39;s look at how to do it:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A few assumptions, I&amp;#39;m using MS Test and RhinoMocks&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public void PromoPresenterTests_From_Service_When_No_Message_Published() {
    //Arrange
    var view = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateStub&lt;/span&gt;&amp;lt;IView&amp;lt;PromoModel&amp;gt;&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    view&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt; = new PromoModel()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var service = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateMock&lt;/span&gt;&amp;lt;IContentService&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;preprocessor&quot;&gt;.Expect&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.GetGlobalPromos&lt;/span&gt;())&lt;span class=&quot;preprocessor&quot;&gt;.Return&lt;/span&gt;(MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.CreateStub&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;IPromo&amp;gt;&amp;gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var presenter = new PromoPresenter(view, service)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var messageCoordinator = new MessageCoordinator()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    presenter&lt;span class=&quot;preprocessor&quot;&gt;.Messages&lt;/span&gt; = messageCoordinator&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Act
    view&lt;span class=&quot;preprocessor&quot;&gt;.Raise&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Load&lt;/span&gt; += null, null, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    presenter&lt;span class=&quot;preprocessor&quot;&gt;.ReleaseView&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    messageCoordinator&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Assert
    Assert&lt;span class=&quot;preprocessor&quot;&gt;.IsNotNull&lt;/span&gt;(view&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Promos&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;preprocessor&quot;&gt;.VerifyAllExpectations&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s not much different I&amp;#39;d have done if it was just a standard WebForms MVP test (or any other test for that matter) but I&amp;#39;m putting an expectation of my IContentService that I am calling the &lt;code&gt;GetGlobalPromos&lt;/code&gt; method. What comes back is not important, just that something comes back.&lt;/p&gt;
&lt;p&gt;Next you need to setup a &lt;code&gt;MessageCoordinator&lt;/code&gt;. This is what is responsible for the MessageBus, handling the publishing and subscription of the events.&lt;/p&gt;
&lt;p&gt;You can either make a mock version if you want to be really explicit and set an expectation on the &lt;code&gt;Messages.Subscribe&lt;/code&gt; call, but I&amp;#39;m not wanting that. I&amp;#39;ll just use the &lt;code&gt;MessageCoordinator&lt;/code&gt; class which comes from WebForms MVP itself. This also means that I&amp;#39;m getting it operate pretty much the same as if it was really running.&lt;/p&gt;
&lt;p&gt;Since this test is verifying the &lt;em&gt;no messages published&lt;/em&gt; operation I just want to close the MessageCoordinator as soon as I&amp;#39;ve raised the &lt;code&gt;View.Load&lt;/code&gt; event, (which is where the subscription happens).&lt;/p&gt;
&lt;p&gt;Next we&amp;#39;ll test the &lt;code&gt;Message.Publish&lt;/code&gt; will work like we expect it to:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public void PromoPresenterTests_No_Service_When_Published() {
    //Arrange
    var view = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateStub&lt;/span&gt;&amp;lt;IView&amp;lt;PromoModel&amp;gt;&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    view&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt; = new PromoModel()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var service = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateMock&lt;/span&gt;&amp;lt;IContentService&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var presenter = new PromoPresenter(view, service)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var messageCoordinator = new MessageCoordinator()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    presenter&lt;span class=&quot;preprocessor&quot;&gt;.Messages&lt;/span&gt; = messageCoordinator&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Act
    view&lt;span class=&quot;preprocessor&quot;&gt;.Raise&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Load&lt;/span&gt; += null, null, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    presenter&lt;span class=&quot;preprocessor&quot;&gt;.ReleaseView&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    messageCoorindator&lt;span class=&quot;preprocessor&quot;&gt;.Publish&lt;/span&gt;(MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.CreateStub&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;IPromo&amp;gt;&amp;gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    messageCoordinator&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Assert
    Assert&lt;span class=&quot;preprocessor&quot;&gt;.IsNotNull&lt;/span&gt;(view&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Promos&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;preprocessor&quot;&gt;.AssertWasNotCalled&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.GetGlobalPromos&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test is basically the same as the last one, but instead of setting an expectation on the &lt;code&gt;GetGlobalPrommos&lt;/code&gt; method I&amp;#39;m putting an &lt;code&gt;AssertWasNotCalled&lt;/code&gt; which is an extension method from RhinoMocks.&lt;/p&gt;
&lt;p&gt;Also, we&amp;#39;re doing a &lt;code&gt;Publish&lt;/code&gt; via our MessageCoordinator, before we close it off, which is how we would expect it to run in the web implementation (yes, you could setup an expectation on your mock objects if you want to go deeply into it).&lt;/p&gt;
&lt;h3&gt;PagePresenter?&lt;/h3&gt;
&lt;p&gt;You&amp;#39;ll notice that the tests here are only covering the &lt;code&gt;PromoPresenter&lt;/code&gt;, not the &lt;code&gt;PagePresenter&lt;/code&gt;. Well to do a full test you would need something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public void PromoPresenterTests_Published_From_Other_Presenter() {
    //Arrange
    var promoView = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateStub&lt;/span&gt;&amp;lt;IView&amp;lt;PromoModel&amp;gt;&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    promoView&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt; = new PromoModel()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var service = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateMock&lt;/span&gt;&amp;lt;IContentService&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var promoPresenter = new PromoPresenter(promoView, service)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var messageCoordinator = new MessageCoordinator()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    promoPresenter&lt;span class=&quot;preprocessor&quot;&gt;.Messages&lt;/span&gt; = messageCoordinator&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var pageView = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateStub&lt;/span&gt;&amp;lt;IView&amp;lt;PageModel&amp;gt;&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var page = MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.GenerateStub&lt;/span&gt;&amp;lt;IPage&amp;gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    page&lt;span class=&quot;preprocessor&quot;&gt;.Stub&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Promotions&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Return&lt;/span&gt;(MockRepository&lt;span class=&quot;preprocessor&quot;&gt;.CreateStub&lt;/span&gt;&amp;lt;IEnumerable&amp;lt;IPromo&amp;gt;&amp;gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;preprocessor&quot;&gt;.Stub&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.CurrentPage&lt;/span&gt;())&lt;span class=&quot;preprocessor&quot;&gt;.Return&lt;/span&gt;(page)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var pagePresenter = new PagePresenter(pageView, service)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Act
    promoView&lt;span class=&quot;preprocessor&quot;&gt;.Raise&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Load&lt;/span&gt; += null, null, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    pageView&lt;span class=&quot;preprocessor&quot;&gt;.Raise&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Load&lt;/span&gt; += null, null, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    promoPresenter&lt;span class=&quot;preprocessor&quot;&gt;.ReleaseView&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    pagePresenter&lt;span class=&quot;preprocessor&quot;&gt;.ReleaseView&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    messageCoordinator&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    //Assert
    Assert&lt;span class=&quot;preprocessor&quot;&gt;.IsNotNull&lt;/span&gt;(view&lt;span class=&quot;preprocessor&quot;&gt;.Model&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Promos&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    service&lt;span class=&quot;preprocessor&quot;&gt;.AssertWasNotCalled&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.GetGlobalPromos&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re creating both presenters, using their views and raising their load events so that the Messages should be passed around correctly.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Messaging system of WebForms MVP is really powerfully, and hopefully this has show you just how you can do all your unit testing around it.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Dealing with type-casting limitations</title>
            <link href="/posts/2010-04-25-dealing-with-type-casting-limitations.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-dealing-with-type-casting-limitations.html</id>
            <content type="html">&lt;p&gt;Well this is the first post involving the .NET 4.0 framework, woo :D.&lt;/p&gt;
&lt;p&gt;Something I&amp;#39;ve had a problem with from within the abstract service lay which we use at TheFARM.
It&amp;#39;s a limitation of the .NET framework and how you can do type casting within the .NET framework.&lt;/p&gt;
&lt;p&gt;The way we use our service layer is to never return classes, we only return interfaces, so you can&amp;#39;t write a method which looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;IProduct&amp;gt; GetProducts() { 
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctx&lt;span class=&quot;variable&quot;&gt;.Products&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.AsEnumerable&lt;/span&gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will throw an exception, even if the class Product implements the IProduct interface. To achieve it you need to do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;public IEnumerable&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IProduct&lt;/span&gt;&amp;gt;&lt;/span&gt; GetProducts() { 
  return ctx.Products.Cast&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IProduct&lt;/span&gt;&amp;gt;&lt;/span&gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a bit of a pain if you&amp;#39;re doing complex type conversion though, particularly with our &lt;a href=&quot;http://farmcode.org/post/2009/02/24/Linq-to-Umbraco.aspx&quot;&gt;LINQ to Umbraco framework&lt;/a&gt; (&lt;em&gt;not the actual LINQ to Umbraco framework coming in Umbraco 4.1&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The problem really came up when I decided I wanted to change from using a constructor which takes an XElement, so you could write cleaner code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;IUmbEvent&amp;gt; GetEvents() 
{ 
    XElement xNode = UmbXmlLinqExtensions&lt;span class=&quot;variable&quot;&gt;.GetNodeByXpath&lt;/span&gt;(EventContainerXPath); 

    var eventData = xNode 
        &lt;span class=&quot;variable&quot;&gt;.UmbSelectNodes&lt;/span&gt;() &lt;span class=&quot;comment&quot;&gt;//selects all descendant &quot;node&quot; nodes &lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//selects nodes of a certain alias &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.UmbSelectNodesWhereNodeTypeAlias&lt;/span&gt;(EventNodeTypeAlias) 
        &lt;span class=&quot;comment&quot;&gt;//This does the object conversion &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.Select&lt;/span&gt;(x =&amp;gt; (UmbEvent)x) 
        &lt;span class=&quot;comment&quot;&gt;//ensure we don't return events with no start date &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(x =&amp;gt; x&lt;span class=&quot;variable&quot;&gt;.FromDate&lt;/span&gt; != DateTime&lt;span class=&quot;variable&quot;&gt;.MinValue&lt;/span&gt;); 

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eventData&lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;IUmbEvent&amp;gt;(); 
} &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still we&amp;#39;re doing a Select and a Cast, since now I&amp;#39;ve got an &lt;a href=&quot;/why-does-this-code-work&quot;&gt;explicit operator&lt;/a&gt; defined for doing the conversion between XElement and UmbEvent, so I thought, why can&amp;#39;t I just do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;IUmbEvent&amp;gt; GetEvents() 
{ 
    XElement xNode = UmbXmlLinqExtensions&lt;span class=&quot;variable&quot;&gt;.GetNodeByXpath&lt;/span&gt;(EventContainerXPath); 

    var eventData = xNode 
        &lt;span class=&quot;variable&quot;&gt;.UmbSelectNodes&lt;/span&gt;() &lt;span class=&quot;comment&quot;&gt;//selects all descendant &quot;node&quot; nodes &lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//selects nodes of a certain alias &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.UmbSelectNodesWhereNodeTypeAlias&lt;/span&gt;(EventNodeTypeAlias) 
        &lt;span class=&quot;comment&quot;&gt;//This does the object conversion &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;UmbEvent&amp;gt;() 
        &lt;span class=&quot;comment&quot;&gt;//ensure we don't return events with no start date &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(x =&amp;gt; x&lt;span class=&quot;variable&quot;&gt;.FromDate&lt;/span&gt; != DateTime&lt;span class=&quot;variable&quot;&gt;.MinValue&lt;/span&gt;); 

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eventData&lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;IUmbEvent&amp;gt;()&lt;span class=&quot;variable&quot;&gt;.ToList&lt;/span&gt;(); 
} &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But alas that wont work, due to the way the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb341406.aspx&quot;&gt;Cast&lt;TResult&gt;&lt;/a&gt; method works it&amp;#39;s not possible, very annoying.
So I can&amp;#39;t directly return a collection of types which implement the required interface, and I can&amp;#39;t use the Cast method to just do all the conversions, I have to write select methods.
This just means I have a bunch of code smell, it&amp;#39;s not really causing any problems, it&amp;#39;s just ugly. I do love some clean code, and this isn&amp;#39;t really it :(&lt;/p&gt;
&lt;p&gt;So I thought, why not write my own extension method to do the casts, something that has a return statement like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (TInterface)(TType)item;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming that &lt;code&gt;TType&lt;/code&gt; inherits &lt;code&gt;TInterface&lt;/code&gt;, you can write generic constrictions which handles that, but you will receive a compile error, it can&amp;#39;t be confirmed by the compiler that the type of item implements an explicit operator to cast it as TType.&lt;/p&gt;
&lt;p&gt;Damn, looks like we can&amp;#39;t do it with .NET 3.5.&lt;/p&gt;
&lt;h2&gt;Enter the world of .NET 4.0&lt;/h2&gt;
&lt;p&gt;So I decided to see if I can actually achieve it, no matter what was required, but I didn&amp;#39;t want the code to look &lt;em&gt;too terrible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As I&amp;#39;m sure you&amp;#39;re all aware .NET 4.0 is bringing in a new keyword, &lt;code&gt;dynamic&lt;/code&gt;, which then in turn works with the DLR to do the runtime operation. And you know what, we can leverage the runtime feature to delay the conversion.&lt;/p&gt;
&lt;p&gt;Lets have a look at the extension method, and then we&amp;#39;ll break it down:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;public static IEnumerable&amp;lt;TInterface&amp;gt; AsType&amp;lt;TType, TInterface&amp;gt;(this IEnumerable source)
    where TInterface : &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;
    &lt;span class=&quot;title&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TType&lt;/span&gt; :&lt;/span&gt; TInterface, new()
{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!typeof(TInterface).IsInterface)
    {
        throw new ArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;TInterface must be an Interface type&quot;&lt;/span&gt;);
    }

    foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; source)
    {
        dynamic d = item;
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (TInterface)(TType)d; 
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I&amp;#39;ve got an extension method which has 3 types in it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type for the collection items&lt;/li&gt;
&lt;li&gt;Type of the class&lt;/li&gt;
&lt;li&gt;Type of the interface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;m doing a check of the &lt;code&gt;TInterface&lt;/code&gt; type to make sure it is an Interface, if it&amp;#39;s not then we&amp;#39;d have a problem :P&lt;/p&gt;
&lt;p&gt;The really exciting part is this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var item in source)&lt;/span&gt;
{
    &lt;span class=&quot;title&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;d&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;;
    &lt;span class=&quot;title&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;TInterface&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;TType&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;; 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we enumerate through our collection, &lt;em&gt;but turn each item into a &lt;code&gt;dynamic&lt;/code&gt; version&lt;/em&gt;! This means we can then do the complete type conversion and &lt;code&gt;delay its evaluation until runtime&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Woo! Now I can have code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;IEnumerable&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt; numbers = Enumerable.Range(0, 10);
IEnumerable&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IMyType&lt;/span&gt;&amp;gt;&lt;/span&gt; casted = numbers.AsType&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MyType,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;IMyType&lt;/span&gt;&amp;gt;&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, now I can make my service method like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;IUmbEvent&amp;gt; GetEvents() 
{ 
    XElement xNode = UmbXmlLinqExtensions&lt;span class=&quot;variable&quot;&gt;.GetNodeByXpath&lt;/span&gt;(EventContainerXPath); 

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xNode 
        &lt;span class=&quot;variable&quot;&gt;.UmbSelectNodes&lt;/span&gt;() &lt;span class=&quot;comment&quot;&gt;//selects all descendant &quot;node&quot; nodes &lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;.AsType&lt;/span&gt;&amp;lt;UmbEvent, IUmbEvent&amp;gt;()
        &lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(x =&amp;gt; x&lt;span class=&quot;variable&quot;&gt;.FromDate&lt;/span&gt; != DateTime&lt;span class=&quot;variable&quot;&gt;.MinValue&lt;/span&gt;); 
} &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So pretty, I&amp;#39;m much happier... well once I can get to use more .NET 4.0.
Oh, and yes, there is a performance hit for this, since we&amp;#39;re using the DLR the conversion is evaluated at runtime, not compile time. It&amp;#39;s probably not huge (I didn&amp;#39;t do any performance testing), but just something to be kept in mind.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2009, a year in review</title>
            <link href="/posts/2010-04-25-2009-a-year-in-review.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-2009-a-year-in-review.html</id>
            <content type="html">&lt;p&gt;So a new decade is upon us and with 2009 wrapped up it&amp;#39;s time to look retrospectively at the year that was.&lt;/p&gt;
&lt;p&gt;2009 was the biggest year professionally that I&amp;#39;ve had, the whole year has been filled with new adventures into the development world.&lt;/p&gt;
&lt;p&gt;At the start of the year I announced my first Open Source project, the Umbraco Interaction Layer (UIL) was ceasing development as I&amp;#39;d joined the Umbraco core development team.&lt;/p&gt;
&lt;p&gt;I had lot of fun delving into LINQ in greater depths, like commenting on the &lt;a href=&quot;/query-syntax-vs-method-syntax&quot;&gt;difference between LINQ query syntax vs LINQ methods syntax&lt;/a&gt;, then having more fun by writing a &lt;a href=&quot;/linq-in-javascript&quot;&gt;JavaScript LINQ implementation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next I took up a pleasure of mine, doing bizar coding, first with &lt;a href=&quot;/recursive-anonymous-functions&quot;&gt;recursive anonymous self executing functions in JavaScript&lt;/a&gt; and then I wrote &lt;a href=&quot;/recursive-anonymous-functions-the-net-version&quot;&gt;it in .NET too&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Also I was luck enough to get invited to Code Garden 09 in Copenhagen, which was an awesome trip and a great chance to meet other Umbracians from around the world. One of the outcomes was the first AUSPAC webinar (with the 2nd coming in the new year).
Also coming out of my Denmark trip was a new employment opportunity which saw me moving from my home town of Melbourne to Sydney to join Shannon at TheFARM.&lt;/p&gt;
&lt;p&gt;Umbraco managed to get out Umbraco 4.1 Beta 1 on time, although the scheduled has since been revised (there will be more information coming shortly on this).
And to celebrate the occasion I released a set of &lt;a href=&quot;/training-videos&quot;&gt;videos on using LINQ to Umbraco&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then to finish the year off I released a new Open Source project, &lt;a href=&quot;/webforms-mvp-contrib&quot;&gt;ASP.NET Web Forms Model-View-Presenter Contrib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What a busy year! Hopefully 2010 can prove to be just as exciting :D&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Working with dates and LINQ to SQL</title>
            <link href="/posts/2010-04-25-working-with-dates-and-linq-to-sql.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-working-with-dates-and-linq-to-sql.html</id>
            <content type="html">&lt;p&gt;Something I&amp;#39;ve heard developers complain about on numerous occasion is that DateTime comparisons between SQL and .NET is a real pain. Often you need to do a comparison of the date against either a Min or Max value.&lt;/p&gt;
&lt;p&gt;With raw .NET this is really quite easy, you can just use the DateTime struct and grab DateTime.MinValue or DateTime.MaxValue.&lt;/p&gt;
&lt;p&gt;But if you&amp;#39;ve ever done this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;var res = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Collection 
          &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;.CreatedDate != DateTime.MinValue 
          select &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll get the following exception thrown:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;http&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;SqlTypeException&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that &lt;code&gt;DateTime.MinValue&lt;/code&gt; is actually &lt;strong&gt;01/01/0001 12:00:00 AM&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So I&amp;#39;ve quite often seen hacks where a new date is being created which represent the minimum value of the SQL server, and all kinds of weird things, but that&amp;#39;s all redundant.
The comparision value is built into the .NET framework.&lt;/p&gt;
&lt;p&gt;All you need to use is &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqltypes.sqldatetime.aspx&quot;&gt;System.Data.SqlTypes.SqlDateTime&lt;/a&gt; structure. This exposes two fields, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqltypes.sqldatetime.minvalue.aspx&quot;&gt;MinValue&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqltypes.sqldatetime.maxvalue.aspx&quot;&gt;MaxValue&lt;/a&gt;. All you need to do is access the Value property of these and pass it into your LINQ statement.
The date will be parsed correctly as a SQL valid date and you can do your comparisons!&lt;/p&gt;
&lt;p&gt;So please, stop with any silly workaround for date comparisons with SQL and .NET :P&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why I'm not a fan of XSLT</title>
            <link href="/posts/2010-04-25-why-im-not-a-fan-of-xslt.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-why-im-not-a-fan-of-xslt.html</id>
            <content type="html">&lt;p&gt;When I first joined the Umbraco team with the goal of bringing LINQ to Umbraco to the core framework there was some excitement and quite a bit of the early excitement was from Umbraco MVP &lt;a href=&quot;http://www.creativewebspecialist.co.uk/&quot;&gt;Warren Buckley&lt;/a&gt;.
And with the recent beta release the focus has come back onto LINQ to Umbraco, myself and XSLT.&lt;/p&gt;
&lt;p&gt;While preparing to write this post I was tossing up with the name. Although I&amp;#39;ve entitled it &amp;quot;Why I&amp;#39;m not a fan of XSLT&amp;quot; it would have been just as apt to name it &amp;quot;Why write LINQ to Umbraco?&amp;quot;.&lt;/p&gt;
&lt;p&gt;As you read through this post I was you to keep in mind that I&amp;#39;m not someone who is really that good at XPath and XSLT. In fact, my dislike for XSLT is why I wrote LINQ to Umbraco!&lt;/p&gt;
&lt;p&gt;But why, being an Umbraco user, don&amp;#39;t i like XSLT? After all, it&amp;#39;s a fairly core part of Umbraco!&lt;/p&gt;
&lt;h2&gt;Compile time checking&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s right, I&amp;#39;m very much a developer, and very much a compiler-driven developer. Runtime errors really are the worst to try and debug, and that&amp;#39;s what you really get with XPath. XPath is evaluated at runtime (yes, that&amp;#39;s a bit generalized :P), so if you have something wrong in your syntax you wont find it immediately.&lt;/p&gt;
&lt;p&gt;Compare that to .NET code, it&amp;#39;s very hard to write .NET code which wont compile. True that you can still get runtime errors, but they are a lot harder to achieve in the scenario&amp;#39;s we&amp;#39;re looking at for LINQ to Umbraco vs XSLT.&lt;/p&gt;
&lt;h2&gt;Strong typing&lt;/h2&gt;
&lt;p&gt;Again, another example of me being very much a developer, I would much rather look at an object with properties which knows of the type of the data.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not careful you can mistake the type and then you, again, have a runtime error :P.
The .NET compiler wont let you assign a string to an int.&lt;/p&gt;
&lt;h1&gt;Readability&lt;/h1&gt;
&lt;p&gt;This one will cause a bit of a stir, but I simply don&amp;#39;t find XPath &amp;amp; XSLT readable. Take these two examples:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//node[nodeTypeAlias='home_page']/node[nodeTypeAlias='contact_us' nodeName='Contact Aaron']&lt;/span&gt;

ctx&lt;span class=&quot;variable&quot;&gt;.HomePages&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.ContactUs&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(c =&amp;gt; c&lt;span class=&quot;variable&quot;&gt;.Name&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;Contact Aaron&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My example is very basic, but if you look into a more complex XSLT file (such as many which exists in Warrens CWS package). In fact, in the unit tests for LINQ to Umbraco there is a replication of a few of them (have a look in the source on Codeplex if you want to see them).&lt;/p&gt;
&lt;p&gt;A very important component of code for me is readability. When debugging, especially if the code isn&amp;#39;t yours to begin with, readability is a vital component. You don&amp;#39;t want to have to waste time trying to understand what&amp;#39;s going on in the code before trying to solve it.
And if you can&amp;#39;t work out the code properly then there&amp;#39;s a chance you&amp;#39;ll just make the problem worse.&lt;/p&gt;
&lt;h2&gt;API Design&lt;/h2&gt;
&lt;p&gt;Again I&amp;#39;ll probably cause a stir with this one again but it&amp;#39;s another thing that is very dear to my heart. I am a strong believer in proper API design, and if it&amp;#39;s done wrong then it can make your life hell in the future.&lt;/p&gt;
&lt;p&gt;I also like abstractions. LINQ to Umbraco is an example of that... provider model! Here at The FARM we&amp;#39;ve got a great level of abstraction which we use, we don&amp;#39;t pass classes around, only interfaces, which means that your UI is dumb, really really dumb.
There isn&amp;#39;t any business logic contained there, and there&amp;#39;s nothing more complex than a method call.&lt;/p&gt;
&lt;p&gt;But too often when I see an XSLT it&amp;#39;s containing more than just UI code. And this isn&amp;#39;t really a fault of XSLT, but of how it&amp;#39;s perceived. When you look at an ASPX/ ASCX people have a different mindset, you don&amp;#39;t put anything really in the front-end file other than the markup as there is a CS file associated which you think to put the other complex code into.
But with an XSLT there isn&amp;#39;t another file, so everything ends up there.&lt;/p&gt;
&lt;p&gt;Then it becomes too complex to try and achieve with XSLT &lt;em&gt;cough variable incrementing cough&lt;/em&gt; so an XSLT extension is written. And I&amp;#39;ve seen some really scary XSLT extensions, which allow you to do things which just make me want to cringe.&lt;/p&gt;
&lt;p&gt;XSLT should only be concerned with formatting data to output markup...&lt;/p&gt;
&lt;h2&gt;XSLT&amp;#39;s produce better markup&lt;/h2&gt;
&lt;p&gt;Anyone who says that is ill-informed. If you don&amp;#39;t think you can write valid, XHTML markup with ASP.NET Web Forms then you&amp;#39;re not doing it right!&lt;/p&gt;
&lt;p&gt;Control Adapters, Repeaters, List View, inline script blocks, etc can all be used to produce what ever markup you so desire.
And it doesn&amp;#39;t take much effort to produce good markup with ASP.NET. In fact, with Visual Studio 2008 it&amp;#39;s really hard to use the standard editor to produce crappy markup.&lt;/p&gt;
&lt;p&gt;The biggest problem is ID&amp;#39;s of elements, but you only have that problem if the element is:&lt;/p&gt;
&lt;p&gt;Inside a naming container
Set to runat=&amp;quot;server&amp;quot;
And you should only be setting runat=&amp;quot;server&amp;quot; on elements you need server-side access to, but that&amp;#39;s a topic for another night.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So this brings me to the end of another post. Hopefully it&amp;#39;s been enlightening and I haven&amp;#39;t upset too many people :P&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why does this code work?</title>
            <link href="/posts/2010-04-25-why-does-this-code-work.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-why-does-this-code-work.html</id>
            <content type="html">&lt;p&gt;In the discussion on the Umbraco forum about using LINQ to Umbraco I posted a short code snippet of something we write fairly frequently at &lt;a href=&quot;http://www.farmcode.org/post/2009/02/24/Linq-to-Umbraco.aspx&quot;&gt;TheFARM using our version of LINQ with Umbraco&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I thought I&amp;#39;d post the challenge to my trusty followers, for them to see if they know why the code works. First off the code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;IEnumerable&amp;lt;XElement&amp;gt; nodes = UmbXmlLinqExtensions.GetNodeByXpath(&lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;); 
IEnumerable&amp;lt;IUmbracoPage&amp;gt; pages = nodes.Select(n =&amp;gt;(IUmbracoPage)(UmbracoPage)n);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What the XPath being evaluated isn&amp;#39;t important, what is important is you&amp;#39;ll notice that we have a collection of &lt;code&gt;System.Xml.Linq.XElement&lt;/code&gt;&amp;#39;s, but then it&amp;#39;s directly casting each XElement to &lt;code&gt;IUmbracoPage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the skeleton for the class and interface:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;public interface IUmbracoPage { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; } 
public class UmbracoPage : IUmbracoPage { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again the body of the interface isn&amp;#39;t important, what is important is that the class only inherits from the interface, it does not inherit from XElement.&lt;/p&gt;
&lt;h3&gt;Why does this work&lt;/h3&gt;
&lt;p&gt;Well the answer is actually very simple, and it&amp;#39;s a really handy feature of the C# language, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/xhbhezf4.aspx&quot;&gt;explicit operators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Explicit operators allow you to define explicit casting between types. So the code that was missing from my original post was this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; UmbracoPage(XElement x) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UmbracoPage(x);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve done here is defined how the compiler is to treat a casting of an XElement to an instance of UmbracoPage, and since UmbracoPage inherits IUmbracoPage there is already a defined casting to it.&lt;/p&gt;
&lt;p&gt;Inside the body of my explicit operator I can do anything I desire, here I&amp;#39;m just returning a new instance, passing the XElement to the constructor.&lt;/p&gt;
&lt;p&gt;I find it really quite elegant, and that it reduces code smell quite nicely.&lt;/p&gt;
&lt;p&gt;But explicit operators also have a buddy, in the form of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/z5z9kes2.aspx&quot;&gt;implicit operators&lt;/a&gt; (which was the close-but-no-cigar answer). These work by the type being defined by the assignment target, eg:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;UmbracoPage&lt;/span&gt; page = xElement;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m personally not a fan of implicit operators though, I find them less obvious when you&amp;#39;re reading code.&lt;/p&gt;
&lt;p&gt;So there you have it, a slightly obscure language feature to play with!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Oh woe is (Mobile)Me</title>
            <link href="/posts/2010-04-25-oh-woe-is-mobile-me.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-oh-woe-is-mobile-me.html</id>
            <content type="html">&lt;p&gt;Anyone who is (lucky enough to be) on my msn contact list (and signed in during my work hours) will have seen something curious happening over the past week since I returned back to work.&lt;/p&gt;
&lt;p&gt;For those of you not, basically I was signing in and out constantly with a frequency of say every 10 minutes.
This oddly made is surprisingly hard to hold a conversation with someone.
But more problematic was that not only was msn dropping out but the whole internet was. You could hardly even achieve a successful Google search.&lt;/p&gt;
&lt;p&gt;And this wasn&amp;#39;t just a problem for me, but for everyone here at TheFARM.&lt;/p&gt;
&lt;p&gt;The first assumption was that it was something wrong with our ISP, we&amp;#39;re not on a super faster internet connection, and no one had problems outside of work, so it seemed like a logical assumption... right?&lt;/p&gt;
&lt;p&gt;Well it turns out that when you assume you make an ass out of you and me (ha, see what I did there! :P).
The problem wasn&amp;#39;t our internet, in fact the problem could be blamed on one individual, yep you guessed it, me :(.&lt;/p&gt;
&lt;p&gt;Turns out that when I wasn&amp;#39;t on the network everything was fine, everyone could use the web, chat on msn, do what ever they wanted, but as soon as I plugged in, BAM, the internet died.
So after a bit of detective work (mostly by Shannon) it was concluded that my computer was doing something nasty to the network.
So we cracked out a copy of &lt;a href=&quot;http://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; and decided to do some detective work with packet sniffing.&lt;/p&gt;
&lt;p&gt;Immediately it was obvious what was happening, I was flooding our DNS server with requests, requests that the DNS server was returned as invalid. 
The requests kept looking for a URL along the lines of tcp.members.mac.com and after a bit of searching it turned out that that URL is related to the Apple MobileMe service.
So Shan asked if I was signed up with MobileMe, to which I responded &amp;quot;I don&amp;#39;t believe so&amp;quot;, but it turned out again I was wrong, I had signed up to MobileMe, but it must have been when I first got my iPhone.
When you get an iPhone you can sign up with a 60 day trail, something I must have done (hey, it said I was signed in, guess I signed up at some point :P).
After doing some quick math I concluded that it was ~60 days since I got my iPhone when we first started having internet problems (the last working week last year).&lt;/p&gt;
&lt;p&gt;I instantly signed out of MobileMe, and low and behold the DNS flooding stopped happening!&lt;/p&gt;
&lt;p&gt;Thank you Apple for producing a service which is capable of bringing down an office network, you&amp;#39;ve just made sure I strongly consider not purchasing MobileMe in the future!&lt;/p&gt;
&lt;p&gt;Oh and I&amp;#39;m never going to live this down at work, Shan isn&amp;#39;t a fan of Apple so this is just adding fuel to the fire!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Handy extension method for null-coalesing</title>
            <link href="/posts/2010-04-25-handy-extension-method-for-null-coalesing.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-handy-extension-method-for-null-coalesing.html</id>
            <content type="html">&lt;p&gt;Today a colleague asked me a question:&lt;/p&gt;
&lt;p&gt;&amp;quot;How do you do a null-coalesce operator which will return a property of an object when not null?&amp;quot;&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not familiar with the null coalesce operator it&amp;#39;s the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms173224.aspx&quot;&gt;??&lt;/a&gt; operator and it can be used for inline expressions when the test object is null.&lt;/p&gt;
&lt;p&gt;You use it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;string test = null&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(test ?? &lt;span class=&quot;string&quot;&gt;&quot;The string was null&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it either returns itself or it returns your value, but what if you want to return a property of the object not itself, well you can&amp;#39;t use the ?? operator.&lt;/p&gt;
&lt;p&gt;But never fear, extension methods are here! I wrote this quick little one for him:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;public static TResult NullCoalese&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TTarget,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/span&gt;(this TTarget o, Func&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TTarget,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/span&gt; func, TResult whenNull) {
  return o == null ? whenNull : func(o);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stick this in a namespace, maybe restrict the type of &lt;code&gt;TTarget&lt;/code&gt; (or leave it as anything in .NET land, what ever takes your fancy, but if you don&amp;#39;t restrict it maybe don&amp;#39;t leave it in a common namespace!) and use it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;string test = null&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
test&lt;span class=&quot;preprocessor&quot;&gt;.NullCoalese&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; Console&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;Null was suppled&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enjoy :).&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Exception thrown when using XSLT extensions</title>
            <link href="/posts/2010-04-25-exception-thrown-when-using-xslt-extensions.html"/>
            <updated>2010-04-25T00:00:00.000Z</updated>
            <id>/posts/2010-04-25-exception-thrown-when-using-xslt-extensions.html</id>
            <content type="html">&lt;p&gt;This is a question I was asked today but it&amp;#39;s also something which I have come across myself when creating XSLT extensions.&lt;/p&gt;
&lt;p&gt;Have you ever had this exception thrown?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.MissingMethodException: No
parameterless constructor defined for
this object.&lt;/p&gt;
&lt;p&gt;at
System.RuntimeTypeHandle.CreateInstance(RuntimeType
type, Boolean publicOnly, Boolean
noCheck, Boolean&amp;amp; canBeCached,
RuntimeMethodHandle&amp;amp; ctor, Boolean&amp;amp;
bNeedSecurityCheck) at
System.RuntimeType.CreateInstanceSlow(Boolean
publicOnly, Boolean fillCache) at
System.RuntimeType.CreateInstanceImpl(Boolean
publicOnly, Boolean
skipVisibilityChecks, Boolean
fillCache) at
System.Activator.CreateInstance(Type
type, Boolean nonPublic) at
umbraco.macro.GetXsltExtensions() at
umbraco.macro.AddMacroXsltExtensions()
at
umbraco.presentation.webservices.codeEditorSave.SaveXslt(String
fileName, String oldName, String
fileContents, Boolean ignoreDebugging)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(The complete stack trace may be different, it&amp;#39;s the thrown exception that should be of note) &lt;/p&gt;
&lt;p&gt;So what causes this? Well Umbraco loads its XSLT extensions (from xsltExtensions.config) using Reflection, and it looks for a public default constructor, which is the constructor which takes no arguments.&lt;/p&gt;
&lt;p&gt;Basically if you&amp;#39;re writing a constructor for your XSLT extensions class you must make sure you have a default one too, so your extensions class must look like this at lease:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;public class MyXsltExtensions { 
  public MyXsltExtensions() { }
  &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&amp;#39;re not defining your own constructor though this isn&amp;#39;t a problem.&lt;/p&gt;
&lt;p&gt;I only came across this bug when I was trying to define the default constructor as private, attempting to do a very tight API design (not exposing constructors where I didn&amp;#39;t want them).
Whoops!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>LINQ in JavaScript</title>
            <link href="/posts/2010-04-24-linq-in-javascript.html"/>
            <updated>2010-04-24T00:00:00.000Z</updated>
            <id>/posts/2010-04-24-linq-in-javascript.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Let me start by saying that I am aware that there is a &lt;a href=&quot;http://jslinq.codeplex.com/&quot;&gt;LINQ to JavaScript project on Codeplex&lt;/a&gt; but this was done by me are more of an achidemic exercise/ challange.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So while I&amp;#39;ve been working on LINQ to Umbraco I&amp;#39;ve also been spending some time doing AJAX-y stuff, and I have been having a lot of fun playing with JavaScript.
And then one day I was thinking about how I would go about manipulating a collection entirely client-side, and realised that loops are ultimately the only way to go about it. Well that&amp;#39;s all well and good, but if you want to do a lot of collection manipulation there&amp;#39;s not a really good way to go about it (or at least, a really good way from a .NET developer point of view :P).&lt;/p&gt;
&lt;p&gt;And after all, what is LINQ? LINQ really just is a way in which you can do pesudo-dynamic programming in a static language (as Lambda is heavily derived from dynamic languages). So shouldn&amp;#39;t it be possible to do in a dynamic language?&lt;/p&gt;
&lt;p&gt;So I whipped out my copy of Visual Studio and got coding away, and here&amp;#39;s an end-line of code entirely in JavaScript:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;array&lt;span class=&quot;preprocessor&quot;&gt;.where&lt;/span&gt;(function(item) { 
    return item&lt;span class=&quot;preprocessor&quot;&gt;.property&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
    })
    &lt;span class=&quot;preprocessor&quot;&gt;.orderBy&lt;/span&gt;()
    &lt;span class=&quot;preprocessor&quot;&gt;.groupBy&lt;/span&gt;(function(item) { 
        return item&lt;span class=&quot;preprocessor&quot;&gt;.value&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;
    })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lovely isn&amp;#39;t it.&lt;/p&gt;
&lt;p&gt;But before I get into some of the stuff I do, let me explain why my approach is different to the JSLINQ project on Codeplex.
Now I mean no disrespect to Chris, but there are a few things which I don&amp;#39;t like about his approach, and which kind of go against the LINQ pattern.&lt;/p&gt;
&lt;p&gt;First off JSLINQ requires that you create a new object which you pass the array into. I can see some reasons for this, better intellisense, more strict control over collection manipulation (the collection becomes read-only) but I think that the primary reason must be to better support object-notation arrays (you know, [] arrays). When you define an array using object notation it&amp;#39;s not really an array (&lt;code&gt;typeof [] === &amp;quot;object&amp;quot;&lt;/code&gt;). This is a problem if you want to LINQify it, you need to pass it to some other type.&lt;/p&gt;
&lt;p&gt;The second issue I have with it is the naming. All the methods are named with Pascal Casing, which is the standard in .NET land, but every JavaScript library I&amp;#39;ve ever used (and as is standard) uses Camel Casing for methods. Sure Pascal keeps its relationship to .NET valid, but when trying to appeal the JavaScript developers it&amp;#39;s just a bit foreign.&lt;/p&gt;
&lt;p&gt;Lastly I&amp;#39;m a bit bothered by the lack of argument checking. This may be because I&amp;#39;m a very defensive programmer, but I don&amp;#39;t like to allow developers to shoot themselves in the foot. If a parameter should be a function, then the paramter should be checked as a function. If a parameter is required, it should be checked as such.&lt;/p&gt;
&lt;p&gt;This is more of a personal preference than a real design flaw though.&lt;/p&gt;
&lt;h2&gt;My Approach&lt;/h2&gt;
&lt;p&gt;Now that I&amp;#39;ve talked aobut what I don&amp;#39;t like with the JSLINQ project I think it&amp;#39;s only fair to talk about my approach. I&amp;#39;ve gone with a more traditional LINQ approach and added extensions to an existing type, in this case the Array type, via &lt;code&gt;Array.prototype&lt;/code&gt;. This means it is closer to the extension-method format of IEnumerable&lt;T&gt; from .NET, you just need to add in a namespace (aka, include the JavaScript file), but does have a problem of allowing the collection to be modified (which does have pros and cons).&lt;/p&gt;
&lt;p&gt;I have also kept with standard JavaScript programming and Camel Cased the method names.&lt;/p&gt;
&lt;p&gt;The following operators are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where &lt;/li&gt;
&lt;li&gt;Order By (inc decending)&lt;/li&gt;
&lt;li&gt;First/orDefault &lt;/li&gt;
&lt;li&gt;Single/orDefault&lt;/li&gt;
&lt;li&gt;Last/orDefault &lt;/li&gt;
&lt;li&gt;Select &lt;/li&gt;
&lt;li&gt;GroupBy &lt;/li&gt;
&lt;li&gt;IndexOf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By and large the word under the hood with for loops, taking a method (aka a Lambda function) and using it.
As I said I&amp;#39;m a defensive programmer so there is a lot of type-checking against the arguments and the return types of methods (for example, ensuring the the Where lambda returns a boolean).&lt;/p&gt;
&lt;p&gt;GroupBy is my most proud operator, as it turned out to be a bit harder than I had though. But it does return a collection which is also a pesudo-dictionary which can be itterated through.&lt;/p&gt;
&lt;p&gt;I would provide the full source code but there seems to be a problem with current Umbraco instance running my blog which wont let me upload media items!&lt;/p&gt;
&lt;p&gt;But here&amp;#39;s the Where and GroupBy operators:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;Array.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = function(fn) {
    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;xmlDocTag&quot;&gt;///&lt;/span&gt; Filters the array&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;xmlDocTag&quot;&gt;///&lt;/span&gt; Filtering function&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;xmlDocTag&quot;&gt;///&lt;/span&gt; &lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (fn) !== &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Function)) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; Error.argumentType(&lt;span class=&quot;string&quot;&gt;&quot;fn&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (fn), &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Function), &lt;span class=&quot;string&quot;&gt;&quot;where takes a function to filter on&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coll = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Array();
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; i++) {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = fn(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i]);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (ret) !== &lt;span class=&quot;string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; Error.argumentType(&lt;span class=&quot;string&quot;&gt;&quot;fn&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (ret), &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Boolean), &lt;span class=&quot;string&quot;&gt;&quot;function provided to where much return bool&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) coll.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i]);
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; coll;
}

Array.prototype.groupBy = function(fn) {
    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;xmlDocTag&quot;&gt;///&lt;/span&gt; &lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fn || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (fn) !== &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Function)) {
        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; Error.argumentType(&lt;span class=&quot;string&quot;&gt;&quot;fn&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (fn), &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (Function), &lt;span class=&quot;string&quot;&gt;&quot;groupBy takes a function to filter on&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Array();
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; i++) {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; key = fn(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i]);
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; keyNode = ret.singleOrDefault(function(item) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item.key === key; });

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!keyNode) {
            ret[ret.length] = { &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;: key, &lt;span class=&quot;string&quot;&gt;&quot;items&quot;&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Array() };
            ret[ret.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].items.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i]);
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            ret[ret.indexOf(keyNode)].items.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i]);
        }
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The next stage&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve done a few tweaks within LINQ in JavaScript, and I&amp;#39;ve added a couple of new operators, &lt;code&gt;Skip&lt;/code&gt;, &lt;code&gt;SkipWhile&lt;/code&gt; and &lt;code&gt;Take&lt;/code&gt;, all providing the same functionality that their .NET counterparts provide.&lt;/p&gt;
&lt;p&gt;Lets have a look at the way some of the code works, we&amp;#39;ll look at the where method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = function(fn) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;typedef&quot;&gt;typeof &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt; !== typeof &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Function&lt;/span&gt;)&lt;/span&gt;) throw &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.argumentType&lt;span class=&quot;container&quot;&gt;(&quot;&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;&quot;, &lt;span class=&quot;title&quot;&gt;typeof&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;, typeof &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Function&lt;/span&gt;)&lt;/span&gt;, &quot;where takes a function to filter on&quot;);&lt;/span&gt;
    var coll = new &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;();
    for (var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; this.length; i++) {
        var ret = fn(this[i]);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;typedef&quot;&gt;typeof &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt;)&lt;/span&gt; !== &quot;boolean&quot;) throw &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;.argumentType&lt;span class=&quot;container&quot;&gt;(&quot;&lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;&quot;, &lt;span class=&quot;title&quot;&gt;typeof&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt;)&lt;/span&gt;, typeof &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt;)&lt;/span&gt;, &quot;function provided to where much return bool&quot;);&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) coll.push(this[i]);
    }
    return coll;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off you&amp;#39;ll notice that I expect a function to be passed into the method, otherwise how would you apply a where?! As you&amp;#39;ll notice I&amp;#39;m doing a lot of type checking as well, the parameter for Where needs to be a function, so I explicitly check it so.&lt;/p&gt;
&lt;p&gt;Then it&amp;#39;s really just a simple itterator that is used, and pushing each item into a new collection where the provided function returns a boolean value of true.
Again you&amp;#39;ll notice type checking, this time of the return value of the function. Because JavaScript isn&amp;#39;t compiled, and there is no type checking I have to do it manually (this means that I&amp;#39;m doing a traditional LINQ API, not one where you can return anything you like, ala &lt;a href=&quot;http://community.bartdesmet.net/blogs/bart/archive/2008/09/14/who-ever-said-linq-predicates-need-to-be-boolean-valued.aspx&quot;&gt;this post&lt;/a&gt;). Not a big problem, but it does add a little overhead.&lt;/p&gt;
&lt;p&gt;Sure you can remove it but then it kind-of defeats what I&amp;#39;m trying to achieve, which is a very type-safe API.&lt;/p&gt;
&lt;p&gt;Ultimately LINQ in JavaScript is nothing more than throught experiment project. It shows that you can quite easily have a client side query language using JavaScript and functional programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But I don&amp;#39;t recommend that anyone acutally use it&lt;/strong&gt;. If you&amp;#39;re using a client-side query API such as this (or any of the other LINQ implementations for JavaScript) you&amp;#39;re doing it wrong. Particularly operators like where, skip, take and even select. These operators are designed to lower/ change the data volume you are working with, which on the client side is not a good idea. It means that you&amp;#39;ve returned too much data from the server!
I see the only real useful reason for this (other than just wanting to prove it can be done) is to manipulate a DOM structure, say client-side reordering of a table.&lt;/p&gt;
&lt;h2&gt;ECMAScript 5&lt;/h2&gt;
&lt;p&gt;LINQ in JavaScript supports the new Array methods which are part of ECMAScript 5, you can read more about it in the &lt;a href=&quot;/linq-in-javascript/html5&quot;&gt;announcement post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Source code&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve pushed the &lt;a href=&quot;https://hg.slace.biz/linq-in-javascript&quot;&gt;source code for the LINQ in JavaScript&lt;/a&gt; project up to bitbucket. If you&amp;#39;re interested in having a play with it you can grab it from there.&lt;/p&gt;
&lt;h2&gt;NuGet&lt;/h2&gt;
&lt;p&gt;I have created a NuGet package for this as well. &lt;a href=&quot;http://nuget.org/Packages/Packages/Details/LinqInJavaScript-1-0&quot;&gt;You can get it here&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>DDD Melbourne &amp;amp; Umbraco</title>
            <link href="/posts/2010-04-22-dddmelbourne-umbraco.html"/>
            <updated>2010-04-22T00:00:00.000Z</updated>
            <id>/posts/2010-04-22-dddmelbourne-umbraco.html</id>
            <content type="html">&lt;p&gt;A few weeks ago I was noticing a lot of tweets from the people I follow about an upcoming event in Melbourne called &lt;a href=&quot;http://www.dddmelbourne.com/&quot;&gt;Developer Developer Developer&lt;/a&gt;. Interested I delved into it and found that I really liked what they had to offer. It&amp;#39;s a free conference on the Microsoft stack which is community driven, meaning that anyone can propose a topic and the community would vote for what they wanted to see.&lt;/p&gt;
&lt;p&gt;So I decided to chuck my hat into the ring and propose a session, and to my horror, I mean surprise, I&amp;#39;ve been accepted!&lt;/p&gt;
&lt;p&gt;Well I&amp;#39;ve booked a flight, still trying to work out where I&amp;#39;m staying and will be around on Friday night in Melbourne if anyone is up for a pre-conference meet and drink.&lt;/p&gt;
&lt;p&gt;Don&amp;#39;t forget the &lt;a href=&quot;http://www.nerddinner.com/2070&quot;&gt;NerdDinner&lt;/a&gt; on Saturday night too.&lt;/p&gt;
&lt;h3&gt;Secrets of an Umbraco Ninja&lt;/h3&gt;
&lt;p&gt;This is the session I&amp;#39;ll be presenting at DDD Melbourne. I&amp;#39;ll be looking at how you can use Umbraco beyond traditional content management. I&amp;#39;ll be looking at integration with Flash and Silverlight for rich content, how you can get the most out of performance with Examine and dealing with unpublished content.&lt;/p&gt;
&lt;h4&gt;Slide decks and code samples&lt;/h4&gt;
&lt;p&gt;Well DDD Melbourne is done and dusted, it was a good time. Really appreciate the work that the guys did to organise it, and very glad to have been given the opportunity to present.&lt;/p&gt;
&lt;p&gt;Thanks to all those who attended my session, hopefully something was learnt from it ;).&lt;/p&gt;
&lt;p&gt;As promised here is the slide deck and code samples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/get/dddmelbourne/secrets-of-an-umbraco-ninja-simplifying-development-with-umbraco.zip&quot;&gt;Slides&lt;/a&gt; (including WebForms MVP stuff I didn&amp;#39;t get to :P)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/get/dddmelbourne/DddMelbourne.zip&quot;&gt;Code&lt;/a&gt; (DB not included)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Footnote&lt;/h4&gt;
&lt;p&gt;I&amp;#39;m currently helping out &lt;a href=&quot;http://blog.lewisbenge.net/&quot;&gt;Lewis Benge&lt;/a&gt; with &lt;a href=&quot;http://www.dddsydney.com/&quot;&gt;DDD Sydney&lt;/a&gt;, more information on that will come soon.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>An overview of Lucene.Net</title>
            <link href="/posts/2010-04-14-lucene-net-overview.html"/>
            <updated>2010-04-14T00:00:00.000Z</updated>
            <id>/posts/2010-04-14-lucene-net-overview.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Please note, this document is a work in progress and will be expanded over time&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/lucene-net-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/lucene-analyzer&quot;&gt;Analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/documents-in-lucene-net&quot;&gt;Documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/building-an-application-with-lucene-net&quot;&gt;Building an application with Lucene.Net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What is Lucene.Net?&lt;/h1&gt;
&lt;p&gt;Although you can read the official word on the &lt;a href=&quot;http://lucene.apache.org/lucene.net/&quot;&gt;Lucene.Net&lt;/a&gt; project site I&amp;#39;ll do an abridged version here, explaining it in the way that &lt;em&gt;I&lt;/em&gt; understand it.&lt;/p&gt;
&lt;p&gt;Lucene.Net is an exact port of the Java Lucene search API, which comprises of indexers, analyzers and searchers. There&amp;#39;s very few differences between the two frameworks, you&amp;#39;re actually able to read the Java API documentation (which is really all you have to go on) and it is going to match up with the functionality. The only real differences are the namespacing in the .NET API is .NET-ish, and &lt;em&gt;some&lt;/em&gt; of the API has be re-cased to match a more .NET style.&lt;/p&gt;
&lt;p&gt;Lucene takes string data which is then passed into an analyzer and serialized into an index file. Lucene works with strings, and it only understands strings. How it understands strings is defined by the &lt;strong&gt;analyzer&lt;/strong&gt; which you are using.&lt;/p&gt;
&lt;p&gt;Once you have your data into an index you then get it out via a searcher. A searcher takes a query which uses a construct similar to other search engines (&lt;a href=&quot;http://lucene.apache.org/java/2_3_2/queryparsersyntax.html&quot;&gt;here&amp;#39;s the query syntax documentation&lt;/a&gt;). Documents are then returned from Lucene, which references the point in the index file that a result is located, and then can be deserialized into a set of fields which represents the original string data you passed in.&lt;/p&gt;
&lt;h1&gt;What is Lucene.Net not?&lt;/h1&gt;
&lt;p&gt;In a word, &lt;strong&gt;smart&lt;/strong&gt;. Lucene has no smarts about it, it doesn&amp;#39;t understand file types, it doesn&amp;#39;t really understand dates or numbers. I&amp;#39;m often asked &amp;quot;Can Lucene index &lt;em&gt;x&lt;/em&gt;?&amp;quot;, the simple answer is &amp;quot;No&amp;quot;, but really the answer is &amp;quot;Yes&amp;quot;. If you&amp;#39;re able to &lt;em&gt;represent it as a string&lt;/em&gt; you can have Lucene handle it. This poses some interesting ideas, say you want to index an Office document, well if that&amp;#39;s an OpenXML document then it&amp;#39;s &lt;em&gt;realatively easy&lt;/em&gt;, the OpenXML API is quite good in the regard of extracting text.&lt;/p&gt;
&lt;h1&gt;Understanding Lucene terminology&lt;/h1&gt;
&lt;p&gt;To not get completely lost with Lucene you need to understand the terms which it uses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/documents-in-lucene-net&quot;&gt;Document&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is a record within the Lucene index. It is comprised of fields. When ever you&amp;#39;re working with data from the index you&amp;#39;re working with a Document&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/documents-in-lucene-net&quot;&gt;Field&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A single piece of data associated with a document. A field may or may not be indexed, depending on how you&amp;#39;re inserting it into your index, and this defines how you can interact with it, and how Lucene will treat it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Term&lt;ul&gt;
&lt;li&gt;A part of a Lucene query. A Term is comprised of a left and a right part, looking like this: &lt;code&gt;Field:Query&lt;/code&gt;. The left part is the name of the field you&amp;#39;re scoring against, the right part is the data to use when scoring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Score&lt;ul&gt;
&lt;li&gt;Lucene generates results determined by how well the score against a search query. Scores are generated by using the search query and comparing the Document&amp;#39;s Fields to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/lucene-analyzer&quot;&gt;Analyzer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;An analyzer defines how the indexer or searcher will handle the data. There are many different analyzers in Lucene and each handle indexing and searching in subtly different ways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indexer&lt;ul&gt;
&lt;li&gt;The Indexer is what is responsible for searializing a Document and storing within the index file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Searcher&lt;ul&gt;
&lt;li&gt;The Searcher will take a Query and retrieve a list of Documents out of the a Lucene index.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query&lt;ul&gt;
&lt;li&gt;A Query is comprised of a group of Terms and Boolean Operations which are passed into a searcher to retrieve Documents out of the Lucene index. The Query is also used to determine the score of a Document within the record set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boolean Operation&lt;ul&gt;
&lt;li&gt;AND, OR, NOT all comprise Boolean Operations which can affect how a Term is handled within a Query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>ASP.NET WebForms Model-View-Presenter Contrib Project</title>
            <link href="/posts/2010-04-12-webforms-mvp-contrib.html"/>
            <updated>2010-04-12T00:00:00.000Z</updated>
            <id>/posts/2010-04-12-webforms-mvp-contrib.html</id>
            <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m a big fan of &lt;a href=&quot;http://webformsmvp.com&quot;&gt;ASP.NET WebForms Model-View-Presenter (MVP)&lt;/a&gt; which is produced by &lt;a href=&quot;http://blog.tatham.oddie.com.au/&quot;&gt;Tatham&lt;/a&gt; &lt;a href=&quot;http://twitter.com/tathamoddie&quot;&gt;Oddie&lt;/a&gt; and &lt;a href=&quot;http://damianedwards.wordpress.com/&quot;&gt;Damien&lt;/a&gt; &lt;a href=&quot;http://twitter.com/DamianEdwards&quot;&gt;Edwards&lt;/a&gt;. It&amp;#39;s a really great way to achieve testable webforms development, along with doing good design with decoupled webforms design.&lt;/p&gt;
&lt;p&gt;As an Umbraco developer you&amp;#39;re somewhat limited with your options for testable development. You &lt;em&gt;can&lt;/em&gt; use ASP.NET MVC, but it doesn&amp;#39;t integrate quite the same way, it&amp;#39;s not really possible drop them in as macros.&lt;/p&gt;
&lt;p&gt;You could look at an isolation framework like &lt;a href=&quot;http://www.typemock.com&quot;&gt;Typemock&lt;/a&gt; to completely mock out the HttpContext and everything else, but then you&amp;#39;re potentially creating too many fake expectations around how everything is going to work.&lt;/p&gt;
&lt;p&gt;This is where WebForms MVP can come in, it&amp;#39;s designed to fill this gap. I&amp;#39;ve used it on several Umbraco builds, and in fact I ran a webinar (screen cast &lt;a href=&quot;http://vimeo.com/9438884&quot;&gt;here&lt;/a&gt;) and hopefully I&amp;#39;ll be talking about it in a formal capacity at &lt;a href=&quot;http://codegarden10.com&quot;&gt;CodeGarden10&lt;/a&gt; this year.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve been using MVP for WebForms for a number of years now, starting with home-grown frameworks so I was a bit familiar with what I liked with a framework. But because WebForms MVP is a &lt;em&gt;framework&lt;/em&gt; it&amp;#39;s not really meant to provide many out of the box components.&lt;/p&gt;
&lt;p&gt;While driving to Canberra for Christmas 2009 I was thinking about how I was currently implementing WebForms MVP and realising that I was constantly writing the same set of views and presenters and though that others who are using this are probably doing the same thing. There&amp;#39;s a number of things that seem very logical to need, such as validation, submit/ cancel eventing, etc. So I decided that it would be a great idea if theres common components were available.&lt;/p&gt;
&lt;p&gt;So once I&amp;#39;d arrived at my destination I grabbed out my iPhone and started writing the initial concepts for what is now WebForms MVP Contrib.&lt;/p&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;As I stated the goal of this project was to give a bunch of defaults for people who are working with WebForms MVP. I also liked the extensibility of the project, the ability to change out the &lt;strong&gt;PresenterBinder&lt;/strong&gt;, which is essentially the IoC container which is used internally of WebForms MVP. Now there&amp;#39;s nothing wrong with the built in PresenterBinder, but &lt;em&gt;I like options&lt;/em&gt;, so I set about producing a &lt;a href=&quot;http://ninject.org/&quot;&gt;Ninject&lt;/a&gt; Binder, meaning that it&amp;#39;s possible to use Ninject for all your IoC needs within WebForms MVP.&lt;/p&gt;
&lt;p&gt;The other major goal was to make for more service-orientated presenters than the examples which are available as part of the source package. Service-orientated design is something we practice quite extensively at TheFARM and makes it very easy to abstract away data interactions from any business layer of your application. This in turn makes testing even easier.&lt;/p&gt;
&lt;h2&gt;What&amp;#39;s available&lt;/h2&gt;
&lt;p&gt;Although &amp;quot;full&amp;quot; documentation is available up on our &lt;a href=&quot;http://webformsmvpcontrib.codeplex.com/&quot;&gt;project codeplex page&lt;/a&gt; (and I really should put it on the official site...) currently theres 2 available PresenterBinders, we support Ninject and StructureMap (thanks to &lt;a href=&quot;http://geekswithblogs.net/PointToShare/Default.aspx&quot;&gt;Lewis&lt;/a&gt; &lt;a href=&quot;http://twitter.com/LewisBenge&quot;&gt;Benge&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Additionally there&amp;#39;s a handful of standard views, and view &lt;em&gt;extensions&lt;/em&gt;, which are essentially interfaces which have some grouped functionality which is useful to implement in some instances.&lt;/p&gt;
&lt;p&gt;Currently we&amp;#39;re sitting at CTP6 as the &lt;a href=&quot;http://webformsmvpcontrib.codeplex.com/releases/view/40599&quot;&gt;primary release&lt;/a&gt;, which uses the CTP6 release of WebForms MVP. With the recent check-in&amp;#39;s to support StructureMap we&amp;#39;ll be looking to do a CTP7 release to bring us in line with the current stable of WebForms MVP, but I&amp;#39;m more handing out for the exposure of the discovery strategy to see what funky stuff we can do with that.&lt;/p&gt;
&lt;h2&gt;Helping out&lt;/h2&gt;
&lt;p&gt;As you can probably tell from the check-in&amp;#39;s there hasn&amp;#39;t been a lot from me recently on this project. It&amp;#39;s by no means dead, but as I commit on several other projects as well my time can be spread pretty thin. If you have any ideas or any features you&amp;#39;d like to see please get in contact with me. You can find my contact information on the &lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt; page of this site, or additionally you can drop us a message on the codeplex site.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco DataType Design</title>
            <link href="/posts/2010-04-11-umbraco-data-type-design.html"/>
            <updated>2010-04-11T00:00:00.000Z</updated>
            <id>/posts/2010-04-11-umbraco-data-type-design.html</id>
            <content type="html">&lt;h2&gt;DataType&amp;#39;s in Umbraco 4.x&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve often seem people wondering why performances is &lt;em&gt;so terrible&lt;/em&gt; when creating Documents, particularly lots of Documents from the Umbraco API. There is a good reason for this, the design of the DataType allows anyone to be able to implement them to do almost anything.&lt;/p&gt;
&lt;p&gt;The standard way to use a DataType is to write to the Umbraco database, but you don&amp;#39;t have to do it that way, you can write to an XML file, call a web service or actually have no data saving.&lt;/p&gt;
&lt;p&gt;Because of this it&amp;#39;s up the responsibility of the DataType creator to do the CRUD operations, it&amp;#39;s not possible to have Umbraco have some kind of a global save operation (because what if there wasn&amp;#39;t a save!).&lt;/p&gt;
&lt;p&gt;This does mean that there&amp;#39;s the probability for lots of database interaction when you perform CRUD operations, but it does mean that DataTypes are infinitely flexible.&lt;/p&gt;
&lt;p&gt;Because of this we were able to produce &lt;a href=&quot;http://our.umbraco.org/projects/thefarm-media-link-checker&quot;&gt;TheFARM Media Link Checker package&lt;/a&gt; for Umbraco. And I&amp;#39;d also hasten a guess that this flexibility also allowed the &lt;a href=&quot;http://our.umbraco.org/projects/google-analytics-for-umbraco&quot;&gt;Google Analytics for Umbraco&lt;/a&gt; package to now allow lookups from the content item.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco Event Improvements</title>
            <link href="/posts/2010-04-11-umbraco-event-improvments.html"/>
            <updated>2010-04-11T00:00:00.000Z</updated>
            <id>/posts/2010-04-11-umbraco-event-improvments.html</id>
            <content type="html">&lt;p&gt;As I mentioned in a previous article &lt;a href=&quot;/the-great-umbraco-api-misconception&quot;&gt;there&amp;#39;s a problem with the 4.0 eventing&lt;/a&gt;. But not everything is bad news, there&amp;#39;s a light at the end of the tunnel!&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re wanting to learn more about &lt;em&gt;why&lt;/em&gt; this is the way then I suggest you have a look at &lt;a href=&quot;/umbraco-data-type-design&quot;&gt;this article about data types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The crux of it really comes down to the design of Data Types and how they are designed.&lt;/p&gt;
&lt;h2&gt;Umbraco 4.1 changes&lt;/h2&gt;
&lt;p&gt;When I first noticed the problems I outlined in &lt;a href=&quot;/the-great-umbraco-api-misconception&quot;&gt;the great Umbraco API misconception&lt;/a&gt; I decided the look into what I could do about it, but still maintain backwards compatibility with Umbraco 4.0. &lt;/p&gt;
&lt;p&gt;At the very least I changed Umbraco 4.1 to &lt;strong&gt;raise the BeforeSave event before any saving occurs&lt;/strong&gt;! It only works when you&amp;#39;re using the Document.BeforeSave event, not the other objects which inherit from Content (where the event originates from). Also, this change &lt;strong&gt;only happens when you&amp;#39;re using the CMS front-end&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re using the Document API yourself to create documents I&amp;#39;ve changed the constructor Document(int id, bool optimizedMode) to use deferred saving. This means the save method does actually do the saving!&lt;/p&gt;
&lt;p&gt;I didn&amp;#39;t not change anything to reduce the number of SQL calls, it just performs the saving after the BeforeSave event fires from within the Save method.&lt;/p&gt;
&lt;p&gt;In addition to deferred saving I&amp;#39;ve also added an indexer to the Document object so you can do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; doc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Document(&lt;span class=&quot;number&quot;&gt;1234&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; something = (&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)doc[&lt;span class=&quot;string&quot;&gt;&quot;MyProperty&quot;&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally I think this is much more obvious than the getProperty operation, and it&amp;#39;s how I&amp;#39;d expect to interact with them in the future.&lt;/p&gt;
&lt;p&gt;Internally the indexer wraps the getProperty method so you can use it in any instance. &lt;strong&gt;But&lt;/strong&gt; when you&amp;#39;re using it is used with optimized mode it will also &lt;strong&gt;cache the properties&lt;/strong&gt;! Every time you call getProperty you go into the database (or so I could gather). When you use the indexer and optimized mode the property accessor looks into an internal cache, sees if it&amp;#39;s there and if it isn&amp;#39;t gets it from the database, adds it to the cache and saves it for later. This is how the deferred saving works, it looks into the cache to set the property values.&lt;/p&gt;
&lt;p&gt;Hopefully this makes the eventing in 4.1 a lot more useful if you need to control the flow better.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco AUSPAC January 2010</title>
            <link href="/posts/2010-04-09-umbraco-auspac-january-2010.html"/>
            <updated>2010-04-09T00:00:00.000Z</updated>
            <id>/posts/2010-04-09-umbraco-auspac-january-2010.html</id>
            <content type="html">&lt;p&gt;First off I&amp;#39;d like to say thanks to all who attended tonights Umbraco webinar, I think we had mid 20&amp;#39;s for most of the session, really excited by the volume.&lt;/p&gt;
&lt;p&gt;Anyone who hasn&amp;#39;t already filled out the &lt;a href=&quot;http://bit.ly/72Btp7&quot;&gt;post-session review&lt;/a&gt; please do so, it&amp;#39;ll help me make it more awesome next time ;).&lt;/p&gt;
&lt;p&gt;As promised, here are the resources from tonights session:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/get/auspac/Umbraco.AusPac.UnitTesting.zip&quot;&gt;Slide Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/get/auspac/Umbraco.AusPac.UnitTesting.zip&quot;&gt;.NET project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For those who are interested I did record tonights session, but it appears that it stopped recording about 20 minutes before the end. The majority of the video can be found &lt;a href=&quot;http://vimeo.com/9438884&quot;&gt;here for your viewing pleasure&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>LINQ to XML to... Excel?</title>
            <link href="/posts/2010-04-08-linq-to-xml-to-excel.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-linq-to-xml-to-excel.html</id>
            <content type="html">&lt;p&gt;The other day one of the guys I work with was trying to work out the best way to generate an Excel document from .NET as the client had some wierd requirements around how the numerical data needed to be formatted (4 decimal places, but Excel treats a CSV to only show 2).&lt;/p&gt;
&lt;p&gt;The next day my boss came across a link to a demo of how to use LINQ to XML to generate a XML file using the Excel schema sets which allow for direct opening in Excel.
One problem with the demo, it was using VB 9, and anyone who&amp;#39;s seen VB 9 will know it has a really awesome way of handling XML literals in the IDE. This isn&amp;#39;t a problem if you&amp;#39;re coding in VB 9, but if you&amp;#39;re in C# it can be.&lt;/p&gt;
&lt;p&gt;The VB 9 video can be found here: &lt;a href=&quot;http://msdn.microsoft.com/en-us/vbasic/bb927708.aspx&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/vbasic/bb927708.aspx&quot;&gt;http://msdn.microsoft.com/en-us/vbasic/bb927708.aspx&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recommend it be watched before progressing as it&amp;#39;ll make a lot more sense against the following post. It&amp;#39;ll also cover how to create the XML file, which I&amp;#39;m going to presume is already done.&lt;/p&gt;
&lt;h2&gt;In the beginning&lt;/h2&gt;
&lt;p&gt;Because C# doesn&amp;#39;t have a nice way to handle XML literals like VB 9 does we&amp;#39;re going to have to do a lot of manual coding of XML, additionally we need to ensure that the appropriate namespaces are used on the appropriate nodes.&lt;/p&gt;
&lt;p&gt;The Excel XML using 4 distinct namespaces, in 5 declarations (yes, I&amp;#39;ll get to that shortly) so we&amp;#39;ll start off by defining them like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;XNamespace mainNamespace = XNamespace&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urn:schemas-microsoft-com:office:spreadsheet&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
XNamespace o = XNamespace&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urn:schemas-microsoft-com:office:office&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
XNamespace &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; = XNamespace&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urn:schemas-microsoft-com:office:excel&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
XNamespace ss = XNamespace&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urn:schemas-microsoft-com:office:spreadsheet&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
XNamespace html = XNamespace&lt;span class=&quot;preprocessor&quot;&gt;.Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/TR/REC-html40&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the &amp;#39;main namespace&amp;#39; and &amp;#39;ss&amp;#39; are exactly the same, well this is how they are handled within the XML document. The primary namespace for the file is urn:schemas-microsoft-com:office:spreadsheet but in some locations it&amp;#39;s also used as a prefix.&lt;/p&gt;
&lt;p&gt;For this demo I&amp;#39;m going to be using the obligatory Northwind database and I&amp;#39;m going to just have a simple query against the customers table like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var dataToShow = from c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ctx&lt;span class=&quot;preprocessor&quot;&gt;.Customers&lt;/span&gt;
                 select new
                {
                    CustomerName = c&lt;span class=&quot;preprocessor&quot;&gt;.ContactName&lt;/span&gt;,
                    OrderCount = c&lt;span class=&quot;preprocessor&quot;&gt;.Orders&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;(),
                    Address = c&lt;span class=&quot;preprocessor&quot;&gt;.Address&lt;/span&gt;
                }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have to start building our XML, the root element is named Workbook and then we have the following child groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DocumentProperties&lt;/li&gt;
&lt;li&gt;ExcelWorkbook&lt;/li&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;li&gt;Worksheet&lt;/li&gt;
&lt;li&gt;WorksheetOptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each with variying child properties.&lt;/p&gt;
&lt;p&gt;First thing we need to do is set up our XElement and apply the namespaces, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;XElement workbook = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XElement(mainNamespace + &lt;span class=&quot;string&quot;&gt;&quot;Workbook&quot;&lt;/span&gt;,
    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XAttribute(XNamespace.Xmlns + &lt;span class=&quot;string&quot;&gt;&quot;html&quot;&lt;/span&gt;, html),
    CreateNamespaceAtt(XName.&lt;span class=&quot;keyword&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ss&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2000/xmlns/&quot;&lt;/span&gt;), ss),
    CreateNamespaceAtt(XName.&lt;span class=&quot;keyword&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2000/xmlns/&quot;&lt;/span&gt;),o),
    CreateNamespaceAtt(XName.&lt;span class=&quot;keyword&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2000/xmlns/&quot;&lt;/span&gt;), x),
    CreateNamespaceAtt(mainNamespace),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m using a helper method to create the namespace attribute (which you&amp;#39;ll be able to find in the attached source), but notice how the &amp;quot;main&amp;quot; namespace is the last one we attach, if we don&amp;#39;t do it this way we&amp;#39;ll end up with the XElement detecting the same namespace and only adding it once. Also, you need to ensure that you&amp;#39;re prefixing the right namespace to the XElement tag!&lt;/p&gt;
&lt;h2&gt;DocumentProperties and ExcelWorkbook&lt;/h2&gt;
&lt;p&gt;These two node groups are not overly complex, they hold the various meta-data about the Excel document we are creating, I&amp;#39;ll skip them as they aren&amp;#39;t really interesting and can easily be found in the source.&lt;/p&gt;
&lt;h2&gt;Styles&lt;/h2&gt;
&lt;p&gt;This section is really important and handy for configuring custom looks within the document. There are way to many options to configure here to cover in the demo, it&amp;#39;s easiest to generate the styles in Excel and save the file as an XML document (or read the XSD if you really want!). If you&amp;#39;re doing custom styles make sure you note the ID you give the style so you can use it later in your document.&lt;/p&gt;
&lt;p&gt;Also, these styles are workbook wide, not worksheet so you can reuse them on each worksheet you create. I have a very simple bold header.&lt;/p&gt;
&lt;h2&gt;Generating a Worksheet&lt;/h2&gt;
&lt;p&gt;Here is where the fun starts, we need to generate our worksheet. There are 4 bits of data we need to output here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of columns&lt;/li&gt;
&lt;li&gt;Number of Rows&lt;/li&gt;
&lt;li&gt;Header&lt;/li&gt;
&lt;li&gt;Data Rows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To illistrate the power of LINQ I&amp;#39;ve actually dynamically generated the header row:
Update: You should get dataToShow.First() not dataToShow.ToList() so you can get the properties for the header&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headerRow = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dataToShow.First().GetType().GetProperties()
                &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XElement(mainNamespace + &lt;span class=&quot;string&quot;&gt;&quot;Cell&quot;&lt;/span&gt;,
                    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XElement(mainNamespace + &lt;span class=&quot;string&quot;&gt;&quot;Data&quot;&lt;/span&gt;,
                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XAttribute(ss + &lt;span class=&quot;string&quot;&gt;&quot;Type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;String&quot;&lt;/span&gt;), 
                        p.Name
                        )
                    );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just a little bit of fun using LINQ and Reflection to dynamically generate the column headers ;)&lt;/p&gt;
&lt;p&gt;Next we need to output the number of columns and number of rows (keep in mind the rows is the data count + header row count):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;XAttribute&lt;/span&gt;(ss + &lt;span class=&quot;string&quot;&gt;&quot;ExpandedColumnCount&quot;&lt;/span&gt;, headerRow.&lt;span class=&quot;type&quot;&gt;Count&lt;/span&gt;()),
&lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;XAttribute&lt;/span&gt;(ss + &lt;span class=&quot;string&quot;&gt;&quot;ExpandedRowCount&quot;&lt;/span&gt;, &lt;span class=&quot;typedef&quot;&gt;dataToShow.&lt;span class=&quot;type&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt; + 1),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we put out the header cells:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XElement(mainNamespace + &lt;span class=&quot;string&quot;&gt;&quot;Row&quot;&lt;/span&gt;,
    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XAttribute(ss + &lt;span class=&quot;string&quot;&gt;&quot;StyleID&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Header&quot;&lt;/span&gt;),
    headerRow
),&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then lastly we generate the data cells (note - this can be done like the header, just chose to do it differently to illistrate that it can be done several ways):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/1198/linq_to_excel001.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(yes I used an image this time, the formatting is a real bitch in the Umbraco WYSIWYG editor!).&lt;/p&gt;
&lt;p&gt;Lastly there needs to be a WorksheetOptions node, and then you can combine all the XElements together, add it to an XDocument object and save!&lt;/p&gt;
&lt;p&gt;There you have it, how to create an Excel document using LINQ to XML and C#.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/get/csharp/excelgenerator.zip&quot;&gt;Download the source here.&lt;/a&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Are Extension Methods Really Evil?</title>
            <link href="/posts/2010-04-08-are-extension-methods-really-evil.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-are-extension-methods-really-evil.html</id>
            <content type="html">&lt;p&gt;Ruben (of Umbraco fame) recently wrote a post entitled Extension Methods: Silent static slaves which was in response to a comment I&amp;#39;d left on a previous post about static classes and static method being evil.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#39;t read Ruben post then I suggest you do before continue on with mine as a lot of what I&amp;#39;ll be saying is in counter argument to him (including the comments).&lt;/p&gt;
&lt;p&gt;Done? Good, continue on!&lt;/p&gt;
&lt;p&gt;Ruben has produced a demo which is great for illistrating his point, but is it an example of good design turning bad or just bad design from the start?&lt;/p&gt;
&lt;p&gt;The first thing I want to look at is that his extension methods are on the interface and implementation class.
This is bad design to start with, but it&amp;#39;s not just bad design if you&amp;#39;re using extension methods, this could manifest itself as bad design if you did it as helper methods in a separate class, eg:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Helpers&lt;/span&gt; {&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; CalculateShoeCount(Animal animal) {
   &lt;span class=&quot;comment&quot;&gt;//do processing&lt;/span&gt;
  }
  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; CalculateShoeCount(Monkey animal) {
   &lt;span class=&quot;comment&quot;&gt;//do processing&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this would fall into the same trap if we don&amp;#39;t re-cast Animal to Monkey before calling the helper.&lt;/p&gt;
&lt;p&gt;But does this prove Ruben&amp;#39;s initial point, that static&amp;#39;s are just plain evil?
Well no, design isn&amp;#39;t possible without statics. If you try and design without statics you end up with nothing but instance memebers. If that&amp;#39;s the case where do I find the current method int.TryParse, does this become 0.TryParse?&lt;/p&gt;
&lt;p&gt;Ruben&amp;#39;s demo is an example of bad design producing worse design. In good design the CalculateShoeCount would be a member of the Animal interface, particularly since the implementation changes per interface implementation type.&lt;/p&gt;
&lt;p&gt;So how can we use extension methods to produce good design? Well first you really need to understand what an extension method is. As Ruben quite correctly pointed out an extension is just syntactic suger and extension methods should be treated as such. Developers need to understand that extension methods are only designed to provide functionality to a classes public instance members; they are stateless.
(This is why I don&amp;#39;t understand why so many people of Stack Overflow want extension properties added to the compiler, this is where people are missing the point of the extension concept)
And if you&amp;#39;re expecting a stateful nature from the extension methods then you&amp;#39;ve missed their goal.&lt;/p&gt;
&lt;p&gt;Lets look at some good examples of using extension methods. Here&amp;#39;s a fav of mine for Umbraco:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; string Url(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; Node node) {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; umbraco&lt;span class=&quot;variable&quot;&gt;.library&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.NiceUrl&lt;/span&gt;(node&lt;span class=&quot;variable&quot;&gt;.Id&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Hey look, a static calling a static ;)).&lt;/p&gt;
&lt;p&gt;Or how about this one:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;ListItem&amp;gt; SelectedItems(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; ListControl ctrl) {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl&lt;span class=&quot;variable&quot;&gt;.Items&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.Cast&lt;/span&gt;&amp;lt;ListItem&amp;gt;()&lt;span class=&quot;variable&quot;&gt;.Where&lt;/span&gt;(item =&amp;gt; item&lt;span class=&quot;variable&quot;&gt;.Selected&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;re using an extension method with an extension method.&lt;/p&gt;
&lt;p&gt;But both of these examples are using actual class implementations, not interfaces, does that make a difference?
Yes, and a big one. When you are putting extensions on an interface there needs to be no possibility of confusion about what the extensions are for. And if you are also providing an extension of an implementation of the class they need to be in separate namespaces. If they aren&amp;#39;t, you will end up with what Ruben shows, misrepresentation of the methods abilities.&lt;/p&gt;
&lt;p&gt;IQueryable&lt;T&gt; is a perfect example of how to use extension methods on top of an interface. If you have a look at the construct of the interface there&amp;#39;s actually no constructs within it! This means that &amp;quot;all&amp;quot; the functionality is provided by extension methods, allowing anyone to write their own extensions.
If I was to not include the namespace System.Linq I can then write my own query extensions, eg a Where that does return a bool, or negate operators which I don&amp;#39;t want to support.&lt;/p&gt;
&lt;p&gt;So in my opinion extension methdos are no more evil than anything else in programming; they can easily be abused and misused, but find something that it&amp;#39;d not possible to misuse to prove bad design.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Problems with Assembly Trust</title>
            <link href="/posts/2010-04-08-problems-with-assembly-trust.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-problems-with-assembly-trust.html</id>
            <content type="html">&lt;p&gt;When I was migrating PaulPad to ASP.NET MVC2 I decided that I wanted to also upgrade it to Autofac2. The main reason for it was the type registration is much nicer with it&amp;#39;s lambda syntax than it was in the 1.4 release which PaulPad previously used.&lt;/p&gt;
&lt;p&gt;So I set about downloading the latest version of &lt;a href=&quot;http://code.google.com/p/autofac/&quot;&gt;Autofac&lt;/a&gt; and getting it up and running.&lt;/p&gt;
&lt;p&gt;Because Autofac2 supports both MVC1 and MVC2 I needed to use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7wd6ex19(VS.80).aspx&quot;&gt;Assembly Binding&lt;/a&gt; to ensure that it worked properly. And this is where everything started to go bad. I kept getting weird a weird runtime error, an &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.entrypointnotfoundexception.aspx&quot;&gt;EntryPointNotFoundException&lt;/a&gt; was being thrown.&lt;/p&gt;
&lt;p&gt;At the time I couldn&amp;#39;t get Autofac2 to compile for .NET 3.5 (&lt;a href=&quot;http://code.google.com/p/autofac/issues/detail?id=208&quot;&gt;I&amp;#39;ve since produced a patch to fix that&lt;/a&gt;) so I was in a world of pain.&lt;/p&gt;
&lt;p&gt;I did manage to get it working by implementing my own controller registration and my own &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.mvc.icontrollerfactory.aspx&quot;&gt;IControllerFactory&lt;/a&gt; and then it was working fine, even though I used the source of the AutofacControllerFactory! By now I was scratching my head massively, I mean, I&amp;#39;m doing exactly what they are doing, but why does mine not work?&lt;/p&gt;
&lt;p&gt;From the limited debugging I was able to do (kind of hard when you don&amp;#39;t have the Autofac PDB&amp;#39;s) I found out that when calling &lt;strong&gt;builder.RegisterControllers&lt;/strong&gt; nothing was happening. The controllers weren&amp;#39;t being found. Huh? But they were in the assembly, so it wasn&amp;#39;t making sense.&lt;/p&gt;
&lt;p&gt;Once I got Autofac to compile though I did some debugging and was getting a weird error when it run the following code:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;IController&lt;/span&gt;)&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;sAssignableFrom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(controller&lt;span class=&quot;variable&quot;&gt;Type&lt;/span&gt;)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Type IController exists in System.Web.Mvc.dll and System.Web.Mvc.dll&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Well, something to that effect anyway)&lt;/p&gt;
&lt;p&gt;So I was sitting there with a completely dumbfounded looked on my face, of course it exists in that assembly, by why does it look there twice? The only logical thought was that it wasn&amp;#39;t doing the assembly binding properly. But how can that be? I&amp;#39;ve not had assembly finding fail before, if it failed it shouldn&amp;#39;t have compiled.&lt;/p&gt;
&lt;p&gt;Shit wasn&amp;#39;t making sense.&lt;/p&gt;
&lt;p&gt;So I rolled back to my downloaded version of Autofac and decided to check the version number, but immediately upon opening up the properties dialog I say the message &amp;quot;This file came from another computer and might be blocked to help protect this computer&amp;quot;, and then there was the &lt;strong&gt;Unblock&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;facepalm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So I clicked Unblock, compiled and magic happened. It all worked, no problems what so ever.&lt;/p&gt;
&lt;h3&gt;Moral of this story&lt;/h3&gt;
&lt;p&gt;Trust everyone&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Why no Umbraco on Aaron-Powell.com?</title>
            <link href="/posts/2010-04-08-why-no-umbraco.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-why-no-umbraco.html</id>
            <content type="html">&lt;p&gt;So unsurprisingly I&amp;#39;ve had a few people question why I&amp;#39;m not using Umbraco for the latest version of Aaron-Powell.com.&lt;/p&gt;
&lt;p&gt;First off let&amp;#39;s just have a look back on my blogging and the blog engines I&amp;#39;ve used.&lt;/p&gt;
&lt;p&gt;Back before I was the world-famous blogger that I am today I used Windows Live Spaces for blogging, yeah, I was &lt;strong&gt;just that awesome&lt;/strong&gt;. But when I decided to buy my own domain I thought it was only appropriate that I started using some actual software.&lt;/p&gt;
&lt;p&gt;I chose Umbraco, which was in version 3 at the time (this was somewhere around August 2008) which wasn&amp;#39;t too bad at the time.&lt;/p&gt;
&lt;p&gt;I installed &lt;a href=&quot;http://www.creativewebspecialist.co.uk/&quot;&gt;Warren Buckley&amp;#39;s&lt;/a&gt; Creative Web Starter kit which was available at the time. Last year when I met him and he had a look I think he was shocked at just how old a version of it I was running! I had a pretty basic skin on it, which err, was ok (ha!).&lt;/p&gt;
&lt;p&gt;Next I installed the Blog 4 Umbraco package (version 1) which I then rewrote the front end controls for it.&lt;/p&gt;
&lt;p&gt;By now I was not really using OOTB other than the document types (which I&amp;#39;d also hacked a bit) and it was starting to become a bit of a mess. But I kept with it, I did a major overhaul of it when I produced the &lt;a href=&quot;/training-videos&quot;&gt;LINQ to Umbraco training videos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this brings us to the present day. Although my Umbraco site did do what I needed it to do, but I&amp;#39;m never content, so I was looking for the next round of improvements. Since MVC is completely the sex I decided that I wanted to use that as a blogging platform. Now it is true that I could have used Umbraco still, but I don&amp;#39;t &lt;em&gt;really&lt;/em&gt; have the time to re-write the front end &lt;em&gt;yet again&lt;/em&gt;! :P&lt;/p&gt;
&lt;p&gt;This is why I chose PaulPad, that and I really liked the OOTB style of the site. Essentially it brought all of what I was looking for in a code base to me with very little work needed.&lt;/p&gt;
&lt;p&gt;Something else really appealing about PaulPad is that this is actually much less of a blogging platform than it is a wiki platform. Something I had noticed on my Umbraco blogging engine was that it wasn&amp;#39;t great if I wanted to go back and revise a post and have it very obvious. With more of a wiki feel it&amp;#39;s easier to do that. Also, there&amp;#39;s a lot more transparency over the revision history, which will be handy with some upcoming topics.&lt;/p&gt;
&lt;p&gt;Lastly, I believe that if you are going to be able to truly evangalise a platform (ie - Umbraco) you can&amp;#39;t just use it. You need to be familiar with your competitors (although PaulPad is hardly a competitor :P), so this is a good way to really just play with something that&amp;#39;s not Umbraco.&lt;/p&gt;
&lt;p&gt;Hopefully that sheds some light on my &lt;em&gt;madness&lt;/em&gt; regarding my dismissal of Umbraco as my choice of blogging platform.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>The great Umbraco API misconception</title>
            <link href="/posts/2010-04-08-the-great-umbraco-api-misconception.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-the-great-umbraco-api-misconception.html</id>
            <content type="html">&lt;p&gt;When Umbraco 4 was released it was a very exciting that there was an event model around everything in the back-end. This meant you could more powerful ActionHandlers firing on pre and post events (even though they are named against the standard .NET naming conventions).&lt;/p&gt;
&lt;p&gt;Also, people were very excited that when a pre, sorry, before event fired it was possible to do a cancel on the event args. This was really good for a Save event, it meant for more custom actions, business logic around the saving, you name it.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s a problem, canceling the save doesn&amp;#39;t do anything, the data is still saved!
But what, that&amp;#39;s not right, I canceled the event.&lt;/p&gt;
&lt;p&gt;And here is the problem, calling Save on a Document object does nothing! Nothing at all except firing the events.&lt;/p&gt;
&lt;p&gt;So when does the data get saved, well that happens in this line:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;doc&lt;span class=&quot;preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;my_property&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Value&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s right, the Set statement of the Value property of a Property object (well actually the Set statement of the associated IData.Value property, which is what&amp;#39;s called from Property.set_Value).&lt;/p&gt;
&lt;p&gt;Well yeah, that&amp;#39;s the problem right there, if the Set statement does the save, doing the Save method has been rather pointless.
It&amp;#39;s also got a really horrible problem of doing a shit load of database calls.&lt;/p&gt;
&lt;p&gt;So next time you try and hook into the Save event to try and prevent a Save from happening, well sorry to break it to you, it just wont work!
Sure you could tie into the rollback feature as well so when you&amp;#39;re doing a canceled save you can rollback to the previous version, just make sure you don&amp;#39;t recall the Save method and get stuck in a rollback loop! :P&lt;/p&gt;
&lt;p&gt;I think we may fix this in v5, but you don&amp;#39;t want all the fun nuance of Umbraco going now do you? :P &lt;/p&gt;
&lt;h3&gt;What can I do?&lt;/h3&gt;
&lt;p&gt;So is there anything that you can do to get around the eventing order with Umbraco? The answer is &lt;a href=&quot;/umbraco-event-improvments&quot;&gt;yes, yes you can&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Why is it like this?&lt;/h3&gt;
&lt;p&gt;If you&amp;#39;re interested in knowing why this happens check out my article on the &lt;a href=&quot;/umbraco-data-type-design&quot;&gt;design of data types&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Reflection And Generics</title>
            <link href="/posts/2010-04-08-reflection-and-generics.html"/>
            <updated>2010-04-08T00:00:00.000Z</updated>
            <id>/posts/2010-04-08-reflection-and-generics.html</id>
            <content type="html">&lt;p&gt;Or to name this another way… &lt;strong&gt;Oh my god the pain&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Anyone who’s been brave enough to delve into the bowels of the Umbraco Interaction Layer will have been able to see just how much Reflection I’m using, for those who haven’t think about this.
With the UIL I needed a way to find all the properties of a generated class and be able to either populate all of them or save from all of them. To do that I’ve got some custom attributes which decorate the properties which I look out for.&lt;/p&gt;
&lt;p&gt;Now this in itself isn’t a problem, all my properties are strongly typed, it’s all sweet. The problem was around the populating of the data when you open an existing Umbraco document object. I have two generic methods in my Helper library (which have many an appearance in my Umbraco Membership class too!) which have the construct:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; T GetPropertyValue&amp;lt;T&amp;gt;(Document doc, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; key);
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; T GetPropertyValue&amp;lt;T&amp;gt;(Document doc, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; key, T defaultValue);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ou’ll notice that one is an overload, and the overload parameter is a generic. This is where the problem arises.&lt;/p&gt;
&lt;p&gt;Because the generic is defined at use-time there’s no type in the .NET framework which can represent something as a generic like you can with an Int32 or a String, and this is where the problem arises, how do you find the overloaded method using reflection, and once it’s found how do you invoke it!?&lt;/p&gt;
&lt;h2&gt;First things first, finding the method&lt;/h2&gt;
&lt;p&gt;There’s no simple way in which you do this, in fact, it’s actually rather hacky. If you’re not familiar with finding methods with Reflection you should probably have a read of this &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.aspx&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/system.reflection.aspx&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You’d be mistaken for thinking that you can just pass in the method name, cuz it’s an overload Reflection doesn’t know what you want. So the most likely one you need is &lt;a href=&quot;&quot;&gt;Type.GetMethod Method (String, BindingFlags, Binder, array[]()[], array[\&lt;/a&gt;[])]&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/5fed8f59.aspx&quot;&gt;2&lt;/a&gt;, but you notice something, you need to pass in the type of ALL the parameters for the method.
Crap, one is a generic type, so it can’t be specified!
This is where I hit a snag, and from all my research the only solution was a dirty little hack.&lt;/p&gt;
&lt;p&gt;We know what’s different between the two methods, one has two parameters, the other has three, and this is how we’re going to find the sucker. On the Type class there’s another method, Type.GetMethods() or as I prefer to use (to improve performance) Type.GetMethods(BindingFlags bindingAttr). This will get you an array of methods with the right access levels.&lt;/p&gt;
&lt;p&gt;Now let’s pull out our old friend LINQ and find the sucker in the array, we end up with something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;type&quot;&gt;MethodInfo&lt;/span&gt; method = &lt;span class=&quot;typedef&quot;&gt;typeof&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Helper&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;GetMethods&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;BindingFlags&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Public&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;BindingFlags&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Static&lt;/span&gt;)&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;m&lt;/span&gt; =&amp;gt; &lt;span class=&quot;title&quot;&gt;m&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Name&lt;/span&gt; == &quot;&lt;span class=&quot;type&quot;&gt;GetPropertyValue&lt;/span&gt;&quot; &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;m&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;GetParameters&lt;/span&gt;()&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt; == 3);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Invoking the method&lt;/h2&gt;
&lt;p&gt;Ok, so we found the method but how do we invoke it if it’s generic? That’s actually quite easy:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;int&lt;/span&gt; methodResult = (int)method.&lt;span class=&quot;type&quot;&gt;MakeGenericMethod&lt;/span&gt;(&lt;span class=&quot;typedef&quot;&gt;typeof&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;).&lt;span class=&quot;type&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;[] { &lt;span class=&quot;title&quot;&gt;doc&lt;/span&gt;, “&lt;span class=&quot;type&quot;&gt;SomeAlias&lt;/span&gt;” })&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I make a generic instance of the method using a specified type as the generic type and then invoke it! This is the best and most optimised solution I’ve been able to come up with so far, if anyone can think of something better I’d love to hear it!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco Members Profiles</title>
            <link href="/posts/2010-04-07-umbraco-members-profiles.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-umbraco-members-profiles.html</id>
            <content type="html">&lt;p&gt;Almost 12 months ago I did a post looking at how to make .NET interaction with Umbraco Members easier (Extending Umbraco Members). This was for Umbraco 3.x, but now with Umbraco 4.x a question that has been coming up a lot on the Umbraco forums of recent is how to work with the Umbraco Membership. When Umbraco 4 was released it brought in the implementation of the ASP.NET Membership classes (MembershipProvider, RoleProvider and ProfileProvider).&lt;/p&gt;
&lt;p&gt;These classes were implemented via the umbraco.providers assembly and were essentially just wrappers for the underlying Umbraco Member/ Member Type/ Member Group classes.&lt;/p&gt;
&lt;p&gt;Although they still go through the Umbraco API underneath what was very nice was that now it was possible to use the standard ASP.NET login controls, Forms Authentication, etc. And if you&amp;#39;re really brave you could drop in your own membership provider, such as the SqlMembershipProvider or any custom solution you&amp;#39;d written.&lt;/p&gt;
&lt;p&gt;Something that seems to have been neglected is how to work with the Member Type information. By default you only have Name, Username and Password on a Member in Umbraco, so we extend it via the MemberType, but how do we get that data back?
Generally people will just use the Umbraco API and the Member.getProperty(alias) method, but that kind of nulls the point of having the ASP.NET Membership available to us, and what if you did want to swap out the providers (although I highly doubt that would ever happen)?&lt;/p&gt;
&lt;p&gt;That&amp;#39;s what I&amp;#39;m going to explain here, how you can use the ASP.NET ProfileProvider and it&amp;#39;s associated classes with an Umbraco-defined MemberType.&lt;/p&gt;
&lt;h2&gt;Our Member Type&lt;/h2&gt;
&lt;p&gt;For this I&amp;#39;m going to have a very basic little Member Type, it&amp;#39;ll have three bits of data on it, First Name, Middle Name and Last Name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/2723/picture%201_497x245.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see these are defined as per normal, nothing special about that. I can then go to my Umbraco Member and enter some data and view it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/2728/picture%202_495x190.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Accessing via ASP.NET&lt;/h2&gt;
&lt;p&gt;Now we need to be able to access this via ASP.NET, there are two things we need to configure. First is we want to define our .NET class which represents the Member Type. To do this we need to create a class which inherits from System.Web.Profile.ProfileBase:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;using System;
using System.Web.Profile;
public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MemberProfile&lt;/span&gt; :&lt;/span&gt; ProfileBase { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have to define the properties which we want exposed from our MemberType. The nice thing is here I don&amp;#39;t have to expose everything, if there was a property which I didn&amp;#39;t want/ need access to, I can easily just leave it out. So lets define our properties:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;[SettingsAllowAnonymous(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; FirstName
{
    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == DBNull.Value)
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Empty;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)o;
    }
    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.SetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;first_name&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);
    }
}

[SettingsAllowAnonymous(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; LastName
{
    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == DBNull.Value)
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Empty;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)o;
    }
    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.SetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;last_name&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);
    }
}

[SettingsAllowAnonymous(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; MiddleName
{
    &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;middle_name&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o == DBNull.Value)
        {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Empty;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)o;
    }
    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.SetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;middle_name&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as you can see I&amp;#39;ve created three properties which we are exposing. Notice how all of them are doing a &lt;strong&gt;base.GetPropertyValue(string)&lt;/strong&gt; method call, and the string we are passing in is the Alias of the Member Type property. This is because we&amp;#39;ll be using the Umbraco ProfileProvider which expects the property alias. This means that we can easily create a friendly name in our class for the property (such as FirstName) and pass through the un-friendly name as the alisa (first_name).
Additionally I&amp;#39;ve marked all the classes with the SettingsAllowAnonymousAttribute and set it to false.
Profiles in ASP.NET Membership can support anonymous profiles, but I wont be covering that.&lt;/p&gt;
&lt;p&gt;Now that we&amp;#39;ve defined our class for the profile we need to tell ASP.NET to use it. This is really easy, thanks to the umbraco.provider.members.UmbracoProfileProvider class. This class is an implementation of the ProfileProvider abstract class, and is designed to get the profile information for an Umbraco member.&lt;/p&gt;
&lt;p&gt;So we need to set up our web.config like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;system.web&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;defaultProvider&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberProfileProvider&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;enabled&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;inherits&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberDemo.Web.MemberProfile, UmbracoMemberDemo.Web&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;providers&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberProfileProvider&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;umbraco.providers.members.UmbracoProfileProvider, umbraco.providers&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;providers&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;first_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;allowAnonymous&lt;/span&gt; =&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;provider&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberProfileProvider&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.String&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;last_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;allowAnonymous&lt;/span&gt; =&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;provider&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberProfileProvider&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.String&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;middle_name&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;allowAnonymous&lt;/span&gt; =&lt;span class=&quot;value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;provider&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;UmbracoMemberProfileProvider&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;System.String&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;system.web&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what have we done? Well on the &lt;profile /&gt; node I have defined that I want to use the UmbracoMemberProfileProvider as the default (if I had multiple profile providers defined that is of relivance) and that the profile will inherit my class UmbracoMember.Web.MemberProfile which is in the UmbracoMemberDemo.Web assembly.
This will let ASP.NET know the class type and I can then access the properties through my class.&lt;/p&gt;
&lt;p&gt;Lastly I defined the properties which are in the class, with their name being the Alias in Umbraco. I&amp;#39;ve also explicity defined the provider they will come from, again if I had multiple providers defined I could have multiple locations where I get the data, and it&amp;#39;s at the property level I would define where it comes from.&lt;/p&gt;
&lt;h2&gt;Using the Profile&lt;/h2&gt;
&lt;p&gt;Well we&amp;#39;ve set up all that really needs to be set up, it&amp;#39;s really that simple! But how do we access the data in the profile? Well I&amp;#39;m going to make an assumption that you have secured pages and the following code is being run within one.&lt;/p&gt;
&lt;p&gt;From the current HttpContext object we have access to the profile, via HttpContext.Current.Profile and this will return me a ProfileBase instance. So I can now do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;string firstName = ((MemberProfile)HttpContext&lt;span class=&quot;preprocessor&quot;&gt;.Current&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Profile&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.FistName&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And remember that the property has a setter as well, so I can write back to it as well, which will the write back to Umbraco.&lt;/p&gt;
&lt;p&gt;I can make a .NET user control and do something like this also:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;First Name: &lt;span class=&quot;vbscript&quot;&gt;&amp;lt;%= ((UmbracoMemberTester.Web.MemberProfile)Context.Profile).FirstName %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Middle Name: &lt;span class=&quot;vbscript&quot;&gt;&amp;lt;%= ((UmbracoMemberTester.Web.MemberProfile)Context.Profile).MiddleName %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Last Name: &lt;span class=&quot;vbscript&quot;&gt;&amp;lt;%= ((UmbracoMemberTester.Web.MemberProfile)Context.Profile).LastName %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That bit of code does not even require a back-end file for the User Control. And how does it look? Well just like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/2733/picture%203_500x129.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope that this has been useful and explains just how easy it can be to use standard ASP.NET features to expose Umbraco Member Types.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>C#/ .NET</title>
            <link href="/posts/2010-04-07-csharp.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-csharp.html</id>
            <content type="html">&lt;h2&gt;My Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/dynamics-library&quot;&gt;AaronPowell.Dynamics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/location-service-with-fsharp-and-twitter&quot;&gt;Location Service with F# and Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;NuGet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/nuget/global-install-package&quot;&gt;How to install a package into all projects of a solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/creating-a-nuget-plugin-engine&quot;&gt;Creating a NuGet-based plugin engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/nuget/linqpad&quot;&gt;Querying NuGet via LINQPad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LINQ Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/linq-to-xml-to-excel&quot;&gt;LINQ to XML to... Excel?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/query-syntax-vs-method-syntax&quot;&gt;Query Syntax vs Method Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lucene.Net&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/lucene-net-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The dark arts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/reflection-and-generics&quot;&gt;Reflection and Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/Recursive-anonymous-functions-the-NET-version&quot;&gt;Recursive anonymous functions - the .NET version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/why-does-this-code-work&quot;&gt;Why does this code work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/dealing-with-type-casting-limitations&quot;&gt;Dealing with type casting limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/dynamic-dictionaries-with-csharp-4&quot;&gt;Dynamic Dictionaries with C# 4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/lazy-keyedcollections&quot;&gt;Using Lazy&amp;lt;T&amp;gt; with KeyedCollection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/problems-with-assembly-trust&quot;&gt;Problems with Assembly Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/working-with-dates-and-linq-to-sql&quot;&gt;Working with dates and LINQ to SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/Handy-extension-method-for-null-coalesing&quot;&gt;Handy extension method for null-coalesing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/supporting-valuetypes-in-autofac&quot;&gt;Supporting ValueTypes in Autofac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/testable-email-sending&quot;&gt;Testable Email Sending&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/a-linq-observation&quot;&gt;A LINQ observation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Musings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/are-extension-methods-really-evil&quot;&gt;Are Extension Methods Really Evil?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Building LINQ to Umbraco</title>
            <link href="/posts/2010-04-07-building-linq-to-umbraco.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-building-linq-to-umbraco.html</id>
            <content type="html">&lt;h1&gt;In the beginning&lt;/h1&gt;
&lt;p&gt;LINQ to Umbraco is actually a lot old a project that most people realise, in fact the initial idea of LINQ to Umbraco started when I had a discussion with Niels Hartvig (founder of Umbraco) at the end of 2007 when he was running training in Melbourne.&lt;/p&gt;
&lt;p&gt;Back then C# 3.0 was just released, Visual Studio 2008 was just out and everyone was very excited about this new technology &lt;em&gt;LINQ&lt;/em&gt;. I discussed it with him and he really liked the idea of having a LINQ provider, but it was nothing more than a &amp;quot;That would be awesome!&amp;quot; idea. Keep in mind, this is before Umbraco 4.0 had even been released!&lt;/p&gt;
&lt;p&gt;About 6 months later I had got fed up with working directly with the Document API (as we were doing a lot of Document creation at the time) and I decided that I would write a wrapper for it. This project was called &lt;strong&gt;Umbraco Interaction Layer&lt;/strong&gt;, and was really just a new way to create/ edit/ delete documents. As an afterthought I decided to add &amp;quot;LINQ&amp;quot; to it, but it was again nothing more than a wrapper on top of the Document API so it was really shit slow (and would &lt;strong&gt;really&lt;/strong&gt; hammer a database!).&lt;/p&gt;
&lt;p&gt;After I released the initial version there was a lot of community excitement about having LINQ to Umbraco, so after raising it with Niels that I was planning on writing a &lt;em&gt;proper&lt;/em&gt; LINQ provider, one which wouldn&amp;#39;t bring a server to its knees I was asked to join the core team and include it in the Umbraco 4.5 release.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Training Vidoes</title>
            <link href="/posts/2010-04-07-training-videos.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-training-videos.html</id>
            <content type="html">&lt;p&gt;In an effort to get everyone up to speed with LINQ to Umbraco I have put together a series of videos. This series looks at how you can use LINQ to Umbraco to create a simple blog engine.&lt;/p&gt;
&lt;h2&gt;Session 1&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9788833&quot;&gt;Getting Stardted&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll be looking at the basics of what is required for LINQ to Umbraco.
We&amp;#39;ll look at how to generate the classes and some suggestions on how to get the best generated class names.&lt;/p&gt;
&lt;h2&gt;Session 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9790826&quot;&gt;Working with LINQ to Umbraco entities&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll be looking at the code which was generated from the first session and how we can do some basic interactions. We&amp;#39;ll also create our first control using LINQ to Umbraco.&lt;/p&gt;
&lt;h2&gt;Session 3&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9854122&quot;&gt;Delving into the UmbracoDataContext&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll be looking at the heart of LINQ to Umbraco, the UmbracoDataContext. We&amp;#39;ll look at what it&amp;#39;s role is, and how it can be used in extensibility.&lt;/p&gt;
&lt;h2&gt;Session 4&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9790069&quot;&gt;Performance and Caching&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll look at how to get the most out of performance and the caching which is built into LINQ to Umbraco.&lt;/p&gt;
&lt;h2&gt;Session 5&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9789599&quot;&gt;Paging and Control-less forms&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll be looking at how easy it is to do paging with LINQ to Umbraco entities. Also with MVC being such a hot topic I&amp;#39;ll show you how you can make a form which renders LINQ to Umbraco with no ASP.NET server controls.&lt;/p&gt;
&lt;h2&gt;Session 6&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://vimeo.com/9853289&quot;&gt;Outputting XML&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this session I&amp;#39;ll be looking at how you can transform the LINQ to Umbraco entities and generate an XML response, for something such as a RSS feed.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Overview</title>
            <link href="/posts/2010-04-07-linq-to-umbraco-overview.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-linq-to-umbraco-overview.html</id>
            <content type="html">&lt;h1&gt;What?&lt;/h1&gt;
&lt;p&gt;Anyone who has had to do a lot of work with the Umbraco API and interacting with nodes will know that using the .NET API isn&amp;#39;t &lt;em&gt;great&lt;/em&gt;. It&amp;#39;s not bad, but in a strongly typed world a loosely typed objects are no where near as much fun.&lt;/p&gt;
&lt;p&gt;Especially if you want to move around those items!&lt;/p&gt;
&lt;p&gt;Umbraco is more than just a content management system, Umbraco a great application framework. If you start looking conceptually at Document Types in Umbraco you&amp;#39;re realise that they are really just a way of &lt;em&gt;describing&lt;/em&gt; data. So to this end they are actually really great at &lt;em&gt;describing&lt;/em&gt; .NET types.&lt;/p&gt;
&lt;p&gt;LINQ to Umbraco aims to take these meta-types which you are defining within the CMS and generate strongly typed representations of them which you can work with at a .NET level.&lt;/p&gt;
&lt;p&gt;Become the types defined in Umbraco can be easily used to represent any data. To this end LINQ to Umbraco is &lt;strong&gt;provider based&lt;/strong&gt;, allowing the underling data source to be defined by the developer.&lt;/p&gt;
&lt;h2&gt;Provider Based?&lt;/h2&gt;
&lt;p&gt;Because of the way LINQ to Umbraco is designed it is possible to swap-out the way that the data is access within itself. This is what the UmbracoDataProvider class is used for.&lt;/p&gt;
&lt;p&gt;Out of the box LINQ to Umbraco supplies a single UmbracoDataProvider implementation, the &lt;strong&gt;NodeDataProvider&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The NodeDataProvider is designed to interact with the XML cache of Umbraco, working with published data. This provides read-only operations, &lt;em&gt;despite LINQ to Umbraco providing full CRUD capabilities&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;When to use it?&lt;/h1&gt;
&lt;p&gt;LINQ to Umbraco is not designed to be a replacement for XSLT, nor is it to be a complete replacement for the existing Umbraco API&amp;#39;s.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s not saying it can&amp;#39;t be used in these scenarios, but LINQ to Umbraco is best used when you&amp;#39;re looking at Umbraco data in a site-wide scope.&lt;/p&gt;
&lt;h1&gt;Design&lt;/h1&gt;
&lt;p&gt;The design of LINQ to Umbraco borrows very heavily from that of LINQ to SQL, by having a DataContext which all interactions flow out from.&lt;/p&gt;
&lt;p&gt;Because of this (and due to the provider model) there is no understanding of the data hierarchy. With the initial access of the data from the DataContext it looks at the data &lt;em&gt;as a whole picture&lt;/em&gt;, allowing you to not concern yourself with the hierarchy, unless you need it.&lt;/p&gt;
&lt;p&gt;In addition to having a LINQ to SQL style DataContext all of the hierarchy of Umbraco is matched by LINQ to Umbraco. This means that you can traverse down a node&amp;#39;s children collections, in a strongly typed manner.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Extending Umbraco Members</title>
            <link href="/posts/2010-04-07-extending-umbraco-members.html"/>
            <updated>2010-04-07T00:00:00.000Z</updated>
            <id>/posts/2010-04-07-extending-umbraco-members.html</id>
            <content type="html">&lt;p&gt;Recently we&amp;#39;ve had several projects which have come through in which we are building a solution in Umbraco and the client wants to have memberships within the site.&lt;/p&gt;
&lt;p&gt;Umbraco 3.x has a fairly neat membership system but it&amp;#39;s a bit limited when you want to interact with the member at a code level. Because members are just specialised nodes they can quite easily have custom properties put against them, but reading them in your code is less than appealing.
You&amp;#39;ve got to make sure you&amp;#39;re reading from the correct alias, typing checking, null checking, etc.&lt;/p&gt;
&lt;p&gt;And as I kept finding I was writing the same code over and over again for the reading and writing to the properties I thought I&amp;#39;d put together a small framework class.&lt;/p&gt;
&lt;p&gt;The framework requires the following Umbraco DLL&amp;#39;s:
&lt;em&gt; businesslogic.dll
&lt;/em&gt; cms.dll&lt;/p&gt;
&lt;p&gt;So lets look at some sections of the class.&lt;/p&gt;
&lt;h2&gt;Default Properties&lt;/h2&gt;
&lt;p&gt;A member has a few default properties which are also built into the framework. There are also a few additional properties which the framework uses (such as the MembershipTypeId) which are coded in. All of the default properties are virtual so they can be overriden if so desired.
&lt;img src=&quot;http://www.aaron-powell.com/media/746/umbmember01.png&quot; alt=&quot;Properties&quot;&gt;&lt;/p&gt;
&lt;p&gt;An interesting addition I have made is the IsDirty property. This is used later on during the Save to ensure that only members who have actually got data changed are saved back into Umbraco. This limits database hits and improves performance.&lt;/p&gt;
&lt;h2&gt;Constructors&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve found that there are 3 really useful constructors, a new member constructor and two existing member constructors.
&lt;img src=&quot;http://www.aaron-powell.com/media/751/umbmember02.png&quot; alt=&quot;Constructors&quot;&gt;&lt;/p&gt;
&lt;p&gt;What you&amp;#39;ll notice from this is that the constructor which takes an Umbraco member is actually marked as private. This is because the framework is targetted at multi-teired applications, like MVC/ MVP where you want to keep data layers separate from the others. And by doing this you can avoid having the Umbraco DLL&amp;#39;s included in any other project in your solution.&lt;/p&gt;
&lt;p&gt;Next you&amp;#39;ll notice a call to the method &lt;em&gt;PopulateCustomProperties&lt;/em&gt;, this is an abstract method which you need to implement yourself to populate your own properties on a membership object.&lt;/p&gt;
&lt;p&gt;Click to see the &lt;a href=&quot;http://www.aaron-powell.com/media/756/umbmember03.png&quot;&gt;Saving&lt;/a&gt; method.&lt;/p&gt;
&lt;p&gt;Notice the use of the IsDirty flag to ensure we&amp;#39;re only saving what we should save.&lt;/p&gt;
&lt;h2&gt;Helper Methods&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve provided a few helper methods which can be used for the reading and writing of custom properties on the Umbraco membership object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/761/umbmember04_499x399.jpg&quot; alt=&quot;Helper Methods&quot;&gt;&lt;/p&gt;
&lt;p&gt;The two get methods handle the null and default data checking, along with casting back to the appriate data type. Here&amp;#39;s an example implementation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/766/umbmember05_494x45.jpg&quot; alt=&quot;Helper usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;The save is really just a shortcut, I was sick of typing out that same command every time, to use it you would call it from the &lt;em&gt;PrepareMemberForSaving&lt;/em&gt; method like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.aaron-powell.com/media/771/umbmember06_499x139.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And we&amp;#39;re done&lt;/p&gt;
&lt;p&gt;So there you have it, a simple little class for creating a .NET implementation of an Umbraco member.&lt;/p&gt;
&lt;p&gt;There are two downloads available, Member.cs or a compiled DLL.&lt;/p&gt;
&lt;p&gt;It will be interesting though when Umbraco 4 ships and the membership model changes to use the ASP.NET membership providers...&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Random Stuff!</title>
            <link href="/posts/2010-04-06-random.html"/>
            <updated>2010-04-06T00:00:00.000Z</updated>
            <id>/posts/2010-04-06-random.html</id>
            <content type="html">&lt;h2&gt;Random posts and Ranting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2009-a-year-in-review&quot;&gt;2009, a year in review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/oh-woe-is-(mobile)me&quot;&gt;Oh woe is (Mobile)Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2010-a-year-in-review&quot;&gt;2010, a year in review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful Tools&lt;/h2&gt;
&lt;h3&gt;Developer Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linqpad.net/&quot;&gt;LinqPad&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Best way to test C# or VB.NET without having to create a console application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://notepad-plus.sourceforge.net/&quot;&gt;Notepad++&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;My choice for a Notepad replacement. Syntax highlighting in just about every language&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.red-gate.com/products/reflector/&quot;&gt;RedGate&amp;#39;s Reflector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;If you&amp;#39;re a .NET dev and don&amp;#39;t have this installed get out of my framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ultrapico.com/Expresso.htm&quot;&gt;Expresso&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;By far my favorite Regular Expression builder and tester&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://winmerge.org/&quot;&gt;WinMerge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;If you&amp;#39;re using SVN, or just need to be able to diff and merge files or folders this is what you want&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web Developer Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I was a fan of &lt;a href=&quot;http://www.fiddler2.com/fiddler2/&quot;&gt;Fiddler&lt;/a&gt; but since using Charles I can&amp;#39;t go back. I don&amp;#39;t know how they can do so much stuff with Java! Supports all major OS&amp;#39;s. I don&amp;#39;t care that it&amp;#39;s not free, it&amp;#39;s completely worth the money&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Administration Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smartftp.com/&quot;&gt;SmartFTP&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I&amp;#39;ve used a lot of FTP clients and this is by far the best. Lovely UI, great FTP management, but my favorite feature would have to be the differential uploading. It looks at a file and works out if it should be replaced. Saves bandwidth by not uploading what you don&amp;#39;t need to upload. It&amp;#39;s also highly configurable. Well worth the money&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mremote.org/wiki/&quot;&gt;mRemote&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Need to RDP into lots of machines? This is the best tool I&amp;#39;ve used for that. Supports all major remote-connection protocols. Having the ability to create folders and &amp;quot;filter down&amp;quot; the settings to the connections within it is great if you need to use the same credentials on lots of machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Web Development</title>
            <link href="/posts/2010-04-04-web-dev.html"/>
            <updated>2010-04-04T00:00:00.000Z</updated>
            <id>/posts/2010-04-04-web-dev.html</id>
            <content type="html">&lt;p&gt;Being a web developer by trade, and primarily an ASP.NET developer I come across a few musings around fun things to do.&lt;/p&gt;
&lt;h2&gt;My Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-tools&quot;&gt;JavaScript Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/ole&quot;&gt;Ole&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.slace.biz/slidee&quot;&gt;Slidee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/whatkey-net-for-your-javascript-keycode-glory&quot;&gt;WhatKey.Net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/serverhere&quot;&gt;ServerHere - When you just need a webserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/sydjs-javascript-frameworks&quot;&gt;JavaScript frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ASP.NET&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/webforms-mvp-contrib&quot;&gt;ASP.NET Web Forms MVP Contrib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/webforms-mvp&quot;&gt;ASP.NET Web Forms MVP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/yes-i-like-webforms&quot;&gt;Yes, I LIKE WebForms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ASP.NET MVC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/aspnet-mvc-model-binding-with-implicit-operators&quot;&gt;Model binding with implicit operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/aspnet-mvc-xml-action-result&quot;&gt;XML Action Result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/http-compression-mvc-fileresult&quot;&gt;Using HttpCompression libraries and ASP.NET MVC FileResult&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JavaScript &amp;amp; jQuery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/recursive-anonymous-functions&quot;&gt;Recursive Anonymous Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/creating-jquery-plugins-from-ms-ajax-components&quot;&gt;Creating jQuery plugins for MS AJAX components, dynamically!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/client-event-pool&quot;&gt;The Client Event Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/linq-in-javascript&quot;&gt;LINQ in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/no-value-when-settings-dropdown-with-javascript&quot;&gt;Not getting DropDownList value when setting it via JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-singleton&quot;&gt;JavaScript functions that rewrite themselves!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/web-dev/in-browser-storage&quot;&gt;A look at browser storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blink&quot;&gt;Implementing the blink tag using jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/marquee&quot;&gt;Implementing the marquee tag using jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aaron-powell.com/doing-it-wrong/blinking-marquee&quot;&gt;Combining blink and marquee!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/web-dev/in-browser-storage&quot;&gt;A look at browser storage options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/javascript-animation&quot;&gt;Animating with JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/web-dev/ie9-console-thoughts&quot;&gt;Making the Internet Explorer JavaScript tools better&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/sharepoint-feature-corrupts-page-layout&quot;&gt;SharePoint feature corrupts page layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Umbraco</title>
            <link href="/posts/2010-04-01-umbraco.html"/>
            <updated>2010-04-01T00:00:00.000Z</updated>
            <id>/posts/2010-04-01-umbraco.html</id>
            <content type="html">&lt;h1&gt;LINQ to Umbraco&lt;/h1&gt;
&lt;p&gt;LINQ to Umbraco is a new API which is coming in Umbraco 4.1 that will provide a provider-model LINQ API for working with Umbraco data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/linq-to-umbraco-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/understanding-linq-to-umbraco&quot;&gt;Understanding LINQ to Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/iqueryable-linq-to-umbraco&quot;&gt;Why no IQuerable in LINQ to Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/training-videos&quot;&gt;Training Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/building-linq-to-umbraco&quot;&gt;Building LINQ to Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/rssdataprovider-for-linq-to-umbraco&quot;&gt;Creating a RssDataProvider for LINQ to Umbraco&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;LINQ to Umbraco Extensions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/linq-to-umbraco-extensions&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bitbucket.org/slace/linq-to-umbraco-extensions&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Creating a custom LINQ to Umbraco data provider&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/documentdataprovider-tree&quot;&gt;Implementing a Tree class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Umbraco API&lt;/h1&gt;
&lt;p&gt;The Umbraco API is powerful, but it has some very fun things within it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/the-great-umbraco-api-misconception&quot;&gt;The great Umbraco API misconception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/extending-umbraco-members&quot;&gt;Extending Umbraco Members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-members-profiles&quot;&gt;Umbraco Member Profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-event-improvments&quot;&gt;Umbraco Event Improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-data-type-design&quot;&gt;Umbraco DataType Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/unit-testing-with-umbraco&quot;&gt;Unit Testing with Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/custom-umbraco-macro-engines&quot;&gt;Custom Umbraco Macro Engines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/nhaml-umbraco-macroengine&quot;&gt;NHaml Umbraco Macro Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;User group sessions &amp;amp; Speaking arrangements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-auspac-january-2010&quot;&gt;January 2010&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/dddmelbourne-umbraco&quot;&gt;DDD Melbourne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/codegarden-10&quot;&gt;CodeGarden 10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;General Umbraco&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/why-no-umbraco&quot;&gt;Why not Umbraco on Aaron-Powell.com?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/why-im-not-a-fan-of-xslt&quot;&gt;Why I&amp;#39;m not a fan of XSLT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/Exception-thrown-when-using-XSLT-extensions&quot;&gt;Exception thrown when using XSLT extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mercurial-101-for-umbraco-developers&quot;&gt;Mercurial 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-and-mercurial-how-to-contribute&quot;&gt;A Guide to Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/how-i-developer-umbraco&quot;&gt;How I develop Umbraco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scripting with Umbraco&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-menu-with-ironruby&quot;&gt;Creating a menu in Umbraco with IronRuby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-ironruby-tips-and-tricks&quot;&gt;IronRuby tips and tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/umbraco-4-and-razor&quot;&gt;Using Razor in Umbraco 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Recursive anonymous functions - the .NET version</title>
            <link href="/posts/2009-07-15-recursive-anonymous-functions-the-net-version.html"/>
            <updated>2009-07-15T00:00:00.000Z</updated>
            <id>/posts/2009-07-15-recursive-anonymous-functions-the-net-version.html</id>
            <content type="html">&lt;p&gt;When playing around with JavaScript I decided to have a look at creating &lt;a href=&quot;/Recursive-anonymous-functions&quot;&gt;recursive anonymous functions&lt;/a&gt;, which are a good bit of fun.&lt;/p&gt;
&lt;p&gt;Well I decided to have a challange, could you do it in .NET? Well lets ignore the pointlessness of the exercise and just enjoy the challenge.&lt;/p&gt;
&lt;p&gt;Well, I did it, it&amp;#39;s sure as shit isn&amp;#39;t pretty but hey, it works. In this post I&amp;#39;ll show off how it works, but to sum it up - &lt;strong&gt;Reflection&lt;/strong&gt;. But not where near as much as you&amp;#39;d think.&lt;/p&gt;
&lt;p&gt;Part of why I wanted to try it was for LINQ to Umbraco, see the performance of how we&amp;#39;re loading nodes at the moment and if we could optimise it (and this isn&amp;#39;t the way if there is one!).
I&amp;#39;m doing a recursive call against a XML file, trying to find a node which is at a depth I don&amp;#39;t know.&lt;/p&gt;
&lt;p&gt;With JavaScript functions there&amp;#39;s the really nice argument.callee which is a reference to the method executing the current method, sadly in .NET we don&amp;#39;t have that, so we have to find it ourselves.
Remember, this is an anonymous function, but .NET doesn&amp;#39;t have true anonymous functions, the compiler creates it on our behalf. The method name is something like &amp;quot;&amp;lt;&amp;gt;b__0&amp;quot;, but it&amp;#39;s compile time generated so I don&amp;#39;t really know (I&amp;#39;m sure if you read the documentation on the C# compiler you may be able to work it out, good luck with that :P).&lt;/p&gt;
&lt;p&gt;We need to look into the stack frame to work out where we are, like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thisMethod = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StackFrame(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).GetMethod();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will return an object representatnion of the current method, which we can invoke ourselves!&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;XElement&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;thisMethod&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;nvoke&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e, new object[] &lt;span class=&quot;tuple&quot;&gt;{ ee }&lt;/span&gt;)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what&amp;#39;s the invoke doing? Well we&amp;#39;re passing in an instance of the current XElement (e) and we&amp;#39;re doing it for each of that XElements children (e.Elements(), represented by ee). Here&amp;#39;s the recursive part of the method.&lt;/p&gt;
&lt;p&gt;So lets put it all together:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e.&lt;span class=&quot;variable&quot;&gt;Name&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;what_i_want&quot;&lt;/span&gt;)&lt;/span&gt;
{
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;;
}
&lt;span class=&quot;title&quot;&gt;else&lt;/span&gt;
{
    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e.&lt;span class=&quot;variable&quot;&gt;Elements&lt;/span&gt;()&lt;/span&gt;.C&lt;span class=&quot;title&quot;&gt;ount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; != 0)
    {
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thisMethod&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;new&lt;/span&gt; S&lt;span class=&quot;title&quot;&gt;tackFrame&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;.G&lt;span class=&quot;title&quot;&gt;etMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;XElement&lt;/span&gt; ee in e.&lt;span class=&quot;variable&quot;&gt;Elements&lt;/span&gt;()&lt;/span&gt;)
            &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;XElement&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;thisMethod&lt;/span&gt;.I&lt;span class=&quot;title&quot;&gt;nvoke&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(e, new object[] &lt;span class=&quot;tuple&quot;&gt;{ ee }&lt;/span&gt;)&lt;/span&gt;;
    }
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;null&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that&amp;#39;s the body of the anonymous function, where the variable &lt;strong&gt;e&lt;/strong&gt; is a XElement object. We check the name against the one we want, if it&amp;#39;s not we&amp;#39;ll check it&amp;#39;s children.
Alternatively you could do this as a Func&lt;XElement, bool&gt; which would only return the items into the IEnumerable&amp;lt;&amp;gt;, but by returning null we can see how many trees were followed which turned out to be duds. Just change the return statements to boolean values and pass it to anything that takes Func&lt;XElement, bool&gt; (like Where, First, etc).&lt;/p&gt;
&lt;p&gt;So how do we use it? Like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodes = root.Elements().Select(e =&amp;gt;
{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e.Name == &lt;span class=&quot;string&quot;&gt;&quot;what_i_want&quot;&lt;/span&gt;)
    {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e;
    }
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
    {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (e.Elements().Count() != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
        {
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thisMethod = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StackFrame(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).GetMethod();
            &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (XElement ee &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; e.Elements())
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (XElement)thisMethod.Invoke(e, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;[] { ee });
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And how does it perform, well it&amp;#39;s about 10x slower, but hey, there&amp;#39;s nothing wrong with trying to achieve something crazy! :P&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Recursive Anonymous Functions</title>
            <link href="/posts/2009-06-06-recursive-anonymous-functions.html"/>
            <updated>2009-06-06T00:00:00.000Z</updated>
            <id>/posts/2009-06-06-recursive-anonymous-functions.html</id>
            <content type="html">&lt;p&gt;I was on &lt;a href=&quot;http://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; the other day and I was reading a post about the &lt;a href=&quot;http://stackoverflow.com/questions/63241/what-is-the-strangest-programming-language-you-have-used&quot;&gt;strangest programming language you&amp;#39;ve ever used&lt;/a&gt;. While looking at what people have used I realized I haven&amp;#39;t worked with anything that strange.&lt;/p&gt;
&lt;p&gt;But then I was thinking there is one language I used that&amp;#39;s a bit strange, &lt;strong&gt;JavaScript&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Without going into all the weirdness of the JavaScript language I&amp;#39;d like to focus on one bit craziness which I&amp;#39;m quite fond of, &lt;strong&gt;self executing recursive anonymous functions&lt;/strong&gt;. Yeah it&amp;#39;s a bit of mouthful but it&amp;#39;s also a bit of fun, and may even have some practical uses.&lt;/p&gt;
&lt;p&gt;We&amp;#39;re all familiar with JavaScripts ability to do anonymous functions, they are often used within event delegates and and constantly used when doing jQuery. Something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;'#button'&lt;/span&gt;).click(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; } );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that&amp;#39;s the anonymous part of what we&amp;#39;re trying to achieve, now lets look at self executing functions.
JavaScript can do self executing functions, they are generally used for creating objects. jQuery is in fact an example of this, which is why if you do a &lt;strong&gt;typeof jQuery&lt;/strong&gt; you get &lt;strong&gt;function&lt;/strong&gt; as the response. For example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var result = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; })();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the () at the end, this tells the function to execute and take no parameters. But you can also do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var result = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(node) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; } )(document.getElementById(&lt;span class=&quot;string&quot;&gt;'button'&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m not going to cover what a recursive function is, I&amp;#39;m sure we all know what they are, but I did raise a problem, we&amp;#39;re using anonymous functions, how do I call a function without a name?&lt;/p&gt;
&lt;p&gt;Well JavaScript actually has a way of doing this, every JavaScript function has a hidden parameter called arguments, this is a collection of all the arguments passed into the function in the order they were passed in. So you can do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lisp&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;)&lt;/span&gt;&lt;/span&gt; {
  for&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;body&quot;&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; arguments.length; i++) {&lt;/span&gt;
    alert&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;title&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;body&quot;&gt;[i])&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
  }
})&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;body&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will do two alerts, the first saying &lt;em&gt;hello&lt;/em&gt; the second saying &lt;em&gt;world&lt;/em&gt;. But there&amp;#39;s another property on the arguments object, &lt;strong&gt;arguments.callee&lt;/strong&gt;. This is a reference to the method which called the current function. And because it&amp;#39;s a reference to the function we can have some real fun, because you can &lt;strong&gt;execute arguments.callee&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Say I wanted to know if a node as a child of a node with a particular ID, I can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isChild = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(node) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(node.id === &lt;span class=&quot;string&quot;&gt;'parent'&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; argument.callee(node.parentNode);
    }
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
  }
})(document.getElementById(&lt;span class=&quot;string&quot;&gt;'child'&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How nifty! Ok, yeah it does make the function a lot less reusable, but hey, this was an example of craziness of the JavaScript language! Oh, and I have used this before, see my post &lt;a href=&quot;/creating-jquery-plugins-from-ms-ajax-components&quot;&gt;Creating jQuery plugins for MS AJAX components, dynamically&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And this is why JavaScript is the strangest language I have ever used.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Query Syntax vs Method Syntax</title>
            <link href="/posts/2009-05-19-query-syntax-vs-method-syntax.html"/>
            <updated>2009-05-19T00:00:00.000Z</updated>
            <id>/posts/2009-05-19-query-syntax-vs-method-syntax.html</id>
            <content type="html">&lt;p&gt;While working on an IQueryable&amp;lt;T&amp;gt; provider I was having a problem when doing LINQ statements via the Query Syntax that wasn&amp;#39;t happening when using the Method Syntax (chained lambda expressions).&lt;/p&gt;
&lt;p&gt;And that problem has lead to an observation I made about LINQ, well, about Expression-based LINQ (ie - something implementing IQueryable, so LINQ to SQL, etc).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll use LINQ to SQL for the examples as it&amp;#39;s more accessible to everyone.&lt;/p&gt;
&lt;p&gt;Take this LINQ statement (where ctx is an instance of my DataContext):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items = ctx&lt;span class=&quot;preprocessor&quot;&gt;.Items&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That statement returns an object of Table&amp;lt;Item&amp;gt;, which implements IQueryable&amp;lt;T&amp;gt;, IEnumerable&amp;lt;T&amp;gt; (and a bunch of others that are not important for this instructional). So it&amp;#39;s not executed yet, no DB query has occured, etc. Now lets take this LINQ statement:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; items2 = &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ctx.Items &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; item;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time I get a result of IQueryable&amp;lt;Item&amp;gt;, which implements IQueryable&amp;lt;T&amp;gt; (duh!) and IEnumerable&amp;lt;T&amp;gt; (and again, a bunch of others).&lt;/p&gt;
&lt;p&gt;Both of these results have a non-public property called Expression. This reperesents the expression tree which is being used to produce our collection. But here&amp;#39;s the interesting part, they are not the same. That&amp;#39;s right, although you&amp;#39;re getting back basically the same result, the expression used to produce that result is really quite different.&lt;/p&gt;
&lt;p&gt;This is due to the way the compiler translates the query syntax of LINQ into a lambda syntax. In reality the 2nd example is equal to this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items2 = ctx&lt;span class=&quot;preprocessor&quot;&gt;.Items&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(item =&amp;gt; item)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But is this really a problem, what difference does it make? In the original examples you actually get back the same data every time. You&amp;#39;ll have slightly less overhead by using the access of Table&amp;lt;T&amp;gt; rather than IQueryable&amp;lt;T&amp;gt;, due to the fact that you&amp;#39;re not doing a redundant call to Select. But in reality you would not notice the call.&lt;/p&gt;
&lt;p&gt;This has caused a problem for me as my direct-access lambda syntax fails my current unit test, where as the query syntax passes. Now to solve that problem! ;)&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Creating jQuery plugins for MS AJAX components, dynamically!</title>
            <link href="/posts/2009-05-05-creating-jquery-plugins-from-ms-ajax-components.html"/>
            <updated>2009-05-05T00:00:00.000Z</updated>
            <id>/posts/2009-05-05-creating-jquery-plugins-from-ms-ajax-components.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;http://weblogs.asp.net/bleroy/&quot;&gt;Bertrand Le Roy&lt;/a&gt; had an interesting post entitled &lt;a href=&quot;http://weblogs.asp.net/bleroy/archive/2009/05/04/creating-jquery-plug-ins-from-microsoftajax-components.aspx&quot;&gt;Creating jQuery plug-ins from MicrosoftAjax components&lt;/a&gt;. It&amp;#39;s not a bad concept, but I miss read it when I first had a read, I thought it was creating all of certain types into a jQuery plug-ins.&lt;/p&gt;
&lt;p&gt;But as I said I miss read it, no drama, I decided to create that on my own. So I created a simple function for Microsoft AJAX which will turn all the loaded Sys.UI.Control types into jQuery plug-ins:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;type&quot;&gt;Sys&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Application&lt;/span&gt;.add_load(function() {
    var &lt;span class=&quot;typedef&quot;&gt;types = new &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;
    for (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Sys&lt;/span&gt;.__upperCaseTypes) {
        var t = &lt;span class=&quot;type&quot;&gt;Sys&lt;/span&gt;.__upperCaseTypes[i];
        var ret = (function(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
            &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__class&lt;/span&gt;) {
                &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__baseType&lt;/span&gt;) {
                    &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__baseType&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__typeName&lt;/span&gt; === &quot;&lt;span class=&quot;type&quot;&gt;Sys&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;UI&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Control&lt;/span&gt;&quot;) {
                        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;true&lt;/span&gt;;
                    }&lt;/span&gt; else &lt;span class=&quot;container&quot;&gt;{
                        &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;callee&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__baseType&lt;/span&gt;);
                    }&lt;/span&gt;&lt;/span&gt;
                } 
            }
        })(t);
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) &lt;span class=&quot;typedef&quot;&gt;types.push&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;
    }

    for (var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;typedef&quot;&gt;types.length; i++) &lt;span class=&quot;container&quot;&gt;{
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;types&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;];
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nameParts&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__typeName&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;(&quot;.&quot;);
        &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;__typeName&lt;/span&gt;;
        &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;nameParts&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;length&lt;/span&gt; &amp;gt; 1) {
            &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;nameParts&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;nameParts&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;length&lt;/span&gt; - 1];
        }&lt;/span&gt;&lt;/span&gt;
        jQuery.fn[name] = function(properties) {
            return this.each(function() {
                &lt;span class=&quot;type&quot;&gt;Sys&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Component&lt;/span&gt;.create(t.__typeName, properties, {}, {}, this);
            });
        }
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks at the collection of registered types which are done when you do &lt;strong&gt;MyType.registerClass(&amp;quot;MyType&amp;quot;);&lt;/strong&gt; so it&amp;#39;s nice easily does them all.
It&amp;#39;ll automatically create a plug-in for any type inheriting from Sys.UI.Control, but it can easily be done to any base type which want. So you could use Sys.Component (although I don&amp;#39;t recommend it).&lt;/p&gt;
&lt;p&gt;Yeah it&amp;#39;s not really that practical, especially if you have a lot of controls, but it&amp;#39;s just a POC. If I get some time I&amp;#39;ll modify it to check interfaces instead :P&lt;/p&gt;
</content>
        </entry>
    
</feed>