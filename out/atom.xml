<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LINQ to Fail</title>
    <subtitle>.net, C#, asp.net, umbraco</subtitle>
    <link href="http://www.aaron-powell.com/atom.xml" rel="self" />
    <link href="http://www.aaron-powell.com" />
    <updated>2014-01-12T10:13:00.809Z</updated>
    <id>http://www.aaron-powell.com</id>
    <author>
        <name>Aaron Powell</name>
        <email>me@aaron-powell.com</email>
    </author>

    
        <entry>
            <title>Integration testing authenticated Katana applications</title>
            <link href="http://www.aaron-powell.com/posts/2014-01-12-integration-testing-katana-with-auth.html"/>
            <updated>2014-01-12T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2014-01-12-integration-testing-katana-with-auth.html</id>
            <content type="html">&lt;p&gt;Recently I got to work on a project where we were building an ASP.Net WebAPI project for the client. One of the requirements of this project was that the API which we produced was authenticated, basically everything exposed had to be authenticated, and because it was a brand new project we decided to go down the path of WebAPI 2.0 and use the new Katana/OWIN system along with OAuth for the authentication.&lt;/p&gt;
&lt;p&gt;Another hurdle we had when putting the API together was that it was to sit on top of a legacy system which contained a lot of business logic which was written in a way which we couldn&amp;#39;t unit test, it was very tightly coupled to the database and as our timeline&amp;#39;s didn&amp;#39;t afford us to rewrite it all from scratch we instead opted to rely on integration testing.&lt;/p&gt;
&lt;p&gt;But that raises an important question, how do you run your WebAPI end-point to be used in the tests? You could:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start up IIS Express, like you&amp;#39;re &lt;em&gt;F5-ing&lt;/em&gt; from Visual Studio (how we were developing)&lt;/li&gt;
&lt;li&gt;Deploy to IIS, but then you&amp;#39;re deploying code that hasn&amp;#39;t ticked all the boxes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither of these were ideal solutions, while IIS Express is &lt;em&gt;ok&lt;/em&gt; for development it&amp;#39;s not truly IIS so you&amp;#39;re integration tests are already one step removed from the real environment, meaning they are less accurate. As for deploying to IIS, we deemed that to be equally as risky; you&amp;#39;re either requiring the build server to also have IIS running on it or you&amp;#39;re deploying to another server and then you&amp;#39;ve got to handle the deployments, how do you setup/teardown the IIS instance? Do you do it as part of the test run? Again this was feeling like adding risk that we shouldn&amp;#39;t need to have for preconditions.&lt;/p&gt;
&lt;h1 id=&quot;owin-to-the-rescue&quot;&gt;OWIN to the rescue&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve blogged and presented about OWIN in the past, it&amp;#39;s a really cool concept and this was the first time I was looking to do a production deployment using it, and there&amp;#39;s one feature of OWIN that made it really appealing to solve our problems... Self Hosting.&lt;/p&gt;
&lt;p&gt;Because OWIN is a separation between your code and the hosting platform your code doesn&amp;#39;t care how it&amp;#39;s hosted, only that it is, so you can go from hosting in IIS to self hosting inside an assembly with very little effort and this is what we were enticed by, through the self hosting we could spin up our API project &lt;strong&gt;inside of the test project as a HTTP server&lt;/strong&gt; and then interact with it via HTTP client requests! AWESOME!&lt;/p&gt;
&lt;p&gt;I&amp;#39;m not going to blog on how to do that, &lt;a href=&quot;http://www.strathweb.com/2013/12/owin-memory-integration-testing/&quot;&gt;Filip W beat me to it&lt;/a&gt; so that solved our first problem, being able to setup an integration test which ran our server.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: You may be thinking that because we&amp;#39;re using Self Host and not IIS (which is the production host) that we&amp;#39;ve got a similar problem to using IIS Express but I&amp;#39;d disagree. We&amp;#39;re still using the full WebAPI stack, we&amp;#39;re still using the full OWIN/Katana stack, we&amp;#39;re just not using IIS and you&amp;#39;re application should be none the wiser. If you&amp;#39;re application knows it&amp;#39;s running on IIS then I&amp;#39;d argue you have a bigger problem.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;handling-authentication&quot;&gt;Handling authentication&lt;/h1&gt;
&lt;p&gt;As I said one of the main bridges we&amp;#39;d have to cross on this project was that all the API calls were to be authenticated, which means that when you&amp;#39;re running your tests you need to take that into account. So what do you do? Well you could write something to bypass the authentication for the test run, but then you&amp;#39;re integration test is no longer really representative.&lt;/p&gt;
&lt;p&gt;But what you need to remember is that because you&amp;#39;re running your code through a self hosted WebAPI you&amp;#39;ve got the full WebAPI stack, so the &lt;code&gt;[Authorize]&lt;/code&gt; attribute will be in effect so you&amp;#39;re going to actually have an authenticated request pipeline.&lt;/p&gt;
&lt;p&gt;Ok, let&amp;#39;s take the starting point that &lt;a href=&quot;http://www.strathweb.com&quot;&gt;Filip W&lt;/a&gt; gave us, and start expanding on it, I&amp;#39;m going to extract my server set up into its own base class:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;axapta&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseServerTest&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; TestServer &lt;span class=&quot;keyword&quot;&gt;server&lt;/span&gt;;

    [TestInitialize]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Setup()
    {
        &lt;span class=&quot;keyword&quot;&gt;server&lt;/span&gt; = TestServer.Create(app =&amp;gt;
        {
            var startup = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Startup();
            startup.ConfigureAuth(app);

            var config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration();
            WebApiConfig.Register(config);

            app.UseWebApi(config);
        });
    }

    [TestCleanup]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Teardown()
    {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;server&lt;/span&gt; != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
            &lt;span class=&quot;keyword&quot;&gt;server&lt;/span&gt;.Dispose();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what we&amp;#39;ve got here is a call to create a new in-memory OWIN server, it&amp;#39;s using the &lt;code&gt;Startup&lt;/code&gt; class that my WebAPI app would use, as well as the WebAPI configuration (so routes, filters, etc) are configured. Now I want to make it easier to handle the &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; methods. To do this I&amp;#39;m going to add an &lt;code&gt;abstract&lt;/code&gt; property to represent the URI that the tests are for, and two method stubs:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Uri { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; }

&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; async Task&amp;lt;HttpResponseMessage&amp;gt; GetAsync()
{
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException();
}

&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; async Task&amp;lt;HttpResponseMessage&amp;gt; PostAsync&amp;lt;TModel&amp;gt;(TModel model)
{
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NotImplementedException
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I&amp;#39;m going to quickly jump over to writing some integration tests for my user registration because well I&amp;#39;ll need to register a user before I can run and tests:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;[TestClass]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AccountControllerTests&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;BaseServerTest&lt;/span&gt;
{&lt;/span&gt;
    [TestMethod]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; Task CanRegisterUser()
    {
    }

    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; uriBase = &lt;span class=&quot;string&quot;&gt;&quot;/api/account&quot;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; uri = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Empty;

    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Uri
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; uri; }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve split the URI into two parts, there&amp;#39;s the URI base, being &lt;code&gt;/api/account&lt;/code&gt; and the &lt;em&gt;actual&lt;/em&gt; URI for the abstract class implementation. The reason for this is that (at least in the default WebAPI project template) the &lt;code&gt;AccountController&lt;/code&gt; isn&amp;#39;t just a REST interface, but instead has multiple methods on it that I&amp;#39;ll want to hit (things like change password, login and so on which I &lt;strong&gt;won&amp;#39;t&lt;/strong&gt; cover in this post). So let&amp;#39;s go ahead and implement the test method itself:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestMethod]
public async Task CanRegisterUser()
{
    uri = uriBase + &lt;span class=&quot;string&quot;&gt;&quot;/register&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var model = new RegisterBindingModel
    {
        UserName = &lt;span class=&quot;string&quot;&gt;&quot;aaronpowell&quot;&lt;/span&gt; + DateTimeOffset&lt;span class=&quot;preprocessor&quot;&gt;.Now&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Ticks&lt;/span&gt;,
        Password = &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;,
        ConfirmPassword = &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;
    }&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    var response = await PostAsync(model)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    Assert&lt;span class=&quot;preprocessor&quot;&gt;.AreEqual&lt;/span&gt;(HttpStatusCode&lt;span class=&quot;preprocessor&quot;&gt;.OK&lt;/span&gt;, response&lt;span class=&quot;preprocessor&quot;&gt;.StatusCode&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What am I doing here? I&amp;#39;m:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Saying that this request is going to hit &lt;code&gt;/api/account/register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using the model which the &lt;code&gt;AccountContoller.Register&lt;/code&gt; method is taking as an input argument&lt;/li&gt;
&lt;li&gt;Calling my &lt;code&gt;PostAsync&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Asserting that we got a successful response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally you could write an assert that peaks into the database and validates that the user is there, but that&amp;#39;s an exercise for the reader.&lt;/p&gt;
&lt;p&gt;I really like that you can use the model from WebAPI to do the processing, this gives us the advantage of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type safety, if the class is refactored our test will also be refactored&lt;/li&gt;
&lt;li&gt;We leverage model binding and model validation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Side note: You&amp;#39;ll notice I&amp;#39;m appending &lt;code&gt;DateTimeOffset.Now.Ticks&lt;/code&gt; to the username, that&amp;#39;s because we need a unique username each time. Depending on whether you&amp;#39;re creating a new DB for each test run or not you may want to handle this better.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So how does our &lt;code&gt;PostAsync&lt;/code&gt; work? Well let&amp;#39;s implement it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; async Task&amp;lt;HttpResponseMessage&amp;gt; PostAsync&amp;lt;TModel&amp;gt;(TModel model)
{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; await server.CreateRequest(Uri)
        .And(request =&amp;gt; request.Content = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ObjectContent(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(TModel), model, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonMediaTypeFormatter()))
        .PostAsync();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep it&amp;#39;s really quite simple. You&amp;#39;ll see here that I&amp;#39;m grabbing the &lt;code&gt;Uri&lt;/code&gt; property our class implements, which saves it being passed in, and then we&amp;#39;re just leveraging the methods available from the &lt;code&gt;TestServer&lt;/code&gt; class to build up the request and eventually &lt;code&gt;POST&lt;/code&gt; the content up. But how do we get the content up there? Well we leverage the &lt;code&gt;And&lt;/code&gt; extension method which we have a lambda that can set properties on the request, in this case we setting the request content, serialized as JSON, but you can use any available &lt;code&gt;MediaTypeFormatter&lt;/code&gt; so this can be nifty if you&amp;#39;re working with your own formatters.&lt;/p&gt;
&lt;p&gt;Now if we run our test it should pass with flying colours.&lt;/p&gt;
&lt;h2 id=&quot;making-a-get-&quot;&gt;Making a &lt;code&gt;GET&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve got the &lt;code&gt;POST&lt;/code&gt; sorted, what about &lt;code&gt;GET&lt;/code&gt;? This time I&amp;#39;m going to go for the &lt;code&gt;ValuesController&lt;/code&gt; (which comes in the default project template). Now this is an authenticated controller so we can start off with writing a test that if there&amp;#39;s no credentials we fail our test:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;python&quot;&gt;[TestClass]
public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ValuesControllerTests&lt;/span&gt; :&lt;/span&gt; BaseServerTest
{
    [TestMethod]
    public async Task ShouldGetUnauthorizedWithoutLogin()
    {
        var response = await GetAsync();

        Assert.AreEqual(HttpStatusCode.Unauthorized, response.StatusCode);
    }

    protected override string Uri
    {
        get { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/api/values&quot;&lt;/span&gt;; }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this &lt;code&gt;Assert&lt;/code&gt; should make sense, no credentials, you get a &lt;code&gt;401&lt;/code&gt; response. But what does the &lt;code&gt;GetAsync&lt;/code&gt; method look like?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; virtual async Task&amp;lt;HttpResponseMessage&amp;gt; GetAsync()
{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; await server&lt;span class=&quot;variable&quot;&gt;.CreateRequest&lt;/span&gt;(Uri)&lt;span class=&quot;variable&quot;&gt;.GetAsync&lt;/span&gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sorry, not very exciting is it! Really all we&amp;#39;re doing is nicely wrapping around the &lt;code&gt;CreateRequest&lt;/code&gt; method call&lt;/p&gt;
&lt;h1 id=&quot;where-s-the-authentication-&quot;&gt;Where&amp;#39;s the authentication?&lt;/h1&gt;
&lt;p&gt;Right we&amp;#39;ve got a bunch of unauthenticated requests out of the way, now it&amp;#39;s time to look at how we can do some authenticated requests. For this I&amp;#39;m going to create another base class that extends our &lt;code&gt;BaseServerTest&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseAuthenticatedTests&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;BaseServerTest&lt;/span&gt;
{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; virtual &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Username { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;aaronpowell&quot;&lt;/span&gt;; } }
    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; virtual &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Password { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;; } }

    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; token;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the authenticated tests I&amp;#39;m going to do them against a user that is known to exist, you could do it a bunch of different ways, like performing a registration for each test, that really comes down to how complex your registration process is.&lt;/p&gt;
&lt;p&gt;Also I don&amp;#39;t want the author of authenticated tests to have to worry about the authentication side of things, it should &lt;em&gt;just work&lt;/em&gt; for them. So to do this I&amp;#39;m going to extend my &lt;code&gt;BaseServerTest&lt;/code&gt; class to all me to run something when the server is setup:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;[TestInitialize]
public void Setup()
{
    server = TestServer&lt;span class=&quot;preprocessor&quot;&gt;.Create&lt;/span&gt;(app =&amp;gt;
    {
        var startup = new Startup()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        startup&lt;span class=&quot;preprocessor&quot;&gt;.ConfigureAuth&lt;/span&gt;(app)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        var config = new HttpConfiguration()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        WebApiConfig&lt;span class=&quot;preprocessor&quot;&gt;.Register&lt;/span&gt;(config)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

        app&lt;span class=&quot;preprocessor&quot;&gt;.UseWebApi&lt;/span&gt;(config)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    })&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    PostSetup(server)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}

protected virtual void PostSetup(TestServer server)
{
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I&amp;#39;ve added here is a virtual method &lt;code&gt;PostSetup&lt;/code&gt; which is called when the server is ready and then we can do additional stuff. Let&amp;#39;s implement it in our &lt;code&gt;BaseAuthenticatedTest&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; PostSetup(TestServer server)
{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokenDetails = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;KeyValuePair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;()
        {
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; KeyValuePair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;grant_type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;),
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; KeyValuePair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;, Username),
            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; KeyValuePair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;, Password)
        };

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokenPostData = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormUrlEncodedContent(tokenDetails);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tokenResult = server.HttpClient.PostAsync(&lt;span class=&quot;string&quot;&gt;&quot;/Token&quot;&lt;/span&gt;, tokenPostData).Result;
    Assert.AreEqual(HttpStatusCode.OK, tokenResult.StatusCode);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = JObject.Parse(tokenResult.Content.ReadAsStringAsync().Result);

    token = (&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)body[&lt;span class=&quot;string&quot;&gt;&quot;access_token&quot;&lt;/span&gt;];
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, what we&amp;#39;re doing here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating the details which are needed to be &lt;code&gt;POST&lt;/code&gt;ed, this is the standard data you&amp;#39;d provide to an OAuth request&lt;/li&gt;
&lt;li&gt;URL Encode the data&lt;/li&gt;
&lt;li&gt;Hit the &lt;code&gt;/Token&lt;/code&gt; route with the data&lt;/li&gt;
&lt;li&gt;Assert that it was a successful request&lt;/li&gt;
&lt;li&gt;Extract the token from the response, I&amp;#39;m just reading it out as JSON (which it is) and not worrying about strongly typing it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Side note - you&amp;#39;ll notice that I&amp;#39;m using &lt;code&gt;PostAsync(...).Result&lt;/code&gt; and not &lt;code&gt;async&lt;/code&gt; &amp;amp; &lt;code&gt;await&lt;/code&gt;. The reason for this is a limitation in MSTest (and NUnit), you&amp;#39;re setup can&amp;#39;t have a return type (ie - &lt;code&gt;async Task&lt;/code&gt;) so you&amp;#39;re stuck with &lt;code&gt;async void&lt;/code&gt; which gets dodgy quickly. It&amp;#39;s easier to just do it synchronously.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With our authentication written now we need to make sure that we are passing it through on the request:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; override async Task&amp;lt;HttpResponseMessage&amp;gt; GetAsync()
{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; await server&lt;span class=&quot;variable&quot;&gt;.CreateRequest&lt;/span&gt;(Uri)
        &lt;span class=&quot;variable&quot;&gt;.AddHeader&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Bearer &quot;&lt;/span&gt; + token)
        &lt;span class=&quot;variable&quot;&gt;.GetAsync&lt;/span&gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Really the only difference is that the &lt;code&gt;GetAsync&lt;/code&gt; (and &lt;code&gt;PostAsync&lt;/code&gt;) is that we add the &lt;code&gt;Authorization&lt;/code&gt; header and properly format it to contain our bearer token.&lt;/p&gt;
&lt;p&gt;Easy, we can now write a test like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;[TestClass]
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ValuesAuthenticatedControllerTests&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;BaseAuthenticatedTests&lt;/span&gt;
{&lt;/span&gt;
    [TestMethod]
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; Task ShouldGetValuesWhenAuthenticated()
    {
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; response = await GetAsync();

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; values = await response.Content.ReadAsAsync&amp;lt;IEnumerable&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;();

        Assert.AreEqual(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, values.Count());
    }

    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Uri
    {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/api/values&quot;&lt;/span&gt;; }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&amp;#39;re done!&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So through this post we&amp;#39;ve seen how we can use OWIN/Katana&amp;#39;s self-hosting feature to host itself and then make requests against and authenticated API. We&amp;#39;ve also abstracted away the authentication part of our integration tests so we don&amp;#39;t need to think about it for each test which we write.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve published the code used for this blog &lt;a href=&quot;https://github.com/aaronpowell/Owin.AuthenticatedTests&quot;&gt;here on GitHub&lt;/a&gt; so feel free to get it and have a play.&lt;/p&gt;
</content>
            
            <category>owin</category>
            
            <category>katana</category>
            
            <category>testing</category>
            
        </entry>
    
        <entry>
            <title>LINQ in JavaScript, ES6 style, for real this time</title>
            <link href="http://www.aaron-powell.com/posts/2013-12-31-linq-in-javascript-for-real.html"/>
            <updated>2013-12-31T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-12-31-linq-in-javascript-for-real.html</id>
            <content type="html">&lt;p&gt;In a recent post I talked about writing &lt;a href=&quot;/posts/2013-09-06-linq-in-javascript-es6.html&quot;&gt;LINQ in JavaScript using ES6 iterators&lt;/a&gt; but then had to &lt;a href=&quot;/posts/2013-09-16-linq-in-javascript-es6-clarification.html&quot;&gt;take my words back&lt;/a&gt; after it was pointed out to me that I wasn&amp;#39;t actually using ES6 generators.&lt;/p&gt;
&lt;p&gt;Well some time has past and I&amp;#39;ve reworked my previous library to actually use the &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&quot;&gt;iterators and generators&lt;/a&gt; from ES6, so let&amp;#39;s have a look at how to get going with it.&lt;/p&gt;
&lt;h1 id=&quot;lazy-evaluating-collections&quot;&gt;Lazy evaluating collections&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s start simple, let&amp;#39;s take an array and make it lazy evaluated. To do this I&amp;#39;m going to create a &lt;em&gt;generator function&lt;/em&gt; that deals with the iterations through the array:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lazyArray = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* (...args) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.length; i++) {
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; args[i];
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;#39;s a few new things here to look at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function*&lt;/code&gt; - this is a new syntax as part of ES6 and what it is doing is telling the JavaScript runtime that this function is a &lt;em&gt;genreator function&lt;/em&gt;. This is important if we want to use &lt;code&gt;yield&lt;/code&gt; to return values as &lt;code&gt;yield&lt;/code&gt; (and &lt;code&gt;yield*&lt;/code&gt; which I won&amp;#39;t be covering) can only be used inside a generator function. &lt;em&gt;Side note: At the time of writing Firefox Nightly allows you to use &lt;code&gt;yield&lt;/code&gt; outside of generator functions, yay bleeding edge!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...args&lt;/code&gt; - I&amp;#39;ve used this mostly for convenience, splats are coming in ES6 and it&amp;#39;s so much easier to get arguments as arrays this way&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; - as you should know JavaScript is &lt;em&gt;function scoped&lt;/em&gt; not &lt;em&gt;block scoped&lt;/em&gt; (which C# is) so when you declare a variable, regardless of where you declare it, it&amp;#39;ll always be available in the function. Well that was before we had ES6 and &lt;code&gt;let&lt;/code&gt;. &lt;code&gt;let&lt;/code&gt; allows you to create block scoped variables and as I play with more ES6 I find that I prefer to use &lt;code&gt;let&lt;/code&gt; over &lt;code&gt;var&lt;/code&gt; for declaring variables as it brings a more sane scope to what I&amp;#39;m declaring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;#39;s use it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; arr = lazyArray(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome, we&amp;#39;ve got our lazy array, not quite as nice as using &lt;code&gt;[0,1,2,3...]&lt;/code&gt;, but it&amp;#39;s acceptable, so now we can do stuff with it, like read the values out:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(let x of arr)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again we&amp;#39;re seeing some new syntax, this time in the form of a &lt;code&gt;for-of&lt;/code&gt; statement. This is used to iterate through the results of a generator function. Since this function is lazy evaluated we don&amp;#39;t have array indexers or anything on it, instead we have a &lt;code&gt;next&lt;/code&gt; method which tells it we want the next iteration of the function which is similar to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.collections.ienumerator.aspx&quot;&gt;&lt;code&gt;IEnumerator&lt;/code&gt; and it&amp;#39;s &lt;code&gt;MoveNext&lt;/code&gt; method&lt;/a&gt;. In fact we could write something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;console&lt;span class=&quot;variable&quot;&gt;.log&lt;/span&gt;(arr&lt;span class=&quot;variable&quot;&gt;.next&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.value&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;
console&lt;span class=&quot;variable&quot;&gt;.log&lt;/span&gt;(arr&lt;span class=&quot;variable&quot;&gt;.next&lt;/span&gt;()&lt;span class=&quot;variable&quot;&gt;.value&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//and so on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of &lt;code&gt;next()&lt;/code&gt; returns us an object like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;{
    done: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;|&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;,
    &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;|undefined
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So to decompose our &lt;code&gt;for-of&lt;/code&gt; look it&amp;#39;s more like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(!(x = arr.&lt;span class=&quot;function_name&quot;&gt;next&lt;/span&gt;())&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;done&lt;/span&gt;) {
    &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x.value)&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&amp;#39;re saying is &amp;quot;While the generator isn&amp;#39;t &lt;code&gt;done&lt;/code&gt; get the next and output the value&amp;quot;. Personally I think the &lt;code&gt;for-of&lt;/code&gt; syntax is much nicer, but there&amp;#39;s advantaged to accessing items at your choosing, just like using the &lt;code&gt;IEnumerator&lt;/code&gt; interface in C# has its advantages.&lt;/p&gt;
&lt;h1 id=&quot;building-filtering-for-our-generator-function&quot;&gt;Building filtering for our generator function&lt;/h1&gt;
&lt;p&gt;The problem with our &lt;code&gt;lazyArray&lt;/code&gt; is that we have no way which we would be able to filter it, although it&amp;#39;s &lt;em&gt;array like&lt;/em&gt; it&amp;#39;s not an array and we can&amp;#39;t make it an array without loosing our lazy evaluation. So instead we&amp;#39;ll start augmenting the function prototype:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;lazyArray.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = function* (fn) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; this) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fn(&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;)) {
            yield &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;;
        }
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works in a very smooth fashion, you&amp;#39;ll see that we&amp;#39;re doing &lt;code&gt;for (let item of this)&lt;/code&gt;, that&amp;#39;s because we&amp;#39;re augmenting a generator function, so we are lazy evaluating our &amp;quot;parent&amp;quot; collection, we can just &lt;code&gt;for-of&lt;/code&gt; loop over that.&lt;/p&gt;
&lt;p&gt;And ultimately what it means is we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let x &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; arr.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(i =&amp;gt; i % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) {
    console.&lt;span class=&quot;command&quot;&gt;log&lt;/span&gt;(x);
}
//Note: I'm using &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; fat arrow syntax &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ES6 &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; make &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; more lambda-esq, &lt;span class=&quot;keyword&quot;&gt;but&lt;/span&gt; you can use a &lt;span class=&quot;string&quot;&gt;&quot;normal function&quot;&lt;/span&gt; instead.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, we&amp;#39;re filtering down to only items that are odd numbers!&lt;/p&gt;
&lt;h1 id=&quot;transforming-the-items&quot;&gt;Transforming the items&lt;/h1&gt;
&lt;p&gt;What&amp;#39;s &lt;code&gt;filter&lt;/code&gt; without &lt;code&gt;map&lt;/code&gt; (well... &lt;code&gt;where&lt;/code&gt; without &lt;code&gt;select&lt;/code&gt;)? Again that&amp;#39;s pretty easy to add by just augmenting our &lt;code&gt;lazyArray&lt;/code&gt; prototype:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;lazyArray.prototype.&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; = function* (fn) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item of &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; fn(item);
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we could do something like creating squares of everything:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(let x of arr.&lt;span class=&quot;function_name&quot;&gt;select&lt;/span&gt;(i =&amp;gt; i * i))&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;chaining&quot;&gt;Chaining&lt;/h1&gt;
&lt;p&gt;Now being able to do a single manipulation on a collection that is lazy is good, but really you&amp;#39;re more likely to do a &lt;code&gt;filter&lt;/code&gt; then a &lt;code&gt;map&lt;/code&gt;, well let&amp;#39;s go ahead:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let x of &lt;span class=&quot;transposed_variable&quot;&gt;arr.&lt;/span&gt;where(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;% 2).select(i =&amp;gt; i * i)) {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(x);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm that&amp;#39;s a syntax error, apparently our &lt;code&gt;where&lt;/code&gt; function doesn&amp;#39;t have a &lt;code&gt;select&lt;/code&gt; method, well you&amp;#39;d be right on spotting that. The reason is we&amp;#39;ve been manipulating the &lt;code&gt;lazyArray&lt;/code&gt; prototype, but we also need to manipulate the prototype of these new functions too, but to do that we&amp;#39;ll have to assign them to variables rather than having them as anonymous functions:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = function* &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(fn) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item of &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fn(item))
            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; item;
    }
};

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; = function* &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;(fn) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item of &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; fn(item);
    }
};

lazyArray.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;;
lazyArray.prototype.&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;.prototype.&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;.prototype.&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we can:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let x of &lt;span class=&quot;transposed_variable&quot;&gt;arr.&lt;/span&gt;where(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;% 2).select(i =&amp;gt; i * i)) {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(x);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let x of &lt;span class=&quot;transposed_variable&quot;&gt;arr.&lt;/span&gt;select(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;).select(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;)) &lt;span class=&quot;cell&quot;&gt;{
    console.log(x);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now using your imagination you can see how other LINQ methods can be implemented.&lt;/p&gt;
&lt;h1 id=&quot;multiple-enumerations&quot;&gt;Multiple enumerations&lt;/h1&gt;
&lt;p&gt;Now this is where it&amp;#39;ll get tricky, unlike C# JavaScript generator functions can&amp;#39;t be iterated over multiple times, once a generator is spent &lt;em&gt;it&amp;#39;s spent&lt;/em&gt;. This will be a problem if you want to do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.&lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt;()) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; arr) {
        &lt;span class=&quot;comment&quot;&gt;//stuff&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For an &lt;code&gt;any()&lt;/code&gt; to work you need to walk the generator, but when you&amp;#39;ve walked it once you can&amp;#39;t walk it again, so how can do address that? The easiest way is to do what ReSharper suggests to me all the time in C#, get the collection in to an array, but doing so looses the laziness of our collection.&lt;/p&gt;
&lt;p&gt;Instead what I&amp;#39;ve done with LINQ in JavaScript is wrapped the enumerable in another function so you have to invoke it to get the generator, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr.&lt;span class=&quot;keyword&quot;&gt;any&lt;/span&gt;()) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; arr()) {
        &lt;span class=&quot;comment&quot;&gt;//stuff&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So our &lt;code&gt;arr&lt;/code&gt; object is actually a non-generator function and you have to invoke it to use walk it, but to make it nicer to work with I&amp;#39;ve made functions like &lt;code&gt;any()&lt;/code&gt; take care of that for you so you don&amp;#39;t have to &lt;code&gt;arr().any()&lt;/code&gt; as I think that&amp;#39;d be a code smell. But this does mean that the result of a call to &lt;code&gt;where&lt;/code&gt; or &lt;code&gt;select&lt;/code&gt; will need to be invoked like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;applescript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let &lt;span class=&quot;property&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; arr.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(x =&amp;gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)()) {
    console.&lt;span class=&quot;command&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;property&quot;&gt;item&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But really I&amp;#39;m of the opinion you shouldn&amp;#39;t be doing your lambda expressions inside of the &lt;code&gt;for-of&lt;/code&gt; declaration anyway so I think that it&amp;#39;s fine.&lt;/p&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;Well there we have it, how we can use ES6 generators to create LINQ in JavaScript which is &lt;em&gt;actually&lt;/em&gt; lazy evaluated. I&amp;#39;ve gone ahread and published the code which I&amp;#39;ve been working on &lt;a href=&quot;https://github.com/aaronpowell/linq-in-javascript&quot;&gt;to my GitHub repo&lt;/a&gt; and you can also get it &lt;a href=&quot;https://npmjs.org/package/linq-es6&quot;&gt;via npm&lt;/a&gt; if you&amp;#39;re using Node.js &lt;code&gt;0.11.4&lt;/code&gt; or higher (and turn on the harmony features of v8). So go one, check out &lt;a href=&quot;https://github.com/aaronpowell/linq-in-javascript/tree/master/tests&quot;&gt;the tests&lt;/a&gt; for some fun examples of what you can do like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;'Interesting API usages'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
   it(&lt;span class=&quot;string&quot;&gt;'should calc prime numbers'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        var range = &lt;span class=&quot;transposed_variable&quot;&gt;Enumerable.&lt;/span&gt;range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);

        var &lt;span class=&quot;built_in&quot;&gt;primes&lt;/span&gt; = &lt;span class=&quot;transposed_variable&quot;&gt;range.&lt;/span&gt;where(n =&amp;gt; &lt;span class=&quot;transposed_variable&quot;&gt;Enumerable.&lt;/span&gt;range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;transposed_variable&quot;&gt;Math.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;transposed_variable&quot;&gt;Math.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(n))).all(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; n &lt;span class=&quot;comment&quot;&gt;% i &amp;gt; 0));&lt;/span&gt;

        var expectedPrimes = &lt;span class=&quot;matrix&quot;&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;;
        var index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let prime of &lt;span class=&quot;built_in&quot;&gt;primes&lt;/span&gt;()) &lt;span class=&quot;cell&quot;&gt;{
            expect(prime).to.equal(expectedPrimes[index]);
            index++;
        }&lt;/span&gt;
    }); 
});&lt;/code&gt;&lt;/pre&gt;
</content>
            
            <category>javascript</category>
            
            <category>linq</category>
            
            <category>es6</category>
            
        </entry>
    
        <entry>
            <title>Accessing the Location header in a CORS-enabled API</title>
            <link href="http://www.aaron-powell.com/posts/2013-11-28-accessing-location-header-in-cors-response.html"/>
            <updated>2013-11-28T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-11-28-accessing-location-header-in-cors-response.html</id>
            <content type="html">&lt;p&gt;Today I hit a problem, we&amp;#39;ve got an ASP.Net WebAPI 2 project which is providing a series of REST services for a web app. These services are hosted on a different domain to the app will be hosted on so to perform the requests to them we&amp;#39;ve gone ahead and &lt;a href=&quot;http://enable-cors.org/&quot;&gt;enabled CORS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until now most of our work has been doing read-only endpoints in the API, but I just finished off implementing a POST route. Now in a RESTful API a POST should return a &lt;code&gt;201 Created&lt;/code&gt; response along with the location which which you&amp;#39;ll find the newly created resource. So in WebAPI I have something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var response = Request&lt;span class=&quot;preprocessor&quot;&gt;.CreateResponse&lt;/span&gt;(HttpStatusCode&lt;span class=&quot;preprocessor&quot;&gt;.OK&lt;/span&gt;, createdItemId)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
response&lt;span class=&quot;preprocessor&quot;&gt;.Headers&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Location&lt;/span&gt; = new Uri(Url&lt;span class=&quot;preprocessor&quot;&gt;.Link&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;SomeRoutes&quot;&lt;/span&gt;, new { id = createdItem }))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which sees me having a &lt;code&gt;Location&lt;/code&gt; header in my response.&lt;/p&gt;
&lt;p&gt;Next I want to read out the &lt;code&gt;Location&lt;/code&gt; header and then follow it to get the data and display it on screen. I&amp;#39;m using AngularJS for this but the principle is the same for any way you&amp;#39;re performing an AJAX request:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;$&lt;span class=&quot;transposed_variable&quot;&gt;http.&lt;/span&gt;post(someUrl, someData)
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt; {&lt;/span&gt;
        var location = &lt;span class=&quot;transposed_variable&quot;&gt;response.&lt;/span&gt;headers(&lt;span class=&quot;string&quot;&gt;'Location'&lt;/span&gt;);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $&lt;span class=&quot;transposed_variable&quot;&gt;http.&lt;/span&gt;get(location);
    })
    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(response)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;dir(&lt;span class=&quot;transposed_variable&quot;&gt;response.&lt;/span&gt;data);
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only there&amp;#39;s a problem, &lt;code&gt;location&lt;/code&gt; is always &lt;code&gt;undefined&lt;/code&gt;! I&amp;#39;m looking in my network tab in the dev tools and I can clearly see that there is a &lt;code&gt;Location&lt;/code&gt; header returned but when I try and read it in JavaScript it&amp;#39;s never there.&lt;/p&gt;
&lt;p&gt;Frustrated I turned to the googles and was not having much luck, everyone just said &lt;code&gt;response.headers(&amp;#39;Location&amp;#39;)&lt;/code&gt; and you&amp;#39;ll have your header, but I was never seeing it from Angular, or even in the raw &lt;code&gt;xhr&lt;/code&gt; object. Something must be wrong.&lt;/p&gt;
&lt;p&gt;After some more digging I came across &lt;a href=&quot;http://stackoverflow.com/a/14755417/11388&quot;&gt;this&lt;/a&gt;. Little did I know that if you&amp;#39;re enabling CORS it will only expose a small number of the available headers by default, if you want more &lt;a href=&quot;http://www.w3.org/TR/cors/#access-control-expose-headers-response-header&quot;&gt;you have to expose them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So back to our WebAPI controller action I added the following:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var corsResult = new CorsResult()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
corsResult&lt;span class=&quot;preprocessor&quot;&gt;.AllowedExposedHeaders&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Add&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Location&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
response&lt;span class=&quot;preprocessor&quot;&gt;.WriteCorsHeaders&lt;/span&gt;(corsResult)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My API is already CORS enabled, all I&amp;#39;m doing is telling it that it&amp;#39;s a CORS response and I want some additional headers exposed cross-origin.&lt;/p&gt;
&lt;p&gt;And now I&amp;#39;m able to read my &lt;code&gt;Location&lt;/code&gt; header in JavaScript.&lt;/p&gt;
</content>
            
            <category>asp-net</category>
            
            <category>ajax</category>
            
            <category>cors</category>
            
        </entry>
    
        <entry>
            <title>LINQ in JavaScript, ES6 style clarification</title>
            <link href="http://www.aaron-powell.com/posts/2013-09-16-linq-in-javascript-es6-clarification.html"/>
            <updated>2013-09-16T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-09-16-linq-in-javascript-es6-clarification.html</id>
            <content type="html">&lt;p&gt;I &lt;a href=&quot;/posts/2013-09-06-linq-in-javascript-es6.html&quot;&gt;recently blogged about implementing LINQ in JavaScript with ES6 iterators&lt;/a&gt;. While I&amp;#39;d done a bunch of research, played around with FireFox (which seemed to have the most up-to-date implementation) and thought it was all well and good.&lt;/p&gt;
&lt;p&gt;Unfortunately it turns out that what I was talking about was the &lt;code&gt;__iterator__&lt;/code&gt; syntax which FireFox has implemented but it&amp;#39;s not in line with the &lt;a href=&quot;http://domenic.me/2013/09/06/es6-iterators-generators-and-iterables/&quot;&gt;current iterator and generator approach&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So while I did state that the code was against an API that wasn&amp;#39;t set in stone I was a bit further away from where I wanted to be going forward.&lt;/p&gt;
&lt;p&gt;Thanks &lt;a href=&quot;https://twitter.com/domenic&quot;&gt;Domenic&lt;/a&gt; for picking up on it and pointing me in the right direction, I&amp;#39;m in the process of reworking the library to work with what&amp;#39;s actually outlined so far in ES6 and you can &lt;a href=&quot;https://github.com/aaronpowell/linq-in-javascript/tree/es6-generators&quot;&gt;check out the progress&lt;/a&gt;.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
            <category>linq</category>
            
            <category>es6</category>
            
        </entry>
    
        <entry>
            <title>Azure Mobile Services, AngularJS and broken promises</title>
            <link href="http://www.aaron-powell.com/posts/2013-09-16-azure-angular-and-broken-promises.html"/>
            <updated>2013-09-16T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-09-16-azure-angular-and-broken-promises.html</id>
            <content type="html">&lt;p&gt;There&amp;#39;s no denying it that &lt;a href=&quot;http://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; is the hot new SPA framework these days as it offers a lot of very nice features out of the box, has a very good programming model behind it and works as advertised. So when a new project was kicking off that I was on I decided to take the opportunity to use it so I could get a feel for it. Overall my feelings have been positive with the exception of what I want to talk about here.&lt;/p&gt;
&lt;h1 id=&quot;bringing-in-azure-mobile-services&quot;&gt;Bringing in Azure Mobile Services&lt;/h1&gt;
&lt;p&gt;For this project I&amp;#39;ve been working with &lt;a href=&quot;http://www.windowsazure.com/en-us/solutions/mobile/&quot;&gt;Azure Mobile Services&lt;/a&gt; as I&amp;#39;ve got data coming from some native mobile apps that needs to be managed via the website. So AMS has its own &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windowsazure/jj554207.aspx&quot;&gt;JavaScript client&lt;/a&gt; to work with that&amp;#39;s quite a nice little library, you do things like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;client.&lt;/span&gt;getTable(&lt;span class=&quot;string&quot;&gt;'members'&lt;/span&gt;).insert(newMember).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'member has been inserted with id: '&lt;/span&gt; + &lt;span class=&quot;transposed_variable&quot;&gt;newMmeber.&lt;/span&gt;id)
});

&lt;span class=&quot;transposed_variable&quot;&gt;client.&lt;/span&gt;getTable(&lt;span class=&quot;string&quot;&gt;'members'&lt;/span&gt;).where(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;transposed_variable&quot;&gt;this.&lt;/span&gt;active;
}).read().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(members)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'You have '&lt;/span&gt; + &lt;span class=&quot;transposed_variable&quot;&gt;members.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;' active members'&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Under the covers this is a REST API so it&amp;#39;s doing HTTP requests out to Azure, handling the response and then using its own Promise API (which conforms to the Promise spec) to publish out to listeners.&lt;/p&gt;
&lt;h1 id=&quot;abstracting-azure-mobile-services&quot;&gt;Abstracting Azure Mobile Services&lt;/h1&gt;
&lt;p&gt;AngularJS has &lt;a href=&quot;http://docs.angularjs.org/guide/di&quot;&gt;support for dependency injection&lt;/a&gt; which is a really nice feature when you&amp;#39;re looking to modularize your project. So for this project I decided to create a factory which would expose AMS and then another which would expose friendly methods to wrap up the bits of functionality I wanted, meaning that if you were to unit test it you wouldn&amp;#39;t directly depend on AMS, just an interface.&lt;/p&gt;
&lt;p&gt;So I started with this as a module:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;, [])
    .factory(&lt;span class=&quot;string&quot;&gt;'client'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'$window'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$window&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; azureSettings = &lt;span class=&quot;comment&quot;&gt;//get them how you will&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; client = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$window&lt;/span&gt;.WindowsAzure.MobileServiceClient(
            &lt;span class=&quot;string&quot;&gt;&quot;https://&quot;&lt;/span&gt; + azureSettings.name + &lt;span class=&quot;string&quot;&gt;&quot;.azure-mobile.net/&quot;&lt;/span&gt;,
            azureSettings.key
        );

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; client;
    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now I can create a factory for my &amp;quot;services&amp;quot;, so we&amp;#39;ll start with this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;'api'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;])
    .factory(&lt;span class=&quot;string&quot;&gt;'services'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'client'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(client)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;//TODO&lt;/span&gt;
    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly I could setup a controller:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lua&quot;&gt;angular.&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'app'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'api'&lt;/span&gt;])
    .controller(&lt;span class=&quot;string&quot;&gt;'MyController'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'$scope'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'services'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($scope, services)&lt;/span&gt;&lt;/span&gt; {

    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can set about creating our service. We&amp;#39;ll do your typical todo item app, so for that I want to have a method on my service that&amp;#39;ll expose all todo items:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lua&quot;&gt;angular.&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'api'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;])
    .factory(&lt;span class=&quot;string&quot;&gt;'services'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'client'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(client)&lt;/span&gt;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
            getAll: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; client.getTable(&lt;span class=&quot;string&quot;&gt;'todo'&lt;/span&gt;).read();
            }
        };
    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this is promise based we can &lt;code&gt;.then&lt;/code&gt; the call and populate our UI:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;'app'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'api'&lt;/span&gt;])
    .controller(&lt;span class=&quot;string&quot;&gt;'MyController'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'$scope'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'services'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;, services)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.items = [];

        services.getAll().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(items)&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;variable&quot;&gt;$scope&lt;/span&gt;.items = items;
        });
    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;angularjs-s-broken-promise&quot;&gt;AngularJS&amp;#39;s broken promise&lt;/h1&gt;
&lt;p&gt;I quite like the concept of &lt;a href=&quot;http://promises-aplus.github.io/promises-spec/&quot;&gt;Promises in JavaScript&lt;/a&gt;, and I know &lt;a href=&quot;http://brianmckenna.org/blog/category_theory_promisesaplus&quot;&gt;some people have issues with them&lt;/a&gt;, but all-in-all it&amp;#39;s nicer to work with than callback trees, especially when it comes to working with multiple async operations. One of the core principles is that when the operation completes it will either be resolved or rejected and you can provide handlers for the appropriate states.&lt;/p&gt;
&lt;p&gt;Looking back at the code up there, knowing that Azure Mobile Services will return a promise do you see anything wrong in the either the service or the controller which would prevent the success callback from being invoked?&lt;/p&gt;
&lt;p&gt;No? Me either, but it won&amp;#39;t be called.&lt;/p&gt;
&lt;p&gt;And this is where we get to what I&amp;#39;m referring to as &lt;strong&gt;AngularJS&amp;#39;s broken promise&lt;/strong&gt;. The fact is that the callback &lt;em&gt;won&amp;#39;t&lt;/em&gt; be run, and that&amp;#39;s rather annoying, really hard to debug and not obvious at all.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before we go much further I just want to clarify that I&amp;#39;m not an AngularJS expert, I&amp;#39;ve been using it for a grand total of 3 weeks so this is based on my expectations as a JavaScript developer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Everything in AngularJS is wrapped up in &lt;a href=&quot;http://docs.angularjs.org/guide/scope&quot;&gt;scopes&lt;/a&gt; and only within the space of a running scope can you interact with an AngularJS model (such as your controller). Anything that breaks out of an AngularJS scope will then need to notify AngularJS that it&amp;#39;s completed and you can be on your way.&lt;/p&gt;
&lt;p&gt;So the problem that I&amp;#39;m hitting is that I&amp;#39;m creating an XHR, which because it&amp;#39;s asynchronous, will break out of an AngularJS scope and eventually complete. Because you are then &amp;quot;out of the scope&amp;quot; the Promise callbacks are &lt;strong&gt;somehow&lt;/strong&gt; blocked by AngularJS (I&amp;#39;ve not been able to work out how they prevent it from firing but they somehow do).&lt;/p&gt;
&lt;h2 id=&quot;fixing-the-broken-promise&quot;&gt;Fixing the broken promise&lt;/h2&gt;
&lt;p&gt;The good news is that you can work around this and I&amp;#39;ll admit that this may not be the cleanest solution because it was determined by trial-and-error, but none the less you can solve the problem and that&amp;#39;s by calling &lt;a href=&quot;http://docs.angularjs.org/api/ng.$rootScope.Scope#$apply&quot;&gt;&lt;code&gt;$apply&lt;/code&gt;&lt;/a&gt; on the root scope before your promise tries to return. Annoyingly this means you have to create your own promise to wrap the AMS promise but AngularJS does ship with a slimmed down version of &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q&lt;/a&gt; in the form of &lt;a href=&quot;http://docs.angularjs.org/api/ng.$q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The resulting code now looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;angular.module(&lt;span class=&quot;string&quot;&gt;'api'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;])
    .factory(&lt;span class=&quot;string&quot;&gt;'services'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'client'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'$q'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'$rootScope'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(client, &lt;span class=&quot;variable&quot;&gt;$q&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
            getAll: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;variable&quot;&gt;$q&lt;/span&gt;.defer();

                client.getTable(&lt;span class=&quot;string&quot;&gt;'todo'&lt;/span&gt;).read().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
                    d.resolve.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
                    &lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;();
                }, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
                    d.reject.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
                    &lt;span class=&quot;variable&quot;&gt;$rootScope&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$apply&lt;/span&gt;();
                });

                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d.promise().
            }
        };
    }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you&amp;#39;ll see that we&amp;#39;re creating a deferred object, and then returning its promise (meaning our controller doesn&amp;#39;t need to be refactored, just our factory). We then add our own success handler (and fail handler) which pass through to &lt;code&gt;.resolve&lt;/code&gt; and &lt;code&gt;.reject&lt;/code&gt; for success and fail, providing the arguments, meaning that this solution doesn&amp;#39;t need to know about the argument changes. Once that&amp;#39;s done we then call &lt;code&gt;$rootScope.$apply()&lt;/code&gt; which will inform AngularJS that our async operation has completed, and now the handlers in our controller will be executed.&lt;/p&gt;
&lt;h1 id=&quot;beware-of-opinionated-frameworks&quot;&gt;Beware of opinionated frameworks&lt;/h1&gt;
&lt;p&gt;So the main problem I was experiencing was supped up in this tweet:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/slace&quot;&gt;@slace&lt;/a&gt; normally, you wouldn&amp;#39;t need to do this as a digest cycle would be triggered by angular if you were using its own services.&lt;/p&gt;&amp;mdash; James Sadler (@freshtonic) &lt;a href=&quot;https://twitter.com/freshtonic/statuses/370784637024337920&quot;&gt;August 23, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The problem is &lt;em&gt;you&amp;#39;re not doing in the AngularJS way&lt;/em&gt;. When I was trying to work out why it wasn&amp;#39;t working people kept pointing out that &amp;quot;if you just used the built in &lt;code&gt;$http&lt;/code&gt; service you wouldn&amp;#39;t have that problem&amp;quot;. But really that&amp;#39;s not the case, using the &lt;code&gt;$http&lt;/code&gt; service &lt;a href=&quot;https://github.com/angular/angular.js/blob/2bb0e1a6041a079b4c456eb6bae4ec5a206582eb/src/ng/http.js#L967&quot;&gt;just handles it for you&lt;/a&gt;, so it&amp;#39;s still a problem with any XHR operations in AngularJS, they just hide some of it from you.&lt;/p&gt;
&lt;p&gt;So just be aware that when you&amp;#39;re using an opinionated library once you step outside &amp;quot;the norm&amp;quot; be prepared for things to not work as you&amp;#39;d expect.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I&amp;#39;d really like to create a wrapper around the Azure Mobile Services API but they don&amp;#39;t seem to expose their promise API which is where I&amp;#39;d like to wrap, I&amp;#39;m going to keep trying and will update if I can find a cleaner solution.&lt;/p&gt;
&lt;p&gt;In the mean time you&amp;#39;ll need to be aware that when you&amp;#39;re using Azure Mobile Services with AngularJS it&amp;#39;s not quite as simple as you&amp;#39;d expect it to be.&lt;/p&gt;
</content>
            
            <category>azure-mobile-services</category>
            
            <category>angularjs</category>
            
            <category>promise</category>
            
        </entry>
    
        <entry>
            <title>Using bluesky in Azure Mobile Services</title>
            <link href="http://www.aaron-powell.com/posts/2013-09-11-using-bluesky-in-azure-mobile-services.html"/>
            <updated>2013-09-11T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-09-11-using-bluesky-in-azure-mobile-services.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;ve been doing some work with &lt;a href=&quot;http://www.windowsazure.com/en-us/solutions/mobile/&quot;&gt;Azure Mobile Services&lt;/a&gt; where I&amp;#39;m storing data in tables and blobs. For a task I need to have a custom API which will remove some data from a table and then the blobs associated with it.&lt;/p&gt;
&lt;p&gt;For this I&amp;#39;m creating a new &lt;a href=&quot;http://www.windowsazure.com/en-us/develop/mobile/tutorials/call-custom-api-dotnet/#define-custom-api&quot;&gt;custom API&lt;/a&gt; and because it&amp;#39;s just a Node.js app I&amp;#39;d be using the &lt;a href=&quot;https://github.com/WindowsAzure/azure-sdk-for-node&quot;&gt;Node SDK&lt;/a&gt;. When I was getting started I got pointed towards &lt;a href=&quot;https://github.com/pofallon/node-bluesky&quot;&gt;bluesky&lt;/a&gt; which is a nice little wrapper around the Azure SDK to make it a bit easier to work with.&lt;/p&gt;
&lt;p&gt;So I &lt;code&gt;npm install&lt;/code&gt;&amp;#39;ed it into the git repo for my mobile service, used the API and pushed it up to Azure.&lt;/p&gt;
&lt;p&gt;And then...&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vbscript&quot;&gt;remote: One &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; more errors occurred.
remote: &lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt; - Changes committed &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; remote repository but deployment &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; website failed, please check &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; further details.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well I spun up the CLI and check my logs but &lt;em&gt;nothing&lt;/em&gt;, there wasn&amp;#39;t anything in there that indicated the problem. In fact my server was still running but it wasn&amp;#39;t running the scripts that I&amp;#39;d just pushed. This is annoying, I&amp;#39;ve got no logs, a failing server and no indication as to why. Deleting the module and pushing the server started up again, but then obviously then I can&amp;#39;t use the module.&lt;/p&gt;
&lt;p&gt;I put the question to my friend &lt;a href=&quot;http://twitter.com/gblock&quot;&gt;Glenn Block&lt;/a&gt; as he pointed me to the library to see if he knew what the problem might be, or at least how to find the logs. He suggested that the problem might be due to the path length, Windows has limitations on the length of the file paths, and when you start looking at the dependency graph for the module it gets crazy, in particular because it takes a dependency on the Azure SDK (which in turn has its own dependency chain each with dependencies, and so on).&lt;/p&gt;
&lt;p&gt;After some investigation it turned out that if you don&amp;#39;t include the Azure SDK dependency then it deploys fine, bluesky doesn&amp;#39;t work, but at least the deployment works... Baby steps ;).&lt;/p&gt;
&lt;p&gt;So how do we work around that? It struck me that when you&amp;#39;ve got these scripts deployed to your AMS instance the Azure SDK is already available, you don&amp;#39;t need to include it in your repository, you just do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; azure = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you have the SDK at your finger tips.&lt;/p&gt;
&lt;p&gt;Now, conveniently bluesky takes this into account already! Rather than passing your credentials in like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&lt;span class=&quot;comment&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;require('bluesky')&lt;/span&gt;.&lt;span class=&quot;comment&quot;&gt;storage({&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;account:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;'&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can provide it with Azure services:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; azure = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'azure'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; storage = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'bluesky'&lt;/span&gt;).storage({
    blobService: azure.createBlobService(&lt;span class=&quot;string&quot;&gt;'account'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'key'&lt;/span&gt;).withFilter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; azure.LinearRetryPolicyFilter()),
    tableService: azure.createTableService(&lt;span class=&quot;string&quot;&gt;'account'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'key'&lt;/span&gt;).withFilter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; azure.LinearRetryPolicyFilter()),
    queueService = azure.createQueueService(&lt;span class=&quot;string&quot;&gt;'account'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'key'&lt;/span&gt;).withFilter(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; azure.LinearRetryPolicyFilter())
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it, we can use the Azure SDK that&amp;#39;s already on the server and avoid the path depth problem.&lt;/p&gt;
</content>
            
            <category>azure-mobile-services</category>
            
        </entry>
    
        <entry>
            <title>LINQ in JavaScript, ES6 style</title>
            <link href="http://www.aaron-powell.com/posts/2013-09-06-linq-in-javascript-es6.html"/>
            <updated>2013-09-06T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-09-06-linq-in-javascript-es6.html</id>
            <content type="html">&lt;h2 id=&quot;update-1&quot;&gt;Update #1&lt;/h2&gt;
&lt;p&gt;The code I&amp;#39;ve talked about here isn&amp;#39;t actually ES6 related, instead it&amp;#39;s about an API only in FireFox, read more &lt;a href=&quot;/posts/2013-09-16-linq-in-javascript-es6-clarification.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Back in 2010 I posted about &lt;a href=&quot;/posts/2010-04-24-linq-in-javascript.html&quot;&gt;implementing LINQ in JavaScript&lt;/a&gt; in which I had a look at what would have been involved if you were writing a LINQ style API in JavaScript. Keep in mind that back in 2010 we didn&amp;#39;t have libraries like &lt;a href=&quot;http://underscorejs.org&quot;&gt;Underscore&lt;/a&gt; or &lt;a href=&quot;http://lodash.com&quot;&gt;LoDash&lt;/a&gt; nor were people that aware of the &lt;code&gt;Array.prototype&lt;/code&gt; extensions &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt;. So when it came to collection manipulation the most common approach was via the good ol&amp;#39; &lt;code&gt;for&lt;/code&gt; loop but as I&amp;#39;ve said &lt;a href=&quot;/posts/2013-07-22-array-like-objects.html&quot;&gt;in the past&lt;/a&gt; &lt;code&gt;for&lt;/code&gt; loops are uncool.&lt;/p&gt;
&lt;p&gt;But with my implementation of LINQ in JavaScript, and the others out there that I&amp;#39;ve come across (including Underscore/LoDash) there is one thing that always annoyed me, they are eager evaluated.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s say you&amp;#39;re displaying a paged list of records, and also have custom filters that people can apply. So we&amp;#39;d need to do three things for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apply a filter to a collection&lt;/li&gt;
&lt;li&gt;Transform a collection of objects to a collection of DOM elements (or DOM strings)&lt;/li&gt;
&lt;li&gt;Grab the subset of records required&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would result in something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rows = people.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(person)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; person.age &amp;gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;
}).map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(person)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//removed for simplicity&lt;/span&gt;
}).slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this has to be eager evaluated, if we&amp;#39;ve got 500 records in our &lt;code&gt;people&lt;/code&gt; collection and 250 of them are going to match the filter we still have to process all 500 in the filter, then 250 in the &lt;code&gt;map&lt;/code&gt;&amp;#39;s before we take the 5 that we want to show on the current page. Now admittedly we can move the &lt;code&gt;.slice(0, 5)&lt;/code&gt; to before the &lt;code&gt;map&lt;/code&gt; and then we&amp;#39;d &lt;code&gt;map&lt;/code&gt; the subset but you still go into the &lt;code&gt;slice&lt;/code&gt; having put the whole collection through the &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And this is where I like LINQ, it&amp;#39;s lazy evaluated, if we did the same thing:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var rows = people
                &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(person =&amp;gt; person&lt;span class=&quot;preprocessor&quot;&gt;.Age&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)
                &lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(person =&amp;gt; &lt;span class=&quot;comment&quot;&gt;/* removed for simplicity */&lt;/span&gt;)
                &lt;span class=&quot;preprocessor&quot;&gt;.Take&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the collection manipulation is processed only once you iterate over it &lt;code&gt;rows&lt;/code&gt;, and only the first 5 that match the &lt;code&gt;Where&lt;/code&gt; filter will be used, it will stop once it hits that. And this all comes down to the fact that C# implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Iterator&quot;&gt;Iterators&lt;/a&gt; through the &lt;code&gt;IEnumerable&lt;/code&gt; interface.&lt;/p&gt;
&lt;h2 id=&quot;enter-es6&quot;&gt;Enter ES6&lt;/h2&gt;
&lt;p&gt;Good news everybody, ECMAScript 6 has a proposal forward to &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&quot;&gt;add iterators to ECMAScript/JavaScript&lt;/a&gt; which means we can create lazy evaluated objects, more specifically, lazy evaluated collections.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This is a draft spec so what I&amp;#39;m doing only works in Firefox Nightly and may stop working at some random point.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create an iterator object you need to add a member of &lt;code&gt;__iterator__&lt;/code&gt; that is a function that &lt;code&gt;yield&lt;/code&gt;s a result, here&amp;#39;s a basic iterator:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; iterator = {
    __iterator__: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then iterate over it using a &lt;code&gt;for-in&lt;/code&gt; loop like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; iterator) {
    console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(val);
}
&lt;span class=&quot;comment&quot;&gt;// 1, 2, 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could then make an iterater version of an array:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; iteratableArray = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(array)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        __iterator__: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) {
                &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; array[i];
            }
        }
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now you can do nothing really any different:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var arr = iteratable&lt;span class=&quot;variable&quot;&gt;Array&lt;/span&gt;([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]);
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(let val in arr)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(val)&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But where it gets really powerful is in the lazy evaluation, let&amp;#39;s update to if we have a function passed in we&amp;#39;ll return the evaluation of it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; iteratableArray = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(array)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        __iterator__: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) {
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; array[i] == &lt;span class=&quot;string&quot;&gt;'function'&lt;/span&gt;)
                    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; array[i]();
                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; array[i];
            }
        }
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll create our object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = iteratableArray([&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Bad'&lt;/span&gt;; }]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The exception won&amp;#39;t be thrown until we iterate through the collection:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var x in arr)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(Yes it&amp;#39;s a contrived example but we&amp;#39;ll move on from that.)&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;implementing-linq&quot;&gt;Implementing LINQ&lt;/h1&gt;
&lt;p&gt;Now we&amp;#39;ve seen the basics of how you would create something that&amp;#39;s an iterable collection, and this is the basis of how we could implement LINQ. For this I&amp;#39;m going to create an &lt;code&gt;Enumerable&lt;/code&gt; type that we&amp;#39;ll work against:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Enumerable = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(array)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;string&quot;&gt;'undefined'&lt;/span&gt; || &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor !== Enumerable) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Enumerable(&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;);
    }
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a &lt;a href=&quot;/posts/2013-07-14-javascript-new-operator.html&quot;&gt;constructor function&lt;/a&gt; (that doesn&amp;#39;t have to be used with the &lt;code&gt;new&lt;/code&gt; operator) that we&amp;#39;ll pass an array in (I&amp;#39;m not doing error checking at the moment, be nice :P).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ve then got an &lt;code&gt;__iterator__&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __iterator__ = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._array.length; i++) {
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._array[i];
    };
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is then added to the &lt;code&gt;Enumerable&lt;/code&gt;&amp;#39;s prototype:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;markdown&quot;&gt;Enumerable.prototype.&lt;span class=&quot;strong&quot;&gt;__iterator__&lt;/span&gt; = &lt;span class=&quot;strong&quot;&gt;__iterator__&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it works the same as our previous function, now we can start implementing more methods on the &lt;code&gt;prototype&lt;/code&gt;. Let&amp;#39;s start with the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.linq.enumerable.where.aspx&quot;&gt;&lt;code&gt;Where&lt;/code&gt;&lt;/a&gt; method so we can filter the collection:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = function (fn) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WhereEnumerable(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, fn);
};
Enumerable.prototype.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;;
Enumerable.prototype.filter = &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//just so it's more JavaScript-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait, what&amp;#39;s this &lt;code&gt;WhereEnumerable&lt;/code&gt; that we&amp;#39;re creating? Well since we want to chain this up and not have a really complex object that we keep modifying I&amp;#39;ve created another &amp;quot;class&amp;quot; to handle the filtering concept. This is similar to what LINQ does, it has a number of internal types that handle the different iterator concepts. Let&amp;#39;s start implementing it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; WhereEnumerable = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(__super)&lt;/span&gt; {&lt;/span&gt;
    __&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;(WhereEnumerable, __&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;);

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WhereEnumerable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(enumerable, fn)&lt;/span&gt; {&lt;/span&gt;
        __&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, enumerable._array);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._enumerable = enumerable;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fn = fn;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; WhereEnumerable;
})(Enumerable);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;m using one of the fairly common &lt;em&gt;class&lt;/em&gt; patterns in JavaScript and I was lazy and grabbed some auto-generated code from a TypeScript project for doing class inheritance, but basically what I&amp;#39;m doing is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a new constructor function that will invoke the &lt;code&gt;Enumerable&lt;/code&gt; constructor function&lt;/li&gt;
&lt;li&gt;Capture the &amp;quot;parent&amp;quot; enumerable object&lt;/li&gt;
&lt;li&gt;Store the filtering function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we&amp;#39;d better implement the &lt;code&gt;__iterator__&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;WhereEnumerable.prototype.__iterator__ = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._enumerable) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fn(item, index)) {
            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; item;
        }
        index++;
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s a pretty simple method to understand we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;code&gt;for-in&lt;/code&gt; loop to step through each value of the &lt;em&gt;parent enumerable&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Apply the function to the value and it&amp;#39;s index&lt;/li&gt;
&lt;li&gt;If the function returns truthy yield the item, else skip it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neat now we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; enumerable = Enumerable([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; odds = enumerable.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(x =&amp;gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have an unevaluated collection filter, and until we &lt;em&gt;step into&lt;/em&gt; the collection it&amp;#39;ll stay that way.&lt;/p&gt;
&lt;h1 id=&quot;stepping-it-up-with-chaining&quot;&gt;Stepping it up with chaining&lt;/h1&gt;
&lt;p&gt;The really powerful aspect of LINQ is its chaining capability, that you can apply multiple &amp;quot;query&amp;quot; operations to get a result, like our original example. So now let&amp;#39;s add a &lt;code&gt;Count&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) {
        count++;
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;
};
Enumerable.prototype.count = count;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we could do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;console&lt;span class=&quot;variable&quot;&gt;.log&lt;/span&gt;(enumerable&lt;span class=&quot;variable&quot;&gt;.count&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//4&lt;/span&gt;
console&lt;span class=&quot;variable&quot;&gt;.log&lt;/span&gt;(odds&lt;span class=&quot;variable&quot;&gt;.count&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because our &lt;code&gt;WhereEnumerable&lt;/code&gt; type inherits from the &lt;code&gt;Enumerable&lt;/code&gt; class, when we augment that prototype it filters through. Neat! Now we could even do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var notOne = odds&lt;span class=&quot;preprocessor&quot;&gt;.where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(notOne&lt;span class=&quot;preprocessor&quot;&gt;.count&lt;/span&gt;())&lt;span class=&quot;comment&quot;&gt;; //1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if you were to debug through it keeps doing the &lt;code&gt;__iterator__&lt;/code&gt; method for the &lt;em&gt;parent&lt;/em&gt; &lt;code&gt;Enumerable&lt;/code&gt; object, meaning it&amp;#39;ll ask for &lt;code&gt;1&lt;/code&gt;, pass it to the initial filter, &lt;code&gt;x =&amp;gt; x % 2&lt;/code&gt; and then to &lt;code&gt;x =&amp;gt; x &amp;gt; 1&lt;/code&gt; since it passed the first &lt;code&gt;where&lt;/code&gt; call. The next item through will fail the first &lt;code&gt;where&lt;/code&gt; and won&amp;#39;t be passed to the second. Neat!&lt;/p&gt;
&lt;h1 id=&quot;select&quot;&gt;Select&lt;/h1&gt;
&lt;p&gt;Say we want to implement &lt;code&gt;Select&lt;/code&gt; (which is &lt;code&gt;map&lt;/code&gt; in JavaScript land), again I&amp;#39;m creating a new &lt;code&gt;Enumerable&lt;/code&gt; subclass:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; SelectEnumerable = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(__super)&lt;/span&gt; {&lt;/span&gt;
    __&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;(SelectEnumerable, __&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;);

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SelectEnumerable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(enumerable, fn)&lt;/span&gt; {&lt;/span&gt;
        __&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, enumerable._array);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._enumerable = enumerable;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fn = fn;
    };

    SelectEnumerable.prototype.__iterator__ = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._enumerable) {
            yeild &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._fn(item, index++);
        }
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SelectEnumerable;
})(Enumerable);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#39;s very similar to the &lt;code&gt;WhereEnumeratable&lt;/code&gt; but we&amp;#39;re returning the result of the provided function. Once added to the &lt;code&gt;Enumerable&lt;/code&gt; prototype it means we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; squares = enumerable.&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;(x =&amp;gt; x ^ x);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; oddSquares = enumerable.&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;(x =&amp;gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;(x =&amp;gt; x ^ x);&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;-all&quot;&gt;.All&lt;/h1&gt;
&lt;p&gt;Not all of the methods we&amp;#39;d want to implement are going to require a new subclass to be made, something like &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb548541.aspx&quot;&gt;&lt;code&gt;All&lt;/code&gt;&lt;/a&gt;, which returns whether or not every item in the Enumerable matches the predicate, will evaluate immediately. It&amp;#39;s reasonably simple to implement as well:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; all = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fn(x)) {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
        }
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
};
Enumerable.prototype.all = all;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here it&amp;#39;ll go over each item and if any of them fail the function it&amp;#39;ll return false, otherwise it&amp;#39;s true. Because we&amp;#39;re using a &lt;code&gt;for-in&lt;/code&gt; loop against the &lt;code&gt;this&lt;/code&gt;, which is an Enumerable (or subclass of) we step back through all the previous points in the chain.&lt;/p&gt;
&lt;h1 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;/h1&gt;
&lt;p&gt;So now that we&amp;#39;ve got a bunch of lazy evaluation available we could do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var range = &lt;span class=&quot;transposed_variable&quot;&gt;Enumerable.&lt;/span&gt;range(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);
var &lt;span class=&quot;built_in&quot;&gt;primes&lt;/span&gt; = &lt;span class=&quot;transposed_variable&quot;&gt;range.&lt;/span&gt;where(n =&amp;gt; &lt;span class=&quot;transposed_variable&quot;&gt;Enumerable.&lt;/span&gt;range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;transposed_variable&quot;&gt;Math.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;transposed_variable&quot;&gt;Math.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(n))).all(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; =&amp;gt; n &lt;span class=&quot;comment&quot;&gt;% i &amp;gt; 0));&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (let prime in &lt;span class=&quot;built_in&quot;&gt;primes&lt;/span&gt;) &lt;span class=&quot;cell&quot;&gt;{
    console.log(prime);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s a simple prime number generate, using some more extensions that will generate a range between two numbers (100 and 1000). Pretty neat hey, it finds all 143 prime numbers.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And there we have it, a look at how we can use iterators to create a lazy-evaluated collection API which brings the power of .NET&amp;#39;s LINQ to JavaScript. You&amp;#39;ll find my &lt;a href=&quot;https://github.com/aaronpowell/linq-in-javascript/&quot;&gt;LINQ in JavaScript repository here&lt;/a&gt; and it includes a &lt;a href=&quot;https://github.com/aaronpowell/linq-in-javascript/tree/master/tests&quot;&gt;bunch of tests&lt;/a&gt; for the different parts of the API.&lt;/p&gt;
&lt;p&gt;Like I said this is built against a draft implementation of a spec and is in part another experiment but I think it&amp;#39;s a cool example of what&amp;#39;s coming in the future of JavaScript.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
            <category>linq</category>
            
            <category>es6</category>
            
        </entry>
    
        <entry>
            <title>AJAX without jQuery</title>
            <link href="http://www.aaron-powell.com/posts/2013-08-02-ajax-without-jquery.html"/>
            <updated>2013-08-02T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-08-02-ajax-without-jquery.html</id>
            <content type="html">&lt;p&gt;I&amp;#39;m very much of the opinion that the better you know your tools the better you can make intelligent choices about the layers you put over them. One such layer I see constantly used that people tend to use but not really understand is jQuery. Don&amp;#39;t get me wrong I&amp;#39;m not anti-jQuery or anything, but like I said I believe you should understand your tools before you try and abstract them away.&lt;/p&gt;
&lt;p&gt;So today I want to look at a really critical part of jQuery, AJAX.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ve probably written something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;$.ajax({
    &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: 'get',&lt;/span&gt;
    url:&lt;span class=&quot;string&quot;&gt; '/foo'&lt;/span&gt;,
    success: function (&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;{
        //&lt;span class=&quot;title&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;
    }&lt;/span&gt;&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what&amp;#39;s that doing under the hood?&lt;/p&gt;
&lt;h1 id=&quot;hello-xmlhttprequest&quot;&gt;Hello XMLHttpRequest&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;re doing an AJAX request you&amp;#39;re going to need the &lt;em&gt;X&lt;/em&gt; part of that and that&amp;#39;s handled through the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; object. This object is the descendant of the &lt;code&gt;ActiveX&lt;/code&gt; object which Microsoft added to early Internet Explorer which kick started the AJAX revolution.&lt;/p&gt;
&lt;p&gt;So this is the backbone of doing the request and obviously the backbone of what jQuery does under its API, but how do we use it?&lt;/p&gt;
&lt;h1 id=&quot;creating-a-get-with-xmlhttprequest&quot;&gt;Creating a GET with XMLHttpRequest&lt;/h1&gt;
&lt;p&gt;Let&amp;#39;s look back to our example above, how does that work? Well first things first we need to create an instance of the &lt;code&gt;XMLHttpRequest&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to open our request telling it what kind method we want to use and where to go:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;'get&lt;/span&gt;', '/foo');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: There&amp;#39;s a few other arguments which we can pass through, whether you want it to be handled as an async request as well as credentials if you&amp;#39;re doing an authenticated request.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since we&amp;#39;ve opened our request we&amp;#39;re probably going to want to do something when it completes right? To do that we rely on the DOM event standard, using the &lt;code&gt;addEventListener&lt;/code&gt; method (you can assign event listeners using the &lt;code&gt;on...&lt;/code&gt; style but that&amp;#39;s so IE6). Probably the most important event to be listening for is the &lt;code&gt;load&lt;/code&gt; event, this is the one that is executed when a successful response is completed:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;xhr.addEventListener(&lt;span class=&quot;string&quot;&gt;'load'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//handle success&lt;/span&gt;
}, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other events you can listen for, &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;abort&lt;/code&gt; which do pretty much what their names state. The &lt;code&gt;progress&lt;/code&gt; event is really useful if you&amp;#39;re expecting a request to take a long time to complete, say you&amp;#39;re uploading a file, or expecting a large response, you can listen for this and inform the user of the status, you know, awesome progress bar style.&lt;/p&gt;
&lt;p&gt;But we&amp;#39;re not done yet, our request is still in a &lt;em&gt;holding pattern&lt;/em&gt;, the request hasn&amp;#39;t been issued, that doesn&amp;#39;t happen unless we explicitly make it so, we have to explicitly send the request:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;xhr&lt;span class=&quot;preprocessor&quot;&gt;.send&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see it in action &lt;a href=&quot;http://jsbin.com/inikir/1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;handling-responses&quot;&gt;Handling responses&lt;/h1&gt;
&lt;p&gt;So you&amp;#39;re probably going to want to do something when the response comes in right? And even more logical is to do something with the response data that comes back. Depending what kind of data you&amp;#39;re getting back you have different ways to work with it. Let&amp;#39;s start with the one you&amp;#39;re most like going to want from an AJAX request, JSON.&lt;/p&gt;
&lt;p&gt;Well the XMLHttpRequest doesn&amp;#39;t really have the concept of JSON, as far as it is concerned this is just text, so we get at it from the &lt;code&gt;responseText&lt;/code&gt; property of &lt;em&gt;either&lt;/em&gt; the first argument of the event handler &lt;strong&gt;or&lt;/strong&gt; the &lt;code&gt;xhr&lt;/code&gt; object itself. With this you would then convert it to a JavaScript object using the JSON API:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;xhr.addEventListener(&lt;span class=&quot;string&quot;&gt;'load'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = JSON.parse(xhr.responseText); &lt;span class=&quot;comment&quot;&gt;//or e.responseText&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;//work with our object&lt;/span&gt;
}, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if you are expecting HTML? Say you&amp;#39;re loading a template or doing another kind of partial page load. For this you&amp;#39;re &lt;em&gt;likely&lt;/em&gt; to want the &lt;code&gt;responseXML&lt;/code&gt; property. Modern browsers support this, which turns your response content into a DOM snippet you can work with. If you&amp;#39;ve got an older browser &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Analyzing_and_manipulating_the_responseXML_property&quot;&gt;there are other options available&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;post-ing-data&quot;&gt;POST-ing data&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve seen how to &lt;code&gt;GET&lt;/code&gt; data, but what about if we want to &lt;code&gt;POST&lt;/code&gt; data?&lt;/p&gt;
&lt;p&gt;Obviously we&amp;#39;d need to change the &lt;code&gt;open&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;'POST&lt;/span&gt;', '/foo');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we&amp;#39;re probably going to want to submit some data too right? That&amp;#39;s the whole point of a POST isn&amp;#39;t it? Most likely you&amp;#39;re going to be POST-ing data from a form, and to do that you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; API. In this scenario you need to pass the FormData instance through the &lt;code&gt;send&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = new &lt;span class=&quot;type&quot;&gt;FormData&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;.append&lt;span class=&quot;container&quot;&gt;('&lt;span class=&quot;title&quot;&gt;name'&lt;/span&gt;, '&lt;span class=&quot;type&quot;&gt;Aaron&lt;/span&gt;')&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.send(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will send up request body with &lt;code&gt;name=Aaron&lt;/code&gt; in it, where &lt;code&gt;name&lt;/code&gt; is the key of a form value and &lt;code&gt;Aaron&lt;/code&gt; is the value. This can be read out of the middleware of whatever HTTP framework you&amp;#39;re working with. ASP.Net this would be the &lt;code&gt;HttpRequest.Form&lt;/code&gt; object, Express.js it&amp;#39;ll be &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re not posting FormData but instead want to POST JSON then you&amp;#39;ll need to do make sure your server knows it&amp;#39;s like that, and doing so means setting the headers appropriately. First off you&amp;#39;ll want to set the &lt;code&gt;Content-Type&lt;/code&gt; header:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;xhr.setRequestHeader(&lt;span class=&quot;attribute&quot;&gt;'Content&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;Type&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'application&lt;/span&gt;/json');&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is especially important if you&amp;#39;re using ASP.Net MVC as your end point, it will detect the &lt;code&gt;Content-Type&lt;/code&gt; and be able to parse it into your model. Next you&amp;#39;ll want to make sure that you set the &lt;code&gt;Content-Length&lt;/code&gt; so your server knows how much data to expect:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.setRequestHeader('&lt;span class=&quot;type&quot;&gt;Content&lt;/span&gt;-&lt;span class=&quot;type&quot;&gt;Length'&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;).length);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally when you call &lt;code&gt;send&lt;/code&gt; you&amp;#39;ll need to send up a JSON string, not the object:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;xhr&lt;/span&gt;.send(&lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So there we have it, we&amp;#39;ve seen the building blocks of making an AJAX request, the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object. We&amp;#39;ve seen how to make &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests, pass up data, manipulate headers and get data back in a response.&lt;/p&gt;
&lt;p&gt;From these building blocks you can start understanding what is actually happening in your libraries and even avoid them if you don&amp;#39;t want the overhead (say a mobile app).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
            <category>ajax</category>
            
            <category>jquery</category>
            
        </entry>
    
        <entry>
            <title>Array-like objects</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-22-array-like-objects.html"/>
            <updated>2013-07-22T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-22-array-like-objects.html</id>
            <content type="html">&lt;p&gt;You&amp;#39;ve possibly head the saying&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. - &lt;a href=&quot;http://books.google.com/books?id=j7zds6xx7S0C&amp;amp;pg=PA68&amp;amp;dq=%22james+Riley%22+OR+%22James+Whitcomb+Riley%22+bird++duck&amp;amp;num=100&quot;&gt;credit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a common adage when talking about &lt;a href=&quot;http://en.wikipedia.org/wiki/Duck_typing&quot;&gt;Duck Typing&lt;/a&gt; in programming, especially when it comes to working with dynamic languages like JavaScript, based on assumptions made about an object you can attempt to infer other details. Statically typed languages on the other hand make it a bit harder to do Duck Typing, &lt;a href=&quot;http://blogs.bartdesmet.net/blogs/bart/archive/2008/11/10/introducing-the-c-ducktaper-bridging-the-dynamic-world-with-the-static-world.aspx&quot;&gt;that&amp;#39;s not to say it&amp;#39;s impossible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Due to the dynamic nature of JavaScript we actually come across this quite often with arrays in JavaScript. So what makes an object an array? Well there&amp;#39;s two basic building blocks of an array:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numerical identifiers&lt;/li&gt;
&lt;li&gt;A length property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So take this code snippet:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var foo = ??;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;transposed_variable&quot;&gt;foo.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
    console.log(foo[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this we can infer that &lt;code&gt;foo&lt;/code&gt; is quite possibly an array, it meets our basic requirements to be an array, but like the dangers of duck typing this doesn&amp;#39;t mean that it&amp;#39;s actually an array does it?&lt;/p&gt;
&lt;h1 id=&quot;array-like-objects&quot;&gt;Array-like objects&lt;/h1&gt;
&lt;p&gt;It&amp;#39;s quite common in JavaScript to come across array-like objects, objects that on the surface look like arrays but as soon as you look beneath the surface it&amp;#39;ll become apparent that they aren&amp;#39;t actually arrays. You&amp;#39;ve probably come across these objects in the past and not really given it a second thought, two really common objects are the &lt;code&gt;arguments&lt;/code&gt; object and a &lt;code&gt;NodeList&lt;/code&gt; (you know, from &lt;code&gt;querySelectorAll&lt;/code&gt;). Both of these objects have numerical indexers, length, but no &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt; and so on, basically they don&amp;#39;t inherit &lt;code&gt;Array.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With both of these objects the fact that they don&amp;#39;t inherit from &lt;code&gt;Array.prototype&lt;/code&gt; is a bit of a pain, it means you couldn&amp;#39;t do something like this for example:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var inputs = &lt;span class=&quot;transposed_variable&quot;&gt;form.&lt;/span&gt;querySelectorAll(&lt;span class=&quot;string&quot;&gt;'input'&lt;/span&gt;);
var values = &lt;span class=&quot;transposed_variable&quot;&gt;inputs.&lt;/span&gt;map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(input)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cell&quot;&gt;{
            value: input.value,
            name: input.getAttribute(&lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;)
        }&lt;/span&gt;;
    });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is a pretty simple bit of code, you want to get all the input name/value pairs, maybe to submit them via AJAX but that&amp;#39;s not important, what&amp;#39;s important is we&amp;#39;re using the &lt;code&gt;Array.map&lt;/code&gt; method, something very common if you&amp;#39;re doing anything in a modern JavaScript engine (modern being &amp;gt;= IE9).&lt;/p&gt;
&lt;h1 id=&quot;making-arrays-of-array-like-objects&quot;&gt;Making arrays of array-like objects&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve found yourself an array-like object chances are you want to use it like an array, that begs the obvious question, how do we make it an array?&lt;/p&gt;
&lt;p&gt;Well there&amp;#39;s a pretty easy solution to this, we have numerical indexes and a length property, so what about a &lt;code&gt;for loop&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var items = &lt;span class=&quot;matrix&quot;&gt;[]&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, il = &lt;span class=&quot;transposed_variable&quot;&gt;inputs.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; il; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
    items.push(inputs[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But... &lt;code&gt;for loop&lt;/code&gt;&amp;#39;s are so old school there&amp;#39;s got to be a better way. Well there is and here we can look at exploiting JavaScript&amp;#39;s functions. We&amp;#39;ve seen that you can use &lt;a href=&quot;/posts/2013-07-04-javascript-call-and-apply.html&quot;&gt;&lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; to futz with function scope and this we can do to improve our array-like object manipulation.&lt;/p&gt;
&lt;h1 id=&quot;futzing-slice&quot;&gt;Futzing slice&lt;/h1&gt;
&lt;p&gt;When you&amp;#39;re wanting to create new arrays from existing ones the easiest way is using the &lt;code&gt;slice&lt;/code&gt; method. The &lt;code&gt;slice&lt;/code&gt; method can be neat if you want to take parts of an array between two indexes, but it can also be used if you want to create a whole clone of the array, like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var array1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
var array2 = array1&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(array1 !== array2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By passing &lt;code&gt;0&lt;/code&gt; we take a slice starting at index 0 and since we provided no end point it&amp;#39;ll go to the length of the array.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;slice&lt;/code&gt; is a function just like everything else, you can use &lt;code&gt;call&lt;/code&gt; against it.&lt;/p&gt;
&lt;p&gt;And where it gets really interesting is when we play with our array-like objects, we can pass &lt;em&gt;that&lt;/em&gt; as our context to our &lt;code&gt;slice&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var items = Array&lt;span class=&quot;preprocessor&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(inputs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep that&amp;#39;s right, &lt;code&gt;slice&lt;/code&gt; doesn&amp;#39;t require an array, just something that &lt;em&gt;looks&lt;/em&gt; like an array, as far as &lt;code&gt;slice&lt;/code&gt; is concerned it looks like a duck, it quacked, so hey, we&amp;#39;ll treat it like a duck, check out &lt;a href=&quot;http://hg.mozilla.org/mozilla-central/file/2268ff80683a/js/src/jsarray.cpp#l2536&quot;&gt;the SpiderMonkey source&lt;/a&gt;, it really only cares if there&amp;#39;s a &lt;code&gt;length&lt;/code&gt; property, pretty neat!&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;We&amp;#39;ve seen some building blocks over the last few weeks, things we can use to manipulate functions and objects in the interesting ways and this is just another common usage of the patterns.&lt;/p&gt;
&lt;p&gt;A small piece of advice, if you&amp;#39;re doing a lot of these calls you can assign &lt;code&gt;slice&lt;/code&gt; into a variable which you can use, which will make the minification work a whole lot better:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var slice = Array&lt;span class=&quot;preprocessor&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.slice&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
var items = slice&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(inputs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>The JavaScript new operator</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-14-javascript-new-operator.html"/>
            <updated>2013-07-14T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-14-javascript-new-operator.html</id>
            <content type="html">&lt;p&gt;In the &lt;a href=&quot;/posts/2013-07-10-implementing-indexers-in-javascript.html&quot;&gt;last post&lt;/a&gt; I was changing some C# code to JavaScript but there was one part that I just &lt;em&gt;dropped&lt;/em&gt; and didn&amp;#39;t explain why, and that was the use of the new operator.&lt;/p&gt;
&lt;p&gt;While JavaScript isn&amp;#39;t a classical language, it&amp;#39;s prototypal, and doesn&amp;#39;t have a notion of classes (&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes&quot;&gt;yet&lt;/a&gt;), but it does have a new operator. What&amp;#39;s interesting is &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.2&quot;&gt;it&amp;#39;s an operator&lt;/a&gt; like C# (see 14.5.10 of the spec, yep I looked it up :P), and operators tend to do something unique which is also the case with JavaScript new. If you&amp;#39;re a spec-nut you can read what happens in the link above (and also the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2&quot;&gt;[[Construct]]&lt;/a&gt; method which is important), but if you&amp;#39;re not it does a few things that are of note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It expects a function as the &lt;em&gt;thing&lt;/em&gt; being new&amp;#39;ed up&lt;/li&gt;
&lt;li&gt;The result is a new object that has the prototype of the function that was new&amp;#39;ed, but also potentially their own values (such as values provided as the arguments)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let&amp;#39;s make a simple &amp;quot;class&amp;quot; which consists of a constructor function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
}; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then add members to all instances by modifying the prototype:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;objectivec&quot;&gt;Person&lt;span class=&quot;variable&quot;&gt;.prototype&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.fullName&lt;/span&gt; = function () {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.firstName&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.lastName&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we run the following we&amp;#39;ll get two different people:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vhdl&quot;&gt;var aaron = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;attribute&quot;&gt;'Aaron&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'Powell&lt;/span&gt;');
var john = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;attribute&quot;&gt;'John&lt;/span&gt;', &lt;span class=&quot;attribute&quot;&gt;'Smith&lt;/span&gt;');

console.&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt;(aaron == john); //fails&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two people we&amp;#39;ve created are different objects, which is exactly what we expect, but if we did:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.assert&lt;/span&gt;(aaron&lt;span class=&quot;preprocessor&quot;&gt;.fullName&lt;/span&gt; == john&lt;span class=&quot;preprocessor&quot;&gt;.fullName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The assert won&amp;#39;t fail since they are the same method &lt;em&gt;reference&lt;/em&gt;, but on two different objects.&lt;/p&gt;
&lt;p&gt;Another important part of the Person constructor has a this scope (which we&amp;#39;ve learnt to manipulate in the past) and what would we expect it to be? Well functions inherit the scope of their parent (unless you modify it) which means that our parent scope of Person will be the global object (window in the browser) or null in ES5 Strict Mode.&lt;/p&gt;
&lt;p&gt;But that&amp;#39;s not the case when you use the new operator, the new operator is yet another way we can modify this, under this scenario it becomes a completely new object literal, it&amp;#39;s similar to doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = {};
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;
    };
    Person.apply(obj, arguments);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s close, it doesn&amp;#39;t maintain the prototype chain or setup the constructor properly, what it does do is create a new object that is then returned, meaning each invocation of Person will result in a different object, much like the new operator.&lt;/p&gt;
&lt;h2 id=&quot;is-it-new-or-not-&quot;&gt;Is it new or not?&lt;/h2&gt;
&lt;p&gt;The problem with the new operator is that it&amp;#39;s applied to a function, it can be applied to &lt;em&gt;any&lt;/em&gt; function, but it can also be omitted. This means you can create yourself a function that&amp;#39;s intended to be a constructor but not used with a new operator, and doing this would mean that you&amp;#39;re augmenting a this scope you probably shouldn&amp;#39;t be, such as the global object.&lt;/p&gt;
&lt;p&gt;So how do we know if someone used the new operator? You&amp;#39;re probably not writing your own pre-parser to check the code before it&amp;#39;s executed so it&amp;#39;s not like you know the omitted it at a code level. Well there&amp;#39;s an alternative &lt;em&gt;check the constructor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One thing I omitted from the above pseudo-new implementation is setting up the obj.constructor property, this is something that the new operator does, and it&amp;#39;s the easiest way to check if a function was invoked with a new operator:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(firstName, lastName)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.constructor !== Person) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(firstName, lastName);
    }
    &lt;span class=&quot;comment&quot;&gt;//setup properties&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we&amp;#39;re checking the constructor against the type we expect the constructor to be. If the function wasn&amp;#39;t invoked with the new operator it won&amp;#39;t receive the right constructor type which means we can assume that function was invoked normally and expects a return, a return which can then be a new instance.&lt;/p&gt;
&lt;p&gt;This can be a very useful trick if you&amp;#39;re exposing something that&amp;#39;s to be constructible but you don&amp;#39;t trust your consumers to do the right thing.&lt;/p&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;The new operator is an interesting one, it&amp;#39;s a great way to create objects that have unique instances but still share a common root (being the prototype). There&amp;#39;s arguments all over the internet about whether you should use the new operator or not, whether your API should not require the new operator, whether not using new means a violation of the API or whether your API should just be smart enough to deal with both usages.&lt;/p&gt;
&lt;p&gt;But why would you use it? Well that&amp;#39;s a story for another day ;).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>Implementing &quot;indexers&quot; in JavaScript</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-10-implementing-indexers-in-javascript.html"/>
            <updated>2013-07-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-10-implementing-indexers-in-javascript.html</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/lzcd&quot;&gt;Luke&lt;/a&gt; was wanting to know how to implement this C# code as JavaScript:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;vala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Stuff { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo() {

    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; stuff) {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Stuff = stuff;
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; stuff] {
        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; {
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo(stuff);
        }
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Foo Bar() {
        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Darn tootin'&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class-implementation aside the interesting part that he was having trouble with was the indexer, basically being able to write this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;transposed_variable&quot;&gt;Console.&lt;/span&gt;WriteLine(new Foo()&lt;span class=&quot;matrix&quot;&gt;[&quot;one&quot;]&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[&quot;two&quot;]&lt;/span&gt;&lt;span class=&quot;matrix&quot;&gt;[&quot;three&quot;].&lt;/span&gt;Bar());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what exactly Luke is trying to do I don&amp;#39;t know (and my life is probably safer not knowing) but there&amp;#39;s no point shying away from a problem. &lt;/p&gt;
&lt;p&gt;So the syntax above is supported by JavaScript, you can use &lt;code&gt;[]&lt;/code&gt; notation on an object but it&amp;#39;s different to C#&amp;#39;s implementation. Since JavaScript objects are really glorified hash bags when you use [&amp;quot;one&amp;quot;] it&amp;#39;s saying you want the property one of the object, like when you do it on a C# dictionary type, and this will be fine assuming you have a one property. The problem here is that we don&amp;#39;t have said property, we&amp;#39;re wanting to intercept them and create them on the fly.&lt;/p&gt;
&lt;h2 id=&quot;simulating-indexers-with-functions&quot;&gt;Simulating indexers with functions&lt;/h2&gt;
&lt;p&gt;Some languages support this concept of &amp;#39;method missing&amp;#39; but not JavaScript (&lt;a href=&quot;http://soft.vub.ac.be/~tvcutsem/invokedynamic/proxies_tutorial&quot;&gt;well not until we get ES6 proxies&lt;/a&gt;) so we need to look at another idea… functions. So we could design something that allows us to write this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;new Foo()&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.make&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that&amp;#39;s kind of verbose isn&amp;#39;t it? We&amp;#39;ve got this extra make method that we have to call, we&amp;#39;re still using a new operator, really there&amp;#39;s got to be some nicer way which we could do this… right?&lt;/p&gt;
&lt;h2 id=&quot;functions-that-return-functions-containing-functions&quot;&gt;Functions that return functions containing functions&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s make it so we can drop the make part of the above API, so we are now doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;new Foo()(&lt;span class=&quot;string&quot;&gt;&quot;one&quot;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&quot;three&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;.Bar&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks somewhat better doesn&amp;#39;t it? Sure we&amp;#39;re using &lt;code&gt;()&lt;/code&gt; not &lt;code&gt;[]&lt;/code&gt;, but that&amp;#39;s minor semantics really, the question is can we actually make that our API? Of course we can, and we&amp;#39;ll have a look at how (if you guessed that you couldn&amp;#39;t where did you think this post would go :P).&lt;/p&gt;
&lt;p&gt;So you know that JavaScript functions are just objects right? Well they are and what&amp;#39;s cool is that since they are just objects we can manipulate them as such. Let&amp;#39;s start with foo, really foo is just a function (since we don&amp;#39;t have classes in JavaScript):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I&amp;#39;m going to want something returned from foo that can be invoked like a function, so maybe I could just return a function...&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok that&amp;#39;s a good start, I can do:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next it&amp;#39;s time to make innerFoo do something, basically what innerFoo should do setup the next level down our chain. To keep the function more readable I&amp;#39;m going to push the logic out into a new function, we&amp;#39;ll call it next:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
    };

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(stuff)&lt;/span&gt; {&lt;/span&gt;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you see where we&amp;#39;re going here? The next method is ultimately going to be smart, setting up the next level down our object, whereas the innerFoo is really just a pass-through to that (it&amp;#39;ll be clearer as we implement our next method):&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, arguments);
    };

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(stuff)&lt;/span&gt; {&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = foo();
        child.stuff = stuff;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; child;
    };

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; innerFoo;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So our next method will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new foo function (well, a new innerFoo)&lt;/li&gt;
&lt;li&gt;Create a property on the function object called stuff&lt;/li&gt;
&lt;li&gt;Return the newly created object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that we can do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(foo()(&lt;span class=&quot;string&quot;&gt;'one'&lt;/span&gt;).stuff); &lt;span class=&quot;comment&quot;&gt;// one&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or go further:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;rust&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(foo()(&lt;span class=&quot;string&quot;&gt;'one'&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;'two'&lt;/span&gt;).stuff); &lt;span class=&quot;comment&quot;&gt;// two&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome, we&amp;#39;ve pretty much got indexers going, now let&amp;#39;s add the bar method from our original API.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;delphi&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;{
    console.log('Darn tootin\'');
    return this;
}&lt;/span&gt;

&lt;span class=&quot;title&quot;&gt;innerFoo&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember how I mentioned that functions as objects? Well this is where it can be really useful, since it&amp;#39;s an object we can modify it like any JavaScript object and just add methods and properties like we&amp;#39;ve done, and awesomely since we&amp;#39;re going back through our original foo method it&amp;#39;ll work with all the children we get.&lt;/p&gt;
&lt;h2 id=&quot;parent-access&quot;&gt;Parent access&lt;/h2&gt;
&lt;p&gt;Once I did the initial revision for Luke he wasn&amp;#39;t satisfied, next up he wanted to know how to access the parent of each instance created. Well that&amp;#39;s actually pretty easy, just a small modification to our innerFoo function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; innerFoo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next.apply(innerFoo, arguments);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this time when it invokes the next level down will have a this context which is the parent object, then you can decide how to expose that as you step down.&lt;/p&gt;
&lt;h2 id=&quot;bonus-round-displaying-the-object&quot;&gt;Bonus round – displaying the object&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve run the code and tried to do a &lt;code&gt;console.log/console.dir&lt;/code&gt; of the foo instances returned you&amp;#39;ll see they are well... crappy:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(inner&lt;span class=&quot;variable&quot;&gt;Foo&lt;/span&gt;, arguments)&lt;/span&gt;;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;#39;s kinda crappy, can&amp;#39;t exactly see what the value of stuff is, or what an object&amp;#39;s parent is now can we? Guess we better fix that!&lt;/p&gt;
&lt;p&gt;Did you know that Object has a toString method on it? This method is generally overlooked, if you&amp;#39;re working with an object you&amp;#39;ll likely get [object Object] when you invoke it from your object, functions will return the text content of the function (which can be useful if you want to modify functions on the fly, but that&amp;#39;s a subject for another day :P), and this is why we get the above output from foo, foo is a function after all.&lt;/p&gt;
&lt;p&gt;Well we can write our own toString method if we want, we just put it on our object and it&amp;#39;ll be used rather than the one inherited from the prototype chain. So let&amp;#39;s do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;
};
innerFoo.toString = toString;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome, done! One thing to keep in mind is that &lt;code&gt;toString&lt;/code&gt; must return a string value, it can do whatever you want to get there, just return a string ;).&lt;/p&gt;
&lt;p&gt;But let&amp;#39;s go one step further and exploit this, let&amp;#39;s get it to output the whole parent graph, I&amp;#39;m going to do this by using bind, like we saw in &lt;a href=&quot;/posts/2013-07-05-javascript-binding-currying-and-arrows.html&quot;&gt;my last post&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var next = function (stuff) {
    var child = foo()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    child&lt;span class=&quot;preprocessor&quot;&gt;.stuff&lt;/span&gt; = stuff&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    child&lt;span class=&quot;preprocessor&quot;&gt;.toString&lt;/span&gt; = toString&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(child, this)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    return child&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

o&lt;span class=&quot;preprocessor&quot;&gt;.toString&lt;/span&gt; = toString&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(o, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;#39;ll also see that I&amp;#39;ve bound the parent as the first argument of &lt;code&gt;toString&lt;/code&gt;. &lt;code&gt;toString&lt;/code&gt; doesn&amp;#39;t take arguments but by using bind we can do that, now let&amp;#39;s update our toString method to handle it:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(parent)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;parent&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;', '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stuff;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nifty huh? We&amp;#39;re exploiting the type coercion in JavaScript, because parent isn&amp;#39;t a string, it&amp;#39;s an object, but we&amp;#39;re using the + operator against another string JavaScript will coerce the object to a string, using its toString method, which in turn invokes the function we wrote, which in turn does coercion and so on!&lt;/p&gt;
&lt;h2 id=&quot;done-&quot;&gt;Done!&lt;/h2&gt;
&lt;p&gt;And with that we wrap up this week&amp;#39;s adventure, if you&amp;#39;ve made it this far well done it was a long one but damn it was fun!&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>JavaScript bind, currying and arrow functions</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-05-javascript-binding-currying-and-arrows.html"/>
            <updated>2013-07-05T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-05-javascript-binding-currying-and-arrows.html</id>
            <content type="html">&lt;p&gt;How many times have you written code like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;actionscript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = {
    makeRequest: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
        $.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/foo'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result)&lt;/span&gt; {&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.update(result);
            });
        );
    },
    update: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; }
};
&lt;span class=&quot;comment&quot;&gt;//somewhere later in the code&lt;/span&gt;
foo.makeRequest();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only to have it poo itself saying that &lt;code&gt;this.update&lt;/code&gt; is not a function? Maybe it was with an event handler not an AJAX request, all in all it&amp;#39;s the same problem, you tried to use something and JavaScript changed the value of this on you.&lt;/p&gt;
&lt;p&gt;Welcome to the wonderful world of JavaScript scoping.&lt;/p&gt;
&lt;p&gt;So there&amp;#39;s a bunch of ways which you can solve this, you can write the &lt;code&gt;var that = this;&lt;/code&gt; style code being a very popular one, basically leveraging closure scopes to keep an instance of the type in memory until the function itself is GC&amp;#39;ed.&lt;/p&gt;
&lt;p&gt;But there&amp;#39;s another approach, &lt;code&gt;Function.bind&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#39;ll start with our simple demo:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; {&lt;/span&gt;
      console.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, x, arguments);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we remember from last time we can get this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;foo(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//console.log(window, 42, [42]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now saw we can the foo function to have a known value of what this is when it&amp;#39;s called, no matter how it&amp;#39;s invoked, even if someone was to sneaky and use call or apply? Well that&amp;#39;s what we can use the bind method for:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; bar = foo.bind({ a:&lt;span class=&quot;string&quot;&gt; 'b'&lt;/span&gt; });
&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;); //console.log({ a:&lt;span class=&quot;string&quot;&gt; 'b'&lt;/span&gt; }, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;]);
&lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;.call('abc', &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So both times we call the bar function we have the same result, even though we&amp;#39;re trying to specify a this context using the call method.&lt;/p&gt;
&lt;h2 id=&quot;other-uses-for-bind&quot;&gt;Other uses for bind&lt;/h2&gt;
&lt;p&gt;While bind is most commonly used to force a function to always have a specific value for the this object it can also be used for another purpose, to bind specific arguments. If we revisit our foo method we could do this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;var baz = foo&lt;span class=&quot;preprocessor&quot;&gt;.bind&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
baz()&lt;span class=&quot;comment&quot;&gt;; //console.log('a', 'b', ['b']);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;practical-application-of-argument-binding&quot;&gt;Practical application of argument binding&lt;/h2&gt;
&lt;p&gt;When you&amp;#39;re looking for a practical application for argument binding an idea that comes to mind is &lt;a href=&quot;http://en.wikipedia.org/wiki/Currying&quot;&gt;Currying&lt;/a&gt;. I&amp;#39;m not going to dive too deeply into what currying is, if you&amp;#39;re not familiar with the concept start with the Wikipedia link and expand from there (also functional programming isn&amp;#39;t my area of expertise, I just understand some of the basics and may be missing the point from here on out, if so Twitter is --&amp;gt; for you to rant on).&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s create a new function to add two numbers:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x, y)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally we want to be able to do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add2 = curry(sum, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
add2(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&amp;#39;ll create a curry function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var curry = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(fn)&lt;/span&gt; {&lt;/span&gt;
      var args = &lt;span class=&quot;transposed_variable&quot;&gt;Array.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;prototype.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;slice.&lt;/span&gt;call(arguments, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;transposed_variable&quot;&gt;fn.&lt;/span&gt;&lt;span class=&quot;transposed_variable&quot;&gt;bind.&lt;/span&gt;apply(fn, &lt;span class=&quot;matrix&quot;&gt;[this].&lt;/span&gt;concat(args);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this function is kind of trippy looking it&amp;#39;s more because it&amp;#39;s a very generic method, it&amp;#39;s allowing us to curry a function and bind any number of arguments in place (which is why we&amp;#39;re using the apply method of bind to provide an array of arguments) and the arguments we provide when calling the bound function will be appended on to the ones which we pre-bound.&lt;/p&gt;
&lt;p&gt;But from this we end up with a new function that we can call as above.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bonus: My colleague &lt;a href=&quot;https://twitter.com/liammclennan&quot;&gt;Liam Mclennan&lt;/a&gt; flicked me &lt;a href=&quot;https://gist.github.com/liammclennan/3654718#comment-559457&quot;&gt;this gist&lt;/a&gt; of how to do an even cooler currying approach.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;fat-arrows&quot;&gt;Fat arrows&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;ve done anything with CoffeeScript or TypeScript you might be familiar with the concept of fat arrow functions. These languages use a modified syntax to deal with lexical scoping problem that bind can be used to solve. TypeScript tracks your usage of this in fat arrow functions and replaces it with a captured variable, CoffeeScript relies on the &lt;code&gt;@&lt;/code&gt; symbol to do a similar thing.&lt;/p&gt;
&lt;p&gt;For anyone who&amp;#39;s not been following the evolution of &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:proposals&quot;&gt;ECMAScript 6&lt;/a&gt; (the next version of JavaScript) one of the accepted new syntax features is &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax&quot;&gt;arrow function syntax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simply put the language is going to have a way to defining a function which you can be confident of what the this value will be (sure you can still futz with it if you want to but it&amp;#39;s covering the most common scenarios).&lt;/p&gt;
&lt;p&gt;To test out the new arrow function syntax grab Firefox v22 or newer.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>JavaScript call and apply</title>
            <link href="http://www.aaron-powell.com/posts/2013-07-04-javascript-call-and-apply.html"/>
            <updated>2013-07-04T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-07-04-javascript-call-and-apply.html</id>
            <content type="html">&lt;p&gt;A colleague recently came across this line in our codebase that I wrote:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;, vehicle&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What the overall result of the code is isn&amp;#39;t particularly important, the part that tripped them up (and made them think I&amp;#39;m on drugs I&amp;#39;m not actually on) was this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(binding&lt;span class=&quot;preprocessor&quot;&gt;.vehicle&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;, vehicle&lt;span class=&quot;preprocessor&quot;&gt;.involvements&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the  involvements property is an array in both scenarios which exposes a push method, the confusion was around what the apply method does and why I was even using it.&lt;/p&gt;
&lt;p&gt;Both call and apply are methods which are part of the JavaScript language and are exposed on the Function prototype, meaning that they can be accessed from any function, so let&amp;#39;s say we have this function:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(a)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;transposed_variable&quot;&gt;console.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(this, a, argument);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we invoke it like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;('b')&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is the same as doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(window, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: In ES3 it&amp;#39;ll be window, ES5 strict mode it&amp;#39;ll be null, or undefined, I forget which&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;#39;s throw the apply method into the mix and invoke it like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time it&amp;#39;ll be like we&amp;#39;ve done this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could alternatively provide an array of arguments so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Becomes:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;console&lt;span class=&quot;preprocessor&quot;&gt;.log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
&lt;p&gt;The apply method takes two arguments, the first is what controls the this value, the second is an array of objects that will be decomposed to represent the various arguments passed in, meaning that the array item 0 will be the first argument, b in our example, and so on.&lt;/p&gt;
&lt;p&gt;The call method is similar but instead of taking an array that represents the arguments it takes a splat, anything after the this context will be used directly as the arguments. So we&amp;#39;d use call like this to achieve the same result:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foo&lt;span class=&quot;preprocessor&quot;&gt;.call&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'c'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;relating-it-to-our-original-code&quot;&gt;Relating it to our original code&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s think about how this related back to our original code, working with arrays and push. Say I have an array and I want to add N number of values to said array. How would you do it?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];
&lt;span class=&quot;comment&quot;&gt;//I want arr == [1,2,3,4,5,6]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well the first obvious candidate is a for loop:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (var &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span class=&quot;transposed_variable&quot;&gt;arr2.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++) &lt;span class=&quot;cell&quot;&gt;{
      arr.push(arr2[i]);
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#39;ll do exactly what we&amp;#39;re after, but there&amp;#39;s a problem, we&amp;#39;re calling push &lt;em&gt;a lot&lt;/em&gt;, once for every item in the array in fact(!!). This can be a bit of a performance hit, especially if you have large arrays, the JavaScript runtime engine simply can&amp;#39;t optimise it because it doesn&amp;#39;t know how many there could be so it can&amp;#39;t preallocate the memory, meaning it&amp;#39;s somewhat inefficient.&lt;/p&gt;
&lt;p&gt;Alternatively you could use the &lt;code&gt;concat&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;ini&quot;&gt;&lt;span class=&quot;setting&quot;&gt;arr = &lt;span class=&quot;value&quot;&gt;arr.concat(arr2);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works just fine but the problem is that you replace arr with a new instance of it. &lt;em&gt;Generally speaking&lt;/em&gt; that&amp;#39;s not a problem, but if you&amp;#39;re relying on the object itself to not change, at a memory level (say it&amp;#39;s an observable property from Knockout, or a bound property in WinJS), you&amp;#39;ll potentially run into problems.&lt;/p&gt;
&lt;p&gt;So we&amp;#39;re back to push, we want to append multiple items to an existing array without overriding the original object/property. The nice thing about push is that we can provide it N number of arguments which represent all the items we wish to push. Well since I&amp;#39;ve got an array I can&amp;#39;t exactly pass that in directly, since then argument 1 will be the array, it won&amp;#39;t be decomposed. And this is where apply comes in, we can provide the array as the 2nd argument to apply and have N number of items pushed to the array. This brings us to doing this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;arr&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.apply&lt;/span&gt;(arr, arr2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it, we&amp;#39;ve used apply to decompose an array and push all he values into the target array, basically we&amp;#39;ve done this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;arr&lt;span class=&quot;preprocessor&quot;&gt;.push&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the this context we&amp;#39;ve set is the &lt;code&gt;arr&lt;/code&gt; object itself.&lt;/p&gt;
&lt;p&gt;Hopefully that does a good enough explanation to confuse everyone ;).&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>DDDMelbourne workshop</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-26-dddmelbourne-workshop.html"/>
            <updated>2013-06-26T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-26-dddmelbourne-workshop.html</id>
            <content type="html">&lt;p&gt;It&amp;#39;s that time of year again, it&amp;#39;s &lt;strong&gt;conference time!&lt;/strong&gt;. I&amp;#39;m excited to announce that I&amp;#39;ll be coming down for my 4th(!!) &lt;a href=&quot;http://wwww.dddmelbourne.com&quot;&gt;DDDMelbourne&lt;/a&gt; and the &lt;a href=&quot;http://www.dddmelbourne.com/agenda&quot;&gt;overall agenda&lt;/a&gt; looks quite exciting!&lt;/p&gt;
&lt;p&gt;This year the organisers have decided to add a workshop track as well as the three presentations, and when they asked me if I&amp;#39;d do a JavaScript workshop I jumped at the chance.&lt;/p&gt;
&lt;p&gt;The workshop is going to be on an aspect of JavaScript that I&amp;#39;m quite passionate about and we&amp;#39;ll be getting really hands-on and mostly just writing code for the hour, so bring your device and get ready to code.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&quot;http://dddmelb4.eventbrite.com.au/&quot;&gt;register now&lt;/a&gt; before it&amp;#39;s too late (ticket&amp;#39;s are going quick).&lt;/p&gt;
</content>
            
            <category>dddmelbourne</category>
            
        </entry>
    
        <entry>
            <title>Walking a JavaScript object</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-21-walking-a-javascript-object.html"/>
            <updated>2013-06-21T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-21-walking-a-javascript-object.html</id>
            <content type="html">&lt;p&gt;Recently I was trying to solve a problem where I had a JSON path to a property on an object, the path was going to be &lt;code&gt;n&lt;/code&gt; layers deep and the object itself was also &lt;code&gt;n&lt;/code&gt; layers deep. I needed to solve this problem in a fairly generic manner, as there was a number of different scenarios under which this could would be run.&lt;/p&gt;
&lt;p&gt;Basically I had this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;nginx&quot;&gt;&lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;string&quot;&gt;'foo.bar.baz'&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And an object like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;smalltalk&quot;&gt;var obj = {
    &lt;span class=&quot;method&quot;&gt;foo:&lt;/span&gt; {
        &lt;span class=&quot;method&quot;&gt;bar:&lt;/span&gt; {
            &lt;span class=&quot;method&quot;&gt;baz:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;
        }
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So from the &lt;code&gt;path&lt;/code&gt; I want to be able to find out the value in the object that matches it.&lt;/p&gt;
&lt;h1 id=&quot;pass-1&quot;&gt;Pass #1&lt;/h1&gt;
&lt;p&gt;A colleague of mine gave me the code which would do this, from an application they had, implemented using a for loop:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;erlang&quot;&gt;var value = obj;
var paths = path.split('.');
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(var i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; paths.length; i++)&lt;/span&gt; {
    &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;paths&lt;/span&gt;[&lt;span class=&quot;title&quot;&gt;i&lt;/span&gt;]];
}

&lt;span class=&quot;title&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that does exactly what needs to be done, exactly as advertised. Job done right?&lt;/p&gt;
&lt;h1 id=&quot;pass-2&quot;&gt;Pass #2&lt;/h1&gt;
&lt;p&gt;The for loop is so old school, these days it&amp;#39;s all functional programming that the kids are into these days so I looked at our method and decided there had to be another way which we could approach this, something a bit more functional.&lt;/p&gt;
&lt;p&gt;Since what we&amp;#39;re doing it walking through an object I wondered &amp;quot;Could I use something from the &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt; family for that?&amp;quot;. Well it turns out that &lt;strong&gt;yes&lt;/strong&gt; there is something ideal for that, &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You see the &lt;code&gt;reduce&lt;/code&gt; method takes a callback like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;lua&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(prev, current)&lt;/span&gt;&lt;/span&gt; {
    //&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; what is to be the &lt;span class=&quot;built_in&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'prev'&lt;/span&gt; value
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as long as the &lt;code&gt;prev&lt;/code&gt; is an instance of &lt;code&gt;obj&lt;/code&gt; then we can walk it, and doing that is fine as we can provide an argument to the &lt;code&gt;reduce&lt;/code&gt; method that defines what the initial value will be. This means we can rewrite our walker like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;matlab&quot;&gt;var value = &lt;span class=&quot;transposed_variable&quot;&gt;path.&lt;/span&gt;split(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;).reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(prev, curr)&lt;/span&gt; { &lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev&lt;span class=&quot;matrix&quot;&gt;[curr]&lt;/span&gt;;
}, obj);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there we have it, a nice little object walker.&lt;/p&gt;
</content>
            
            <category>javascript</category>
            
        </entry>
    
        <entry>
            <title>Solving DocPad's excessive memory usage</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-18-solving-docpads-excessive-memory-usage.html"/>
            <updated>2013-06-18T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-18-solving-docpads-excessive-memory-usage.html</id>
            <content type="html">&lt;p&gt;Since I decide to &lt;a href=&quot;/posts/2013-06-10-new-blog-less-funnelweb.html&quot;&gt;move my site from FunnelWeb to DocPad&lt;/a&gt; I also decided to deploy to &lt;a href=&quot;http://www.heroku.com&quot;&gt;Heroku&lt;/a&gt; since I like them as a host. So I &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io&quot;&gt;built my site&lt;/a&gt;, &lt;a href=&quot;/posts/2013-06-11-funnelweb-to-git.html&quot;&gt;got everything into Git&lt;/a&gt; and then I did a &lt;code&gt;git push heroku master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And then it fell over.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As soon as the push completed Heroku kicked off and started to spin up the dyno, but when I hit the site it said it&amp;#39;d crashed.&lt;/p&gt;
&lt;p&gt;Crashed, seriously? It&amp;#39;s a bunch of HTML files, how on earth can that crash?&lt;/p&gt;
&lt;p&gt;So I crack out the Heroku toolbox and inspect the log files and find the crash, it crashed because &lt;em&gt;it exceeded the allocated memory&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exceeded the allocated memory?!&lt;/strong&gt; IT&amp;#39;S A STATIC SITE!&lt;/p&gt;
&lt;p&gt;Ok, fine, let&amp;#39;s have a look at what could be wrong, how a static site could be blowing out the memory allowance (512mb it&amp;#39;s allocated). I fire up the &lt;code&gt;docpad run&lt;/code&gt; command which is what is done on Heroku and this is what I get:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/get/docpad-memory-usage.PNG&quot; alt=&quot;DocPad memory usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#39;s nearly 700mb memory usage for a static site! I&amp;#39;ve seen it peak at over 900mb, run idle around 850mb, all kinds of wacky memory usage.&lt;/p&gt;
&lt;h1 id=&quot;the-not-so-static-static-site&quot;&gt;The not so static static site&lt;/h1&gt;
&lt;p&gt;So it would seem that I made a false assumption about DocPad, it&amp;#39;s not quite as static as I thought it was. While yes, it generates all these flat HTML files on disk it also keeps all the content in memory:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/slace&quot;&gt;@slace&lt;/a&gt; &lt;a href=&quot;https://twitter.com/shiftkey&quot;&gt;@shiftkey&lt;/a&gt; we put all the files in memory for generation and keep them there for quick access, so not a bad thing&lt;/p&gt;&amp;mdash; DocPad (@DocPad) &lt;a href=&quot;https://twitter.com/DocPad/statuses/341171857317314562&quot;&gt;June 2, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Well that&amp;#39;s kind of crap, I mean, I&amp;#39;ve got ~400 files in my generated output so it&amp;#39;s a lot of files that need to be stored in memory when really the requests can just be routed to a location on disk.&lt;/p&gt;
&lt;h1 id=&quot;solving-the-memory-problem&quot;&gt;Solving the memory problem&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve already made my choice to go with DocPad but since it&amp;#39;s having some whacky memory consumption issues meaning that it&amp;#39;s not really going to be a viable deployment option so how can I go about it?&lt;/p&gt;
&lt;p&gt;Well why not use DocPad to generate the HTML and then just write my own routing layer using &lt;a href=&quot;http://expressjs.com&quot;&gt;Express.js&lt;/a&gt;? After all DocPad is just sitting on top of Express.js to do a lot of its heavy lifting. In fact it&amp;#39;s really simple to make a routing engine on top of Express.js:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/out'&lt;/span&gt;));

app.listen(process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep that&amp;#39;s it, we&amp;#39;ve got our site going and now I can deploy it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: There&amp;#39;s still a bit of a limitation here, DocPad&amp;#39;s memory will blow out mostly during its generation phase so this now means that I have to check the &lt;code&gt;/out&lt;/code&gt; folder into my git repository, which makes it larger, but it&amp;#39;s not that big a problem really.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;maintaining-old-routes&quot;&gt;Maintaining old routes&lt;/h2&gt;
&lt;p&gt;As I said in my last post I needed to ensure that I didn&amp;#39;t break my SEO between my old routes and my new ones. When using DocPad&amp;#39;s engine it&amp;#39;ll look at the &lt;code&gt;urls&lt;/code&gt; meta-data which it&amp;#39;ll then 301 the response. Now you can see why DocPad does have some of its heavy memory usage, it actually does some on-the-fly mapping of routes. Still, I&amp;#39;m pretty sure I can do this without the memory explosion.&lt;/p&gt;
&lt;p&gt;My idea is that we can use the DocPad &lt;a href=&quot;http://docpad.org/docs/plugins&quot;&gt;plugin model&lt;/a&gt; and from that generate a JSON object that represents all the alternate routes for our posts, then we can load that JSON into our Express.js app and map the routes.&lt;/p&gt;
&lt;p&gt;My plugin can be found &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/tree/master/plugins/docpad-plugin-staticroutes&quot;&gt;here&lt;/a&gt; and what it does is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hook into the &lt;code&gt;writeAfter&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;Grab all &lt;code&gt;document&lt;/code&gt; objects&lt;/li&gt;
&lt;li&gt;Create an object that contains the URL we want and all the alternate URLs that we want to 301&lt;/li&gt;
&lt;li&gt;Strip out any that don&amp;#39;t have alternate URLs&lt;/li&gt;
&lt;li&gt;Write this to the output folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the code that&amp;#39;ll create our route map:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; docs = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.docpad.getCollection(&lt;span class=&quot;string&quot;&gt;'documents'&lt;/span&gt;).toJSON();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = docs.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(doc)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        url: doc.url,
        redirects: doc.urls.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x !== doc.url; })
    };
}).filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(route)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!route.redirects.length;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So from that we can now update our Express.js file to look like so:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

app.get(&lt;span class=&quot;string&quot;&gt;'/routes.json'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
    res.status(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;).send(&lt;span class=&quot;string&quot;&gt;'403 Forbidden'&lt;/span&gt;);
})

app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/out'&lt;/span&gt;));
app.&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/get'&lt;/span&gt;, express.&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;(__dirname + &lt;span class=&quot;string&quot;&gt;'/src/files/get'&lt;/span&gt;));

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./out/routes.json'&lt;/span&gt;).routes;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; redirector = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(dest)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; {&lt;/span&gt;
        res.redirect(&lt;span class=&quot;number&quot;&gt;301&lt;/span&gt;, dest);
    };
};

routes.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(route)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (route.redirects) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; route.redirects.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(redirect)&lt;/span&gt; {&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; app.get(redirect, redirector(route.url));
        });
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
});

app.listen(process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#39;ve also put a few other special routes, I&amp;#39;m putting a 403 on the &lt;code&gt;routes.json&lt;/code&gt; file since it sits in the root of my &lt;code&gt;out&lt;/code&gt; folder and I don&amp;#39;t really want it served out to the world (I&amp;#39;m also serving my assets from a special folder to avoid duplicating them in the repo and making it huge).&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;DocPad appears to be a bit of a memory hog which can introduce some problems when you are looking at your hosting options, so make sure you look at that before signing any hosting agreement.&lt;/p&gt;
&lt;p&gt;But that said if you want to invest a little bit of effort and not rely on DocPad as your routing engine then you can rely on just the HTML that is generated and use a middleware like Express.js to handle the routing with a minimal memory footprint.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For the record, my site now run around the 20mb memory footprint.&lt;/em&gt;&lt;/p&gt;
</content>
            
            <category>docpad</category>
            
        </entry>
    
        <entry>
            <title>New blog, less FunnelWeb</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-10-new-blog-less-funnelweb.html"/>
            <updated>2013-06-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-10-new-blog-less-funnelweb.html</id>
            <content type="html">&lt;p&gt;If you&amp;#39;re not viewing this via the website (ie - you&amp;#39;re reading it in a RSS reader) you&amp;#39;re probably not going to notice but &lt;a href=&quot;http://www.aaron-powell.com&quot;&gt;I&amp;#39;ve just done a new design&lt;/a&gt; and as a side project I&amp;#39;ve also decided that it&amp;#39;s time to do a shift in the platform.&lt;/p&gt;
&lt;p&gt;You see, I&amp;#39;ve been using &lt;a href=&quot;https://github.com/funnelweblog/funnelweb&quot;&gt;FunnelWeb&lt;/a&gt; for a few years now, and it&amp;#39;s been going smoothly, sitting there chugging along doing all that I&amp;#39;ve really needed from it, but in recent months I&amp;#39;ve decided that there was something that didn&amp;#39;t really want anymore... a database.&lt;/p&gt;
&lt;p&gt;Since all the content for my blog was stored in a database I was at the mercy of my hosting provider, if something happened to them, they had hardware failures, a security breach, etc, I had no copy of my content that I could easily shunt somewhere else and get back online. Admittedly &lt;strong&gt;this has never happened&lt;/strong&gt; but still, I felt that the lack of real ownership of my content, ultimately &lt;strong&gt;I&lt;/strong&gt; didn&amp;#39;t have a copy of it... anywhere.&lt;/p&gt;
&lt;p&gt;Over the last 12 to 18 months there&amp;#39;s been a real shift in how to manage content, especially for simple sites such as what my blog is. The idea is to use a static site generator and flat files for the content input. This then results in a bunch of HTML files that can then be served out for your site, I mean really it&amp;#39;s not like the content of my blog changes all that frequently so the idea of it being constantly generated on the fly doesn&amp;#39;t really make sense. Something like FunnelWeb seems like an overkill for what I need, a series of HTML files.&lt;/p&gt;
&lt;p&gt;So what are your options? Well there&amp;#39;s a few out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a popular choice which is written in Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt; if you want to stick with a .NET base&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docpad.org/&quot;&gt;DocPad&lt;/a&gt; is an implementation in Node.js, and this is what I went with (for no reason other than I used DocPad when it was v1 and wanted to see what&amp;#39;d changed).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All my content is now stored in a GitHub repo as a combination of Markdown and Eco templates (with a design from &lt;a href=&quot;http://html5up.net/strongly-typed/&quot;&gt;HTML5UP&lt;/a&gt;) and it gives me a lot of freedom about the content layout, more importantly I have copies of my content stored on my various devices, I have full history of the changes and it can be stored on any number of git hosts.&lt;/p&gt;
&lt;p&gt;So as you read this you&amp;#39;re reading something that has been served from a static HTML file generated by DocPad, rather than some content pulled from a database that is parsed on request and a HTML result generated.&lt;/p&gt;
&lt;h1 id=&quot;the-future-of-funnelweb&quot;&gt;The future of FunnelWeb&lt;/h1&gt;
&lt;p&gt;With the move of my blog off FunnelWeb someone is bound to ask the question about the future of FunnelWeb. In fact &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/funnelweblog/WY2VKuc1OOA&quot;&gt;the question recently came up on the mailing list&lt;/a&gt;, ultimately it comes down to that Jake and I &lt;a href=&quot;http://blog.tatham.oddie.com.au/2013/02/20/dead-vs-done/&quot;&gt;consider it done&lt;/a&gt;. I plan to keep an eye on pull requests but at present there&amp;#39;s no plan to add new features going forward.&lt;/p&gt;
</content>
            
            <category>funnelweb</category>
            
            <category>docpad</category>
            
        </entry>
    
        <entry>
            <title>From FunnelWeb to Git in a few simple steps</title>
            <link href="http://www.aaron-powell.com/posts/2013-06-11-funnelweb-to-git.html"/>
            <updated>2013-06-10T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-06-11-funnelweb-to-git.html</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Prelude: I&amp;#39;m going to assume you&amp;#39;ve got the database somewhere locally that you can work with, I wouldn&amp;#39;t recommend doing it against a production database. We&amp;#39;re not doing anything destructive against it but better safe than sorry!.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The scenario is that I&amp;#39;m wanting to be able to visualise the revision history of my posts in FunnelWeb as Git commits, each new revision of a post should be a new commit. The history order should match the date that posts were created (or edited) so that it doesn&amp;#39;t look like just a dump into Git, it looks like actual history.&lt;/p&gt;
&lt;p&gt;Without doing a full Git primer there&amp;#39;s one really important aspect of Git that you need to be aware of. Git is basically a small linux file system so with file system theory under our belt we should know that there&amp;#39;s a date associated with files (or in this case, commits). So at least &lt;em&gt;in theory&lt;/em&gt; we should be able to control when a commit happened right? After all I&amp;#39;ve got posts from 2010 and I&amp;#39;d like those commits to reflect that.&lt;/p&gt;
&lt;p&gt;So armed with a bit of knowledge and &lt;a href=&quot;http://twitter.com/shiftkey&quot;&gt;Brendan Forster&amp;#39;s skype handle&lt;/a&gt; I started digging.&lt;/p&gt;
&lt;h1 id=&quot;it-s-a-date&quot;&gt;It&amp;#39;s a date&lt;/h1&gt;
&lt;p&gt;Since my work on the time machine is running behind schedule (snap!) it&amp;#39;s time to get an understanding of date&amp;#39;s in Git. Each commit in Git will have two dates associated with it, &lt;code&gt;author date&lt;/code&gt; and &lt;code&gt;committer date&lt;/code&gt;, and there&amp;#39;s an important difference between these two dates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author date&lt;/strong&gt; is the date when a commit was &lt;em&gt;originally authored&lt;/em&gt; in the source repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Committer date&lt;/strong&gt; is the date when a commit was &lt;em&gt;applied to the current repository&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is the important bit of information, generally speaking these two dates are the same &lt;strong&gt;but they don&amp;#39;t have to be&lt;/strong&gt;. Say I create a patch file from my repository and send it to you, this will contain an &lt;em&gt;author date&lt;/em&gt;, which is the date that &lt;strong&gt;I&lt;/strong&gt; created the commit, and in my repository it matches the &lt;em&gt;commit date&lt;/em&gt;. At some future point in time you&amp;#39;re going to add that patch to your repository and when you do that you&amp;#39;ll receive my &lt;em&gt;author date&lt;/em&gt; but you&amp;#39;ll have a different &lt;em&gt;commit date&lt;/em&gt;, for you see the date that you committed it to the repository has changed, but the commit itself hasn&amp;#39;t (if it did the whole commit would be invalid). &lt;a href=&quot;http://alexpeattie.com/blog/working-with-dates-in-git/&quot;&gt;A more in-depth write up can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And this is where the power comes from, you can manipulate these dates. This means that I can extract my dates from FunnelWeb and author commits of a particular point in time, but commit them whenever makes sense.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: General wisdom says you shouldn&amp;#39;t mess around with the committer date, only the author date.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;manipulating-git&quot;&gt;Manipulating Git&lt;/h1&gt;
&lt;p&gt;Well now that we know that we can, at least in theory, manipulate our Git history to match the information that I&amp;#39;d like it to be, the question is how?&lt;/p&gt;
&lt;p&gt;A quick search found &lt;a href=&quot;http://stackoverflow.com/questions/454734/how-can-one-change-the-timestamp-of-an-old-commit-in-git&quot;&gt;this on Stackoverflow&lt;/a&gt;, neat-o I can do something like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;brainfuck&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;comment&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;amend&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;date=&quot;&lt;/span&gt;&amp;lt;&lt;span class=&quot;comment&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;revision&lt;/span&gt;&amp;gt;&lt;span class=&quot;comment&quot;&gt;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well isn&amp;#39;t that nice, the command line exposes what I want, but either having to manually run the commands on the CLI or calling the CLI fro mcode is not a particularly pleasent an idea.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;http://libgit2.github.com/&quot;&gt;LibGit2&lt;/a&gt; or more specifically &lt;a href=&quot;https://github.com/libgit2/libgit2sharp&quot;&gt;LibGit2Sharp&lt;/a&gt;. If you&amp;#39;ve done anything with Git programmatically you&amp;#39;re probably familiar with these libraries. LibGit2 is an implementation of the Git core commands but being written in C it&amp;#39;s not that much fun for .NET developers so that&amp;#39;s where LibGit2Sharp comes in and it&amp;#39;s what we&amp;#39;ll be using.&lt;/p&gt;
&lt;h1 id=&quot;exporting-out-data&quot;&gt;Exporting out data&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll get back to Git in a moment as there&amp;#39;s something important we need to do before we can work with Git and that&amp;#39;s getting us some data.&lt;/p&gt;
&lt;p&gt;For this I&amp;#39;m going to use &lt;a href=&quot;https://github.com/SamSaffron/dapper-dot-net&quot;&gt;Dapper&lt;/a&gt; which is a light-weight ORM to talk to the FunnelWeb database, but use whatever works best for you. The important part here is &lt;em&gt;how&lt;/em&gt; we run our code.&lt;/p&gt;
&lt;p&gt;Well there&amp;#39;s an obvious option, we could go &lt;code&gt;File -&amp;gt; New Console Application&lt;/code&gt; and get cracking, NuGet install our dependencies, etc.&lt;/p&gt;
&lt;p&gt;Nah console applications are so 2012, instead I&amp;#39;m going to use &lt;a href=&quot;http://scriptcs.net/&quot;&gt;ScriptCS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#39;t heard of ScriptCS don&amp;#39;t fret, it&amp;#39;s a very new platform. ScriptCS is the brain child of &lt;a href=&quot;https://twitter.com/gblock&quot;&gt;Glenn Block&lt;/a&gt;, which is taking his learnings from being heavily involved in Node.js of recent and bringing that to the .NET world. Basically making a way which you can execute a C# file without the need for Visual Studio, the C# compiler or any of those tools we&amp;#39;re use to as .NET developers. Check out &lt;a href=&quot;http://www.hanselman.com/blog/ProjectlessScriptedCWithScriptCSAndRoslyn.aspx&quot;&gt;Scott Hanselmans post on the topic&lt;/a&gt; if you want to learn more.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You&amp;#39;ll need ScriptCS version 0.5.0 at least as you need &lt;a href=&quot;https://github.com/scriptcs/scriptcs/pull/250&quot;&gt;my pull request&lt;/a&gt; included.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;
&lt;p&gt;Now we have the idea sorted out, I&amp;#39;m going to start with a ScriptCS project which will use a Dapper to get our data out and LibGit2Sharp to push it into Git, seems nice and simple really. Let&amp;#39;s break this down into the smaller parts.&lt;/p&gt;
&lt;h2 id=&quot;opening-our-git-repo&quot;&gt;Opening our Git repo&lt;/h2&gt;
&lt;p&gt;The first step in our process will be to open up the Git repo so we can work against it. I&amp;#39;ve created a migrator folder which my migrator will reside within and then I&amp;#39;ll go create a new file called &lt;code&gt;app.csx&lt;/code&gt; which is my ScriptCS file (note the &lt;code&gt;csx&lt;/code&gt; extension).&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll need a using for &lt;code&gt;LibGit2Sharp&lt;/code&gt; and then I&amp;#39;m going to create a method which will resolve our Git repository. So my file now looks like this:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;cs&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; LibGit2Sharp;

&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Repository InitOrOpen(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; path) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gitBasePath = Repository.Discover(path);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gitBasePath == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
    {
        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;And we're creating a new git repo people!&quot;&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Repository.Init(path);
    }
    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Found existing repo, keep on trucking&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Repository(gitBasePath);
}

&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repo = InitOrOpen(&lt;span class=&quot;string&quot;&gt;@&quot;C:\_Code\my-repo&quot;&lt;/span&gt;)) {
    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;It's time to rock and rooooooooll&quot;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So my method &lt;code&gt;InitOrOpen&lt;/code&gt; will take a path to a folder which is to be our Git repository. In the method it&amp;#39;ll use the &lt;code&gt;Discover&lt;/code&gt; method of the &lt;code&gt;Repository&lt;/code&gt; class which will locate the Git repository for the current folder or any of its parents. This means that I don&amp;#39;t have to pass the repository root, which works well for me using DocPad as I want to put my posts in &lt;code&gt;src\documents\posts&lt;/code&gt; where my repository root is where the &lt;code&gt;src&lt;/code&gt; folder exists.&lt;/p&gt;
&lt;p&gt;The result of &lt;code&gt;Discover&lt;/code&gt; will be the path which the Git repository resides in, as a string, which is null if there was no repository found. Based on that result we can choose to initialise a new Git repository, &lt;code&gt;Repository.Init(path)&lt;/code&gt;, or open the repository at the discovered path, &lt;code&gt;new Repository(gitBasePath)&lt;/code&gt;. This &lt;code&gt;Repository&lt;/code&gt; object is what we&amp;#39;ll use to interact with Git from .NET.&lt;/p&gt;
&lt;p&gt;Lastly the file will call the method in a &lt;code&gt;using&lt;/code&gt; block which in turn just dumps out that we opened the repository.&lt;/p&gt;
&lt;h2 id=&quot;package-config&quot;&gt;Package.config&lt;/h2&gt;
&lt;p&gt;Before we can run this ScriptCS file we&amp;#39;ll need get LibGit2Sharp &lt;em&gt;installed&lt;/em&gt;, so how do we go about it... &lt;a href=&quot;http://nuget.org&quot;&gt;NuGet&lt;/a&gt; of course!&lt;/p&gt;
&lt;p&gt;For this we&amp;#39;ll need a &lt;code&gt;package.config&lt;/code&gt; file which defines our NuGet packages. Here&amp;#39;s where we&amp;#39;re at:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;LibGit2Sharp&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;0.11.0.0&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;targetFramework&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;net45&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we just need to run the ScriptCS file and our little app will do some logging out of messages!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: When I was writing this I came across a problem, LibGit2Sharp expects the native Git assemblies to be in the same folder as LibGit2Sharp&amp;#39;s assembly. In a .NET app this is done by copying the &lt;code&gt;NativeBinaries&lt;/code&gt; folder from the NuGet package into the &lt;code&gt;bin&lt;/code&gt; folder as a post-build event in the csproj file. Since we don&amp;#39;t have a csproj in ScriptCS you need to manually copy that folder.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;preping-our-data&quot;&gt;Preping our data&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not going to go into depth as to how to get your data out of your database to be pushing into Git, that&amp;#39;ll somewhat depend on the database and ORM you&amp;#39;re working with, you can find that from &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/blob/master/_migrator/app.csx#L25-L46&quot;&gt;here&lt;/a&gt; in my source code.&lt;/p&gt;
&lt;p&gt;What is important to know is that ScriptCS &lt;strong&gt;doesn&amp;#39;t&lt;/strong&gt; support &lt;code&gt;dynamic&lt;/code&gt; in C#, so you&amp;#39;ll need to create a class which represents the object you&amp;#39;re pulling out of the database (the reason for this is at present &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx&quot;&gt;Roslyn&lt;/a&gt;, which ScriptCS uses to do its execution doesn&amp;#39;t support it). I&amp;#39;ve done this by creating a &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/blob/master/_migrator/Post.csx&quot;&gt;Posts.csx&lt;/a&gt; file that is then loaded into ScriptSC.&lt;/p&gt;
&lt;p&gt;But once we&amp;#39;ve got our data out of our database it&amp;#39;s time to push it into Git.&lt;/p&gt;
&lt;h2 id=&quot;git-it-in-ya&quot;&gt;Git it in ya&lt;/h2&gt;
&lt;p&gt;We have our Git repository, we have our data, it&amp;#39;s time to do something about joining the two things together. Remember I said that I wanted each revision in my FunnelWeb database to be an individual commit in Git? Well that will be quite easy to do. The object model that I have brought back out of FunnelWeb respects that, each object is a snapshot of the post at a particular point in time. Next I&amp;#39;m going to have to do a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the comma-separated list of tags into an array&lt;/li&gt;
&lt;li&gt;Clean up my URI schema (in FunnelWeb it was very free-flowing, I want to normalize it a bit to the standard &lt;code&gt;YYYY-MM-DD-name&lt;/code&gt; format)&lt;ul&gt;
&lt;li&gt;But I don&amp;#39;t want to break my existing SEO so I need to be able to track those old links and 301 them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If a file doesn&amp;#39;t exist yet create a new file, otherwise update the existing one&lt;ul&gt;
&lt;li&gt;This is where it&amp;#39;s really cool, since we&amp;#39;ll just override the existing file and Git is pretty smart about diff-detection it&amp;#39;ll only track what changed between each version so we can then get nice clean diffs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now DocPad uses the fairly common YAML-style meta-data headers, but it also supports something they wrote specifically called &lt;code&gt;cson&lt;/code&gt; which is a CoffeeScript version of JSON. Since I&amp;#39;ve always found YAML a pain I&amp;#39;m going to use that for my post meta data headers.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s start writing our file to disk then:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;foreach (var item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items) {
    var tags = item&lt;span class=&quot;preprocessor&quot;&gt;.Tags&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;','&lt;/span&gt;)
        &lt;span class=&quot;preprocessor&quot;&gt;.Select&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Trim&lt;/span&gt;())
        &lt;span class=&quot;preprocessor&quot;&gt;.Where&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt; =&amp;gt; !string&lt;span class=&quot;preprocessor&quot;&gt;.IsNullOrEmpty&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;x&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    var uriParts = item&lt;span class=&quot;preprocessor&quot;&gt;.Path&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    if (uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;() &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        tags = tags&lt;span class=&quot;preprocessor&quot;&gt;.Union&lt;/span&gt;(uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Take&lt;/span&gt;(uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Count&lt;/span&gt;() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    var postPath = Path&lt;span class=&quot;preprocessor&quot;&gt;.Combine&lt;/span&gt;(Settings&lt;span class=&quot;preprocessor&quot;&gt;.OutputPath&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Published&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.ToString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; + uriParts&lt;span class=&quot;preprocessor&quot;&gt;.Last&lt;/span&gt;()) + &lt;span class=&quot;string&quot;&gt;&quot;.html.md&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    if (!File&lt;span class=&quot;preprocessor&quot;&gt;.Exists&lt;/span&gt;(postPath))
        File&lt;span class=&quot;preprocessor&quot;&gt;.CreateText&lt;/span&gt;(postPath)&lt;span class=&quot;preprocessor&quot;&gt;.Close&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;

    using (var sw = new StreamWriter(postPath)) {
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;--- cson&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Title&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;metaTitle&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.MetaTitle&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Desc&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;revised&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Date&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Published&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;, tags))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;migrated&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaData&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;urls&quot;&lt;/span&gt;, new[] {&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; + item&lt;span class=&quot;preprocessor&quot;&gt;.Path&lt;/span&gt;}))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(Formatters&lt;span class=&quot;preprocessor&quot;&gt;.CreateMetaDataMultiLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;summary&quot;&lt;/span&gt;, item&lt;span class=&quot;preprocessor&quot;&gt;.Summary&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.WriteLine&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;---&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
        sw&lt;span class=&quot;preprocessor&quot;&gt;.Write&lt;/span&gt;(item&lt;span class=&quot;preprocessor&quot;&gt;.Contents&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    }

    //git stuff
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, that&amp;#39;ll do nicely, I&amp;#39;ve extracted my tags, cleaned up my URIs, so &lt;code&gt;/flight-mode/indexeddb&lt;/code&gt; becomes &lt;code&gt;/posts/2013-05-27-indexeddb.html&lt;/code&gt; for example, and I&amp;#39;ve built up a meta-data header which contains all the information that I found to be important (check out the &lt;a href=&quot;http://docpad.org/docs/meta-data&quot;&gt;DocPad documentation&lt;/a&gt; to get a better idea of what meta-data is available and for what purpose).&lt;/p&gt;
&lt;p&gt;Now it&amp;#39;s time to get it into Git, and more importantly, get it into Git with the right author date. Remember how I said there are two dates which a commit has, well I&amp;#39;m only going to concern myself with the &lt;code&gt;author date&lt;/code&gt;, since that was when the revision was created, but the date it when into the repository isn&amp;#39;t particularly important, for all it matters it could have been in another repository before now (which abstractly speaking it was).&lt;/p&gt;
&lt;p&gt;Turns out that this is actually &lt;strong&gt;really&lt;/strong&gt; easy to do! In fact LibGit2Sharp exposes the API to do just that as part of the commit API!&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;    var commitMessage = string&lt;span class=&quot;preprocessor&quot;&gt;.IsNullOrEmpty&lt;/span&gt;(item&lt;span class=&quot;preprocessor&quot;&gt;.Reason&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&quot;I should have given a reason&quot;&lt;/span&gt; : item&lt;span class=&quot;preprocessor&quot;&gt;.Reason&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    repo&lt;span class=&quot;preprocessor&quot;&gt;.Index&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;.Stage&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
    repo&lt;span class=&quot;preprocessor&quot;&gt;.Commit&lt;/span&gt;(commitMessage, new Signature(&lt;span class=&quot;string&quot;&gt;&quot;Aaron Powell&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;me@aaron-powell.com&quot;&lt;/span&gt;, (DateTime) item&lt;span class=&quot;preprocessor&quot;&gt;.Date&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First things first I&amp;#39;ve created a commit message based off of the revision reason in FunnelWeb, next I&amp;#39;ll stage all changes in the repository (this is just so I can be lazy and not worry about the file name :P) and lastly commit the stage providing an author signature &lt;em&gt;which contains the author date as an argument&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I was honestly shocked at just how easy that process turned out to be!&lt;/p&gt;
&lt;p&gt;So now when we execute the code it&amp;#39;ll build up a nice Git repository for us.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;And that&amp;#39;s it, with only 100 lines of code (which contains a rather large SQL statement too) I was able to pull all the data out from FunnelWeb and then push each post revision as a separate Git commit.&lt;/p&gt;
&lt;p&gt;You&amp;#39;ll find the full code for my migrator &lt;a href=&quot;https://github.com/aaronpowell/aaronpowell.github.io/tree/master/_migrator&quot;&gt;in my sites repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One final note though, I did have the following two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The migrator didn&amp;#39;t like being run in the same repository as I was opening with LibGit2Sharp, I think the problem was related to ScriptCS locking the &lt;code&gt;/bin&lt;/code&gt; folder which Git then didn&amp;#39;t have any access to and it&amp;#39;d crash. I didn&amp;#39;t look too deeply into this (C ain&amp;#39;t my forte these days) and it was easily solved by having the migrator source in a separate location (and it also meant I didn&amp;#39;t accidentally commit my real connection string)&lt;/li&gt;
&lt;li&gt;LibGit2Sharp didn&amp;#39;t seem to like it when I wasn&amp;#39;t in the &lt;code&gt;master&lt;/code&gt; branch. I initially tried to use a separate branch to create all the commits that I&amp;#39;d then review and rebase into master, but whenever I did this it would create a new repository in the destination folder so I ended up with nested Git repositories. Again I didn&amp;#39;t delve into the underlying reason, I left it for Brendan to entertain himself with, instead I just did it in master and deleted my clone the few times I stuffed up :P&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            <category>funnelweb</category>
            
            <category>scriptcs</category>
            
            <category>git</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - Libraries</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-30-libraries.html"/>
            <updated>2013-05-30T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-30-libraries.html</id>
            <content type="html">&lt;p&gt;Throughout the last few posts we&amp;#39;ve looked at the different ways which we can store data offline in browsers and then created a basic little API that will help is with doing that. The &lt;code&gt;FlightMode&lt;/code&gt; API that we&amp;#39;ve been working with was though was really quite a simplistic approach to the problem that we were presented with, ultimately the API isn&amp;#39;t meant for production use.&lt;/p&gt;
&lt;p&gt;So when looking at the different storage options what do we have if we did want to go to production? In this article we&amp;#39;re going to look at some of the different API wrappers for the different storage technologies that we&amp;#39;ve looked at.&lt;/p&gt;
&lt;h1 id=&quot;lawnchair&quot;&gt;Lawnchair&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;&lt;a href=&quot;http://brian.io/lawnchair/&quot;&gt;http://brian.io/lawnchair/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lawnchair is one of the most fully featured storage options that we&amp;#39;ve got available to us, and also what I based the concept of &lt;code&gt;FlightMode&lt;/code&gt; on. Lawnchair offers a variety of ways which you can store data, through its adapter system, you can plug in which ever storage option you want, &lt;a href=&quot;http://brian.io/lawnchair/adapters&quot;&gt;and there&amp;#39;s a few options&lt;/a&gt;. The one that doesn&amp;#39;t exist is cookies but as I pointed out &lt;a href=&quot;/flight-mode/cookies&quot;&gt;in that post&lt;/a&gt; they aren&amp;#39;t exactly the best option when it comes to storing data.&lt;/p&gt;
&lt;p&gt;Another interesting aspect of Lawnchair is it is asynchronous by default, so using adapters like &lt;code&gt;localStorage&lt;/code&gt; (which they refer to as &lt;code&gt;DOM storage&lt;/code&gt;) requires a callback argument passed to it. This is nice as it means you have a more consistent API usage when it comes to using actually asynchronous APIs like IndexedDB and FileSystem.&lt;/p&gt;
&lt;p&gt;The main drawback I find is that because Lawnchair provides such a vast array of storage options behind a consistent programming API you ultimately loose some of the power of the underlying provider. This is especially a problem with IndexedDB, you loose a lot of the power of indexes and querying against those. But if you&amp;#39;re goal is to have offline storage across as large a browser set as possible then it&amp;#39;s a price you&amp;#39;ll have to pay.&lt;/p&gt;
&lt;p&gt;Lawnchair really is a good choice if you want to be able to do storage across a lot of platforms and use feature detection to work out exactly what adapter can be used.&lt;/p&gt;
&lt;h1 id=&quot;amplifyjs-store&quot;&gt;AmplifyJS.store&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;&lt;a href=&quot;http://amplifyjs.com/api/store/&quot;&gt;http://amplifyjs.com/api/store/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AmplifyJS.store like Lawnchair aims to be an API simplification of the various browser storage models but rather than trying to be a one-size-fits-all option it is more focused on just key/value storage, in particular &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The programmatic model of AmplifyJS.store is also much simpler, rather than trying to provide helper methods to do things like filtering objects it provides the minimal surface area and leaves that up to you, so providing you with a method to get all objects then you can perform your own &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc operations. This is good as it doesn&amp;#39;t try and pretend that the underlying store is something that it&amp;#39;s not.&lt;/p&gt;
&lt;p&gt;The API is also synchronous unlike Lawnchair which does have upsides that you can avoid the complications that can arise from asynchronous programming and callback hell.&lt;/p&gt;
&lt;p&gt;AmplifyJS.store is a nice API if you want something that is simple and just does the job of handling key/value storage without trying to go over the top.&lt;/p&gt;
&lt;h1 id=&quot;pouchdb&quot;&gt;PouchDB&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;http://pouchdb.com/&quot;&gt;&lt;a href=&quot;http://pouchdb.com/&quot;&gt;http://pouchdb.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PouchDB is one of the most powerful libraries when it comes to working with complex data stores in the browser (it also supports node.js) and is very much a specialist of storing data with IndexedDB. It&amp;#39;s an implementation of the CouchDB programming interface built on top of IndexedDB (there are providers for WebSQL, levelDB and a HTTP interface) that gives you a lot of power when it comes to interacting with the underlying data stores.&lt;/p&gt;
&lt;p&gt;Another killer feature of PouchDB is that it has the ability to sync directly to a CouchDB instance via the HTTP interface. This means that if you&amp;#39;re using CouchDB as your backend then you&amp;#39;ve got an option to easily keep your data in sync between your client and server. This is really handy, particularly in the scenario I&amp;#39;ve been trying to paint over this series of being able to maintain user state even when they are offline.&lt;/p&gt;
&lt;p&gt;The obvious drawback of this is that it&amp;#39;s really geared around CouchDB developers so the API is designed for them. That said it doesn&amp;#39;t mean that it&amp;#39;s a bad API or something that can&amp;#39;t be used without CouchDB, it definitely can and it is very good at turning the IndexedDB programming API into something that is even closer to being a full NoSQL database by exposing &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt; directly from the query API.&lt;/p&gt;
&lt;p&gt;If you&amp;#39;re looking for a very full-featured IndexedDB wrapper then PouchDB should be given a very serious look.&lt;/p&gt;
&lt;h1 id=&quot;db-js&quot;&gt;db.js&lt;/h1&gt;
&lt;p&gt;Site: &lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;&lt;a href=&quot;https://github.com/aaronpowell/db.js&quot;&gt;https://github.com/aaronpowell/db.js&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;db.js is a library that I wrote with the single goal of improving the programmatic API for IndexedDB. As I mentioned in my &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;article on IndexedDB&lt;/a&gt; I find that the API is very verbose and quite foreign to front-end development so I wanted to set out and improve that.&lt;/p&gt;
&lt;p&gt;The other main design goal was to make the event handling better, more specifically to utilize Promises. so that you could assign multiple handlers to events that get raised and interact with them that way. It was also so it could be interoperable with other asynchronous operations and other libraries that implement Promise APIs.&lt;/p&gt;
&lt;p&gt;Finally I wanted a really simple way which you could query the data stored, again in a manner that is familiar to JavaScript developers. For this I went with a chaining API (made popular from jQuery) so that you could do all your operations in a single chain, but I also expose the important query features built in such as querying on a specific index, only the chaining is also allowing you to query in a more expanded manner, say first on an index and then on a custom function.&lt;/p&gt;
&lt;p&gt;Ultimately this is a very thin wrapper over IndexedDB and it&amp;#39;s &lt;em&gt;only&lt;/em&gt; designed for IndexedDB usage which makes it an ideal candidate if that&amp;#39;s your only target platform and you want something very light weight.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This has been a brief overview of a number of different JavaScript libraries for working with different offline storage models, libraries from the generic abstraction all the way down to specific implementations.&lt;/p&gt;
&lt;p&gt;By no means is this an extensive list of libraries available, I&amp;#39;m sure that there&amp;#39;s dozens more out there that would be worth looking into, but ultimately this was meant to be an introduction to a few which I see a great deal of promise in.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>indexeddb</category>
            
            <category>localStorage</category>
            
            <category>sessionStorage</category>
            
            <category>offline-storage</category>
            
        </entry>
    
        <entry>
            <title>Flight Mode - FileSystem API</title>
            <link href="http://www.aaron-powell.com/posts/2013-05-28-file-system.html"/>
            <updated>2013-05-28T00:00:00.000Z</updated>
            <id>http://www.aaron-powell.com/posts/2013-05-28-file-system.html</id>
            <content type="html">&lt;p&gt;The last piece of the puzzle when looking at offline storage options is a bit of a shift from what we&amp;#39;ve been looking at so far. Generally speaking we&amp;#39;ve been looking at how to store plain data, either through key/value stores or as objects. This time we&amp;#39;re going to look at the other kind of data you might want to store, files.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s two way we might want to store files, as binary data in IndexedDB or using the &lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/file-dir-sys.html&quot;&gt;FileSystem API&lt;/a&gt;. Since we looked at &lt;a href=&quot;/flight-mode/indexeddb&quot;&gt;IndexedDB last time&lt;/a&gt; (although didn&amp;#39;t cover how to store Blobs, but the principle is the same as we looked at) this time we&amp;#39;ll look at the FileSystem API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: At the time of writing the only browser supporting this API is Chrome so this is more of a &amp;quot;watch this space&amp;quot; style post than a &amp;quot;go use it now&amp;quot; one.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The idea of the FileSystem API is to give browsers the ability to persist files either temporarily or permanent. Temporary persistence means that the browser is free to decide when it wants to get ride of the file system that has created where as permanent persistence means that it will not do an automatic cleanup of the files and folders.&lt;/p&gt;
&lt;p&gt;Essentially what you end up with from the API is an ability to create files and folders in a sandboxed scenario. You don&amp;#39;t have access to the real file system of the device, so no access to &lt;code&gt;My Documents&lt;/code&gt; or &lt;code&gt;Program Files&lt;/code&gt;, just an isolated little location to work in. So this can be really quite useful if you&amp;#39;re say building a game, chances are you have a few assets that are required (audio, video, graphics) and the ability to retrieve them without web requests can be advantageous.&lt;/p&gt;
&lt;h2 id=&quot;benefits-of-the-filesystem-for-storage&quot;&gt;Benefits of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;As mentioned this API is serving a different purpose to the other storage APIs we&amp;#39;ve looked at, with the exception of IndexedDB (in a limited scenario at least) so some of the benefits are unfair comparisions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like IndexedDB the FileSystem API is an asynchronous API which has the obvious benefits when it comes to working with the kind of data it is designed for, storing large files you do ideally want that to be done asynchronously so that you aren&amp;#39;t blocking the users interactions.&lt;/p&gt;
&lt;p&gt;Another benefit is that the file system you create is completely sandboxed, meaning you don&amp;#39;t have to worry about what others may try and do to it. The only thing you need to take into account is the persistence level of the file system, as mentioned above temporary file systems are at the browsers mercy for clean-up, but it&amp;#39;s an opt-in to be using temporary persistence.&lt;/p&gt;
&lt;p&gt;As with other storage options there are size limitations on the file system that is created, the difference is (at least at the time of writing) you can specify the size of the file system you want. Chrome will then determine whether the user needs to approve this storage level and if so request permission like other device-sensitive APIs (&lt;code&gt;getUserMedia&lt;/code&gt; for example).&lt;/p&gt;
&lt;p&gt;The API itself is quite nice to work with, especially if you&amp;#39;re coming from a server background, creating new files is handled through writer streams while you have separate streams for reading files. You can store files of different types with different encodings and have a lot of flexibility to create a directory structure that suites your needs.&lt;/p&gt;
&lt;h2 id=&quot;drawbacks-of-the-filesystem-for-storage&quot;&gt;Drawbacks of the FileSystem for storage&lt;/h2&gt;
&lt;p&gt;The main drawback is browser support, as mentioned Chrome is the only browser at present that implements the FileSystem API and it seems that one of their main drivers is use within their extension system. While there&amp;#39;s nothing wrong with that it does mean that it&amp;#39;s not really possible to utilize this API is a cross-browser scenario. There is a &lt;a href=&quot;https://github.com/ebidel/idb.filesystem.js&quot;&gt;shim available that uses IndexedDB&lt;/a&gt; but it does require your IndexedDB implementation to support &lt;code&gt;Blob&lt;/code&gt; storage which can be a problem in Internet Explorer 10.&lt;/p&gt;
&lt;p&gt;Another drawback is the API interactions, while it&amp;#39;s not quite as verbose as working with IndexedDB the API itself partially relies on the DOM Level 3 events and partially relies on callbacks being provided. This means that in some instances you&amp;#39;ll be attaching event handlers, like when you&amp;#39;re using a &lt;code&gt;FileReader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;r&quot;&gt;var reader = new FileReader();
reader.onloadend = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) { &lt;span class=&quot;keyword&quot;&gt;...&lt;/span&gt; };
reader.readAsText(file);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And other times you&amp;#39;ll have to pass a callback:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;avrasm&quot;&gt;window&lt;span class=&quot;preprocessor&quot;&gt;.requestFileSystem&lt;/span&gt;(window&lt;span class=&quot;preprocessor&quot;&gt;.TEMPORARY&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;, onInit, onError)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;API inconsistence can be annoying for developers to work with and something that you need to be mindful of.&lt;/p&gt;
&lt;p&gt;The final drawback I see is that there&amp;#39;s no file system querying available, meaning you have to know where your files are stored, which can be a bit tricky when you&amp;#39;re working with directories in your file system. Admittedly this is a minor problem, you probably shouldn&amp;#39;t be storing files that you don&amp;#39;t know the location of in the file system but it can still be something that you&amp;#39;d want.&lt;/p&gt;
&lt;h2 id=&quot;implementing-filesystem-storage&quot;&gt;Implementing FileSystem storage&lt;/h2&gt;
&lt;p&gt;Unlike the other storage options I&amp;#39;ve decided to &lt;strong&gt;not&lt;/strong&gt; cover off how to implement this API because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It really wouldn&amp;#39;t fit with the &lt;code&gt;FlightMode&lt;/code&gt; API we&amp;#39;ve got so far, that&amp;#39;s designed for non-hierarchical data&lt;/li&gt;
&lt;li&gt;This is more of a &lt;em&gt;watch this space&lt;/em&gt; post than a &lt;em&gt;go use it&lt;/em&gt; one since the browser support is quite lacking&lt;/li&gt;
&lt;li&gt;There is a &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/file/filesystem/&quot;&gt;great article on HTML5 Rocks&lt;/a&gt; that&amp;#39;ll do it more justice than I can give it&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The idea of being able to store files, complete files, in a structured manner on the client is a really exciting one. Admittedly there&amp;#39;s a much narrower use-case for such an API compared to other storage options we&amp;#39;ve discussed the problems that it solves are very real and will likely become more valid as more true web applications rise.&lt;/p&gt;
&lt;p&gt;The API itself is not back to work against, if it is a bit inconsistent and keep in mind that the specification is still in draft status so it may change in the future.&lt;/p&gt;
</content>
            
            <category>flight-mode</category>
            
            <category>offline-storage</category>
            
            <category>file-system</category>
            
        </entry>
    
</feed>